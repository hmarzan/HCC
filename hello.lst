Microsoft (R) Macro Assembler Version 8.00.50727.762	    02/01/09 13:07:34
c:\hcc\hcc\TestSource\hello.hp				     Page 1 - 1


				TITLE	 c:\hcc\hcc\TestSource\hello.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{381}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000460
				;}
 00000043			$L000460:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  C9				leave	
 00000047  C2 0008			retn	000000008h
 0000004A			Math_DegreesToRadians ENDP

 0000004A			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004A  55				push	EBP
 0000004B  8B EC			mov	EBP,ESP
 0000004D  51				push	ECX 
 0000004E  53				push	EBX 
 0000004F  56				push	ESI 
 00000050  57				push	EDI 
				;{

				;{444}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000051  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000054  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000057  50				push	EAX
 00000058  52				push	EDX 
 00000059  E8 00000000 E		call	 Math_Exp
 0000005E  50				push	EAX
 0000005F  52				push	EDX 
 00000060  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000063  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000066  50				push	EAX
 00000067  52				push	EDX 
 00000068  DD 04 24			fld	qword ptr [ESP]
 0000006B  D9 E0			fchs
 0000006D  DD 1C 24			fstp	qword ptr [ESP]
 00000070  E8 00000000 E		call	 Math_Exp
 00000075  50				push	EAX
 00000076  52				push	EDX 
 00000077  DD 04 24			fld	qword ptr [ESP]
 0000007A  59				pop	ECX
 0000007B  59				pop	ECX 
 0000007C  DC 04 24			fadd	qword ptr [ESP]
 0000007F  DD 1C 24			fstp	qword ptr [ESP]
 00000082  B8 00000002			mov	EAX,000000002h
 00000087  9B DB E2			fclex
 0000008A  50				push	EAX
 0000008B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000090  50				push	EAX
 00000091  52				push	EDX 
 00000092  DD 04 24			fld	qword ptr [ESP]
 00000095  59				pop	ECX
 00000096  59				pop	ECX 
 00000097  DC 3C 24			fdivr	qword ptr [ESP]
 0000009A  DD 1C 24			fstp	qword ptr [ESP]
 0000009D  5A				pop	EDX
 0000009E  58				pop	EAX 
 0000009F  EB 00			jmp	OFFSET $L000477
				;}
 000000A1			$L000477:

 000000A1  5F				pop	EDI
 000000A2  5E				pop	ESI 
 000000A3  5B				pop	EBX 
 000000A4  C9				leave	
 000000A5  C2 0008			retn	000000008h
 000000A8			Math_Hyperbolic_HCos ENDP

 000000A8			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000A8  55				push	EBP
 000000A9  8B EC			mov	EBP,ESP
 000000AB  51				push	ECX 
 000000AC  53				push	EBX 
 000000AD  56				push	ESI 
 000000AE  57				push	EDI 
				;{

				;{456}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000AF  B8 00000002			mov	EAX,000000002h
 000000B4  50				push	EAX
 000000B5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000B8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BB  50				push	EAX
 000000BC  52				push	EDX 
 000000BD  E8 00000000 E		call	 Math_Exp
 000000C2  50				push	EAX
 000000C3  52				push	EDX 
 000000C4  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000C7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CA  50				push	EAX
 000000CB  52				push	EDX 
 000000CC  DD 04 24			fld	qword ptr [ESP]
 000000CF  D9 E0			fchs
 000000D1  DD 1C 24			fstp	qword ptr [ESP]
 000000D4  E8 00000000 E		call	 Math_Exp
 000000D9  50				push	EAX
 000000DA  52				push	EDX 
 000000DB  DD 04 24			fld	qword ptr [ESP]
 000000DE  59				pop	ECX
 000000DF  59				pop	ECX 
 000000E0  DD 04 24			fld	qword ptr [ESP]
 000000E3  D8 E1			fsub	st,st(1)
 000000E5  DD 1C 24			fstp	qword ptr [ESP]
 000000E8  9B DB E2			fclex
 000000EB  DD 04 24			fld	qword ptr [ESP]
 000000EE  59				pop	ECX
 000000EF  59				pop	ECX 
 000000F0  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F5  50				push	EAX
 000000F6  52				push	EDX 
 000000F7  DC 3C 24			fdivr	qword ptr [ESP]
 000000FA  DD 1C 24			fstp	qword ptr [ESP]
 000000FD  5A				pop	EDX
 000000FE  58				pop	EAX 
 000000FF  EB 00			jmp	OFFSET $L000483
				;}
 00000101			$L000483:

 00000101  5F				pop	EDI
 00000102  5E				pop	ESI 
 00000103  5B				pop	EBX 
 00000104  C9				leave	
 00000105  C2 0008			retn	000000008h
 00000108			Math_Hyperbolic_HCosec ENDP

 00000108			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 00000108  55				push	EBP
 00000109  8B EC			mov	EBP,ESP
 0000010B  51				push	ECX 
 0000010C  53				push	EBX 
 0000010D  56				push	ESI 
 0000010E  57				push	EDI 
				;{

				;{460}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 0000010F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000112  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000115  50				push	EAX
 00000116  52				push	EDX 
 00000117  E8 00000000 E		call	 Math_Exp
 0000011C  50				push	EAX
 0000011D  52				push	EDX 
 0000011E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000121  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000124  50				push	EAX
 00000125  52				push	EDX 
 00000126  DD 04 24			fld	qword ptr [ESP]
 00000129  D9 E0			fchs
 0000012B  DD 1C 24			fstp	qword ptr [ESP]
 0000012E  E8 00000000 E		call	 Math_Exp
 00000133  50				push	EAX
 00000134  52				push	EDX 
 00000135  DD 04 24			fld	qword ptr [ESP]
 00000138  59				pop	ECX
 00000139  59				pop	ECX 
 0000013A  DC 04 24			fadd	qword ptr [ESP]
 0000013D  DD 1C 24			fstp	qword ptr [ESP]
 00000140  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000143  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000146  50				push	EAX
 00000147  52				push	EDX 
 00000148  E8 00000000 E		call	 Math_Exp
 0000014D  50				push	EAX
 0000014E  52				push	EDX 
 0000014F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000152  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000155  50				push	EAX
 00000156  52				push	EDX 
 00000157  DD 04 24			fld	qword ptr [ESP]
 0000015A  D9 E0			fchs
 0000015C  DD 1C 24			fstp	qword ptr [ESP]
 0000015F  E8 00000000 E		call	 Math_Exp
 00000164  50				push	EAX
 00000165  52				push	EDX 
 00000166  DD 04 24			fld	qword ptr [ESP]
 00000169  59				pop	ECX
 0000016A  59				pop	ECX 
 0000016B  DD 04 24			fld	qword ptr [ESP]
 0000016E  D8 E1			fsub	st,st(1)
 00000170  DD 1C 24			fstp	qword ptr [ESP]
 00000173  9B DB E2			fclex
 00000176  DD 04 24			fld	qword ptr [ESP]
 00000179  59				pop	ECX
 0000017A  59				pop	ECX 
 0000017B  DC 3C 24			fdivr	qword ptr [ESP]
 0000017E  DD 1C 24			fstp	qword ptr [ESP]
 00000181  5A				pop	EDX
 00000182  58				pop	EAX 
 00000183  EB 00			jmp	OFFSET $L000485
				;}
 00000185			$L000485:

 00000185  5F				pop	EDI
 00000186  5E				pop	ESI 
 00000187  5B				pop	EBX 
 00000188  C9				leave	
 00000189  C2 0008			retn	000000008h
 0000018C			Math_Hyperbolic_HCotan ENDP

 0000018C			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 0000018C  55				push	EBP
 0000018D  8B EC			mov	EBP,ESP
 0000018F  51				push	ECX 
 00000190  53				push	EBX 
 00000191  56				push	ESI 
 00000192  57				push	EDI 
				;{

				;{452}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00000193  B8 00000002			mov	EAX,000000002h
 00000198  50				push	EAX
 00000199  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000019C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000019F  50				push	EAX
 000001A0  52				push	EDX 
 000001A1  E8 00000000 E		call	 Math_Exp
 000001A6  50				push	EAX
 000001A7  52				push	EDX 
 000001A8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001AB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  DD 04 24			fld	qword ptr [ESP]
 000001B3  D9 E0			fchs
 000001B5  DD 1C 24			fstp	qword ptr [ESP]
 000001B8  E8 00000000 E		call	 Math_Exp
 000001BD  50				push	EAX
 000001BE  52				push	EDX 
 000001BF  DD 04 24			fld	qword ptr [ESP]
 000001C2  59				pop	ECX
 000001C3  59				pop	ECX 
 000001C4  DC 04 24			fadd	qword ptr [ESP]
 000001C7  DD 1C 24			fstp	qword ptr [ESP]
 000001CA  9B DB E2			fclex
 000001CD  DD 04 24			fld	qword ptr [ESP]
 000001D0  59				pop	ECX
 000001D1  59				pop	ECX 
 000001D2  E8 00000000 E		call	 FloatingPoint_FromInt
 000001D7  50				push	EAX
 000001D8  52				push	EDX 
 000001D9  DC 3C 24			fdivr	qword ptr [ESP]
 000001DC  DD 1C 24			fstp	qword ptr [ESP]
 000001DF  5A				pop	EDX
 000001E0  58				pop	EAX 
 000001E1  EB 00			jmp	OFFSET $L000481
				;}
 000001E3			$L000481:

 000001E3  5F				pop	EDI
 000001E4  5E				pop	ESI 
 000001E5  5B				pop	EBX 
 000001E6  C9				leave	
 000001E7  C2 0008			retn	000000008h
 000001EA			Math_Hyperbolic_HSec ENDP

 000001EA			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001EA  55				push	EBP
 000001EB  8B EC			mov	EBP,ESP
 000001ED  51				push	ECX 
 000001EE  53				push	EBX 
 000001EF  56				push	ESI 
 000001F0  57				push	EDI 
				;{

				;{440}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001F1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001F4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001F7  50				push	EAX
 000001F8  52				push	EDX 
 000001F9  E8 00000000 E		call	 Math_Exp
 000001FE  50				push	EAX
 000001FF  52				push	EDX 
 00000200  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000203  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000206  50				push	EAX
 00000207  52				push	EDX 
 00000208  DD 04 24			fld	qword ptr [ESP]
 0000020B  D9 E0			fchs
 0000020D  DD 1C 24			fstp	qword ptr [ESP]
 00000210  E8 00000000 E		call	 Math_Exp
 00000215  50				push	EAX
 00000216  52				push	EDX 
 00000217  DD 04 24			fld	qword ptr [ESP]
 0000021A  59				pop	ECX
 0000021B  59				pop	ECX 
 0000021C  DD 04 24			fld	qword ptr [ESP]
 0000021F  D8 E1			fsub	st,st(1)
 00000221  DD 1C 24			fstp	qword ptr [ESP]
 00000224  B8 00000002			mov	EAX,000000002h
 00000229  9B DB E2			fclex
 0000022C  50				push	EAX
 0000022D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000232  50				push	EAX
 00000233  52				push	EDX 
 00000234  DD 04 24			fld	qword ptr [ESP]
 00000237  59				pop	ECX
 00000238  59				pop	ECX 
 00000239  DC 3C 24			fdivr	qword ptr [ESP]
 0000023C  DD 1C 24			fstp	qword ptr [ESP]
 0000023F  5A				pop	EDX
 00000240  58				pop	EAX 
 00000241  EB 00			jmp	OFFSET $L000474
				;}
 00000243			$L000474:

 00000243  5F				pop	EDI
 00000244  5E				pop	ESI 
 00000245  5B				pop	EBX 
 00000246  C9				leave	
 00000247  C2 0008			retn	000000008h
 0000024A			Math_Hyperbolic_HSin ENDP

 0000024A			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 0000024A  55				push	EBP
 0000024B  8B EC			mov	EBP,ESP
 0000024D  51				push	ECX 
 0000024E  53				push	EBX 
 0000024F  56				push	ESI 
 00000250  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 00000251  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000254  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000257  50				push	EAX
 00000258  52				push	EDX 
 00000259  E8 00000000 E		call	 Math_Exp
 0000025E  50				push	EAX
 0000025F  52				push	EDX 
 00000260  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000263  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000266  50				push	EAX
 00000267  52				push	EDX 
 00000268  DD 04 24			fld	qword ptr [ESP]
 0000026B  D9 E0			fchs
 0000026D  DD 1C 24			fstp	qword ptr [ESP]
 00000270  E8 00000000 E		call	 Math_Exp
 00000275  50				push	EAX
 00000276  52				push	EDX 
 00000277  DD 04 24			fld	qword ptr [ESP]
 0000027A  59				pop	ECX
 0000027B  59				pop	ECX 
 0000027C  DD 04 24			fld	qword ptr [ESP]
 0000027F  D8 E1			fsub	st,st(1)
 00000281  DD 1C 24			fstp	qword ptr [ESP]
 00000284  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000287  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000028A  50				push	EAX
 0000028B  52				push	EDX 
 0000028C  E8 00000000 E		call	 Math_Exp
 00000291  50				push	EAX
 00000292  52				push	EDX 
 00000293  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000296  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000299  50				push	EAX
 0000029A  52				push	EDX 
 0000029B  DD 04 24			fld	qword ptr [ESP]
 0000029E  D9 E0			fchs
 000002A0  DD 1C 24			fstp	qword ptr [ESP]
 000002A3  E8 00000000 E		call	 Math_Exp
 000002A8  50				push	EAX
 000002A9  52				push	EDX 
 000002AA  DD 04 24			fld	qword ptr [ESP]
 000002AD  59				pop	ECX
 000002AE  59				pop	ECX 
 000002AF  DC 04 24			fadd	qword ptr [ESP]
 000002B2  DD 1C 24			fstp	qword ptr [ESP]
 000002B5  9B DB E2			fclex
 000002B8  DD 04 24			fld	qword ptr [ESP]
 000002BB  59				pop	ECX
 000002BC  59				pop	ECX 
 000002BD  DC 3C 24			fdivr	qword ptr [ESP]
 000002C0  DD 1C 24			fstp	qword ptr [ESP]
 000002C3  5A				pop	EDX
 000002C4  58				pop	EAX 
 000002C5  EB 00			jmp	OFFSET $L000479
				;}
 000002C7			$L000479:

 000002C7  5F				pop	EDI
 000002C8  5E				pop	ESI 
 000002C9  5B				pop	EBX 
 000002CA  C9				leave	
 000002CB  C2 0008			retn	000000008h
 000002CE			Math_Hyperbolic_HTan ENDP

 000002CE			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002CE  55				push	EBP
 000002CF  8B EC			mov	EBP,ESP
 000002D1  51				push	ECX 
 000002D2  53				push	EBX 
 000002D3  56				push	ESI 
 000002D4  57				push	EDI 
				;{

				;{471}:return Math::log10(X + Math::Sqrt(X * X - 1))
 000002D5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002D8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002DB  50				push	EAX
 000002DC  52				push	EDX 
 000002DD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E3  50				push	EAX
 000002E4  52				push	EDX 
 000002E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002EB  9B DB E2			fclex
 000002EE  50				push	EAX
 000002EF  52				push	EDX 
 000002F0  DD 04 24			fld	qword ptr [ESP]
 000002F3  59				pop	ECX
 000002F4  59				pop	ECX 
 000002F5  DC 0C 24			fmul	qword ptr [ESP]
 000002F8  DD 1C 24			fstp	qword ptr [ESP]
 000002FB  B8 00000001			mov	EAX,000000001h
 00000300  50				push	EAX
 00000301  E8 00000000 E		call	 FloatingPoint_FromInt
 00000306  50				push	EAX
 00000307  52				push	EDX 
 00000308  DD 04 24			fld	qword ptr [ESP]
 0000030B  59				pop	ECX
 0000030C  59				pop	ECX 
 0000030D  DD 04 24			fld	qword ptr [ESP]
 00000310  D8 E1			fsub	st,st(1)
 00000312  DD 1C 24			fstp	qword ptr [ESP]
 00000315  E8 00000000 E		call	 Math_Sqrt
 0000031A  50				push	EAX
 0000031B  52				push	EDX 
 0000031C  DD 04 24			fld	qword ptr [ESP]
 0000031F  59				pop	ECX
 00000320  59				pop	ECX 
 00000321  DC 04 24			fadd	qword ptr [ESP]
 00000324  DD 1C 24			fstp	qword ptr [ESP]
 00000327  E8 00000000 E		call	 Math_log10
 0000032C  EB 00			jmp	OFFSET $L000491
				;}
 0000032E			$L000491:

 0000032E  5F				pop	EDI
 0000032F  5E				pop	ESI 
 00000330  5B				pop	EBX 
 00000331  C9				leave	
 00000332  C2 0008			retn	000000008h
 00000335			Math_Hyperbolic_Inverse_HArccos ENDP

 00000335			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000335  55				push	EBP
 00000336  8B EC			mov	EBP,ESP
 00000338  51				push	ECX 
 00000339  53				push	EBX 
 0000033A  56				push	ESI 
 0000033B  57				push	EDI 
				;{

				;{483}:return Math::log10((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000033C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000033F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000342  50				push	EAX
 00000343  52				push	EDX 
 00000344  E8 00000000 E		call	 Math_Sign
 00000349  50				push	EAX
 0000034A  52				push	EDX 
 0000034B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000351  50				push	EAX
 00000352  52				push	EDX 
 00000353  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000356  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000359  9B DB E2			fclex
 0000035C  50				push	EAX
 0000035D  52				push	EDX 
 0000035E  DD 04 24			fld	qword ptr [ESP]
 00000361  59				pop	ECX
 00000362  59				pop	ECX 
 00000363  DC 0C 24			fmul	qword ptr [ESP]
 00000366  DD 1C 24			fstp	qword ptr [ESP]
 00000369  B8 00000001			mov	EAX,000000001h
 0000036E  50				push	EAX
 0000036F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000374  50				push	EAX
 00000375  52				push	EDX 
 00000376  DD 04 24			fld	qword ptr [ESP]
 00000379  59				pop	ECX
 0000037A  59				pop	ECX 
 0000037B  DC 04 24			fadd	qword ptr [ESP]
 0000037E  DD 1C 24			fstp	qword ptr [ESP]
 00000381  E8 00000000 E		call	 Math_Sqrt
 00000386  9B DB E2			fclex
 00000389  50				push	EAX
 0000038A  52				push	EDX 
 0000038B  DD 04 24			fld	qword ptr [ESP]
 0000038E  59				pop	ECX
 0000038F  59				pop	ECX 
 00000390  DC 0C 24			fmul	qword ptr [ESP]
 00000393  DD 1C 24			fstp	qword ptr [ESP]
 00000396  B8 00000001			mov	EAX,000000001h
 0000039B  50				push	EAX
 0000039C  E8 00000000 E		call	 FloatingPoint_FromInt
 000003A1  50				push	EAX
 000003A2  52				push	EDX 
 000003A3  DD 04 24			fld	qword ptr [ESP]
 000003A6  59				pop	ECX
 000003A7  59				pop	ECX 
 000003A8  DC 04 24			fadd	qword ptr [ESP]
 000003AB  DD 1C 24			fstp	qword ptr [ESP]
 000003AE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003B1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003B4  9B DB E2			fclex
 000003B7  50				push	EAX
 000003B8  52				push	EDX 
 000003B9  DD 04 24			fld	qword ptr [ESP]
 000003BC  59				pop	ECX
 000003BD  59				pop	ECX 
 000003BE  DC 3C 24			fdivr	qword ptr [ESP]
 000003C1  DD 1C 24			fstp	qword ptr [ESP]
 000003C4  E8 00000000 E		call	 Math_log10
 000003C9  EB 00			jmp	OFFSET $L000497
				;}
 000003CB			$L000497:

 000003CB  5F				pop	EDI
 000003CC  5E				pop	ESI 
 000003CD  5B				pop	EBX 
 000003CE  C9				leave	
 000003CF  C2 0008			retn	000000008h
 000003D2			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003D2			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003D2  55				push	EBP
 000003D3  8B EC			mov	EBP,ESP
 000003D5  51				push	ECX 
 000003D6  53				push	EBX 
 000003D7  56				push	ESI 
 000003D8  57				push	EDI 
				;{

				;{487}:return Math::log10((X + 1) / (X - 1)) / 2
 000003D9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003DC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003DF  50				push	EAX
 000003E0  52				push	EDX 
 000003E1  B8 00000001			mov	EAX,000000001h
 000003E6  50				push	EAX
 000003E7  E8 00000000 E		call	 FloatingPoint_FromInt
 000003EC  50				push	EAX
 000003ED  52				push	EDX 
 000003EE  DD 04 24			fld	qword ptr [ESP]
 000003F1  59				pop	ECX
 000003F2  59				pop	ECX 
 000003F3  DC 04 24			fadd	qword ptr [ESP]
 000003F6  DD 1C 24			fstp	qword ptr [ESP]
 000003F9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003FC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003FF  50				push	EAX
 00000400  52				push	EDX 
 00000401  B8 00000001			mov	EAX,000000001h
 00000406  50				push	EAX
 00000407  E8 00000000 E		call	 FloatingPoint_FromInt
 0000040C  50				push	EAX
 0000040D  52				push	EDX 
 0000040E  DD 04 24			fld	qword ptr [ESP]
 00000411  59				pop	ECX
 00000412  59				pop	ECX 
 00000413  DD 04 24			fld	qword ptr [ESP]
 00000416  D8 E1			fsub	st,st(1)
 00000418  DD 1C 24			fstp	qword ptr [ESP]
 0000041B  9B DB E2			fclex
 0000041E  DD 04 24			fld	qword ptr [ESP]
 00000421  59				pop	ECX
 00000422  59				pop	ECX 
 00000423  DC 3C 24			fdivr	qword ptr [ESP]
 00000426  DD 1C 24			fstp	qword ptr [ESP]
 00000429  E8 00000000 E		call	 Math_log10
 0000042E  50				push	EAX
 0000042F  52				push	EDX 
 00000430  B8 00000002			mov	EAX,000000002h
 00000435  9B DB E2			fclex
 00000438  50				push	EAX
 00000439  E8 00000000 E		call	 FloatingPoint_FromInt
 0000043E  50				push	EAX
 0000043F  52				push	EDX 
 00000440  DD 04 24			fld	qword ptr [ESP]
 00000443  59				pop	ECX
 00000444  59				pop	ECX 
 00000445  DC 3C 24			fdivr	qword ptr [ESP]
 00000448  DD 1C 24			fstp	qword ptr [ESP]
 0000044B  5A				pop	EDX
 0000044C  58				pop	EAX 
 0000044D  EB 00			jmp	OFFSET $L000499
				;}
 0000044F			$L000499:

 0000044F  5F				pop	EDI
 00000450  5E				pop	ESI 
 00000451  5B				pop	EBX 
 00000452  C9				leave	
 00000453  C2 0008			retn	000000008h
 00000456			Math_Hyperbolic_Inverse_HArccotan ENDP

 00000456			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 00000456  55				push	EBP
 00000457  8B EC			mov	EBP,ESP
 00000459  51				push	ECX 
 0000045A  53				push	EBX 
 0000045B  56				push	ESI 
 0000045C  57				push	EDI 
				;{

				;{479}:return Math::log10((Math::Sqrt(-X * X + 1) + 1) / X)
 0000045D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000460  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000463  50				push	EAX
 00000464  52				push	EDX 
 00000465  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000468  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000046B  9B DB E2			fclex
 0000046E  50				push	EAX
 0000046F  52				push	EDX 
 00000470  DD 04 24			fld	qword ptr [ESP]
 00000473  59				pop	ECX
 00000474  59				pop	ECX 
 00000475  DC 0C 24			fmul	qword ptr [ESP]
 00000478  DD 1C 24			fstp	qword ptr [ESP]
 0000047B  DD 04 24			fld	qword ptr [ESP]
 0000047E  D9 E0			fchs
 00000480  DD 1C 24			fstp	qword ptr [ESP]
 00000483  B8 00000001			mov	EAX,000000001h
 00000488  50				push	EAX
 00000489  E8 00000000 E		call	 FloatingPoint_FromInt
 0000048E  50				push	EAX
 0000048F  52				push	EDX 
 00000490  DD 04 24			fld	qword ptr [ESP]
 00000493  59				pop	ECX
 00000494  59				pop	ECX 
 00000495  DC 04 24			fadd	qword ptr [ESP]
 00000498  DD 1C 24			fstp	qword ptr [ESP]
 0000049B  E8 00000000 E		call	 Math_Sqrt
 000004A0  50				push	EAX
 000004A1  52				push	EDX 
 000004A2  B8 00000001			mov	EAX,000000001h
 000004A7  50				push	EAX
 000004A8  E8 00000000 E		call	 FloatingPoint_FromInt
 000004AD  50				push	EAX
 000004AE  52				push	EDX 
 000004AF  DD 04 24			fld	qword ptr [ESP]
 000004B2  59				pop	ECX
 000004B3  59				pop	ECX 
 000004B4  DC 04 24			fadd	qword ptr [ESP]
 000004B7  DD 1C 24			fstp	qword ptr [ESP]
 000004BA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004BD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004C0  9B DB E2			fclex
 000004C3  50				push	EAX
 000004C4  52				push	EDX 
 000004C5  DD 04 24			fld	qword ptr [ESP]
 000004C8  59				pop	ECX
 000004C9  59				pop	ECX 
 000004CA  DC 3C 24			fdivr	qword ptr [ESP]
 000004CD  DD 1C 24			fstp	qword ptr [ESP]
 000004D0  E8 00000000 E		call	 Math_log10
 000004D5  EB 00			jmp	OFFSET $L000495
				;}
 000004D7			$L000495:

 000004D7  5F				pop	EDI
 000004D8  5E				pop	ESI 
 000004D9  5B				pop	EBX 
 000004DA  C9				leave	
 000004DB  C2 0008			retn	000000008h
 000004DE			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004DE			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004DE  55				push	EBP
 000004DF  8B EC			mov	EBP,ESP
 000004E1  51				push	ECX 
 000004E2  53				push	EBX 
 000004E3  56				push	ESI 
 000004E4  57				push	EDI 
				;{

				;{467}:return Math::log10(X + Math::Sqrt(X * X + 1))
 000004E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004EB  50				push	EAX
 000004EC  52				push	EDX 
 000004ED  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004F3  50				push	EAX
 000004F4  52				push	EDX 
 000004F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004FB  9B DB E2			fclex
 000004FE  50				push	EAX
 000004FF  52				push	EDX 
 00000500  DD 04 24			fld	qword ptr [ESP]
 00000503  59				pop	ECX
 00000504  59				pop	ECX 
 00000505  DC 0C 24			fmul	qword ptr [ESP]
 00000508  DD 1C 24			fstp	qword ptr [ESP]
 0000050B  B8 00000001			mov	EAX,000000001h
 00000510  50				push	EAX
 00000511  E8 00000000 E		call	 FloatingPoint_FromInt
 00000516  50				push	EAX
 00000517  52				push	EDX 
 00000518  DD 04 24			fld	qword ptr [ESP]
 0000051B  59				pop	ECX
 0000051C  59				pop	ECX 
 0000051D  DC 04 24			fadd	qword ptr [ESP]
 00000520  DD 1C 24			fstp	qword ptr [ESP]
 00000523  E8 00000000 E		call	 Math_Sqrt
 00000528  50				push	EAX
 00000529  52				push	EDX 
 0000052A  DD 04 24			fld	qword ptr [ESP]
 0000052D  59				pop	ECX
 0000052E  59				pop	ECX 
 0000052F  DC 04 24			fadd	qword ptr [ESP]
 00000532  DD 1C 24			fstp	qword ptr [ESP]
 00000535  E8 00000000 E		call	 Math_log10
 0000053A  EB 00			jmp	OFFSET $L000488
				;}
 0000053C			$L000488:

 0000053C  5F				pop	EDI
 0000053D  5E				pop	ESI 
 0000053E  5B				pop	EBX 
 0000053F  C9				leave	
 00000540  C2 0008			retn	000000008h
 00000543			Math_Hyperbolic_Inverse_HArcsin ENDP

 00000543			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 00000543  55				push	EBP
 00000544  8B EC			mov	EBP,ESP
 00000546  51				push	ECX 
 00000547  53				push	EBX 
 00000548  56				push	ESI 
 00000549  57				push	EDI 
				;{

				;{475}:return Math::log10((1 + X) / (1 - X)) / 2
 0000054A  B8 00000001			mov	EAX,000000001h
 0000054F  50				push	EAX
 00000550  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000553  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000556  50				push	EAX
 00000557  52				push	EDX 
 00000558  DD 04 24			fld	qword ptr [ESP]
 0000055B  59				pop	ECX
 0000055C  59				pop	ECX 
 0000055D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000562  50				push	EAX
 00000563  52				push	EDX 
 00000564  DC 04 24			fadd	qword ptr [ESP]
 00000567  DD 1C 24			fstp	qword ptr [ESP]
 0000056A  B8 00000001			mov	EAX,000000001h
 0000056F  50				push	EAX
 00000570  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000573  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000576  50				push	EAX
 00000577  52				push	EDX 
 00000578  DD 04 24			fld	qword ptr [ESP]
 0000057B  59				pop	ECX
 0000057C  59				pop	ECX 
 0000057D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000582  50				push	EAX
 00000583  52				push	EDX 
 00000584  DD 04 24			fld	qword ptr [ESP]
 00000587  D8 E1			fsub	st,st(1)
 00000589  DD 1C 24			fstp	qword ptr [ESP]
 0000058C  9B DB E2			fclex
 0000058F  DD 04 24			fld	qword ptr [ESP]
 00000592  59				pop	ECX
 00000593  59				pop	ECX 
 00000594  DC 3C 24			fdivr	qword ptr [ESP]
 00000597  DD 1C 24			fstp	qword ptr [ESP]
 0000059A  E8 00000000 E		call	 Math_log10
 0000059F  50				push	EAX
 000005A0  52				push	EDX 
 000005A1  B8 00000002			mov	EAX,000000002h
 000005A6  9B DB E2			fclex
 000005A9  50				push	EAX
 000005AA  E8 00000000 E		call	 FloatingPoint_FromInt
 000005AF  50				push	EAX
 000005B0  52				push	EDX 
 000005B1  DD 04 24			fld	qword ptr [ESP]
 000005B4  59				pop	ECX
 000005B5  59				pop	ECX 
 000005B6  DC 3C 24			fdivr	qword ptr [ESP]
 000005B9  DD 1C 24			fstp	qword ptr [ESP]
 000005BC  5A				pop	EDX
 000005BD  58				pop	EAX 
 000005BE  EB 00			jmp	OFFSET $L000493
				;}
 000005C0			$L000493:

 000005C0  5F				pop	EDI
 000005C1  5E				pop	ESI 
 000005C2  5B				pop	EBX 
 000005C3  C9				leave	
 000005C4  C2 0008			retn	000000008h
 000005C7			Math_Hyperbolic_Inverse_HArctan ENDP

 000005C7			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005C7  55				push	EBP
 000005C8  8B EC			mov	EBP,ESP
 000005CA  51				push	ECX 
 000005CB  53				push	EBX 
 000005CC  56				push	ESI 
 000005CD  57				push	EDI 
				;{

				;{376}:return (180 / Math::pi()) * rad
 000005CE  B8 000000B4			mov	EAX,0000000B4h
 000005D3  50				push	EAX
 000005D4  E8 00000000 E		call	 Math_pi
 000005D9  9B DB E2			fclex
 000005DC  50				push	EAX
 000005DD  52				push	EDX 
 000005DE  DD 04 24			fld	qword ptr [ESP]
 000005E1  59				pop	ECX
 000005E2  59				pop	ECX 
 000005E3  E8 00000000 E		call	 FloatingPoint_FromInt
 000005E8  50				push	EAX
 000005E9  52				push	EDX 
 000005EA  DC 3C 24			fdivr	qword ptr [ESP]
 000005ED  DD 1C 24			fstp	qword ptr [ESP]
 000005F0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000005F3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000005F6  9B DB E2			fclex
 000005F9  50				push	EAX
 000005FA  52				push	EDX 
 000005FB  DD 04 24			fld	qword ptr [ESP]
 000005FE  59				pop	ECX
 000005FF  59				pop	ECX 
 00000600  DC 0C 24			fmul	qword ptr [ESP]
 00000603  DD 1C 24			fstp	qword ptr [ESP]
 00000606  5A				pop	EDX
 00000607  58				pop	EAX 
 00000608  EB 00			jmp	OFFSET $L000457
				;}
 0000060A			$L000457:

 0000060A  5F				pop	EDI
 0000060B  5E				pop	ESI 
 0000060C  5B				pop	EBX 
 0000060D  C9				leave	
 0000060E  C2 0008			retn	000000008h
 00000611			Math_RadiansToDegrees ENDP

 00000611			Samples_Cotorra_Listen PROC NEAR 
				;void Listen(string phrase);
 00000611  55				push	EBP
 00000612  8B EC			mov	EBP,ESP
 00000614  83 EC 08			sub	ESP,000000008h
 00000617  53				push	EBX 
 00000618  56				push	ESI 
 00000619  57				push	EDI 
 0000061A  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 0000061D  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000620  B9 00000001			mov	ECX,000000001h 
 00000625  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000062A  F3/ AB			rep stos	dword ptr [EDI]
 0000062C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{14}:n= StringHandling::StringLength(phrase);
 0000062F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000632  50				push	EAX
 00000633  E8 00000000 E		call	 StringHandling_StringLength
 00000638  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{15}:if(what != null)
 0000063B  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000063E  8B 01			mov	EAX,dword ptr [ECX]
 00000640  8B C8			mov	ECX,EAX 
 00000642  50				push	EAX
 00000643  33 C0			xor	EAX,EAX
 00000645  5A				pop	EDX
 00000646  3B D0			cmp	EDX,EAX
 00000648  0F 95 C0			setnz	AL
 0000064B  84 C0			test	AL,AL
 0000064D  74 11			jz	OFFSET $L000516

				;{16}:destroy []what;
 0000064F  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000652  8B 01			mov	EAX,dword ptr [ECX]
 00000654  8B C8			mov	ECX,EAX 
 00000656  85 C0			test	EAX,EAX
 00000658  74 06			jz	OFFSET $L000518
 0000065A  50				push	EAX
 0000065B  E8 00000000 E		call	 System_Memory_Destroy
 00000660			$L000518:
 00000660			$L000516:

				;{18}:what= new char[n + 1];
 00000660  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000663  50				push	EAX
 00000664  B8 00000001			mov	EAX,000000001h
 00000669  5A				pop	EDX
 0000066A  03 C2			add	EAX,EDX
 0000066C  6B C0 01			imul	EAX,000000001h
 0000066F  50				push	EAX
 00000670  8B D8			mov	EBX,EAX
 00000672  E8 00000000 E		call	 System_Memory_New
 00000677  85 C0			test	EAX,EAX
 00000679  74 0F			jz	 $L000519
 0000067B  8B F0			mov	ESI,EAX 
 0000067D  8D 3E			lea	EDI,dword ptr [ESI]
 0000067F  8B CB			mov	ECX,EBX 
 00000681  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00000686  F3/ AA			rep stos	byte ptr [EDI]
 00000688  EB 02			jmp	 $L000520
 0000068A			$L000519:
 0000068A  33 F6			xor	ESI,ESI
 0000068C			$L000520:
 0000068C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000068F  89 31			mov	dword ptr [ECX],ESI 

				;{19}:StringHandling::StringCopy(what, phrase, n);
 00000691  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000694  50				push	EAX 
 00000695  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000698  50				push	EAX 
 00000699  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000069C  8B 01			mov	EAX,dword ptr [ECX]
 0000069E  8B C8			mov	ECX,EAX 
 000006A0  50				push	EAX
 000006A1  E8 00000000 E		call	 StringHandling_StringCopy

				;{20}:what[n]= ' ';
 000006A6  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000006A9  8B 01			mov	EAX,dword ptr [ECX]
 000006AB  8B C8			mov	ECX,EAX 
 000006AD  50				push	EAX
 000006AE  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006B1  5E				pop	ESI
 000006B2  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000006B5  50				push	EAX
 000006B6  33 C0			xor	EAX,EAX
 000006B8  5B				pop	EBX
 000006B9  89 03			mov	dword ptr [EBX],EAX
				;}
 000006BB			$L000505:

 000006BB  5F				pop	EDI
 000006BC  5E				pop	ESI 
 000006BD  5B				pop	EBX 
 000006BE  C9				leave	
 000006BF  C2 0004			retn	000000004h
 000006C2			Samples_Cotorra_Listen ENDP

 000006C2			Samples_Cotorra_Talk PROC NEAR 
				;void Talk(void);
 000006C2  55				push	EBP
 000006C3  8B EC			mov	EBP,ESP
 000006C5  51				push	ECX 
 000006C6  53				push	EBX 
 000006C7  56				push	ESI 
 000006C8  57				push	EDI 
				;{

				;{25}:Console::WriteLn(what);
 000006C9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006CC  8B 01			mov	EAX,dword ptr [ECX]
 000006CE  8B C8			mov	ECX,EAX 
 000006D0  6A 00			push	000000000h
 000006D2  50				push	EAX 
 000006D3  E8 00000000 E		call	 Console_WriteString
 000006D8  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006DD			$L000509:

 000006DD  5F				pop	EDI
 000006DE  5E				pop	ESI 
 000006DF  5B				pop	EBX 
 000006E0  C9				leave	
 000006E1  C3				ret	
 000006E2			Samples_Cotorra_Talk ENDP

 000006E2			Samples_Cotorra PROC NEAR 
				;void Samples::Cotorra(void);
 000006E2  55				push	EBP
 000006E3  8B EC			mov	EBP,ESP
 000006E5  51				push	ECX 
 000006E6  53				push	EBX 
 000006E7  56				push	ESI 
 000006E8  57				push	EDI 
 000006E9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006EC  E8 00000005			call	 __member_Init@Samples_Cotorra

 000006F1  5F				pop	EDI
 000006F2  5E				pop	ESI 
 000006F3  5B				pop	EBX 
 000006F4  C9				leave	
 000006F5  C3				ret	
 000006F6			Samples_Cotorra ENDP

 000006F6			__member_Init@Samples_Cotorra PROC NEAR

 000006F6  55				push	EBP
 000006F7  8B EC			mov	EBP,ESP
 000006F9  51				push	ECX 
 000006FA  53				push	EBX 
 000006FB  56				push	ESI 
 000006FC  57				push	EDI 
 000006FD  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:what= null;
 00000700  33 C0			xor	EAX,EAX
 00000702  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000705  89 01			mov	dword ptr [ECX],EAX

 00000707  5F				pop	EDI
 00000708  5E				pop	ESI 
 00000709  5B				pop	EBX 
 0000070A  C9				leave	
 0000070B  C3				ret	
 0000070C			__member_Init@Samples_Cotorra ENDP
 0000070C			Samples_Application_main PROC NEAR 
				;void Samples::Application::main(int argc, string [] argv);
 0000070C  55				push	EBP
 0000070D  8B EC			mov	EBP,ESP
 0000070F  51				push	ECX 
 00000710  53				push	EBX 
 00000711  56				push	ESI 
 00000712  57				push	EDI 
 00000713  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000716  B9 00000001			mov	ECX,000000001h
 0000071B  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000720  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{32}:lola;
 00000722  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00000725  E8 FFFFFFB8			call	 Samples_Cotorra

				;{34}:lola.Listen("Hello World from H++!");
 0000072A  8D 05 00000000 R		lea	EAX,OFFSET $S000515
 00000730  50				push	EAX
 00000731  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00000734  E8 FFFFFED8			call	 Samples_Cotorra_Listen

				;{35}:lola.Talk();
 00000739  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 0000073C  E8 FFFFFF81			call	 Samples_Cotorra_Talk
				;}
 00000741			$L000511:

 00000741  5F				pop	EDI
 00000742  5E				pop	ESI 
 00000743  5B				pop	EBX 
 00000744  C9				leave	
 00000745  C2 0008			retn	000000008h
 00000748			Samples_Application_main ENDP

 00000748			__System_Hpp_Runtime_Init PROC

 00000748  55				push	EBP
 00000749  8B EC			mov	EBP,ESP
 0000074B  51				push	ECX 
 0000074C  53				push	EBX 
 0000074D  56				push	ESI 
 0000074E  57				push	EDI 
 0000074F  E8 00000000 E		call	 GetVersion
 00000754  A3 00000016 R		mov	 __osver,EAX ;os version
 00000759  A1 00000016 R		mov	EAX, __osver 
 0000075E  C1 E8 08			shr	EAX,000000008h
 00000761  25 000000FF			and	EAX,0000000FFh
 00000766  A3 0000001A R		mov	 __winminor,EAX ;windows minor
 0000076B  8B 0D 00000016 R		mov	ECX, __osver 
 00000771  81 E1 000000FF		and	ECX,0000000FFh 
 00000777  89 0D 0000001E R		mov	 __winmajor,ECX ;windows major
 0000077D  8B 15 0000001E R		mov	EDX,dword ptr __winmajor 
 00000783  C1 E2 08			shl	EDX,000000008h
 00000786  03 15 0000001A R		add	EDX,dword ptr __winminor
 0000078C  89 15 00000022 R		mov	dword ptr __winver,EDX ;windows version
 00000792  A1 00000016 R		mov	EAX, __osver 
 00000797  C1 E8 10			shr	EAX,000000010h 
 0000079A  25 0000FFFF			and	EAX,00000FFFFh 
 0000079F  A3 00000016 R		mov	 __osver,EAX 
 000007A4  8D 1D 0000004A R		lea	EBX,dword ptr ___argc
 000007AA  53				push	EBX
 000007AB  E8 00000000 E		call	 System_GetCommandLineArgv 
 000007B0  A3 00000046 R		mov	dword ptr ___argv,EAX 
 000007B5  50				push	EAX 
 000007B6  8B 0D 0000004A R		mov	ECX,dword ptr ___argc 
 000007BC  51				push	ECX 
 000007BD  E8 FFFFFF4A			call	 Samples_Application_main ;user entry point (stdcall calling convention)
 000007C2  50				push	EAX 
 000007C3  A1 00000046 R		mov	EAX,dword ptr ___argv 
 000007C8  50				push	EAX 
 000007C9  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 000007CE  50				push	EAX 
 000007CF  E8 00000000 E		call	 System_Memory_Free 
 000007D4  E8 00000000 E		call	 System_Exit 

 000007D9  5F				pop	EDI
 000007DA  5E				pop	ESI 
 000007DB  5B				pop	EBX 
 000007DC  C9				leave	
 000007DD  C3				ret	
 000007DE			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 00000000 48 65 6C 6C 6F	$S000515 		BYTE 	"Hello World from H++!",0
	   20 57 6F 72 6C
	   64 20 66 72 6F
	   6D 20 48 2B 2B
	   21 00

 00000016 00000000		__osver 		DWORD 	0;Windows OS version
 0000001A 00000000		__winminor 		DWORD 	0;Windows minor version
 0000001E 00000000		__winmajor 		DWORD 	0;Windows major version
 00000022 00000000		__winver 		DWORD 	0;Windows version
 00000026  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00000046 00000000		___argv 		DWORD 	0;Array of argument values
 0000004A 00000000		___argc 		DWORD 	0;Argument count

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 8.00.50727.762	    02/01/09 13:07:34
c:\hcc\hcc\TestSource\hello.hp				     Symbols 2 - 1
<This file was automatically generated by the 32-bit H++ Com



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000004E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007DE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004A Public STDCALL
  $L000460 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000A8 _TEXT	Length= 00000060 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 00000101 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004A _TEXT	Length= 0000005E Public STDCALL
  $L000477 . . . . . . . . . . .	L Near	 000000A1 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 00000108 _TEXT	Length= 00000084 Public STDCALL
  $L000485 . . . . . . . . . . .	L Near	 00000185 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 0000018C _TEXT	Length= 0000005E Public STDCALL
  $L000481 . . . . . . . . . . .	L Near	 000001E3 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001EA _TEXT	Length= 00000060 Public STDCALL
  $L000474 . . . . . . . . . . .	L Near	 00000243 _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 0000024A _TEXT	Length= 00000084 Public STDCALL
  $L000479 . . . . . . . . . . .	L Near	 000002C7 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000335 _TEXT	Length= 0000009D Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 000003CB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002CE _TEXT	Length= 00000067 Public STDCALL
  $L000491 . . . . . . . . . . .	L Near	 0000032E _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003D2 _TEXT	Length= 00000084 Public STDCALL
  $L000499 . . . . . . . . . . .	L Near	 0000044F _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 00000456 _TEXT	Length= 00000088 Public STDCALL
  $L000495 . . . . . . . . . . .	L Near	 000004D7 _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004DE _TEXT	Length= 00000065 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 0000053C _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 00000543 _TEXT	Length= 00000084 Public STDCALL
  $L000493 . . . . . . . . . . .	L Near	 000005C0 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005C7 _TEXT	Length= 0000004A Public STDCALL
  $L000457 . . . . . . . . . . .	L Near	 0000060A _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Samples_Application_main . . . .	P Near	 0000070C _TEXT	Length= 0000003C Public STDCALL
  $L000511 . . . . . . . . . . .	L Near	 00000741 _TEXT	
Samples_Cotorra_Listen . . . . .	P Near	 00000611 _TEXT	Length= 000000B1 Public STDCALL
  $L000518 . . . . . . . . . . .	L Near	 00000660 _TEXT	
  $L000516 . . . . . . . . . . .	L Near	 00000660 _TEXT	
  $L000519 . . . . . . . . . . .	L Near	 0000068A _TEXT	
  $L000520 . . . . . . . . . . .	L Near	 0000068C _TEXT	
  $L000505 . . . . . . . . . . .	L Near	 000006BB _TEXT	
Samples_Cotorra_Talk . . . . . .	P Near	 000006C2 _TEXT	Length= 00000020 Public STDCALL
  $L000509 . . . . . . . . . . .	L Near	 000006DD _TEXT	
Samples_Cotorra  . . . . . . . .	P Near	 000006E2 _TEXT	Length= 00000014 Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00000748 _TEXT	Length= 00000096 Public STDCALL
__member_Init@Samples_Cotorra  .	P Near	 000006F6 _TEXT	Length= 00000016 Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000515 . . . . . . . . . . . .	Byte	 00000000 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 0000004A _DATA	
___argv  . . . . . . . . . . . .	DWord	 00000046 _DATA	
__computer . . . . . . . . . . .	Byte	 00000026 _DATA	
__osver  . . . . . . . . . . . .	DWord	 00000016 _DATA	
__winmajor . . . . . . . . . . .	DWord	 0000001E _DATA	
__winminor . . . . . . . . . . .	DWord	 0000001A _DATA	
__winver . . . . . . . . . . . .	DWord	 00000022 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
