Microsoft (R) Macro Assembler Version 8.00.50727.762	    01/27/09 11:59:34
&c:\hcc\hcc\TestSource\lastfeatures.hp			     Page 1 - 1


				TITLE	 c:\hcc\hcc\TestSource\lastfeatures.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			LastFeatures_DoubleProxy PROC NEAR 
				;void LastFeatures::DoubleProxy(void);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
 00000007  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000000A  E8 00000180			call	 LastFeatures_SimpleObject ;base constructor call
 0000000F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000012  C7 01 00000000 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__LastFeatures_DoubleProxy 
 00000018  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000001B  E8 0000161D			call	 __member_Init@LastFeatures_DoubleProxy 
				;{

				;{32}:Console::WriteLn("Constructing a Double Proxy...");
 00000020  8D 05 000000CD R		lea	EAX,OFFSET $S000628
 00000026  6A 00			push	000000000h
 00000028  50				push	EAX 
 00000029  E8 00000000 E		call	 Console_WriteString
 0000002E  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 00000033  5F				pop	EDI
 00000034  5E				pop	ESI 
 00000035  5B				pop	EBX 
 00000036  C9				leave	
 00000037  C3				ret	
 00000038			LastFeatures_DoubleProxy ENDP

 00000038			LastFeatures_DoubleProxy_Swap PROC NEAR 
				;void Swap(LastFeatures::SimpleObject ref obj);
 00000038  55				push	EBP
 00000039  8B EC			mov	EBP,ESP
 0000003B  83 EC 10			sub	ESP,000000010h
 0000003E  53				push	EBX 
 0000003F  56				push	ESI 
 00000040  57				push	EDI 
 00000041  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 00000044  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000047  B9 00000003			mov	ECX,000000003h 
 0000004C  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000051  F3/ AB			rep stos	dword ptr [EDI]
 00000053  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{50}:tmp= val;
 00000056  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000059  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000005C  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000005F  50				push	EAX
 00000060  52				push	EDX 
 00000061  DD 04 24			fld	qword ptr [ESP]
 00000064  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{52}:ptr= dynamic_cast(&obj);
 00000067  5A				pop	EDX
 00000068  58				pop	EAX 
 00000069  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000006C  8B C3			mov	EAX,EBX 
 0000006E  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00000071  89 03			mov	dword ptr [EBX],EAX

				;{53}:val= ptr.val;
 00000073  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 00000076  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000079  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000007C  50				push	EAX
 0000007D  52				push	EDX 
 0000007E  DD 04 24			fld	qword ptr [ESP]
 00000081  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000084  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{54}:ptr.val= tmp;
 00000087  5A				pop	EDX
 00000088  58				pop	EAX 
 00000089  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 0000008C  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 0000008F  50				push	EAX
 00000090  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000093  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000096  50				push	EAX
 00000097  52				push	EDX 
 00000098  DD 04 24			fld	qword ptr [ESP]
 0000009B  5A				pop	EDX
 0000009C  58				pop	EAX 
 0000009D  5B				pop	EBX
 0000009E  DD 1B			fstp	qword ptr [EBX]
				;}
 000000A0			$L000635:

 000000A0  5F				pop	EDI
 000000A1  5E				pop	ESI 
 000000A2  5B				pop	EBX 
 000000A3  C9				leave	
 000000A4  C2 0004			retn	000000004h
 000000A7			LastFeatures_DoubleProxy_Swap ENDP

 000000A7			LastFeatures_DoubleProxy_isEqual PROC NEAR 
				;bool isEqual(LastFeatures::SimpleObject ref obj);
 000000A7  55				push	EBP
 000000A8  8B EC			mov	EBP,ESP
 000000AA  83 EC 08			sub	ESP,000000008h
 000000AD  53				push	EBX 
 000000AE  56				push	ESI 
 000000AF  57				push	EDI 
 000000B0  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 000000B3  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 000000B6  B9 00000001			mov	ECX,000000001h 
 000000BB  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000000C0  F3/ AB			rep stos	dword ptr [EDI]
 000000C2  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{43}:ptr= dynamic_cast(LastFeatures::DoubleProxy, &obj);
 000000C5  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000000C8  8B C3			mov	EAX,EBX 
 000000CA  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000000CD  89 03			mov	dword ptr [EBX],EAX

				;{45}:return val < ptr.val
 000000CF  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000000D2  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000000D5  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000000D8  50				push	EAX
 000000D9  52				push	EDX 
 000000DA  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000000DD  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000000E0  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000000E3  50				push	EAX
 000000E4  52				push	EDX 
 000000E5  E8 00000000 E		call	 FloatingPoint_Compare
 000000EA  83 F8 00			cmp	EAX,000000000h
 000000ED  F7 D8			neg	EAX
 000000EF  0F 9C C0			setl	AL
 000000F2  EB 00			jmp	OFFSET $L000632
				;}
 000000F4			$L000632:

 000000F4  5F				pop	EDI
 000000F5  5E				pop	ESI 
 000000F6  5B				pop	EBX 
 000000F7  C9				leave	
 000000F8  C2 0004			retn	000000004h
 000000FB			LastFeatures_DoubleProxy_isEqual ENDP

 000000FB			LastFeatures_DoubleProxy_lessThan PROC NEAR 
				;bool lessThan(LastFeatures::SimpleObject ref obj);
 000000FB  55				push	EBP
 000000FC  8B EC			mov	EBP,ESP
 000000FE  83 EC 08			sub	ESP,000000008h
 00000101  53				push	EBX 
 00000102  56				push	ESI 
 00000103  57				push	EDI 
 00000104  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00000107  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000010A  B9 00000001			mov	ECX,000000001h 
 0000010F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000114  F3/ AB			rep stos	dword ptr [EDI]
 00000116  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{36}:ptr= dynamic_cast(&obj);
 00000119  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000011C  8B C3			mov	EAX,EBX 
 0000011E  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000121  89 03			mov	dword ptr [EBX],EAX

				;{38}:return val < ptr.val
 00000123  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000126  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000129  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000012C  50				push	EAX
 0000012D  52				push	EDX 
 0000012E  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000131  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000134  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000137  50				push	EAX
 00000138  52				push	EDX 
 00000139  E8 00000000 E		call	 FloatingPoint_Compare
 0000013E  83 F8 00			cmp	EAX,000000000h
 00000141  F7 D8			neg	EAX
 00000143  0F 9C C0			setl	AL
 00000146  EB 00			jmp	OFFSET $L000629
				;}
 00000148			$L000629:

 00000148  5F				pop	EDI
 00000149  5E				pop	ESI 
 0000014A  5B				pop	EBX 
 0000014B  C9				leave	
 0000014C  C2 0004			retn	000000004h
 0000014F			LastFeatures_DoubleProxy_lessThan ENDP

 0000014F			LastFeatures_HObject_Destructor PROC NEAR 
				;void Destructor(void);
 0000014F  55				push	EBP
 00000150  8B EC			mov	EBP,ESP
 00000152  51				push	ECX 
 00000153  53				push	EBX 
 00000154  56				push	ESI 
 00000155  57				push	EDI 
				;{
				;}
				;}
 00000156			$L000654:

 00000156  5F				pop	EDI
 00000157  5E				pop	ESI 
 00000158  5B				pop	EBX 
 00000159  C9				leave	
 0000015A  C3				ret	
 0000015B			LastFeatures_HObject_Destructor ENDP

 0000015B			LastFeatures_HObject PROC NEAR 
				;void LastFeatures::HObject(void);
 0000015B  55				push	EBP
 0000015C  8B EC			mov	EBP,ESP
 0000015E  51				push	ECX 
 0000015F  53				push	EBX 
 00000160  56				push	ESI 
 00000161  57				push	EDI 
 00000162  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000165  C7 01 00000020 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__LastFeatures_HObject 
				;{
				;}

 0000016B  5F				pop	EDI
 0000016C  5E				pop	ESI 
 0000016D  5B				pop	EBX 
 0000016E  C9				leave	
 0000016F  C3				ret	
 00000170			LastFeatures_HObject ENDP

 00000170			LastFeatures_SimpleObject_Destructor PROC NEAR 
				;void Destructor(void);
 00000170  55				push	EBP
 00000171  8B EC			mov	EBP,ESP
 00000173  51				push	ECX 
 00000174  53				push	EBX 
 00000175  56				push	ESI 
 00000176  57				push	EDI 
				;{

				;{21}:Console::WriteLn("Destroying a Simple Object...");
 00000177  8D 05 000000EC R		lea	EAX,OFFSET $S000623
 0000017D  6A 00			push	000000000h
 0000017F  50				push	EAX 
 00000180  E8 00000000 E		call	 Console_WriteString
 00000185  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000018A			$L000622:

 0000018A  5F				pop	EDI
 0000018B  5E				pop	ESI 
 0000018C  5B				pop	EBX 
 0000018D  C9				leave	
 0000018E  C3				ret	
 0000018F			LastFeatures_SimpleObject_Destructor ENDP

 0000018F			LastFeatures_SimpleObject PROC NEAR 
				;void LastFeatures::SimpleObject(void);
 0000018F  55				push	EBP
 00000190  8B EC			mov	EBP,ESP
 00000192  51				push	ECX 
 00000193  53				push	EBX 
 00000194  56				push	ESI 
 00000195  57				push	EDI 
 00000196  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000199  C7 01 00000010 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__LastFeatures_SimpleObject 

 0000019F  5F				pop	EDI
 000001A0  5E				pop	ESI 
 000001A1  5B				pop	EBX 
 000001A2  C9				leave	
 000001A3  C3				ret	
 000001A4			LastFeatures_SimpleObject ENDP

 000001A4			LastFeatures_SortDoubleProxy_Sort PROC NEAR 
				;void Sort(LastFeatures::SimpleObject [] array, int n);
 000001A4  55				push	EBP
 000001A5  8B EC			mov	EBP,ESP
 000001A7  83 EC 0C			sub	ESP,00000000Ch
 000001AA  53				push	EBX 
 000001AB  56				push	ESI 
 000001AC  57				push	EDI 
 000001AD  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 000001B0  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 000001B3  B9 00000002			mov	ECX,000000002h 
 000001B8  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000001BD  F3/ AB			rep stos	dword ptr [EDI]
 000001BF  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{78}:for(index= 1; index < n; index++ )
 000001C2  B8 00000001			mov	EAX,000000001h
 000001C7  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000001CA  EB 06			jmp	OFFSET $L000719
 000001CC			$L000720:
 000001CC  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000001CF  FF 45 FC			inc	dword ptr [EBP-4]
 000001D2			$L000719:
 000001D2  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000001D5  50				push	EAX
 000001D6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000001D9  5A				pop	EDX
 000001DA  3B D0			cmp	EDX,EAX
 000001DC  0F 9C C0			setl	AL
 000001DF  84 C0			test	AL,AL
 000001E1  0F 84 0000008C		jz	OFFSET $L000721
				;{

				;{80}:for(left= 0; left < index; left++ )
 000001E7  33 C0			xor	EAX,EAX
 000001E9  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000001EC  EB 06			jmp	OFFSET $L000722
 000001EE			$L000723:
 000001EE  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000001F1  FF 45 F8			inc	dword ptr [EBP-8]
 000001F4			$L000722:
 000001F4  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000001F7  50				push	EAX
 000001F8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000001FB  5A				pop	EDX
 000001FC  3B D0			cmp	EDX,EAX
 000001FE  0F 9C C0			setl	AL
 00000201  84 C0			test	AL,AL
 00000203  74 69			jz	OFFSET $L000724
				;{

				;{82}:if(array[left + 1].lessThan(array[left]))
 00000205  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000208  8B C3			mov	EAX,EBX 
 0000020A  50				push	EAX
 0000020B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000020E  50				push	EAX
 0000020F  B8 00000001			mov	EAX,000000001h
 00000214  5A				pop	EDX
 00000215  03 C2			add	EAX,EDX
 00000217  5E				pop	ESI
 00000218  8D 0C 86			lea	ECX,dword ptr [ESI+EAX*0004h]
 0000021B  51				push	ECX
 0000021C  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000021F  8B C3			mov	EAX,EBX 
 00000221  50				push	EAX
 00000222  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000225  5E				pop	ESI
 00000226  8D 0C 86			lea	ECX,dword ptr [ESI+EAX*0004h]
 00000229  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 0000022C  51				push	ECX
 0000022D  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00000231  8B 11			mov	EDX,dword ptr [ECX] 
 00000233  FF 12			call	dword ptr [EDX]
 00000235  59				pop	ECX
 00000236  84 C0			test	AL,AL
 00000238  74 32			jz	OFFSET $L000725
				;{

				;{84}:array[left + 1].Swap(array[left]);
 0000023A  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000023D  8B C3			mov	EAX,EBX 
 0000023F  50				push	EAX
 00000240  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000243  50				push	EAX
 00000244  B8 00000001			mov	EAX,000000001h
 00000249  5A				pop	EDX
 0000024A  03 C2			add	EAX,EDX
 0000024C  5E				pop	ESI
 0000024D  8D 0C 86			lea	ECX,dword ptr [ESI+EAX*0004h]
 00000250  51				push	ECX
 00000251  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000254  8B C3			mov	EAX,EBX 
 00000256  50				push	EAX
 00000257  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000025A  5E				pop	ESI
 0000025B  8D 0C 86			lea	ECX,dword ptr [ESI+EAX*0004h]
 0000025E  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00000261  51				push	ECX
 00000262  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00000266  8B 11			mov	EDX,dword ptr [ECX] 
 00000268  FF 52 08			call	dword ptr [EDX+0008h]
 0000026B  59				pop	ECX
				;}
 0000026C			$L000725:
				;}
 0000026C  EB 80			jmp	OFFSET $L000723 
 0000026E			$L000724:
				;}
 0000026E  E9 FFFFFF59			jmp	OFFSET $L000720 
 00000273			$L000721:
				;}
 00000273			$L000646:

 00000273  5F				pop	EDI
 00000274  5E				pop	ESI 
 00000275  5B				pop	EBX 
 00000276  C9				leave	
 00000277  C2 0008			retn	000000008h
 0000027A			LastFeatures_SortDoubleProxy_Sort ENDP

 0000027A			LastFeatures_SwapperObject_Swap PROC NEAR 
				;void Swap(LastFeatures::DoubleProxy ref obj1, LastFeatures::DoubleProxy ref obj2);
 0000027A  55				push	EBP
 0000027B  8B EC			mov	EBP,ESP
 0000027D  83 EC 10			sub	ESP,000000010h
 00000280  53				push	EBX 
 00000281  56				push	ESI 
 00000282  57				push	EDI 
 00000283  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 00000286  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000289  B9 00000003			mov	ECX,000000003h 
 0000028E  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000293  F3/ AB			rep stos	dword ptr [EDI]
 00000295  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{65}:tmp;
 00000298  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000029B  E8 FFFFFD60			call	 LastFeatures_DoubleProxy

				;{67}:tmp= obj1;
 000002A0  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000002A3  8B C3			mov	EAX,EBX 
 000002A5  8B F1			mov	ESI,ECX
 000002A7  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000002AA  8B FB			mov	EDI,EBX 
 000002AC  B9 0000000C			mov	ECX,00000000Ch 
 000002B1  FC				cld	
 000002B2  F3/ A4			rep movsb	

				;{68}:obj1= obj2;
 000002B4  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000002B7  8B C3			mov	EAX,EBX 
 000002B9  8B F1			mov	ESI,ECX
 000002BB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000002BE  8B C3			mov	EAX,EBX 
 000002C0  8B FB			mov	EDI,EBX 
 000002C2  B9 0000000C			mov	ECX,00000000Ch 
 000002C7  FC				cld	
 000002C8  F3/ A4			rep movsb	

				;{69}:obj2= tmp;
 000002CA  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000002CD  8B F1			mov	ESI,ECX
 000002CF  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000002D2  8B C3			mov	EAX,EBX 
 000002D4  8B FB			mov	EDI,EBX 
 000002D6  B9 0000000C			mov	ECX,00000000Ch 
 000002DB  FC				cld	
 000002DC  F3/ A4			rep movsb	
				;}
 000002DE			$L000640:
 000002DE  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000002E1  8B 01			mov	EAX,dword ptr [ECX]
 000002E3  FF 50 0C			call	dword ptr [EAX+000Ch]
 000002E6			$L000727:

 000002E6  5F				pop	EDI
 000002E7  5E				pop	ESI 
 000002E8  5B				pop	EBX 
 000002E9  C9				leave	
 000002EA  C2 0008			retn	000000008h
 000002ED			LastFeatures_SwapperObject_Swap ENDP

 000002ED			LastFeatures_SwapperObject PROC NEAR 
				;void LastFeatures::SwapperObject(void);
 000002ED  55				push	EBP
 000002EE  8B EC			mov	EBP,ESP
 000002F0  51				push	ECX 
 000002F1  53				push	EBX 
 000002F2  56				push	ESI 
 000002F3  57				push	EDI 
 000002F4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000002F7  C7 01 00000024 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__LastFeatures_SwapperObject 

 000002FD  5F				pop	EDI
 000002FE  5E				pop	ESI 
 000002FF  5B				pop	EBX 
 00000300  C9				leave	
 00000301  C3				ret	
 00000302			LastFeatures_SwapperObject ENDP

 00000302			LastFeatures_TestProperties_get_Shapes PROC NEAR 
				;UnitTesting::Shape get::Shapes(void);
 00000302  55				push	EBP
 00000303  8B EC			mov	EBP,ESP
 00000305  51				push	ECX 
 00000306  53				push	EBX 
 00000307  56				push	ESI 
 00000308  57				push	EDI 
				;{

				;{136}:return shapes1
 00000309  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000030C  8B 01			mov	EAX,dword ptr [ECX]
 0000030E  8B C8			mov	ECX,EAX 
 00000310  EB 00			jmp	OFFSET $L000670
				;}
 00000312			$L000670:

 00000312  5F				pop	EDI
 00000313  5E				pop	ESI 
 00000314  5B				pop	EBX 
 00000315  C9				leave	
 00000316  C3				ret	
 00000317			LastFeatures_TestProperties_get_Shapes ENDP

 00000317			LastFeatures_TestProperties_put_Shapes PROC NEAR 
				;void put::Shapes(UnitTesting::Shape ^ _shape);
 00000317  55				push	EBP
 00000318  8B EC			mov	EBP,ESP
 0000031A  81 EC 00000098		sub	ESP,000000098h
 00000320  53				push	EBX 
 00000321  56				push	ESI 
 00000322  57				push	EDI 
 00000323  89 8D FFFFFF68		mov	dword ptr [EBP-0098h],ECX
 00000329  8D BD FFFFFF6C		lea	EDI,dword ptr [EBP-0094h]
 0000032F  B9 00000025			mov	ECX,000000025h 
 00000334  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000339  F3/ AB			rep stos	dword ptr [EDI]
 0000033B  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h] 
				;{

				;{142}:link;
 00000341  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000344  E8 000004A7			call	 LastFeatures_TestProperties_node

				;{144}:link.left= new LastFeatures::TestProperties::node();
 00000349  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000034C  8D 01			lea	EAX,dword ptr [ECX]
 0000034E  50				push	EAX
 0000034F  6A 0C			push	00000000Ch
 00000351  E8 00000000 E		call	 System_Memory_New
 00000356  85 C0			test	EAX,EAX
 00000358  74 12			jz	 $L000729
 0000035A  8B F0			mov	ESI,EAX
 0000035C  8D 3E			lea	EDI,dword ptr [ESI]
 0000035E  B9 00000003			mov	ECX,000000003h 
 00000363  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00000368  F3/ AB			rep stos	dword ptr [EDI]
 0000036A  EB 02			jmp	 $L000730
 0000036C			$L000729:
 0000036C  33 F6			xor	ESI,ESI
 0000036E			$L000730:
 0000036E  5B				pop	EBX
 0000036F  89 33			mov	dword ptr [EBX],ESI 
 00000371  8B CE			mov	ECX,ESI 
 00000373  E8 00000478			call	 LastFeatures_TestProperties_node
 00000378  8B C6			mov	EAX,ESI 

				;{145}:link.right= new LastFeatures::TestProperties::node();
 0000037A  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000037D  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00000380  50				push	EAX
 00000381  6A 0C			push	00000000Ch
 00000383  E8 00000000 E		call	 System_Memory_New
 00000388  85 C0			test	EAX,EAX
 0000038A  74 12			jz	 $L000731
 0000038C  8B F0			mov	ESI,EAX
 0000038E  8D 3E			lea	EDI,dword ptr [ESI]
 00000390  B9 00000003			mov	ECX,000000003h 
 00000395  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000039A  F3/ AB			rep stos	dword ptr [EDI]
 0000039C  EB 02			jmp	 $L000732
 0000039E			$L000731:
 0000039E  33 F6			xor	ESI,ESI
 000003A0			$L000732:
 000003A0  5B				pop	EBX
 000003A1  89 33			mov	dword ptr [EBX],ESI 
 000003A3  8B CE			mov	ECX,ESI 
 000003A5  E8 00000446			call	 LastFeatures_TestProperties_node
 000003AA  8B C6			mov	EAX,ESI 

				;{146}:link.value= new LastFeatures::HObject();
 000003AC  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000003AF  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 000003B2  50				push	EAX
 000003B3  6A 04			push	000000004h
 000003B5  E8 00000000 E		call	 System_Memory_New
 000003BA  85 C0			test	EAX,EAX
 000003BC  74 12			jz	 $L000733
 000003BE  8B F0			mov	ESI,EAX
 000003C0  8D 3E			lea	EDI,dword ptr [ESI]
 000003C2  B9 00000001			mov	ECX,000000001h 
 000003C7  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000003CC  F3/ AB			rep stos	dword ptr [EDI]
 000003CE  EB 02			jmp	 $L000734
 000003D0			$L000733:
 000003D0  33 F6			xor	ESI,ESI
 000003D2			$L000734:
 000003D2  5B				pop	EBX
 000003D3  89 33			mov	dword ptr [EBX],ESI 
 000003D5  8B CE			mov	ECX,ESI 
 000003D7  E8 FFFFFD7F			call	 LastFeatures_HObject
 000003DC  8B C6			mov	EAX,ESI 

				;{154}:left= link.left;
 000003DE  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000003E1  8B 01			mov	EAX,dword ptr [ECX]
 000003E3  8B C8			mov	ECX,EAX 
 000003E5  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 000003E8  89 03			mov	dword ptr [EBX],EAX

				;{155}:destroy left;
 000003EA  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 000003ED  8B F1			mov	ESI,ECX
 000003EF  85 C9			test	ECX,ECX
 000003F1  74 05			jz	OFFSET $L000736
 000003F3  E8 00000365			call	 LastFeatures_TestProperties_node_Destructor
 000003F8			$L000736:
 000003F8  56				push	ESI
 000003F9  E8 00000000 E		call	 System_Memory_Destroy

				;{156}:link.left= null;
 000003FE  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000401  8D 01			lea	EAX,dword ptr [ECX]
 00000403  50				push	EAX
 00000404  33 C0			xor	EAX,EAX
 00000406  5B				pop	EBX
 00000407  89 03			mov	dword ptr [EBX],EAX

				;{158}:link.left= link.right;
 00000409  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000040C  8D 01			lea	EAX,dword ptr [ECX]
 0000040E  50				push	EAX
 0000040F  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000412  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000415  8B C8			mov	ECX,EAX 
 00000417  5B				pop	EBX
 00000418  89 03			mov	dword ptr [EBX],EAX

				;{159}:link.right= new LastFeatures::TestProperties::node();
 0000041A  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000041D  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00000420  50				push	EAX
 00000421  6A 0C			push	00000000Ch
 00000423  E8 00000000 E		call	 System_Memory_New
 00000428  85 C0			test	EAX,EAX
 0000042A  74 12			jz	 $L000737
 0000042C  8B F0			mov	ESI,EAX
 0000042E  8D 3E			lea	EDI,dword ptr [ESI]
 00000430  B9 00000003			mov	ECX,000000003h 
 00000435  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000043A  F3/ AB			rep stos	dword ptr [EDI]
 0000043C  EB 02			jmp	 $L000738
 0000043E			$L000737:
 0000043E  33 F6			xor	ESI,ESI
 00000440			$L000738:
 00000440  5B				pop	EBX
 00000441  89 33			mov	dword ptr [EBX],ESI 
 00000443  8B CE			mov	ECX,ESI 
 00000445  E8 000003A6			call	 LastFeatures_TestProperties_node
 0000044A  8B C6			mov	EAX,ESI 

				;{161}:right= link.right;
 0000044C  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000044F  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000452  8B C8			mov	ECX,EAX 
 00000454  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00000457  89 03			mov	dword ptr [EBX],EAX

				;{162}:destroy right;
 00000459  8B 4D EC			mov	ECX,dword ptr [EBP-20]
 0000045C  8B F1			mov	ESI,ECX
 0000045E  85 C9			test	ECX,ECX
 00000460  74 05			jz	OFFSET $L000740
 00000462  E8 000002F6			call	 LastFeatures_TestProperties_node_Destructor
 00000467			$L000740:
 00000467  56				push	ESI
 00000468  E8 00000000 E		call	 System_Memory_Destroy

				;{164}:link.right= link.left;
 0000046D  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000470  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00000473  50				push	EAX
 00000474  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000477  8B 01			mov	EAX,dword ptr [ECX]
 00000479  8B C8			mov	ECX,EAX 
 0000047B  5B				pop	EBX
 0000047C  89 03			mov	dword ptr [EBX],EAX

				;{165}:link.left= new LastFeatures::TestProperties::node();
 0000047E  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000481  8D 01			lea	EAX,dword ptr [ECX]
 00000483  50				push	EAX
 00000484  6A 0C			push	00000000Ch
 00000486  E8 00000000 E		call	 System_Memory_New
 0000048B  85 C0			test	EAX,EAX
 0000048D  74 12			jz	 $L000741
 0000048F  8B F0			mov	ESI,EAX
 00000491  8D 3E			lea	EDI,dword ptr [ESI]
 00000493  B9 00000003			mov	ECX,000000003h 
 00000498  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000049D  F3/ AB			rep stos	dword ptr [EDI]
 0000049F  EB 02			jmp	 $L000742
 000004A1			$L000741:
 000004A1  33 F6			xor	ESI,ESI
 000004A3			$L000742:
 000004A3  5B				pop	EBX
 000004A4  89 33			mov	dword ptr [EBX],ESI 
 000004A6  8B CE			mov	ECX,ESI 
 000004A8  E8 00000343			call	 LastFeatures_TestProperties_node
 000004AD  8B C6			mov	EAX,ESI 

				;{167}:left= link.left;
 000004AF  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000004B2  8B 01			mov	EAX,dword ptr [ECX]
 000004B4  8B C8			mov	ECX,EAX 
 000004B6  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 000004B9  89 03			mov	dword ptr [EBX],EAX

				;{169}:link.left= left;
 000004BB  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000004BE  8D 01			lea	EAX,dword ptr [ECX]
 000004C0  50				push	EAX
 000004C1  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 000004C4  5B				pop	EBX
 000004C5  89 03			mov	dword ptr [EBX],EAX

				;{172}:shapes1[0].Draw();
 000004C7  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 000004CD  8B 01			mov	EAX,dword ptr [ECX]
 000004CF  8B C8			mov	ECX,EAX 
 000004D1  50				push	EAX
 000004D2  33 C0			xor	EAX,EAX
 000004D4  5E				pop	ESI
 000004D5  6B C0 0C			imul	EAX,00000000Ch
 000004D8  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000004DB  8B 11			mov	EDX,dword ptr [ECX]
 000004DD  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{173}:shapes2[0].Draw();
 000004E0  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 000004E6  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 000004E9  8B C8			mov	ECX,EAX 
 000004EB  50				push	EAX
 000004EC  33 C0			xor	EAX,EAX
 000004EE  5E				pop	ESI
 000004EF  6B C0 0C			imul	EAX,00000000Ch
 000004F2  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000004F5  8B 11			mov	EDX,dword ptr [ECX]
 000004F7  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{175}:shapes_ptr[0].Draw();
 000004FA  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00000500  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000503  8B C8			mov	ECX,EAX 
 00000505  50				push	EAX
 00000506  33 C0			xor	EAX,EAX
 00000508  5E				pop	ESI
 00000509  6B C0 0C			imul	EAX,00000000Ch
 0000050C  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000050F  8B 11			mov	EDX,dword ptr [ECX]
 00000511  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{177}:shapes1[1].Draw();
 00000514  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 0000051A  8B 01			mov	EAX,dword ptr [ECX]
 0000051C  8B C8			mov	ECX,EAX 
 0000051E  50				push	EAX
 0000051F  B8 00000001			mov	EAX,000000001h
 00000524  5E				pop	ESI
 00000525  6B C0 0C			imul	EAX,00000000Ch
 00000528  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000052B  8B 11			mov	EDX,dword ptr [ECX]
 0000052D  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{178}:shapes2[2].Draw();
 00000530  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00000536  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000539  8B C8			mov	ECX,EAX 
 0000053B  50				push	EAX
 0000053C  B8 00000002			mov	EAX,000000002h
 00000541  5E				pop	ESI
 00000542  6B C0 0C			imul	EAX,00000000Ch
 00000545  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000548  8B 11			mov	EDX,dword ptr [ECX]
 0000054A  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{180}:shapes_ptr[3].Draw();
 0000054D  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00000553  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000556  8B C8			mov	ECX,EAX 
 00000558  50				push	EAX
 00000559  B8 00000003			mov	EAX,000000003h
 0000055E  5E				pop	ESI
 0000055F  6B C0 0C			imul	EAX,00000000Ch
 00000562  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000565  8B 11			mov	EDX,dword ptr [ECX]
 00000567  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{184}:if(shapes1 != null)
 0000056A  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00000570  8B 01			mov	EAX,dword ptr [ECX]
 00000572  8B C8			mov	ECX,EAX 
 00000574  50				push	EAX
 00000575  33 C0			xor	EAX,EAX
 00000577  5A				pop	EDX
 00000578  3B D0			cmp	EDX,EAX
 0000057A  0F 95 C0			setnz	AL
 0000057D  84 C0			test	AL,AL
 0000057F  74 14			jz	OFFSET $L000743

				;{185}:destroy shapes1;
 00000581  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00000587  8B 01			mov	EAX,dword ptr [ECX]
 00000589  8B C8			mov	ECX,EAX 
 0000058B  85 C0			test	EAX,EAX
 0000058D  74 06			jz	OFFSET $L000745
 0000058F  50				push	EAX
 00000590  E8 00000000 E		call	 System_Memory_Destroy
 00000595			$L000745:
 00000595			$L000743:

				;{187}:destroy []shapes1;
 00000595  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 0000059B  8B 01			mov	EAX,dword ptr [ECX]
 0000059D  8B C8			mov	ECX,EAX 
 0000059F  85 C0			test	EAX,EAX
 000005A1  74 25			jz	OFFSET $L000746
 000005A3  8B F0			mov	ESI,EAX
 000005A5  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 000005A8  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 000005AB  8B DE			mov	EBX,ESI 
 000005AD			$L000747:
 000005AD  8B CB			mov	ECX,EBX 
 000005AF  85 C9			test	ECX,ECX
 000005B1  74 05			jz	OFFSET $L000748
 000005B3  8B 01			mov	EAX,dword ptr [ECX]
 000005B5  FF 50 10			call	dword ptr [EAX+0010h]
 000005B8			$L000748:
 000005B8  83 C3 0C			add	EBX,00000000Ch
 000005BB  3B DF			cmp	EBX,EDI
 000005BD  75 EE			jnz	OFFSET $L000747

 000005BF  83 C6 FC			add	ESI,0FFFFFFFCh
 000005C2  56				push	ESI
 000005C3  E8 00000000 E		call	 System_Memory_Destroy
 000005C8			$L000746:

				;{189}:shapes1= _shape;
 000005C8  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000005CB  8B C3			mov	EAX,EBX 
 000005CD  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 000005D3  89 01			mov	dword ptr [ECX],EAX

				;{191}:destroy []shapes2;
 000005D5  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 000005DB  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 000005DE  8B C8			mov	ECX,EAX 
 000005E0  85 C0			test	EAX,EAX
 000005E2  74 25			jz	OFFSET $L000749
 000005E4  8B F0			mov	ESI,EAX
 000005E6  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 000005E9  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 000005EC  8B DE			mov	EBX,ESI 
 000005EE			$L000750:
 000005EE  8B CB			mov	ECX,EBX 
 000005F0  85 C9			test	ECX,ECX
 000005F2  74 05			jz	OFFSET $L000751
 000005F4  8B 01			mov	EAX,dword ptr [ECX]
 000005F6  FF 50 10			call	dword ptr [EAX+0010h]
 000005F9			$L000751:
 000005F9  83 C3 0C			add	EBX,00000000Ch
 000005FC  3B DF			cmp	EBX,EDI
 000005FE  75 EE			jnz	OFFSET $L000750

 00000600  83 C6 FC			add	ESI,0FFFFFFFCh
 00000603  56				push	ESI
 00000604  E8 00000000 E		call	 System_Memory_Destroy
 00000609			$L000749:

				;{194}:local_circles;
 00000609  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 0000060F  8B F0			mov	ESI,EAX
 00000611  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00000614  8B DE			mov	EBX,ESI
 00000616			$L000752:
 00000616  8B CB			mov	ECX,EBX 
 00000618  E8 00000924			call	 UnitTesting_Circle
 0000061D  83 C3 0C			add	EBX,00000000Ch
 00000620  3B DF			cmp	EBX,EDI
 00000622  75 F2			jnz	OFFSET $L000752

				;{196}:local_circles[0].Draw();
 00000624  33 C0			xor	EAX,EAX
 00000626  6B C0 0C			imul	EAX,EAX,00000000Ch
 00000629  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00000630  8B 11			mov	EDX,dword ptr [ECX]
 00000632  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{198}:local_circles[2].Draw();
 00000635  B8 00000002			mov	EAX,000000002h
 0000063A  6B C0 0C			imul	EAX,EAX,00000000Ch
 0000063D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00000644  8B 11			mov	EDX,dword ptr [ECX]
 00000646  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{200}:for(i= 0; i < n; i++ )
 00000649  33 C0			xor	EAX,EAX
 0000064B  89 85 FFFFFF70		mov	dword ptr [EBP-0090h],EAX
 00000651  EB 0C			jmp	OFFSET $L000753
 00000653			$L000754:
 00000653  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-144]
 00000659  FF 85 FFFFFF70		inc	dword ptr [EBP-144]
 0000065F			$L000753:
 0000065F  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 00000665  50				push	EAX
 00000666  B8 0000000A			mov	EAX,00000000Ah
 0000066B  5A				pop	EDX
 0000066C  3B D0			cmp	EDX,EAX
 0000066E  0F 9C C0			setl	AL
 00000671  84 C0			test	AL,AL
 00000673  74 17			jz	OFFSET $L000755

				;{201}:local_circles[i].Draw();
 00000675  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 0000067B  6B C0 0C			imul	EAX,EAX,00000000Ch
 0000067E  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00000685  8B 11			mov	EDX,dword ptr [ECX]
 00000687  FF 52 0C			call	dword ptr [EDX+000Ch]
 0000068A  EB C7			jmp	OFFSET $L000754 
 0000068C			$L000755:

				;{203}:circlxx= new UnitTesting::Circle[5];
 0000068C  B8 00000005			mov	EAX,000000005h
 00000691  6B C0 0C			imul	EAX,00000000Ch
 00000694  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00000697  53				push	EBX
 00000698  8B D8			mov	EBX,EAX
 0000069A  E8 00000000 E		call	 System_Memory_New
 0000069F  85 C0			test	EAX,EAX
 000006A1  74 14			jz	 $L000756
 000006A3  8B F0			mov	ESI,EAX 
 000006A5  8D 3E			lea	EDI,dword ptr [ESI]
 000006A7  8B CB			mov	ECX,EBX 
 000006A9  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000006AE  F3/ AA			rep stos	byte ptr [EDI]
 000006B0  89 1E			mov	dword ptr [ESI],EBX 
 000006B2  83 C6 04			add	ESI,000000004h
 000006B5  EB 02			jmp	 $L000757
 000006B7			$L000756:
 000006B7  33 F6			xor	ESI,ESI
 000006B9			$L000757:
 000006B9  89 B5 FFFFFF6C		mov	dword ptr [EBP-0094h],ESI 
 000006BF  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 000006C2  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000006C5  8B DE			mov	EBX,ESI 
 000006C7			$L000758:
 000006C7  8B CB			mov	ECX,EBX 
 000006C9  E8 00000873			call	 UnitTesting_Circle
 000006CE  83 C3 0C			add	EBX,00000000Ch 
 000006D1  3B DF			cmp	EBX,EDI
 000006D3  75 F2			jnz	OFFSET $L000758
 000006D5  8B C6			mov	EAX,ESI 

				;{205}:circlxx[0].Draw();
 000006D7  8B 85 FFFFFF6C		mov	EAX,dword ptr [EBP-148]
 000006DD  50				push	EAX
 000006DE  33 C0			xor	EAX,EAX
 000006E0  5E				pop	ESI
 000006E1  6B C0 0C			imul	EAX,00000000Ch
 000006E4  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000006E7  8B 11			mov	EDX,dword ptr [ECX]
 000006E9  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{207}:destroy []circlxx;
 000006EC  8B 85 FFFFFF6C		mov	EAX,dword ptr [EBP-148]
 000006F2  85 C0			test	EAX,EAX
 000006F4  74 25			jz	OFFSET $L000759
 000006F6  8B F0			mov	ESI,EAX
 000006F8  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 000006FB  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 000006FE  8B DE			mov	EBX,ESI 
 00000700			$L000760:
 00000700  8B CB			mov	ECX,EBX 
 00000702  85 C9			test	ECX,ECX
 00000704  74 05			jz	OFFSET $L000761
 00000706  8B 01			mov	EAX,dword ptr [ECX]
 00000708  FF 50 10			call	dword ptr [EAX+0010h]
 0000070B			$L000761:
 0000070B  83 C3 0C			add	EBX,00000000Ch
 0000070E  3B DF			cmp	EBX,EDI
 00000710  75 EE			jnz	OFFSET $L000760

 00000712  83 C6 FC			add	ESI,0FFFFFFFCh
 00000715  56				push	ESI
 00000716  E8 00000000 E		call	 System_Memory_Destroy
 0000071B			$L000759:
				;}
 0000071B			$L000671:
 0000071B  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 00000721  8B F0			mov	ESI,EAX 
 00000723  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00000726  8B DE			mov	EBX,ESI
 00000728			$L000763:
 00000728  8B CB			mov	ECX,EBX 
 0000072A  85 C9			test	ECX,ECX
 0000072C  74 05			jz	OFFSET $L000764
 0000072E  8B 01			mov	EAX,dword ptr [ECX]
 00000730  FF 50 10			call	dword ptr [EAX+0010h]
 00000733			$L000764:
 00000733  83 C3 0C			add	EBX,00000000Ch
 00000736  3B DF			cmp	EBX,EDI
 00000738  75 EE			jnz	OFFSET $L000763

 0000073A  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000073D  E8 0000001B			call	 LastFeatures_TestProperties_node_Destructor
 00000742			$L000765:

 00000742  5F				pop	EDI
 00000743  5E				pop	ESI 
 00000744  5B				pop	EBX 
 00000745  C9				leave	
 00000746  C2 0004			retn	000000004h
 00000749			LastFeatures_TestProperties_put_Shapes ENDP

 00000749			LastFeatures_TestProperties PROC NEAR 
				;void LastFeatures::TestProperties(void);
 00000749  55				push	EBP
 0000074A  8B EC			mov	EBP,ESP
 0000074C  51				push	ECX 
 0000074D  53				push	EBX 
 0000074E  56				push	ESI 
 0000074F  57				push	EDI 
 00000750  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000753  E8 00000EFC			call	 __member_Init@LastFeatures_TestProperties

 00000758  5F				pop	EDI
 00000759  5E				pop	ESI 
 0000075A  5B				pop	EBX 
 0000075B  C9				leave	
 0000075C  C3				ret	
 0000075D			LastFeatures_TestProperties ENDP

 0000075D			LastFeatures_TestProperties_node_Destructor PROC NEAR 
				;void Destructor(void);
 0000075D  55				push	EBP
 0000075E  8B EC			mov	EBP,ESP
 00000760  51				push	ECX 
 00000761  53				push	EBX 
 00000762  56				push	ESI 
 00000763  57				push	EDI 
				;{

				;{116}:if(left != null)
 00000764  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000767  8B 01			mov	EAX,dword ptr [ECX]
 00000769  8B C8			mov	ECX,EAX 
 0000076B  51				push	ECX
 0000076C  33 C0			xor	EAX,EAX
 0000076E  5B				pop	EBX
 0000076F  3B D8			cmp	EBX,EAX
 00000771  0F 95 C0			setnz	AL
 00000774  84 C0			test	AL,AL
 00000776  74 18			jz	OFFSET $L000767

				;{117}:destroy left;
 00000778  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000077B  8B 01			mov	EAX,dword ptr [ECX]
 0000077D  8B C8			mov	ECX,EAX 
 0000077F  8B F1			mov	ESI,ECX
 00000781  85 C9			test	ECX,ECX
 00000783  74 05			jz	OFFSET $L000770
 00000785  E8 FFFFFFD3			call	 LastFeatures_TestProperties_node_Destructor
 0000078A			$L000770:
 0000078A  56				push	ESI
 0000078B  E8 00000000 E		call	 System_Memory_Destroy
 00000790			$L000767:

				;{118}:if(right != null)
 00000790  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000793  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000796  8B C8			mov	ECX,EAX 
 00000798  51				push	ECX
 00000799  33 C0			xor	EAX,EAX
 0000079B  5B				pop	EBX
 0000079C  3B D8			cmp	EBX,EAX
 0000079E  0F 95 C0			setnz	AL
 000007A1  84 C0			test	AL,AL
 000007A3  74 19			jz	OFFSET $L000771

				;{119}:destroy right;
 000007A5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007A8  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 000007AB  8B C8			mov	ECX,EAX 
 000007AD  8B F1			mov	ESI,ECX
 000007AF  85 C9			test	ECX,ECX
 000007B1  74 05			jz	OFFSET $L000774
 000007B3  E8 FFFFFFA5			call	 LastFeatures_TestProperties_node_Destructor
 000007B8			$L000774:
 000007B8  56				push	ESI
 000007B9  E8 00000000 E		call	 System_Memory_Destroy
 000007BE			$L000771:

				;{120}:if(value != null)
 000007BE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007C1  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007C4  8B C8			mov	ECX,EAX 
 000007C6  51				push	ECX
 000007C7  33 C0			xor	EAX,EAX
 000007C9  5B				pop	EBX
 000007CA  3B D8			cmp	EBX,EAX
 000007CC  0F 95 C0			setnz	AL
 000007CF  84 C0			test	AL,AL
 000007D1  74 18			jz	OFFSET $L000775

				;{121}:destroy value;
 000007D3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007D6  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007D9  8B C8			mov	ECX,EAX 
 000007DB  8B F1			mov	ESI,ECX
 000007DD  85 C9			test	ECX,ECX
 000007DF  74 04			jz	OFFSET $L000778
 000007E1  8B 01			mov	EAX,dword ptr [ECX] 
 000007E3  FF 10			call	dword ptr [EAX]
 000007E5			$L000778:
 000007E5  56				push	ESI
 000007E6  E8 00000000 E		call	 System_Memory_Destroy
 000007EB			$L000775:
				;}
 000007EB			$L000662:

 000007EB  5F				pop	EDI
 000007EC  5E				pop	ESI 
 000007ED  5B				pop	EBX 
 000007EE  C9				leave	
 000007EF  C3				ret	
 000007F0			LastFeatures_TestProperties_node_Destructor ENDP

 000007F0			LastFeatures_TestProperties_node PROC NEAR 
				;void LastFeatures::TestProperties::node(void);
 000007F0  55				push	EBP
 000007F1  8B EC			mov	EBP,ESP
 000007F3  51				push	ECX 
 000007F4  53				push	EBX 
 000007F5  56				push	ESI 
 000007F6  57				push	EDI 
 000007F7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007FA  E8 00000F5C			call	 __member_Init@LastFeatures_TestProperties_node
				;{
				;}

 000007FF  5F				pop	EDI
 00000800  5E				pop	ESI 
 00000801  5B				pop	EBX 
 00000802  C9				leave	
 00000803  C3				ret	
 00000804			LastFeatures_TestProperties_node ENDP

 00000804			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000804  55				push	EBP
 00000805  8B EC			mov	EBP,ESP
 00000807  51				push	ECX 
 00000808  53				push	EBX 
 00000809  56				push	ESI 
 0000080A  57				push	EDI 
				;{

				;{381}:return (deg * Math::pi()) / 180
 0000080B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000080E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000811  50				push	EAX
 00000812  52				push	EDX 
 00000813  E8 00000000 E		call	 Math_pi
 00000818  9B DB E2			fclex
 0000081B  50				push	EAX
 0000081C  52				push	EDX 
 0000081D  DD 04 24			fld	qword ptr [ESP]
 00000820  59				pop	ECX
 00000821  59				pop	ECX 
 00000822  DC 0C 24			fmul	qword ptr [ESP]
 00000825  DD 1C 24			fstp	qword ptr [ESP]
 00000828  B8 000000B4			mov	EAX,0000000B4h
 0000082D  9B DB E2			fclex
 00000830  50				push	EAX
 00000831  E8 00000000 E		call	 FloatingPoint_FromInt
 00000836  50				push	EAX
 00000837  52				push	EDX 
 00000838  DD 04 24			fld	qword ptr [ESP]
 0000083B  59				pop	ECX
 0000083C  59				pop	ECX 
 0000083D  DC 3C 24			fdivr	qword ptr [ESP]
 00000840  DD 1C 24			fstp	qword ptr [ESP]
 00000843  5A				pop	EDX
 00000844  58				pop	EAX 
 00000845  EB 00			jmp	OFFSET $L000460
				;}
 00000847			$L000460:

 00000847  5F				pop	EDI
 00000848  5E				pop	ESI 
 00000849  5B				pop	EBX 
 0000084A  C9				leave	
 0000084B  C2 0008			retn	000000008h
 0000084E			Math_DegreesToRadians ENDP

 0000084E			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000084E  55				push	EBP
 0000084F  8B EC			mov	EBP,ESP
 00000851  51				push	ECX 
 00000852  53				push	EBX 
 00000853  56				push	ESI 
 00000854  57				push	EDI 
				;{

				;{444}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000855  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000858  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000085B  50				push	EAX
 0000085C  52				push	EDX 
 0000085D  E8 00000000 E		call	 Math_Exp
 00000862  50				push	EAX
 00000863  52				push	EDX 
 00000864  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000867  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000086A  50				push	EAX
 0000086B  52				push	EDX 
 0000086C  DD 04 24			fld	qword ptr [ESP]
 0000086F  D9 E0			fchs
 00000871  DD 1C 24			fstp	qword ptr [ESP]
 00000874  E8 00000000 E		call	 Math_Exp
 00000879  50				push	EAX
 0000087A  52				push	EDX 
 0000087B  DD 04 24			fld	qword ptr [ESP]
 0000087E  59				pop	ECX
 0000087F  59				pop	ECX 
 00000880  DC 04 24			fadd	qword ptr [ESP]
 00000883  DD 1C 24			fstp	qword ptr [ESP]
 00000886  B8 00000002			mov	EAX,000000002h
 0000088B  9B DB E2			fclex
 0000088E  50				push	EAX
 0000088F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000894  50				push	EAX
 00000895  52				push	EDX 
 00000896  DD 04 24			fld	qword ptr [ESP]
 00000899  59				pop	ECX
 0000089A  59				pop	ECX 
 0000089B  DC 3C 24			fdivr	qword ptr [ESP]
 0000089E  DD 1C 24			fstp	qword ptr [ESP]
 000008A1  5A				pop	EDX
 000008A2  58				pop	EAX 
 000008A3  EB 00			jmp	OFFSET $L000477
				;}
 000008A5			$L000477:

 000008A5  5F				pop	EDI
 000008A6  5E				pop	ESI 
 000008A7  5B				pop	EBX 
 000008A8  C9				leave	
 000008A9  C2 0008			retn	000000008h
 000008AC			Math_Hyperbolic_HCos ENDP

 000008AC			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000008AC  55				push	EBP
 000008AD  8B EC			mov	EBP,ESP
 000008AF  51				push	ECX 
 000008B0  53				push	EBX 
 000008B1  56				push	ESI 
 000008B2  57				push	EDI 
				;{

				;{456}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000008B3  B8 00000002			mov	EAX,000000002h
 000008B8  50				push	EAX
 000008B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000008BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000008BF  50				push	EAX
 000008C0  52				push	EDX 
 000008C1  E8 00000000 E		call	 Math_Exp
 000008C6  50				push	EAX
 000008C7  52				push	EDX 
 000008C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000008CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000008CE  50				push	EAX
 000008CF  52				push	EDX 
 000008D0  DD 04 24			fld	qword ptr [ESP]
 000008D3  D9 E0			fchs
 000008D5  DD 1C 24			fstp	qword ptr [ESP]
 000008D8  E8 00000000 E		call	 Math_Exp
 000008DD  50				push	EAX
 000008DE  52				push	EDX 
 000008DF  DD 04 24			fld	qword ptr [ESP]
 000008E2  59				pop	ECX
 000008E3  59				pop	ECX 
 000008E4  DD 04 24			fld	qword ptr [ESP]
 000008E7  D8 E1			fsub	st,st(1)
 000008E9  DD 1C 24			fstp	qword ptr [ESP]
 000008EC  9B DB E2			fclex
 000008EF  DD 04 24			fld	qword ptr [ESP]
 000008F2  59				pop	ECX
 000008F3  59				pop	ECX 
 000008F4  E8 00000000 E		call	 FloatingPoint_FromInt
 000008F9  50				push	EAX
 000008FA  52				push	EDX 
 000008FB  DC 3C 24			fdivr	qword ptr [ESP]
 000008FE  DD 1C 24			fstp	qword ptr [ESP]
 00000901  5A				pop	EDX
 00000902  58				pop	EAX 
 00000903  EB 00			jmp	OFFSET $L000483
				;}
 00000905			$L000483:

 00000905  5F				pop	EDI
 00000906  5E				pop	ESI 
 00000907  5B				pop	EBX 
 00000908  C9				leave	
 00000909  C2 0008			retn	000000008h
 0000090C			Math_Hyperbolic_HCosec ENDP

 0000090C			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000090C  55				push	EBP
 0000090D  8B EC			mov	EBP,ESP
 0000090F  51				push	ECX 
 00000910  53				push	EBX 
 00000911  56				push	ESI 
 00000912  57				push	EDI 
				;{

				;{460}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000913  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000916  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000919  50				push	EAX
 0000091A  52				push	EDX 
 0000091B  E8 00000000 E		call	 Math_Exp
 00000920  50				push	EAX
 00000921  52				push	EDX 
 00000922  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000925  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000928  50				push	EAX
 00000929  52				push	EDX 
 0000092A  DD 04 24			fld	qword ptr [ESP]
 0000092D  D9 E0			fchs
 0000092F  DD 1C 24			fstp	qword ptr [ESP]
 00000932  E8 00000000 E		call	 Math_Exp
 00000937  50				push	EAX
 00000938  52				push	EDX 
 00000939  DD 04 24			fld	qword ptr [ESP]
 0000093C  59				pop	ECX
 0000093D  59				pop	ECX 
 0000093E  DC 04 24			fadd	qword ptr [ESP]
 00000941  DD 1C 24			fstp	qword ptr [ESP]
 00000944  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000947  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000094A  50				push	EAX
 0000094B  52				push	EDX 
 0000094C  E8 00000000 E		call	 Math_Exp
 00000951  50				push	EAX
 00000952  52				push	EDX 
 00000953  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000956  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000959  50				push	EAX
 0000095A  52				push	EDX 
 0000095B  DD 04 24			fld	qword ptr [ESP]
 0000095E  D9 E0			fchs
 00000960  DD 1C 24			fstp	qword ptr [ESP]
 00000963  E8 00000000 E		call	 Math_Exp
 00000968  50				push	EAX
 00000969  52				push	EDX 
 0000096A  DD 04 24			fld	qword ptr [ESP]
 0000096D  59				pop	ECX
 0000096E  59				pop	ECX 
 0000096F  DD 04 24			fld	qword ptr [ESP]
 00000972  D8 E1			fsub	st,st(1)
 00000974  DD 1C 24			fstp	qword ptr [ESP]
 00000977  9B DB E2			fclex
 0000097A  DD 04 24			fld	qword ptr [ESP]
 0000097D  59				pop	ECX
 0000097E  59				pop	ECX 
 0000097F  DC 3C 24			fdivr	qword ptr [ESP]
 00000982  DD 1C 24			fstp	qword ptr [ESP]
 00000985  5A				pop	EDX
 00000986  58				pop	EAX 
 00000987  EB 00			jmp	OFFSET $L000485
				;}
 00000989			$L000485:

 00000989  5F				pop	EDI
 0000098A  5E				pop	ESI 
 0000098B  5B				pop	EBX 
 0000098C  C9				leave	
 0000098D  C2 0008			retn	000000008h
 00000990			Math_Hyperbolic_HCotan ENDP

 00000990			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00000990  55				push	EBP
 00000991  8B EC			mov	EBP,ESP
 00000993  51				push	ECX 
 00000994  53				push	EBX 
 00000995  56				push	ESI 
 00000996  57				push	EDI 
				;{

				;{452}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00000997  B8 00000002			mov	EAX,000000002h
 0000099C  50				push	EAX
 0000099D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000009A0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000009A3  50				push	EAX
 000009A4  52				push	EDX 
 000009A5  E8 00000000 E		call	 Math_Exp
 000009AA  50				push	EAX
 000009AB  52				push	EDX 
 000009AC  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000009AF  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000009B2  50				push	EAX
 000009B3  52				push	EDX 
 000009B4  DD 04 24			fld	qword ptr [ESP]
 000009B7  D9 E0			fchs
 000009B9  DD 1C 24			fstp	qword ptr [ESP]
 000009BC  E8 00000000 E		call	 Math_Exp
 000009C1  50				push	EAX
 000009C2  52				push	EDX 
 000009C3  DD 04 24			fld	qword ptr [ESP]
 000009C6  59				pop	ECX
 000009C7  59				pop	ECX 
 000009C8  DC 04 24			fadd	qword ptr [ESP]
 000009CB  DD 1C 24			fstp	qword ptr [ESP]
 000009CE  9B DB E2			fclex
 000009D1  DD 04 24			fld	qword ptr [ESP]
 000009D4  59				pop	ECX
 000009D5  59				pop	ECX 
 000009D6  E8 00000000 E		call	 FloatingPoint_FromInt
 000009DB  50				push	EAX
 000009DC  52				push	EDX 
 000009DD  DC 3C 24			fdivr	qword ptr [ESP]
 000009E0  DD 1C 24			fstp	qword ptr [ESP]
 000009E3  5A				pop	EDX
 000009E4  58				pop	EAX 
 000009E5  EB 00			jmp	OFFSET $L000481
				;}
 000009E7			$L000481:

 000009E7  5F				pop	EDI
 000009E8  5E				pop	ESI 
 000009E9  5B				pop	EBX 
 000009EA  C9				leave	
 000009EB  C2 0008			retn	000000008h
 000009EE			Math_Hyperbolic_HSec ENDP

 000009EE			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000009EE  55				push	EBP
 000009EF  8B EC			mov	EBP,ESP
 000009F1  51				push	ECX 
 000009F2  53				push	EBX 
 000009F3  56				push	ESI 
 000009F4  57				push	EDI 
				;{

				;{440}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000009F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000009F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000009FB  50				push	EAX
 000009FC  52				push	EDX 
 000009FD  E8 00000000 E		call	 Math_Exp
 00000A02  50				push	EAX
 00000A03  52				push	EDX 
 00000A04  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000A07  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000A0A  50				push	EAX
 00000A0B  52				push	EDX 
 00000A0C  DD 04 24			fld	qword ptr [ESP]
 00000A0F  D9 E0			fchs
 00000A11  DD 1C 24			fstp	qword ptr [ESP]
 00000A14  E8 00000000 E		call	 Math_Exp
 00000A19  50				push	EAX
 00000A1A  52				push	EDX 
 00000A1B  DD 04 24			fld	qword ptr [ESP]
 00000A1E  59				pop	ECX
 00000A1F  59				pop	ECX 
 00000A20  DD 04 24			fld	qword ptr [ESP]
 00000A23  D8 E1			fsub	st,st(1)
 00000A25  DD 1C 24			fstp	qword ptr [ESP]
 00000A28  B8 00000002			mov	EAX,000000002h
 00000A2D  9B DB E2			fclex
 00000A30  50				push	EAX
 00000A31  E8 00000000 E		call	 FloatingPoint_FromInt
 00000A36  50				push	EAX
 00000A37  52				push	EDX 
 00000A38  DD 04 24			fld	qword ptr [ESP]
 00000A3B  59				pop	ECX
 00000A3C  59				pop	ECX 
 00000A3D  DC 3C 24			fdivr	qword ptr [ESP]
 00000A40  DD 1C 24			fstp	qword ptr [ESP]
 00000A43  5A				pop	EDX
 00000A44  58				pop	EAX 
 00000A45  EB 00			jmp	OFFSET $L000474
				;}
 00000A47			$L000474:

 00000A47  5F				pop	EDI
 00000A48  5E				pop	ESI 
 00000A49  5B				pop	EBX 
 00000A4A  C9				leave	
 00000A4B  C2 0008			retn	000000008h
 00000A4E			Math_Hyperbolic_HSin ENDP

 00000A4E			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 00000A4E  55				push	EBP
 00000A4F  8B EC			mov	EBP,ESP
 00000A51  51				push	ECX 
 00000A52  53				push	EBX 
 00000A53  56				push	ESI 
 00000A54  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 00000A55  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000A58  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000A5B  50				push	EAX
 00000A5C  52				push	EDX 
 00000A5D  E8 00000000 E		call	 Math_Exp
 00000A62  50				push	EAX
 00000A63  52				push	EDX 
 00000A64  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000A67  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000A6A  50				push	EAX
 00000A6B  52				push	EDX 
 00000A6C  DD 04 24			fld	qword ptr [ESP]
 00000A6F  D9 E0			fchs
 00000A71  DD 1C 24			fstp	qword ptr [ESP]
 00000A74  E8 00000000 E		call	 Math_Exp
 00000A79  50				push	EAX
 00000A7A  52				push	EDX 
 00000A7B  DD 04 24			fld	qword ptr [ESP]
 00000A7E  59				pop	ECX
 00000A7F  59				pop	ECX 
 00000A80  DD 04 24			fld	qword ptr [ESP]
 00000A83  D8 E1			fsub	st,st(1)
 00000A85  DD 1C 24			fstp	qword ptr [ESP]
 00000A88  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000A8B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000A8E  50				push	EAX
 00000A8F  52				push	EDX 
 00000A90  E8 00000000 E		call	 Math_Exp
 00000A95  50				push	EAX
 00000A96  52				push	EDX 
 00000A97  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000A9A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000A9D  50				push	EAX
 00000A9E  52				push	EDX 
 00000A9F  DD 04 24			fld	qword ptr [ESP]
 00000AA2  D9 E0			fchs
 00000AA4  DD 1C 24			fstp	qword ptr [ESP]
 00000AA7  E8 00000000 E		call	 Math_Exp
 00000AAC  50				push	EAX
 00000AAD  52				push	EDX 
 00000AAE  DD 04 24			fld	qword ptr [ESP]
 00000AB1  59				pop	ECX
 00000AB2  59				pop	ECX 
 00000AB3  DC 04 24			fadd	qword ptr [ESP]
 00000AB6  DD 1C 24			fstp	qword ptr [ESP]
 00000AB9  9B DB E2			fclex
 00000ABC  DD 04 24			fld	qword ptr [ESP]
 00000ABF  59				pop	ECX
 00000AC0  59				pop	ECX 
 00000AC1  DC 3C 24			fdivr	qword ptr [ESP]
 00000AC4  DD 1C 24			fstp	qword ptr [ESP]
 00000AC7  5A				pop	EDX
 00000AC8  58				pop	EAX 
 00000AC9  EB 00			jmp	OFFSET $L000479
				;}
 00000ACB			$L000479:

 00000ACB  5F				pop	EDI
 00000ACC  5E				pop	ESI 
 00000ACD  5B				pop	EBX 
 00000ACE  C9				leave	
 00000ACF  C2 0008			retn	000000008h
 00000AD2			Math_Hyperbolic_HTan ENDP

 00000AD2			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 00000AD2  55				push	EBP
 00000AD3  8B EC			mov	EBP,ESP
 00000AD5  51				push	ECX 
 00000AD6  53				push	EBX 
 00000AD7  56				push	ESI 
 00000AD8  57				push	EDI 
				;{

				;{471}:return Math::log10(X + Math::Sqrt(X * X - 1))
 00000AD9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000ADC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000ADF  50				push	EAX
 00000AE0  52				push	EDX 
 00000AE1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000AE4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000AE7  50				push	EAX
 00000AE8  52				push	EDX 
 00000AE9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000AEC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000AEF  9B DB E2			fclex
 00000AF2  50				push	EAX
 00000AF3  52				push	EDX 
 00000AF4  DD 04 24			fld	qword ptr [ESP]
 00000AF7  59				pop	ECX
 00000AF8  59				pop	ECX 
 00000AF9  DC 0C 24			fmul	qword ptr [ESP]
 00000AFC  DD 1C 24			fstp	qword ptr [ESP]
 00000AFF  B8 00000001			mov	EAX,000000001h
 00000B04  50				push	EAX
 00000B05  E8 00000000 E		call	 FloatingPoint_FromInt
 00000B0A  50				push	EAX
 00000B0B  52				push	EDX 
 00000B0C  DD 04 24			fld	qword ptr [ESP]
 00000B0F  59				pop	ECX
 00000B10  59				pop	ECX 
 00000B11  DD 04 24			fld	qword ptr [ESP]
 00000B14  D8 E1			fsub	st,st(1)
 00000B16  DD 1C 24			fstp	qword ptr [ESP]
 00000B19  E8 00000000 E		call	 Math_Sqrt
 00000B1E  50				push	EAX
 00000B1F  52				push	EDX 
 00000B20  DD 04 24			fld	qword ptr [ESP]
 00000B23  59				pop	ECX
 00000B24  59				pop	ECX 
 00000B25  DC 04 24			fadd	qword ptr [ESP]
 00000B28  DD 1C 24			fstp	qword ptr [ESP]
 00000B2B  E8 00000000 E		call	 Math_log10
 00000B30  EB 00			jmp	OFFSET $L000491
				;}
 00000B32			$L000491:

 00000B32  5F				pop	EDI
 00000B33  5E				pop	ESI 
 00000B34  5B				pop	EBX 
 00000B35  C9				leave	
 00000B36  C2 0008			retn	000000008h
 00000B39			Math_Hyperbolic_Inverse_HArccos ENDP

 00000B39			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000B39  55				push	EBP
 00000B3A  8B EC			mov	EBP,ESP
 00000B3C  51				push	ECX 
 00000B3D  53				push	EBX 
 00000B3E  56				push	ESI 
 00000B3F  57				push	EDI 
				;{

				;{483}:return Math::log10((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 00000B40  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000B43  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000B46  50				push	EAX
 00000B47  52				push	EDX 
 00000B48  E8 00000000 E		call	 Math_Sign
 00000B4D  50				push	EAX
 00000B4E  52				push	EDX 
 00000B4F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000B52  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000B55  50				push	EAX
 00000B56  52				push	EDX 
 00000B57  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000B5A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000B5D  9B DB E2			fclex
 00000B60  50				push	EAX
 00000B61  52				push	EDX 
 00000B62  DD 04 24			fld	qword ptr [ESP]
 00000B65  59				pop	ECX
 00000B66  59				pop	ECX 
 00000B67  DC 0C 24			fmul	qword ptr [ESP]
 00000B6A  DD 1C 24			fstp	qword ptr [ESP]
 00000B6D  B8 00000001			mov	EAX,000000001h
 00000B72  50				push	EAX
 00000B73  E8 00000000 E		call	 FloatingPoint_FromInt
 00000B78  50				push	EAX
 00000B79  52				push	EDX 
 00000B7A  DD 04 24			fld	qword ptr [ESP]
 00000B7D  59				pop	ECX
 00000B7E  59				pop	ECX 
 00000B7F  DC 04 24			fadd	qword ptr [ESP]
 00000B82  DD 1C 24			fstp	qword ptr [ESP]
 00000B85  E8 00000000 E		call	 Math_Sqrt
 00000B8A  9B DB E2			fclex
 00000B8D  50				push	EAX
 00000B8E  52				push	EDX 
 00000B8F  DD 04 24			fld	qword ptr [ESP]
 00000B92  59				pop	ECX
 00000B93  59				pop	ECX 
 00000B94  DC 0C 24			fmul	qword ptr [ESP]
 00000B97  DD 1C 24			fstp	qword ptr [ESP]
 00000B9A  B8 00000001			mov	EAX,000000001h
 00000B9F  50				push	EAX
 00000BA0  E8 00000000 E		call	 FloatingPoint_FromInt
 00000BA5  50				push	EAX
 00000BA6  52				push	EDX 
 00000BA7  DD 04 24			fld	qword ptr [ESP]
 00000BAA  59				pop	ECX
 00000BAB  59				pop	ECX 
 00000BAC  DC 04 24			fadd	qword ptr [ESP]
 00000BAF  DD 1C 24			fstp	qword ptr [ESP]
 00000BB2  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000BB5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000BB8  9B DB E2			fclex
 00000BBB  50				push	EAX
 00000BBC  52				push	EDX 
 00000BBD  DD 04 24			fld	qword ptr [ESP]
 00000BC0  59				pop	ECX
 00000BC1  59				pop	ECX 
 00000BC2  DC 3C 24			fdivr	qword ptr [ESP]
 00000BC5  DD 1C 24			fstp	qword ptr [ESP]
 00000BC8  E8 00000000 E		call	 Math_log10
 00000BCD  EB 00			jmp	OFFSET $L000497
				;}
 00000BCF			$L000497:

 00000BCF  5F				pop	EDI
 00000BD0  5E				pop	ESI 
 00000BD1  5B				pop	EBX 
 00000BD2  C9				leave	
 00000BD3  C2 0008			retn	000000008h
 00000BD6			Math_Hyperbolic_Inverse_HArccosec ENDP

 00000BD6			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 00000BD6  55				push	EBP
 00000BD7  8B EC			mov	EBP,ESP
 00000BD9  51				push	ECX 
 00000BDA  53				push	EBX 
 00000BDB  56				push	ESI 
 00000BDC  57				push	EDI 
				;{

				;{487}:return Math::log10((X + 1) / (X - 1)) / 2
 00000BDD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000BE0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000BE3  50				push	EAX
 00000BE4  52				push	EDX 
 00000BE5  B8 00000001			mov	EAX,000000001h
 00000BEA  50				push	EAX
 00000BEB  E8 00000000 E		call	 FloatingPoint_FromInt
 00000BF0  50				push	EAX
 00000BF1  52				push	EDX 
 00000BF2  DD 04 24			fld	qword ptr [ESP]
 00000BF5  59				pop	ECX
 00000BF6  59				pop	ECX 
 00000BF7  DC 04 24			fadd	qword ptr [ESP]
 00000BFA  DD 1C 24			fstp	qword ptr [ESP]
 00000BFD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000C00  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000C03  50				push	EAX
 00000C04  52				push	EDX 
 00000C05  B8 00000001			mov	EAX,000000001h
 00000C0A  50				push	EAX
 00000C0B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000C10  50				push	EAX
 00000C11  52				push	EDX 
 00000C12  DD 04 24			fld	qword ptr [ESP]
 00000C15  59				pop	ECX
 00000C16  59				pop	ECX 
 00000C17  DD 04 24			fld	qword ptr [ESP]
 00000C1A  D8 E1			fsub	st,st(1)
 00000C1C  DD 1C 24			fstp	qword ptr [ESP]
 00000C1F  9B DB E2			fclex
 00000C22  DD 04 24			fld	qword ptr [ESP]
 00000C25  59				pop	ECX
 00000C26  59				pop	ECX 
 00000C27  DC 3C 24			fdivr	qword ptr [ESP]
 00000C2A  DD 1C 24			fstp	qword ptr [ESP]
 00000C2D  E8 00000000 E		call	 Math_log10
 00000C32  50				push	EAX
 00000C33  52				push	EDX 
 00000C34  B8 00000002			mov	EAX,000000002h
 00000C39  9B DB E2			fclex
 00000C3C  50				push	EAX
 00000C3D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000C42  50				push	EAX
 00000C43  52				push	EDX 
 00000C44  DD 04 24			fld	qword ptr [ESP]
 00000C47  59				pop	ECX
 00000C48  59				pop	ECX 
 00000C49  DC 3C 24			fdivr	qword ptr [ESP]
 00000C4C  DD 1C 24			fstp	qword ptr [ESP]
 00000C4F  5A				pop	EDX
 00000C50  58				pop	EAX 
 00000C51  EB 00			jmp	OFFSET $L000499
				;}
 00000C53			$L000499:

 00000C53  5F				pop	EDI
 00000C54  5E				pop	ESI 
 00000C55  5B				pop	EBX 
 00000C56  C9				leave	
 00000C57  C2 0008			retn	000000008h
 00000C5A			Math_Hyperbolic_Inverse_HArccotan ENDP

 00000C5A			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 00000C5A  55				push	EBP
 00000C5B  8B EC			mov	EBP,ESP
 00000C5D  51				push	ECX 
 00000C5E  53				push	EBX 
 00000C5F  56				push	ESI 
 00000C60  57				push	EDI 
				;{

				;{479}:return Math::log10((Math::Sqrt(-X * X + 1) + 1) / X)
 00000C61  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000C64  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000C67  50				push	EAX
 00000C68  52				push	EDX 
 00000C69  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000C6C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000C6F  9B DB E2			fclex
 00000C72  50				push	EAX
 00000C73  52				push	EDX 
 00000C74  DD 04 24			fld	qword ptr [ESP]
 00000C77  59				pop	ECX
 00000C78  59				pop	ECX 
 00000C79  DC 0C 24			fmul	qword ptr [ESP]
 00000C7C  DD 1C 24			fstp	qword ptr [ESP]
 00000C7F  DD 04 24			fld	qword ptr [ESP]
 00000C82  D9 E0			fchs
 00000C84  DD 1C 24			fstp	qword ptr [ESP]
 00000C87  B8 00000001			mov	EAX,000000001h
 00000C8C  50				push	EAX
 00000C8D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000C92  50				push	EAX
 00000C93  52				push	EDX 
 00000C94  DD 04 24			fld	qword ptr [ESP]
 00000C97  59				pop	ECX
 00000C98  59				pop	ECX 
 00000C99  DC 04 24			fadd	qword ptr [ESP]
 00000C9C  DD 1C 24			fstp	qword ptr [ESP]
 00000C9F  E8 00000000 E		call	 Math_Sqrt
 00000CA4  50				push	EAX
 00000CA5  52				push	EDX 
 00000CA6  B8 00000001			mov	EAX,000000001h
 00000CAB  50				push	EAX
 00000CAC  E8 00000000 E		call	 FloatingPoint_FromInt
 00000CB1  50				push	EAX
 00000CB2  52				push	EDX 
 00000CB3  DD 04 24			fld	qword ptr [ESP]
 00000CB6  59				pop	ECX
 00000CB7  59				pop	ECX 
 00000CB8  DC 04 24			fadd	qword ptr [ESP]
 00000CBB  DD 1C 24			fstp	qword ptr [ESP]
 00000CBE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000CC1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000CC4  9B DB E2			fclex
 00000CC7  50				push	EAX
 00000CC8  52				push	EDX 
 00000CC9  DD 04 24			fld	qword ptr [ESP]
 00000CCC  59				pop	ECX
 00000CCD  59				pop	ECX 
 00000CCE  DC 3C 24			fdivr	qword ptr [ESP]
 00000CD1  DD 1C 24			fstp	qword ptr [ESP]
 00000CD4  E8 00000000 E		call	 Math_log10
 00000CD9  EB 00			jmp	OFFSET $L000495
				;}
 00000CDB			$L000495:

 00000CDB  5F				pop	EDI
 00000CDC  5E				pop	ESI 
 00000CDD  5B				pop	EBX 
 00000CDE  C9				leave	
 00000CDF  C2 0008			retn	000000008h
 00000CE2			Math_Hyperbolic_Inverse_HArcsec ENDP

 00000CE2			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 00000CE2  55				push	EBP
 00000CE3  8B EC			mov	EBP,ESP
 00000CE5  51				push	ECX 
 00000CE6  53				push	EBX 
 00000CE7  56				push	ESI 
 00000CE8  57				push	EDI 
				;{

				;{467}:return Math::log10(X + Math::Sqrt(X * X + 1))
 00000CE9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000CEC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000CEF  50				push	EAX
 00000CF0  52				push	EDX 
 00000CF1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000CF4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000CF7  50				push	EAX
 00000CF8  52				push	EDX 
 00000CF9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000CFC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000CFF  9B DB E2			fclex
 00000D02  50				push	EAX
 00000D03  52				push	EDX 
 00000D04  DD 04 24			fld	qword ptr [ESP]
 00000D07  59				pop	ECX
 00000D08  59				pop	ECX 
 00000D09  DC 0C 24			fmul	qword ptr [ESP]
 00000D0C  DD 1C 24			fstp	qword ptr [ESP]
 00000D0F  B8 00000001			mov	EAX,000000001h
 00000D14  50				push	EAX
 00000D15  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D1A  50				push	EAX
 00000D1B  52				push	EDX 
 00000D1C  DD 04 24			fld	qword ptr [ESP]
 00000D1F  59				pop	ECX
 00000D20  59				pop	ECX 
 00000D21  DC 04 24			fadd	qword ptr [ESP]
 00000D24  DD 1C 24			fstp	qword ptr [ESP]
 00000D27  E8 00000000 E		call	 Math_Sqrt
 00000D2C  50				push	EAX
 00000D2D  52				push	EDX 
 00000D2E  DD 04 24			fld	qword ptr [ESP]
 00000D31  59				pop	ECX
 00000D32  59				pop	ECX 
 00000D33  DC 04 24			fadd	qword ptr [ESP]
 00000D36  DD 1C 24			fstp	qword ptr [ESP]
 00000D39  E8 00000000 E		call	 Math_log10
 00000D3E  EB 00			jmp	OFFSET $L000488
				;}
 00000D40			$L000488:

 00000D40  5F				pop	EDI
 00000D41  5E				pop	ESI 
 00000D42  5B				pop	EBX 
 00000D43  C9				leave	
 00000D44  C2 0008			retn	000000008h
 00000D47			Math_Hyperbolic_Inverse_HArcsin ENDP

 00000D47			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 00000D47  55				push	EBP
 00000D48  8B EC			mov	EBP,ESP
 00000D4A  51				push	ECX 
 00000D4B  53				push	EBX 
 00000D4C  56				push	ESI 
 00000D4D  57				push	EDI 
				;{

				;{475}:return Math::log10((1 + X) / (1 - X)) / 2
 00000D4E  B8 00000001			mov	EAX,000000001h
 00000D53  50				push	EAX
 00000D54  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000D57  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000D5A  50				push	EAX
 00000D5B  52				push	EDX 
 00000D5C  DD 04 24			fld	qword ptr [ESP]
 00000D5F  59				pop	ECX
 00000D60  59				pop	ECX 
 00000D61  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D66  50				push	EAX
 00000D67  52				push	EDX 
 00000D68  DC 04 24			fadd	qword ptr [ESP]
 00000D6B  DD 1C 24			fstp	qword ptr [ESP]
 00000D6E  B8 00000001			mov	EAX,000000001h
 00000D73  50				push	EAX
 00000D74  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000D77  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000D7A  50				push	EAX
 00000D7B  52				push	EDX 
 00000D7C  DD 04 24			fld	qword ptr [ESP]
 00000D7F  59				pop	ECX
 00000D80  59				pop	ECX 
 00000D81  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D86  50				push	EAX
 00000D87  52				push	EDX 
 00000D88  DD 04 24			fld	qword ptr [ESP]
 00000D8B  D8 E1			fsub	st,st(1)
 00000D8D  DD 1C 24			fstp	qword ptr [ESP]
 00000D90  9B DB E2			fclex
 00000D93  DD 04 24			fld	qword ptr [ESP]
 00000D96  59				pop	ECX
 00000D97  59				pop	ECX 
 00000D98  DC 3C 24			fdivr	qword ptr [ESP]
 00000D9B  DD 1C 24			fstp	qword ptr [ESP]
 00000D9E  E8 00000000 E		call	 Math_log10
 00000DA3  50				push	EAX
 00000DA4  52				push	EDX 
 00000DA5  B8 00000002			mov	EAX,000000002h
 00000DAA  9B DB E2			fclex
 00000DAD  50				push	EAX
 00000DAE  E8 00000000 E		call	 FloatingPoint_FromInt
 00000DB3  50				push	EAX
 00000DB4  52				push	EDX 
 00000DB5  DD 04 24			fld	qword ptr [ESP]
 00000DB8  59				pop	ECX
 00000DB9  59				pop	ECX 
 00000DBA  DC 3C 24			fdivr	qword ptr [ESP]
 00000DBD  DD 1C 24			fstp	qword ptr [ESP]
 00000DC0  5A				pop	EDX
 00000DC1  58				pop	EAX 
 00000DC2  EB 00			jmp	OFFSET $L000493
				;}
 00000DC4			$L000493:

 00000DC4  5F				pop	EDI
 00000DC5  5E				pop	ESI 
 00000DC6  5B				pop	EBX 
 00000DC7  C9				leave	
 00000DC8  C2 0008			retn	000000008h
 00000DCB			Math_Hyperbolic_Inverse_HArctan ENDP

 00000DCB			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 00000DCB  55				push	EBP
 00000DCC  8B EC			mov	EBP,ESP
 00000DCE  51				push	ECX 
 00000DCF  53				push	EBX 
 00000DD0  56				push	ESI 
 00000DD1  57				push	EDI 
				;{

				;{376}:return (180 / Math::pi()) * rad
 00000DD2  B8 000000B4			mov	EAX,0000000B4h
 00000DD7  50				push	EAX
 00000DD8  E8 00000000 E		call	 Math_pi
 00000DDD  9B DB E2			fclex
 00000DE0  50				push	EAX
 00000DE1  52				push	EDX 
 00000DE2  DD 04 24			fld	qword ptr [ESP]
 00000DE5  59				pop	ECX
 00000DE6  59				pop	ECX 
 00000DE7  E8 00000000 E		call	 FloatingPoint_FromInt
 00000DEC  50				push	EAX
 00000DED  52				push	EDX 
 00000DEE  DC 3C 24			fdivr	qword ptr [ESP]
 00000DF1  DD 1C 24			fstp	qword ptr [ESP]
 00000DF4  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000DF7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000DFA  9B DB E2			fclex
 00000DFD  50				push	EAX
 00000DFE  52				push	EDX 
 00000DFF  DD 04 24			fld	qword ptr [ESP]
 00000E02  59				pop	ECX
 00000E03  59				pop	ECX 
 00000E04  DC 0C 24			fmul	qword ptr [ESP]
 00000E07  DD 1C 24			fstp	qword ptr [ESP]
 00000E0A  5A				pop	EDX
 00000E0B  58				pop	EAX 
 00000E0C  EB 00			jmp	OFFSET $L000457
				;}
 00000E0E			$L000457:

 00000E0E  5F				pop	EDI
 00000E0F  5E				pop	ESI 
 00000E10  5B				pop	EBX 
 00000E11  C9				leave	
 00000E12  C2 0008			retn	000000008h
 00000E15			Math_RadiansToDegrees ENDP

 00000E15			UnitTesting_Circle_Circumference PROC NEAR 
				;double Circumference(void);
 00000E15  55				push	EBP
 00000E16  8B EC			mov	EBP,ESP
 00000E18  51				push	ECX 
 00000E19  53				push	EBX 
 00000E1A  56				push	ESI 
 00000E1B  57				push	EDI 
				;{

				;{78}:return Math::pi() * Radius
 00000E1C  E8 00000000 E		call	 Math_pi
 00000E21  50				push	EAX
 00000E22  52				push	EDX 
 00000E23  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E26  E8 000000CB			call	 UnitTesting_Circle_get_Radius
 00000E2B  9B DB E2			fclex
 00000E2E  50				push	EAX
 00000E2F  52				push	EDX 
 00000E30  DD 04 24			fld	qword ptr [ESP]
 00000E33  59				pop	ECX
 00000E34  59				pop	ECX 
 00000E35  DC 0C 24			fmul	qword ptr [ESP]
 00000E38  DD 1C 24			fstp	qword ptr [ESP]
 00000E3B  5A				pop	EDX
 00000E3C  58				pop	EAX 
 00000E3D  EB 00			jmp	OFFSET $L000538
				;}
 00000E3F			$L000538:

 00000E3F  5F				pop	EDI
 00000E40  5E				pop	ESI 
 00000E41  5B				pop	EBX 
 00000E42  C9				leave	
 00000E43  C3				ret	
 00000E44			UnitTesting_Circle_Circumference ENDP

 00000E44			UnitTesting_Circle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00000E44  55				push	EBP
 00000E45  8B EC			mov	EBP,ESP
 00000E47  51				push	ECX 
 00000E48  53				push	EBX 
 00000E49  56				push	ESI 
 00000E4A  57				push	EDI 
				;{

				;{97}:return 2 * Circumference()
 00000E4B  B8 00000002			mov	EAX,000000002h
 00000E50  50				push	EAX
 00000E51  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E54  E8 FFFFFFBC			call	 UnitTesting_Circle_Circumference
 00000E59  9B DB E2			fclex
 00000E5C  50				push	EAX
 00000E5D  52				push	EDX 
 00000E5E  DD 04 24			fld	qword ptr [ESP]
 00000E61  59				pop	ECX
 00000E62  59				pop	ECX 
 00000E63  E8 00000000 E		call	 FloatingPoint_FromInt
 00000E68  50				push	EAX
 00000E69  52				push	EDX 
 00000E6A  DC 0C 24			fmul	qword ptr [ESP]
 00000E6D  DD 1C 24			fstp	qword ptr [ESP]
 00000E70  5A				pop	EDX
 00000E71  58				pop	EAX 
 00000E72  EB 00			jmp	OFFSET $L000544
				;}
 00000E74			$L000544:

 00000E74  5F				pop	EDI
 00000E75  5E				pop	ESI 
 00000E76  5B				pop	EBX 
 00000E77  C9				leave	
 00000E78  C3				ret	
 00000E79			UnitTesting_Circle_ComputeArea ENDP

 00000E79			UnitTesting_Circle_Destructor PROC NEAR 
				;void Destructor(void);
 00000E79  55				push	EBP
 00000E7A  8B EC			mov	EBP,ESP
 00000E7C  51				push	ECX 
 00000E7D  53				push	EBX 
 00000E7E  56				push	ESI 
 00000E7F  57				push	EDI 
				;{

				;{102}:System::Debug::OutputString("destroying a Circle object...");
 00000E80  8D 05 00000201 R		lea	EAX,OFFSET $S000546
 00000E86  50				push	EAX
 00000E87  E8 00000000 E		call	 System_Debug_OutputString

				;{103}:Console::WriteLn("destroying a Circle object...");
 00000E8C  8D 05 00000201 R		lea	EAX,OFFSET $S000546
 00000E92  6A 00			push	000000000h
 00000E94  50				push	EAX 
 00000E95  E8 00000000 E		call	 Console_WriteString
 00000E9A  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000E9F			$L000545:

 00000E9F  5F				pop	EDI
 00000EA0  5E				pop	ESI 
 00000EA1  5B				pop	EBX 
 00000EA2  C9				leave	
 00000EA3  C3				ret	
 00000EA4			UnitTesting_Circle_Destructor ENDP

 00000EA4			UnitTesting_Circle_Draw PROC NEAR 
				;void Draw(void);
 00000EA4  55				push	EBP
 00000EA5  8B EC			mov	EBP,ESP
 00000EA7  51				push	ECX 
 00000EA8  53				push	EBX 
 00000EA9  56				push	ESI 
 00000EAA  57				push	EDI 
				;{

				;{92}:Console::WriteLn("Drawing a Circle!");
 00000EAB  8D 05 0000015E R		lea	EAX,OFFSET $S000543
 00000EB1  6A 00			push	000000000h
 00000EB3  50				push	EAX 
 00000EB4  E8 00000000 E		call	 Console_WriteString
 00000EB9  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000EBE			$L000542:

 00000EBE  5F				pop	EDI
 00000EBF  5E				pop	ESI 
 00000EC0  5B				pop	EBX 
 00000EC1  C9				leave	
 00000EC2  C3				ret	
 00000EC3			UnitTesting_Circle_Draw ENDP

 00000EC3			UnitTesting_Circle_DrawSphere PROC NEAR 
				;void DrawSphere(void);
 00000EC3  55				push	EBP
 00000EC4  8B EC			mov	EBP,ESP
 00000EC6  51				push	ECX 
 00000EC7  53				push	EBX 
 00000EC8  56				push	ESI 
 00000EC9  57				push	EDI 
				;{

				;{108}:Console::WriteLn("Drawing a Sphere!");
 00000ECA  8D 05 00000193 R		lea	EAX,OFFSET $S000548
 00000ED0  6A 00			push	000000000h
 00000ED2  50				push	EAX 
 00000ED3  E8 00000000 E		call	 Console_WriteString
 00000ED8  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000EDD			$L000547:

 00000EDD  5F				pop	EDI
 00000EDE  5E				pop	ESI 
 00000EDF  5B				pop	EBX 
 00000EE0  C9				leave	
 00000EE1  C3				ret	
 00000EE2			UnitTesting_Circle_DrawSphere ENDP

 00000EE2			UnitTesting_Circle_Name PROC NEAR 
				;string Name(void);
 00000EE2  55				push	EBP
 00000EE3  8B EC			mov	EBP,ESP
 00000EE5  51				push	ECX 
 00000EE6  53				push	EBX 
 00000EE7  56				push	ESI 
 00000EE8  57				push	EDI 
				;{

				;{87}:return "Circle"
 00000EE9  8D 05 000000B6 R		lea	EAX,OFFSET $S000541
 00000EEF  EB 00			jmp	OFFSET $L000540
				;}
 00000EF1			$L000540:

 00000EF1  5F				pop	EDI
 00000EF2  5E				pop	ESI 
 00000EF3  5B				pop	EBX 
 00000EF4  C9				leave	
 00000EF5  C3				ret	
 00000EF6			UnitTesting_Circle_Name ENDP

 00000EF6			UnitTesting_Circle_get_Radius PROC NEAR 
				;double get::Radius(void);
 00000EF6  55				push	EBP
 00000EF7  8B EC			mov	EBP,ESP
 00000EF9  51				push	ECX 
 00000EFA  53				push	EBX 
 00000EFB  56				push	ESI 
 00000EFC  57				push	EDI 
				;{

				;{68}:return radius
 00000EFD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F00  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F03  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F06  EB 00			jmp	OFFSET $L000535
				;}
 00000F08			$L000535:

 00000F08  5F				pop	EDI
 00000F09  5E				pop	ESI 
 00000F0A  5B				pop	EBX 
 00000F0B  C9				leave	
 00000F0C  C3				ret	
 00000F0D			UnitTesting_Circle_get_Radius ENDP

 00000F0D			UnitTesting_Circle_put_Radius PROC NEAR 
				;void put::Radius(double value);
 00000F0D  55				push	EBP
 00000F0E  8B EC			mov	EBP,ESP
 00000F10  51				push	ECX 
 00000F11  53				push	EBX 
 00000F12  56				push	ESI 
 00000F13  57				push	EDI 
				;{

				;{73}:radius= value;
 00000F14  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000F17  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000F1A  50				push	EAX
 00000F1B  52				push	EDX 
 00000F1C  DD 04 24			fld	qword ptr [ESP]
 00000F1F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F22  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000F25			$L000536:
 00000F25  5A				pop	EDX
 00000F26  58				pop	EAX 

 00000F27  5F				pop	EDI
 00000F28  5E				pop	ESI 
 00000F29  5B				pop	EBX 
 00000F2A  C9				leave	
 00000F2B  C2 0008			retn	000000008h
 00000F2E			UnitTesting_Circle_put_Radius ENDP

 00000F2E			UnitTesting_Circle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00000F2E  55				push	EBP
 00000F2F  8B EC			mov	EBP,ESP
 00000F31  51				push	ECX 
 00000F32  53				push	EBX 
 00000F33  56				push	ESI 
 00000F34  57				push	EDI 
				;{

				;{83}:return UnitTesting::stCircle
 00000F35  B8 00000001			mov	EAX,000000001h
 00000F3A  EB 00			jmp	OFFSET $L000539
				;}
 00000F3C			$L000539:

 00000F3C  5F				pop	EDI
 00000F3D  5E				pop	ESI 
 00000F3E  5B				pop	EBX 
 00000F3F  C9				leave	
 00000F40  C3				ret	
 00000F41			UnitTesting_Circle_Type ENDP

 00000F41			UnitTesting_Circle PROC NEAR 
				;void UnitTesting::Circle(void);
 00000F41  55				push	EBP
 00000F42  8B EC			mov	EBP,ESP
 00000F44  51				push	ECX 
 00000F45  53				push	EBX 
 00000F46  56				push	ESI 
 00000F47  57				push	EDI 
 00000F48  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F4B  E8 00000016			call	 UnitTesting_Shape ;base constructor call
 00000F50  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000F53  C7 01 00000028 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Circle 
 00000F59  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000F5C  E8 00000820			call	 __member_Init@UnitTesting_Circle 
				;{
				;}

 00000F61  5F				pop	EDI
 00000F62  5E				pop	ESI 
 00000F63  5B				pop	EBX 
 00000F64  C9				leave	
 00000F65  C3				ret	
 00000F66			UnitTesting_Circle ENDP

 00000F66			UnitTesting_Shape PROC NEAR 
				;void UnitTesting::Shape(void);
 00000F66  55				push	EBP
 00000F67  8B EC			mov	EBP,ESP
 00000F69  51				push	ECX 
 00000F6A  53				push	EBX 
 00000F6B  56				push	ESI 
 00000F6C  57				push	EDI 
 00000F6D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F70  C7 01 00000040 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Shape 

 00000F76  5F				pop	EDI
 00000F77  5E				pop	ESI 
 00000F78  5B				pop	EBX 
 00000F79  C9				leave	
 00000F7A  C3				ret	
 00000F7B			UnitTesting_Shape ENDP

 00000F7B			UnitTesting_ShapeFactoryCreator_Destructor PROC NEAR 
				;void Destructor(void);
 00000F7B  55				push	EBP
 00000F7C  8B EC			mov	EBP,ESP
 00000F7E  51				push	ECX 
 00000F7F  53				push	EBX 
 00000F80  56				push	ESI 
 00000F81  57				push	EDI 
				;{

				;{299}:if(ptr3 != null)
 00000F82  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F85  8B 01			mov	EAX,dword ptr [ECX]
 00000F87  8B C8			mov	ECX,EAX 
 00000F89  51				push	ECX
 00000F8A  33 C0			xor	EAX,EAX
 00000F8C  5B				pop	EBX
 00000F8D  3B D8			cmp	EBX,EAX
 00000F8F  0F 95 C0			setnz	AL
 00000F92  84 C0			test	AL,AL
 00000F94  74 18			jz	OFFSET $L000780

				;{300}:destroy ptr3;
 00000F96  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F99  8B 01			mov	EAX,dword ptr [ECX]
 00000F9B  8B C8			mov	ECX,EAX 
 00000F9D  8B F1			mov	ESI,ECX
 00000F9F  85 C9			test	ECX,ECX
 00000FA1  74 05			jz	OFFSET $L000783
 00000FA3  8B 01			mov	EAX,dword ptr [ECX] 
 00000FA5  FF 50 10			call	dword ptr [EAX+0010h]
 00000FA8			$L000783:
 00000FA8  56				push	ESI
 00000FA9  E8 00000000 E		call	 System_Memory_Destroy
 00000FAE			$L000780:

				;{302}:if(null != ptr3)
 00000FAE  33 C0			xor	EAX,EAX
 00000FB0  50				push	EAX
 00000FB1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FB4  8B 01			mov	EAX,dword ptr [ECX]
 00000FB6  8B C8			mov	ECX,EAX 
 00000FB8  59				pop	ECX
 00000FB9  3B C8			cmp	ECX,EAX
 00000FBB  0F 95 C0			setnz	AL
 00000FBE  84 C0			test	AL,AL
 00000FC0  74 18			jz	OFFSET $L000784

				;{303}:destroy ptr3;
 00000FC2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FC5  8B 01			mov	EAX,dword ptr [ECX]
 00000FC7  8B C8			mov	ECX,EAX 
 00000FC9  8B F1			mov	ESI,ECX
 00000FCB  85 C9			test	ECX,ECX
 00000FCD  74 05			jz	OFFSET $L000787
 00000FCF  8B 01			mov	EAX,dword ptr [ECX] 
 00000FD1  FF 50 10			call	dword ptr [EAX+0010h]
 00000FD4			$L000787:
 00000FD4  56				push	ESI
 00000FD5  E8 00000000 E		call	 System_Memory_Destroy
 00000FDA			$L000784:
				;}
 00000FDA			$L000600:

 00000FDA  5F				pop	EDI
 00000FDB  5E				pop	ESI 
 00000FDC  5B				pop	EBX 
 00000FDD  C9				leave	
 00000FDE  C3				ret	
 00000FDF			UnitTesting_ShapeFactoryCreator_Destructor ENDP

 00000FDF			UnitTesting_ShapeFactoryCreator PROC NEAR 
				;void UnitTesting::ShapeFactoryCreator(void);
 00000FDF  55				push	EBP
 00000FE0  8B EC			mov	EBP,ESP
 00000FE2  51				push	ECX 
 00000FE3  53				push	EBX 
 00000FE4  56				push	ESI 
 00000FE5  57				push	EDI 
 00000FE6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FE9  E8 000007AA			call	 __member_Init@UnitTesting_ShapeFactoryCreator

 00000FEE  5F				pop	EDI
 00000FEF  5E				pop	ESI 
 00000FF0  5B				pop	EBX 
 00000FF1  C9				leave	
 00000FF2  C3				ret	
 00000FF3			UnitTesting_ShapeFactoryCreator ENDP

 00000FF3			UnitTesting_ShapeFactoryCreator_Create PROC NEAR 
				;UnitTesting::Shape UnitTesting::ShapeFactoryCreator::Create(string name);
 00000FF3  55				push	EBP
 00000FF4  8B EC			mov	EBP,ESP
 00000FF6  83 EC 08			sub	ESP,000000008h
 00000FF9  53				push	EBX 
 00000FFA  56				push	ESI 
 00000FFB  57				push	EDI 
 00000FFC  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000FFF  B9 00000001			mov	ECX,000000001h
 00001004  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001009  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{245}:obj_ptr= new UnitTesting::Circle();
 0000100B  6A 0C			push	00000000Ch
 0000100D  E8 00000000 E		call	 System_Memory_New
 00001012  85 C0			test	EAX,EAX
 00001014  74 12			jz	 $L000789
 00001016  8B F0			mov	ESI,EAX
 00001018  8D 3E			lea	EDI,dword ptr [ESI]
 0000101A  B9 00000003			mov	ECX,000000003h 
 0000101F  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001024  F3/ AB			rep stos	dword ptr [EDI]
 00001026  EB 02			jmp	 $L000790
 00001028			$L000789:
 00001028  33 F6			xor	ESI,ESI
 0000102A			$L000790:
 0000102A  89 75 FC			mov	dword ptr [EBP-0004h],ESI 
 0000102D  8B CE			mov	ECX,ESI 
 0000102F  E8 FFFFFF0D			call	 UnitTesting_Circle
 00001034  8B C6			mov	EAX,ESI 

				;{251}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 00001036  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00001039  8B F1			mov	ESI,ECX
 0000103B  85 C9			test	ECX,ECX
 0000103D  74 05			jz	OFFSET $L000792
 0000103F  8B 01			mov	EAX,dword ptr [ECX] 
 00001041  FF 50 10			call	dword ptr [EAX+0010h]
 00001044			$L000792:
 00001044  56				push	ESI
 00001045  E8 00000000 E		call	 System_Memory_Destroy

				;{277}:if(name == "Circle")
 0000104A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000104D  50				push	EAX
 0000104E  8D 05 000000B6 R		lea	EAX,OFFSET $S000541
 00001054  5F				pop	EDI
 00001055  8B F0			mov	ESI,EAX
 00001057  50				push	EAX
 00001058  E8 00000000 E		call	 StringHandling_StringLength
 0000105D  50				push	EAX 
 0000105E  56				push	ESI 
 0000105F  57				push	EDI 
 00001060  E8 00000000 E		call	 StringHandling_StringCompare 
 00001065  83 F8 00			cmp	EAX,000000000h
 00001068  0F 94 C0			setz	AL
 0000106B  84 C0			test	AL,AL
 0000106D  74 32			jz	OFFSET $L000793
				;{

				;{279}:return new UnitTesting::Circle()
 0000106F  6A 0C			push	00000000Ch
 00001071  E8 00000000 E		call	 System_Memory_New
 00001076  85 C0			test	EAX,EAX
 00001078  74 12			jz	 $L000795
 0000107A  8B F0			mov	ESI,EAX
 0000107C  8D 3E			lea	EDI,dword ptr [ESI]
 0000107E  B9 00000003			mov	ECX,000000003h 
 00001083  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001088  F3/ AB			rep stos	dword ptr [EDI]
 0000108A  EB 02			jmp	 $L000796
 0000108C			$L000795:
 0000108C  33 F6			xor	ESI,ESI
 0000108E			$L000796:
 0000108E  8B CE			mov	ECX,ESI 
 00001090  E8 FFFFFEAC			call	 UnitTesting_Circle
 00001095  8B C6			mov	EAX,ESI 
 00001097  E9 000000A9			jmp	OFFSET $L000597
				;}
 0000109C  E9 000000A0			jmp	OFFSET $L000794

				; else {
 000010A1			$L000793:

				;{280}:if(name == "Square")
 000010A1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000010A4  50				push	EAX
 000010A5  8D 05 000001ED R		lea	EAX,OFFSET $S000567
 000010AB  5F				pop	EDI
 000010AC  8B F0			mov	ESI,EAX
 000010AE  50				push	EAX
 000010AF  E8 00000000 E		call	 StringHandling_StringLength
 000010B4  50				push	EAX 
 000010B5  56				push	ESI 
 000010B6  57				push	EDI 
 000010B7  E8 00000000 E		call	 StringHandling_StringCompare 
 000010BC  83 F8 00			cmp	EAX,000000000h
 000010BF  0F 94 C0			setz	AL
 000010C2  84 C0			test	AL,AL
 000010C4  74 2C			jz	OFFSET $L000797
				;{

				;{282}:return new UnitTesting::Square()
 000010C6  6A 14			push	000000014h
 000010C8  E8 00000000 E		call	 System_Memory_New
 000010CD  85 C0			test	EAX,EAX
 000010CF  74 12			jz	 $L000799
 000010D1  8B F0			mov	ESI,EAX
 000010D3  8D 3E			lea	EDI,dword ptr [ESI]
 000010D5  B9 00000005			mov	ECX,000000005h 
 000010DA  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000010DF  F3/ AB			rep stos	dword ptr [EDI]
 000010E1  EB 02			jmp	 $L000800
 000010E3			$L000799:
 000010E3  33 F6			xor	ESI,ESI
 000010E5			$L000800:
 000010E5  8B CE			mov	ECX,ESI 
 000010E7  E8 0000015A			call	 UnitTesting_Square
 000010EC  8B C6			mov	EAX,ESI 
 000010EE  EB 55			jmp	OFFSET $L000597
				;}
 000010F0  EB 4F			jmp	OFFSET $L000798

				; else {
 000010F2			$L000797:

				;{283}:if(name == "Triangle")
 000010F2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000010F5  50				push	EAX
 000010F6  8D 05 000001F4 R		lea	EAX,OFFSET $S000587
 000010FC  5F				pop	EDI
 000010FD  8B F0			mov	ESI,EAX
 000010FF  50				push	EAX
 00001100  E8 00000000 E		call	 StringHandling_StringLength
 00001105  50				push	EAX 
 00001106  56				push	ESI 
 00001107  57				push	EDI 
 00001108  E8 00000000 E		call	 StringHandling_StringCompare 
 0000110D  83 F8 00			cmp	EAX,000000000h
 00001110  0F 94 C0			setz	AL
 00001113  84 C0			test	AL,AL
 00001115  74 2A			jz	OFFSET $L000801
				;{

				;{285}:return new UnitTesting::Triangle()
 00001117  6A 14			push	000000014h
 00001119  E8 00000000 E		call	 System_Memory_New
 0000111E  85 C0			test	EAX,EAX
 00001120  74 12			jz	 $L000803
 00001122  8B F0			mov	ESI,EAX
 00001124  8D 3E			lea	EDI,dword ptr [ESI]
 00001126  B9 00000005			mov	ECX,000000005h 
 0000112B  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001130  F3/ AB			rep stos	dword ptr [EDI]
 00001132  EB 02			jmp	 $L000804
 00001134			$L000803:
 00001134  33 F6			xor	ESI,ESI
 00001136			$L000804:
 00001136  8B CE			mov	ECX,ESI 
 00001138  E8 0000039B			call	 UnitTesting_Triangle
 0000113D  8B C6			mov	EAX,ESI 
 0000113F  EB 04			jmp	OFFSET $L000597
				;}
 00001141			$L000801:
 00001141			$L000798:

				; }
 00001141			$L000794:

				; }

				;{288}:return null
 00001141  33 C0			xor	EAX,EAX
 00001143  EB 00			jmp	OFFSET $L000597
				;}
 00001145			$L000597:

 00001145  5F				pop	EDI
 00001146  5E				pop	ESI 
 00001147  5B				pop	EBX 
 00001148  C9				leave	
 00001149  C2 0004			retn	000000004h
 0000114C			UnitTesting_ShapeFactoryCreator_Create ENDP

 0000114C			UnitTesting_Square_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 0000114C  55				push	EBP
 0000114D  8B EC			mov	EBP,ESP
 0000114F  51				push	ECX 
 00001150  53				push	EBX 
 00001151  56				push	ESI 
 00001152  57				push	EDI 
				;{

				;{149}:return Width * Height
 00001153  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001156  E8 00000110			call	 UnitTesting_Square_get_Width
 0000115B  50				push	EAX
 0000115C  52				push	EDX 
 0000115D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001160  E8 00000082			call	 UnitTesting_Square_get_Height
 00001165  9B DB E2			fclex
 00001168  50				push	EAX
 00001169  52				push	EDX 
 0000116A  DD 04 24			fld	qword ptr [ESP]
 0000116D  59				pop	ECX
 0000116E  59				pop	ECX 
 0000116F  DC 0C 24			fmul	qword ptr [ESP]
 00001172  DD 1C 24			fstp	qword ptr [ESP]
 00001175  5A				pop	EDX
 00001176  58				pop	EAX 
 00001177  EB 00			jmp	OFFSET $L000564
				;}
 00001179			$L000564:

 00001179  5F				pop	EDI
 0000117A  5E				pop	ESI 
 0000117B  5B				pop	EBX 
 0000117C  C9				leave	
 0000117D  C3				ret	
 0000117E			UnitTesting_Square_ComputeArea ENDP

 0000117E			UnitTesting_Square_Destructor PROC NEAR 
				;void Destructor(void);
 0000117E  55				push	EBP
 0000117F  8B EC			mov	EBP,ESP
 00001181  51				push	ECX 
 00001182  53				push	EBX 
 00001183  56				push	ESI 
 00001184  57				push	EDI 
				;{

				;{122}:System::Debug::OutputString("destroying a Square object...");
 00001185  8D 05 0000021F R		lea	EAX,OFFSET $S000555
 0000118B  50				push	EAX
 0000118C  E8 00000000 E		call	 System_Debug_OutputString

				;{123}:Console::WriteLn("destroying a Square object...");
 00001191  8D 05 0000021F R		lea	EAX,OFFSET $S000555
 00001197  6A 00			push	000000000h
 00001199  50				push	EAX 
 0000119A  E8 00000000 E		call	 Console_WriteString
 0000119F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000011A4			$L000554:

 000011A4  5F				pop	EDI
 000011A5  5E				pop	ESI 
 000011A6  5B				pop	EBX 
 000011A7  C9				leave	
 000011A8  C3				ret	
 000011A9			UnitTesting_Square_Destructor ENDP

 000011A9			UnitTesting_Square_Draw PROC NEAR 
				;void Draw(void);
 000011A9  55				push	EBP
 000011AA  8B EC			mov	EBP,ESP
 000011AC  51				push	ECX 
 000011AD  53				push	EBX 
 000011AE  56				push	ESI 
 000011AF  57				push	EDI 
				;{

				;{162}:Console::WriteLn("Drawing a Square!");
 000011B0  8D 05 000001A5 R		lea	EAX,OFFSET $S000569
 000011B6  6A 00			push	000000000h
 000011B8  50				push	EAX 
 000011B9  E8 00000000 E		call	 Console_WriteString
 000011BE  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000011C3			$L000568:

 000011C3  5F				pop	EDI
 000011C4  5E				pop	ESI 
 000011C5  5B				pop	EBX 
 000011C6  C9				leave	
 000011C7  C3				ret	
 000011C8			UnitTesting_Square_Draw ENDP

 000011C8			UnitTesting_Square_DrawCube PROC NEAR 
				;void DrawCube(void);
 000011C8  55				push	EBP
 000011C9  8B EC			mov	EBP,ESP
 000011CB  51				push	ECX 
 000011CC  53				push	EBX 
 000011CD  56				push	ESI 
 000011CE  57				push	EDI 
				;{

				;{167}:Console::WriteLn("Drawing a Cube!");
 000011CF  8D 05 00000170 R		lea	EAX,OFFSET $S000571
 000011D5  6A 00			push	000000000h
 000011D7  50				push	EAX 
 000011D8  E8 00000000 E		call	 Console_WriteString
 000011DD  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000011E2			$L000570:

 000011E2  5F				pop	EDI
 000011E3  5E				pop	ESI 
 000011E4  5B				pop	EBX 
 000011E5  C9				leave	
 000011E6  C3				ret	
 000011E7			UnitTesting_Square_DrawCube ENDP

 000011E7			UnitTesting_Square_get_Height PROC NEAR 
				;double get::Height(void);
 000011E7  55				push	EBP
 000011E8  8B EC			mov	EBP,ESP
 000011EA  51				push	ECX 
 000011EB  53				push	EBX 
 000011EC  56				push	ESI 
 000011ED  57				push	EDI 
				;{

				;{139}:return dHeight
 000011EE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000011F1  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000011F4  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000011F7  EB 00			jmp	OFFSET $L000561
				;}
 000011F9			$L000561:

 000011F9  5F				pop	EDI
 000011FA  5E				pop	ESI 
 000011FB  5B				pop	EBX 
 000011FC  C9				leave	
 000011FD  C3				ret	
 000011FE			UnitTesting_Square_get_Height ENDP

 000011FE			UnitTesting_Square_put_Height PROC NEAR 
				;void put::Height(double value);
 000011FE  55				push	EBP
 000011FF  8B EC			mov	EBP,ESP
 00001201  51				push	ECX 
 00001202  53				push	EBX 
 00001203  56				push	ESI 
 00001204  57				push	EDI 
				;{

				;{144}:dHeight= value;
 00001205  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00001208  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000120B  50				push	EAX
 0000120C  52				push	EDX 
 0000120D  DD 04 24			fld	qword ptr [ESP]
 00001210  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001213  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 00001216			$L000562:
 00001216  5A				pop	EDX
 00001217  58				pop	EAX 

 00001218  5F				pop	EDI
 00001219  5E				pop	ESI 
 0000121A  5B				pop	EBX 
 0000121B  C9				leave	
 0000121C  C2 0008			retn	000000008h
 0000121F			UnitTesting_Square_put_Height ENDP

 0000121F			UnitTesting_Square_Name PROC NEAR 
				;string Name(void);
 0000121F  55				push	EBP
 00001220  8B EC			mov	EBP,ESP
 00001222  51				push	ECX 
 00001223  53				push	EBX 
 00001224  56				push	ESI 
 00001225  57				push	EDI 
				;{

				;{157}:return "Square"
 00001226  8D 05 000001ED R		lea	EAX,OFFSET $S000567
 0000122C  EB 00			jmp	OFFSET $L000566
				;}
 0000122E			$L000566:

 0000122E  5F				pop	EDI
 0000122F  5E				pop	ESI 
 00001230  5B				pop	EBX 
 00001231  C9				leave	
 00001232  C3				ret	
 00001233			UnitTesting_Square_Name ENDP

 00001233			UnitTesting_Square_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00001233  55				push	EBP
 00001234  8B EC			mov	EBP,ESP
 00001236  51				push	ECX 
 00001237  53				push	EBX 
 00001238  56				push	ESI 
 00001239  57				push	EDI 
				;{

				;{153}:return UnitTesting::stSquare
 0000123A  B8 00000002			mov	EAX,000000002h
 0000123F  EB 00			jmp	OFFSET $L000565
				;}
 00001241			$L000565:

 00001241  5F				pop	EDI
 00001242  5E				pop	ESI 
 00001243  5B				pop	EBX 
 00001244  C9				leave	
 00001245  C3				ret	
 00001246			UnitTesting_Square_Type ENDP

 00001246			UnitTesting_Square PROC NEAR 
				;void UnitTesting::Square(void);
 00001246  55				push	EBP
 00001247  8B EC			mov	EBP,ESP
 00001249  51				push	ECX 
 0000124A  53				push	EBX 
 0000124B  56				push	ESI 
 0000124C  57				push	EDI 
 0000124D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001250  E8 FFFFFD11			call	 UnitTesting_Shape ;base constructor call
 00001255  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001258  C7 01 00000054 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Square 
 0000125E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001261  E8 0000056E			call	 __member_Init@UnitTesting_Square 
				;{
				;}

 00001266  5F				pop	EDI
 00001267  5E				pop	ESI 
 00001268  5B				pop	EBX 
 00001269  C9				leave	
 0000126A  C3				ret	
 0000126B			UnitTesting_Square ENDP

 0000126B			UnitTesting_Square_get_Width PROC NEAR 
				;double get::Width(void);
 0000126B  55				push	EBP
 0000126C  8B EC			mov	EBP,ESP
 0000126E  51				push	ECX 
 0000126F  53				push	EBX 
 00001270  56				push	ESI 
 00001271  57				push	EDI 
				;{

				;{129}:return dWidth
 00001272  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001275  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00001278  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000127B  EB 00			jmp	OFFSET $L000557
				;}
 0000127D			$L000557:

 0000127D  5F				pop	EDI
 0000127E  5E				pop	ESI 
 0000127F  5B				pop	EBX 
 00001280  C9				leave	
 00001281  C3				ret	
 00001282			UnitTesting_Square_get_Width ENDP

 00001282			UnitTesting_Square_put_Width PROC NEAR 
				;void put::Width(double value);
 00001282  55				push	EBP
 00001283  8B EC			mov	EBP,ESP
 00001285  51				push	ECX 
 00001286  53				push	EBX 
 00001287  56				push	ESI 
 00001288  57				push	EDI 
				;{

				;{134}:dWidth= value;
 00001289  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000128C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000128F  50				push	EAX
 00001290  52				push	EDX 
 00001291  DD 04 24			fld	qword ptr [ESP]
 00001294  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001297  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 0000129A			$L000558:
 0000129A  5A				pop	EDX
 0000129B  58				pop	EAX 

 0000129C  5F				pop	EDI
 0000129D  5E				pop	ESI 
 0000129E  5B				pop	EBX 
 0000129F  C9				leave	
 000012A0  C2 0008			retn	000000008h
 000012A3			UnitTesting_Square_put_Width ENDP

 000012A3			UnitTesting_TestSwitch_RunTest PROC NEAR 
				;void UnitTesting::TestSwitch::RunTest(int option);
 000012A3  55				push	EBP
 000012A4  8B EC			mov	EBP,ESP
 000012A6  51				push	ECX 
 000012A7  53				push	EBX 
 000012A8  56				push	ESI 
 000012A9  57				push	EDI 
				;{

				;{14}:switch(option)
 000012AA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000012AD  8B F0			mov	ESI,EAX
 000012AF  B8 00000001			mov	EAX,000000001h
 000012B4  3B C6			cmp	EAX,ESI
 000012B6  74 2F			jz	OFFSET $L000806
 000012B8  B8 00000002			mov	EAX,000000002h
 000012BD  3B C6			cmp	EAX,ESI
 000012BF  74 3E			jz	OFFSET $L000807
 000012C1  B8 00000003			mov	EAX,000000003h
 000012C6  3B C6			cmp	EAX,ESI
 000012C8  74 4A			jz	OFFSET $L000808
 000012CA  B8 00000004			mov	EAX,000000004h
 000012CF  3B C6			cmp	EAX,ESI
 000012D1  74 56			jz	OFFSET $L000809
 000012D3  B8 00000005			mov	EAX,000000005h
 000012D8  3B C6			cmp	EAX,ESI
 000012DA  74 62			jz	OFFSET $L000810
 000012DC  B8 00000006			mov	EAX,000000006h
 000012E1  3B C6			cmp	EAX,ESI 
 000012E3  74 6C			jz	OFFSET $L000811 
 000012E5  EB 7F			jmp	OFFSET $L000812
 000012E7			$L000806:

				;{17}:Console::WriteLn("Opening file...");
 000012E7  8D 05 000001DD R		lea	EAX,OFFSET $S000509
 000012ED  6A 00			push	000000000h
 000012EF  50				push	EAX 
 000012F0  E8 00000000 E		call	 Console_WriteString
 000012F5  E8 00000000 E		call	 Console_WriteCrLf 
 000012FA  E9 00000083			jmp	OFFSET $L000805
 000012FF			$L000807:

				;{20}:Console::WriteLn("Closing file...");
 000012FF  8D 05 000000BD R		lea	EAX,OFFSET $S000510
 00001305  6A 00			push	000000000h
 00001307  50				push	EAX 
 00001308  E8 00000000 E		call	 Console_WriteString
 0000130D  E8 00000000 E		call	 Console_WriteCrLf 
 00001312  EB 6E			jmp	OFFSET $L000805
 00001314			$L000808:

				;{23}:Console::WriteLn("Do Write to file...");
 00001314  8D 05 00000131 R		lea	EAX,OFFSET $S000511
 0000131A  6A 00			push	000000000h
 0000131C  50				push	EAX 
 0000131D  E8 00000000 E		call	 Console_WriteString
 00001322  E8 00000000 E		call	 Console_WriteCrLf 
 00001327  EB 59			jmp	OFFSET $L000805
 00001329			$L000809:

				;{26}:Console::WriteLn("Do Read from file...");
 00001329  8D 05 0000011C R		lea	EAX,OFFSET $S000512
 0000132F  6A 00			push	000000000h
 00001331  50				push	EAX 
 00001332  E8 00000000 E		call	 Console_WriteString
 00001337  E8 00000000 E		call	 Console_WriteCrLf 
 0000133C  EB 44			jmp	OFFSET $L000805
 0000133E			$L000810:

				;{29}:Console::WriteLn("Do for 5 and follow to 6");
 0000133E  8D 05 00000145 R		lea	EAX,OFFSET $S000514
 00001344  6A 00			push	000000000h
 00001346  50				push	EAX 
 00001347  E8 00000000 E		call	 Console_WriteString
 0000134C  E8 00000000 E		call	 Console_WriteCrLf 
 00001351			$L000811:
				;{

				;{32}:Console::WriteLn("Do 6, then finish");
 00001351  8D 05 0000010A R		lea	EAX,OFFSET $S000516
 00001357  6A 00			push	000000000h
 00001359  50				push	EAX 
 0000135A  E8 00000000 E		call	 Console_WriteString
 0000135F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001364  EB 1C			jmp	OFFSET $L000805
 00001366			$L000812:

				;{36}:Console::WriteLn("Invalid Option : ", option);
 00001366  8D 05 000001CB R		lea	EAX,OFFSET $S000517
 0000136C  6A 00			push	000000000h
 0000136E  50				push	EAX 
 0000136F  E8 00000000 E		call	 Console_WriteString
 00001374  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001377  50				push	EAX 
 00001378  E8 00000000 E		call	 Console_WriteInteger 
 0000137D  E8 00000000 E		call	 Console_WriteCrLf 
 00001382			$L000805:
				;}
 00001382			$L000507:

 00001382  5F				pop	EDI
 00001383  5E				pop	ESI 
 00001384  5B				pop	EBX 
 00001385  C9				leave	
 00001386  C2 0004			retn	000000004h
 00001389			UnitTesting_TestSwitch_RunTest ENDP

 00001389			UnitTesting_Triangle_get_Base PROC NEAR 
				;double get::Base(void);
 00001389  55				push	EBP
 0000138A  8B EC			mov	EBP,ESP
 0000138C  51				push	ECX 
 0000138D  53				push	EBX 
 0000138E  56				push	ESI 
 0000138F  57				push	EDI 
				;{

				;{181}:return dBase
 00001390  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001393  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00001396  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00001399  EB 00			jmp	OFFSET $L000578
				;}
 0000139B			$L000578:

 0000139B  5F				pop	EDI
 0000139C  5E				pop	ESI 
 0000139D  5B				pop	EBX 
 0000139E  C9				leave	
 0000139F  C3				ret	
 000013A0			UnitTesting_Triangle_get_Base ENDP

 000013A0			UnitTesting_Triangle_put_Base PROC NEAR 
				;void put::Base(double value);
 000013A0  55				push	EBP
 000013A1  8B EC			mov	EBP,ESP
 000013A3  51				push	ECX 
 000013A4  53				push	EBX 
 000013A5  56				push	ESI 
 000013A6  57				push	EDI 
				;{

				;{186}:dBase= value;
 000013A7  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000013AA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000013AD  50				push	EAX
 000013AE  52				push	EDX 
 000013AF  DD 04 24			fld	qword ptr [ESP]
 000013B2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000013B5  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 000013B8			$L000579:
 000013B8  5A				pop	EDX
 000013B9  58				pop	EAX 

 000013BA  5F				pop	EDI
 000013BB  5E				pop	ESI 
 000013BC  5B				pop	EBX 
 000013BD  C9				leave	
 000013BE  C2 0008			retn	000000008h
 000013C1			UnitTesting_Triangle_put_Base ENDP

 000013C1			UnitTesting_Triangle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 000013C1  55				push	EBP
 000013C2  8B EC			mov	EBP,ESP
 000013C4  51				push	ECX 
 000013C5  53				push	EBX 
 000013C6  56				push	ESI 
 000013C7  57				push	EDI 
				;{

				;{215}:return Base * High / 2
 000013C8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000013CB  E8 FFFFFFB9			call	 UnitTesting_Triangle_get_Base
 000013D0  50				push	EAX
 000013D1  52				push	EDX 
 000013D2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000013D5  E8 0000009F			call	 UnitTesting_Triangle_get_High
 000013DA  9B DB E2			fclex
 000013DD  50				push	EAX
 000013DE  52				push	EDX 
 000013DF  DD 04 24			fld	qword ptr [ESP]
 000013E2  59				pop	ECX
 000013E3  59				pop	ECX 
 000013E4  DC 0C 24			fmul	qword ptr [ESP]
 000013E7  DD 1C 24			fstp	qword ptr [ESP]
 000013EA  B8 00000002			mov	EAX,000000002h
 000013EF  9B DB E2			fclex
 000013F2  50				push	EAX
 000013F3  E8 00000000 E		call	 FloatingPoint_FromInt
 000013F8  50				push	EAX
 000013F9  52				push	EDX 
 000013FA  DD 04 24			fld	qword ptr [ESP]
 000013FD  59				pop	ECX 
 000013FE  59				pop	ECX 
 000013FF  DC 3C 24			fdivr	qword ptr [ESP]
 00001402  DD 1C 24			fstp	qword ptr [ESP]
 00001405  5A				pop	EDX
 00001406  58				pop	EAX 
 00001407  EB 00			jmp	OFFSET $L000590
				;}
 00001409			$L000590:

 00001409  5F				pop	EDI
 0000140A  5E				pop	ESI 
 0000140B  5B				pop	EBX 
 0000140C  C9				leave	
 0000140D  C3				ret	
 0000140E			UnitTesting_Triangle_ComputeArea ENDP

 0000140E			UnitTesting_Triangle_Destructor PROC NEAR 
				;void Destructor(void);
 0000140E  55				push	EBP
 0000140F  8B EC			mov	EBP,ESP
 00001411  51				push	ECX 
 00001412  53				push	EBX 
 00001413  56				push	ESI 
 00001414  57				push	EDI 
				;{

				;{220}:System::Debug::OutputString("destroying a Triangle object...");
 00001415  8D 05 0000023D R		lea	EAX,OFFSET $S000592
 0000141B  50				push	EAX
 0000141C  E8 00000000 E		call	 System_Debug_OutputString

				;{221}:Console::WriteLn("destroying a Triangle object...");
 00001421  8D 05 0000023D R		lea	EAX,OFFSET $S000592
 00001427  6A 00			push	000000000h
 00001429  50				push	EAX 
 0000142A  E8 00000000 E		call	 Console_WriteString
 0000142F  E8 00000000 E		call	 Console_WriteCrLf 

				;{222}:return 
 00001434  EB 00			jmp	OFFSET $L000591
				;}
 00001436			$L000591:

 00001436  5F				pop	EDI
 00001437  5E				pop	ESI 
 00001438  5B				pop	EBX 
 00001439  C9				leave	
 0000143A  C3				ret	
 0000143B			UnitTesting_Triangle_Destructor ENDP

 0000143B			UnitTesting_Triangle_Draw PROC NEAR 
				;void Draw(void);
 0000143B  55				push	EBP
 0000143C  8B EC			mov	EBP,ESP
 0000143E  51				push	ECX 
 0000143F  53				push	EBX 
 00001440  56				push	ESI 
 00001441  57				push	EDI 
				;{

				;{209}:Console::WriteLn("Drawing a Triangle!");
 00001442  8D 05 000001B7 R		lea	EAX,OFFSET $S000589
 00001448  6A 00			push	000000000h
 0000144A  50				push	EAX 
 0000144B  E8 00000000 E		call	 Console_WriteString
 00001450  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001455			$L000588:

 00001455  5F				pop	EDI
 00001456  5E				pop	ESI 
 00001457  5B				pop	EBX 
 00001458  C9				leave	
 00001459  C3				ret	
 0000145A			UnitTesting_Triangle_Draw ENDP

 0000145A			UnitTesting_Triangle_DrawPiramid PROC NEAR 
				;void DrawPiramid(void);
 0000145A  55				push	EBP
 0000145B  8B EC			mov	EBP,ESP
 0000145D  51				push	ECX 
 0000145E  53				push	EBX 
 0000145F  56				push	ESI 
 00001460  57				push	EDI 
				;{

				;{227}:Console::WriteLn("Drawing a Piramid!");
 00001461  8D 05 00000180 R		lea	EAX,OFFSET $S000594
 00001467  6A 00			push	000000000h
 00001469  50				push	EAX 
 0000146A  E8 00000000 E		call	 Console_WriteString
 0000146F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001474			$L000593:

 00001474  5F				pop	EDI
 00001475  5E				pop	ESI 
 00001476  5B				pop	EBX 
 00001477  C9				leave	
 00001478  C3				ret	
 00001479			UnitTesting_Triangle_DrawPiramid ENDP

 00001479			UnitTesting_Triangle_get_High PROC NEAR 
				;double get::High(void);
 00001479  55				push	EBP
 0000147A  8B EC			mov	EBP,ESP
 0000147C  51				push	ECX 
 0000147D  53				push	EBX 
 0000147E  56				push	ESI 
 0000147F  57				push	EDI 
				;{

				;{191}:return dHigh
 00001480  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001483  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00001486  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00001489  EB 00			jmp	OFFSET $L000582
				;}
 0000148B			$L000582:

 0000148B  5F				pop	EDI
 0000148C  5E				pop	ESI 
 0000148D  5B				pop	EBX 
 0000148E  C9				leave	
 0000148F  C3				ret	
 00001490			UnitTesting_Triangle_get_High ENDP

 00001490			UnitTesting_Triangle_put_High PROC NEAR 
				;void put::High(double value);
 00001490  55				push	EBP
 00001491  8B EC			mov	EBP,ESP
 00001493  51				push	ECX 
 00001494  53				push	EBX 
 00001495  56				push	ESI 
 00001496  57				push	EDI 
				;{

				;{196}:dHigh= value;
 00001497  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000149A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000149D  50				push	EAX
 0000149E  52				push	EDX 
 0000149F  DD 04 24			fld	qword ptr [ESP]
 000014A2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000014A5  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 000014A8			$L000583:
 000014A8  5A				pop	EDX
 000014A9  58				pop	EAX 

 000014AA  5F				pop	EDI
 000014AB  5E				pop	ESI 
 000014AC  5B				pop	EBX 
 000014AD  C9				leave	
 000014AE  C2 0008			retn	000000008h
 000014B1			UnitTesting_Triangle_put_High ENDP

 000014B1			UnitTesting_Triangle_Name PROC NEAR 
				;string Name(void);
 000014B1  55				push	EBP
 000014B2  8B EC			mov	EBP,ESP
 000014B4  51				push	ECX 
 000014B5  53				push	EBX 
 000014B6  56				push	ESI 
 000014B7  57				push	EDI 
				;{

				;{204}:return "Triangle"
 000014B8  8D 05 000001F4 R		lea	EAX,OFFSET $S000587
 000014BE  EB 00			jmp	OFFSET $L000586
				;}
 000014C0			$L000586:

 000014C0  5F				pop	EDI
 000014C1  5E				pop	ESI 
 000014C2  5B				pop	EBX 
 000014C3  C9				leave	
 000014C4  C3				ret	
 000014C5			UnitTesting_Triangle_Name ENDP

 000014C5			UnitTesting_Triangle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 000014C5  55				push	EBP
 000014C6  8B EC			mov	EBP,ESP
 000014C8  51				push	ECX 
 000014C9  53				push	EBX 
 000014CA  56				push	ESI 
 000014CB  57				push	EDI 
				;{

				;{200}:return UnitTesting::stTriangle
 000014CC  B8 00000003			mov	EAX,000000003h
 000014D1  EB 00			jmp	OFFSET $L000585
				;}
 000014D3			$L000585:

 000014D3  5F				pop	EDI
 000014D4  5E				pop	ESI 
 000014D5  5B				pop	EBX 
 000014D6  C9				leave	
 000014D7  C3				ret	
 000014D8			UnitTesting_Triangle_Type ENDP

 000014D8			UnitTesting_Triangle PROC NEAR 
				;void UnitTesting::Triangle(void);
 000014D8  55				push	EBP
 000014D9  8B EC			mov	EBP,ESP
 000014DB  51				push	ECX 
 000014DC  53				push	EBX 
 000014DD  56				push	ESI 
 000014DE  57				push	EDI 
 000014DF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000014E2  E8 FFFFFA7F			call	 UnitTesting_Shape ;base constructor call
 000014E7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000014EA  C7 01 00000068 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Triangle 
 000014F0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000014F3  E8 000002FB			call	 __member_Init@UnitTesting_Triangle 
				;{
				;}

 000014F8  5F				pop	EDI
 000014F9  5E				pop	ESI 
 000014FA  5B				pop	EBX 
 000014FB  C9				leave	
 000014FC  C3				ret	
 000014FD			UnitTesting_Triangle ENDP

 000014FD			UnitTesting_Visitor_Visit PROC NEAR 
				;void Visit(UnitTesting::Shape ^ shape);
 000014FD  55				push	EBP
 000014FE  8B EC			mov	EBP,ESP
 00001500  83 EC 14			sub	ESP,000000014h
 00001503  53				push	EBX 
 00001504  56				push	ESI 
 00001505  57				push	EDI 
 00001506  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 00001509  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 0000150C  B9 00000004			mov	ECX,000000004h 
 00001511  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001516  F3/ AB			rep stos	dword ptr [EDI]
 00001518  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{312}:shape.Draw();
 0000151B  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000151E  8B 11			mov	EDX,dword ptr [ECX]
 00001520  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{314}:shape_ptr= null;
 00001523  33 C0			xor	EAX,EAX
 00001525  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00001528  89 03			mov	dword ptr [EBX],EAX

				;{316}:switch(shape.Type())
 0000152A  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000152D  8B 11			mov	EDX,dword ptr [ECX]
 0000152F  FF 12			call	dword ptr [EDX]
 00001531  8B F0			mov	ESI,EAX
 00001533  B8 00000001			mov	EAX,000000001h
 00001538  3B C6			cmp	EAX,ESI
 0000153A  74 17			jz	OFFSET $L000814
 0000153C  B8 00000002			mov	EAX,000000002h
 00001541  3B C6			cmp	EAX,ESI
 00001543  74 3D			jz	OFFSET $L000815
 00001545  B8 00000003			mov	EAX,000000003h
 0000154A  3B C6			cmp	EAX,ESI
 0000154C  74 63			jz	OFFSET $L000816
 0000154E  E9 0000008D			jmp	OFFSET $L000817
 00001553			$L000814:
				;{

				;{320}:Console::WriteLn("type == stCircle");
 00001553  8D 05 0000026F R		lea	EAX,OFFSET $S000605
 00001559  6A 00			push	000000000h
 0000155B  50				push	EAX 
 0000155C  E8 00000000 E		call	 Console_WriteString
 00001561  E8 00000000 E		call	 Console_WriteCrLf 

				;{322}:circle= dynamic_cast(shape);
 00001566  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001569  8B C3			mov	EAX,EBX 
 0000156B  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 0000156E  89 03			mov	dword ptr [EBX],EAX

				;{323}:circle.DrawSphere();
 00001570  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00001573  8B 11			mov	EDX,dword ptr [ECX]
 00001575  FF 52 14			call	dword ptr [EDX+0014h]

				;{325}:shape_ptr= circle;
 00001578  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 0000157B  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 0000157E  89 03			mov	dword ptr [EBX],EAX
				;}
 00001580  EB 5F			jmp	OFFSET $L000813
 00001582			$L000815:
				;{

				;{330}:Console::WriteLn("type == stSquare");
 00001582  8D 05 00000280 R		lea	EAX,OFFSET $S000607
 00001588  6A 00			push	000000000h
 0000158A  50				push	EAX 
 0000158B  E8 00000000 E		call	 Console_WriteString
 00001590  E8 00000000 E		call	 Console_WriteCrLf 

				;{332}:square= dynamic_cast(shape);
 00001595  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001598  8B C3			mov	EAX,EBX 
 0000159A  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 0000159D  89 03			mov	dword ptr [EBX],EAX

				;{333}:square.DrawCube();
 0000159F  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000015A2  E8 FFFFFC21			call	 UnitTesting_Square_DrawCube

				;{335}:shape_ptr= square;
 000015A7  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000015AA  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000015AD  89 03			mov	dword ptr [EBX],EAX
				;}
 000015AF  EB 30			jmp	OFFSET $L000813
 000015B1			$L000816:
				;{

				;{340}:Console::WriteLn("type == stTriangle");
 000015B1  8D 05 00000291 R		lea	EAX,OFFSET $S000609
 000015B7  6A 00			push	000000000h
 000015B9  50				push	EAX 
 000015BA  E8 00000000 E		call	 Console_WriteString
 000015BF  E8 00000000 E		call	 Console_WriteCrLf 

				;{342}:triangle= dynamic_cast(shape);
 000015C4  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015C7  8B C3			mov	EAX,EBX 
 000015C9  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 000015CC  89 03			mov	dword ptr [EBX],EAX

				;{343}:triangle.DrawPiramid();
 000015CE  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 000015D1  8B 11			mov	EDX,dword ptr [ECX]
 000015D3  FF 52 14			call	dword ptr [EDX+0014h]

				;{345}:shape_ptr= triangle;
 000015D6  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 000015D9  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000015DC  89 03			mov	dword ptr [EBX],EAX
				;}
 000015DE  EB 01			jmp	OFFSET $L000813
 000015E0			$L000817:
 000015E0  CC				int	000000003h ;User breakpoint
 000015E1			$L000813:

				;{353}:if(shape_ptr != null)
 000015E1  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000015E4  8B C8			mov	ECX,EAX 
 000015E6  51				push	ECX
 000015E7  33 C0			xor	EAX,EAX
 000015E9  5B				pop	EBX
 000015EA  3B D8			cmp	EBX,EAX
 000015EC  0F 95 C0			setnz	AL
 000015EF  84 C0			test	AL,AL
 000015F1  74 08			jz	OFFSET $L000818

				;{354}:shape_ptr.Draw();
 000015F3  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000015F6  8B 11			mov	EDX,dword ptr [ECX]
 000015F8  FF 52 0C			call	dword ptr [EDX+000Ch]
 000015FB			$L000818:

				;{356}:if(null != shape_ptr)
 000015FB  33 C0			xor	EAX,EAX
 000015FD  50				push	EAX
 000015FE  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001601  59				pop	ECX
 00001602  3B C8			cmp	ECX,EAX
 00001604  0F 95 C0			setnz	AL
 00001607  84 C0			test	AL,AL
 00001609  74 08			jz	OFFSET $L000820

				;{357}:shape_ptr.Draw();
 0000160B  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000160E  8B 11			mov	EDX,dword ptr [ECX]
 00001610  FF 52 0C			call	dword ptr [EDX+000Ch]
 00001613			$L000820:

				;{360}:Console::WriteLn("**Visited object name = ", shape_ptr.Name());
 00001613  8D 05 00000080 R		lea	EAX,OFFSET $S000611
 00001619  6A 00			push	000000000h
 0000161B  50				push	EAX 
 0000161C  E8 00000000 E		call	 Console_WriteString
 00001621  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00001624  8B 11			mov	EDX,dword ptr [ECX]
 00001626  FF 52 08			call	dword ptr [EDX+0008h]
 00001629  6A 00			push	000000000h 
 0000162B  50				push	EAX 
 0000162C  E8 00000000 E		call	 Console_WriteString 
 00001631  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001636			$L000602:

 00001636  5F				pop	EDI
 00001637  5E				pop	ESI 
 00001638  5B				pop	EBX 
 00001639  C9				leave	
 0000163A  C2 0004			retn	000000004h
 0000163D			UnitTesting_Visitor_Visit ENDP

 0000163D			__member_Init@LastFeatures_DoubleProxy PROC NEAR

 0000163D  55				push	EBP
 0000163E  8B EC			mov	EBP,ESP
 00001640  51				push	ECX 
 00001641  53				push	EBX 
 00001642  56				push	ESI 
 00001643  57				push	EDI 
 00001644  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:val= 0.0;
 00001647  D9 EE			fldz
 00001649  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000164C  DD 59 04			fstp	qword ptr [ECX+0004h]

 0000164F  5F				pop	EDI
 00001650  5E				pop	ESI 
 00001651  5B				pop	EBX 
 00001652  C9				leave	
 00001653  C3				ret	
 00001654			__member_Init@LastFeatures_DoubleProxy ENDP
 00001654			__member_Init@LastFeatures_TestProperties PROC NEAR

 00001654  55				push	EBP
 00001655  8B EC			mov	EBP,ESP
 00001657  51				push	ECX 
 00001658  53				push	EBX 
 00001659  56				push	ESI 
 0000165A  57				push	EDI 
 0000165B  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:shapes1= new UnitTesting::Circle[3 * 5];
 0000165E  B8 00000003			mov	EAX,000000003h
 00001663  50				push	EAX
 00001664  B8 00000005			mov	EAX,000000005h
 00001669  59				pop	ECX
 0000166A  33 D2			xor	EDX,EDX
 0000166C  0F AF C1			imul	EAX,ECX
 0000166F  6B C0 0C			imul	EAX,00000000Ch
 00001672  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00001675  53				push	EBX
 00001676  8B D8			mov	EBX,EAX
 00001678  E8 00000000 E		call	 System_Memory_New
 0000167D  85 C0			test	EAX,EAX
 0000167F  74 14			jz	 $L000822
 00001681  8B F0			mov	ESI,EAX 
 00001683  8D 3E			lea	EDI,dword ptr [ESI]
 00001685  8B CB			mov	ECX,EBX 
 00001687  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000168C  F3/ AA			rep stos	byte ptr [EDI]
 0000168E  89 1E			mov	dword ptr [ESI],EBX 
 00001690  83 C6 04			add	ESI,000000004h
 00001693  EB 02			jmp	 $L000823
 00001695			$L000822:
 00001695  33 F6			xor	ESI,ESI
 00001697			$L000823:
 00001697  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000169A  89 31			mov	dword ptr [ECX],ESI 
 0000169C  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 0000169F  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000016A2  8B DE			mov	EBX,ESI 
 000016A4			$L000824:
 000016A4  8B CB			mov	ECX,EBX 
 000016A6  E8 FFFFF896			call	 UnitTesting_Circle
 000016AB  83 C3 0C			add	EBX,00000000Ch 
 000016AE  3B DF			cmp	EBX,EDI
 000016B0  75 F2			jnz	OFFSET $L000824
 000016B2  8B C6			mov	EAX,ESI 

				;{0}:shapes2= new UnitTesting::Circle[4];
 000016B4  B8 00000004			mov	EAX,000000004h
 000016B9  6B C0 0C			imul	EAX,00000000Ch
 000016BC  8D 58 04			lea	EBX,dword ptr [EAX+4]
 000016BF  53				push	EBX
 000016C0  8B D8			mov	EBX,EAX
 000016C2  E8 00000000 E		call	 System_Memory_New
 000016C7  85 C0			test	EAX,EAX
 000016C9  74 14			jz	 $L000825
 000016CB  8B F0			mov	ESI,EAX 
 000016CD  8D 3E			lea	EDI,dword ptr [ESI]
 000016CF  8B CB			mov	ECX,EBX 
 000016D1  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000016D6  F3/ AA			rep stos	byte ptr [EDI]
 000016D8  89 1E			mov	dword ptr [ESI],EBX 
 000016DA  83 C6 04			add	ESI,000000004h
 000016DD  EB 02			jmp	 $L000826
 000016DF			$L000825:
 000016DF  33 F6			xor	ESI,ESI
 000016E1			$L000826:
 000016E1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000016E4  89 71 04			mov	dword ptr [ECX+0004h],ESI 
 000016E7  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 000016EA  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000016ED  8B DE			mov	EBX,ESI 
 000016EF			$L000827:
 000016EF  8B CB			mov	ECX,EBX 
 000016F1  E8 FFFFF84B			call	 UnitTesting_Circle
 000016F6  83 C3 0C			add	EBX,00000000Ch 
 000016F9  3B DF			cmp	EBX,EDI
 000016FB  75 F2			jnz	OFFSET $L000827
 000016FD  8B C6			mov	EAX,ESI 

				;{0}:shapes_ptr= new UnitTesting::Circle[4 * 5];
 000016FF  B8 00000004			mov	EAX,000000004h
 00001704  50				push	EAX
 00001705  B8 00000005			mov	EAX,000000005h
 0000170A  59				pop	ECX
 0000170B  33 D2			xor	EDX,EDX
 0000170D  0F AF C1			imul	EAX,ECX
 00001710  6B C0 0C			imul	EAX,00000000Ch
 00001713  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00001716  53				push	EBX
 00001717  8B D8			mov	EBX,EAX
 00001719  E8 00000000 E		call	 System_Memory_New
 0000171E  85 C0			test	EAX,EAX
 00001720  74 14			jz	 $L000828
 00001722  8B F0			mov	ESI,EAX 
 00001724  8D 3E			lea	EDI,dword ptr [ESI]
 00001726  8B CB			mov	ECX,EBX 
 00001728  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000172D  F3/ AA			rep stos	byte ptr [EDI]
 0000172F  89 1E			mov	dword ptr [ESI],EBX 
 00001731  83 C6 04			add	ESI,000000004h
 00001734  EB 02			jmp	 $L000829
 00001736			$L000828:
 00001736  33 F6			xor	ESI,ESI
 00001738			$L000829:
 00001738  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000173B  89 71 08			mov	dword ptr [ECX+0008h],ESI 
 0000173E  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00001741  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00001744  8B DE			mov	EBX,ESI 
 00001746			$L000830:
 00001746  8B CB			mov	ECX,EBX 
 00001748  E8 FFFFF7F4			call	 UnitTesting_Circle
 0000174D  83 C3 0C			add	EBX,00000000Ch 
 00001750  3B DF			cmp	EBX,EDI
 00001752  75 F2			jnz	OFFSET $L000830
 00001754  8B C6			mov	EAX,ESI 

 00001756  5F				pop	EDI
 00001757  5E				pop	ESI 
 00001758  5B				pop	EBX 
 00001759  C9				leave	
 0000175A  C3				ret	
 0000175B			__member_Init@LastFeatures_TestProperties ENDP
 0000175B			__member_Init@LastFeatures_TestProperties_node PROC NEAR

 0000175B  55				push	EBP
 0000175C  8B EC			mov	EBP,ESP
 0000175E  51				push	ECX 
 0000175F  53				push	EBX 
 00001760  56				push	ESI 
 00001761  57				push	EDI 
 00001762  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:left= null;
 00001765  33 C0			xor	EAX,EAX
 00001767  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000176A  89 01			mov	dword ptr [ECX],EAX

				;{0}:right= null;
 0000176C  33 C0			xor	EAX,EAX
 0000176E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001771  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:value= null;
 00001774  33 C0			xor	EAX,EAX
 00001776  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001779  89 41 08			mov	dword ptr [ECX+0008h],EAX

 0000177C  5F				pop	EDI
 0000177D  5E				pop	ESI 
 0000177E  5B				pop	EBX 
 0000177F  C9				leave	
 00001780  C3				ret	
 00001781			__member_Init@LastFeatures_TestProperties_node ENDP
 00001781			__member_Init@UnitTesting_Circle PROC NEAR

 00001781  55				push	EBP
 00001782  8B EC			mov	EBP,ESP
 00001784  51				push	ECX 
 00001785  53				push	EBX 
 00001786  56				push	ESI 
 00001787  57				push	EDI 
 00001788  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:radius= 0.0;
 0000178B  D9 EE			fldz
 0000178D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001790  DD 59 04			fstp	qword ptr [ECX+0004h]

 00001793  5F				pop	EDI
 00001794  5E				pop	ESI 
 00001795  5B				pop	EBX 
 00001796  C9				leave	
 00001797  C3				ret	
 00001798			__member_Init@UnitTesting_Circle ENDP
 00001798			__member_Init@UnitTesting_ShapeFactoryCreator PROC NEAR

 00001798  55				push	EBP
 00001799  8B EC			mov	EBP,ESP
 0000179B  51				push	ECX 
 0000179C  53				push	EBX 
 0000179D  56				push	ESI 
 0000179E  57				push	EDI 
 0000179F  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:ptr3= new UnitTesting::Circle();
 000017A2  6A 0C			push	00000000Ch
 000017A4  E8 00000000 E		call	 System_Memory_New
 000017A9  85 C0			test	EAX,EAX
 000017AB  74 12			jz	 $L000831
 000017AD  8B F0			mov	ESI,EAX
 000017AF  8D 3E			lea	EDI,dword ptr [ESI]
 000017B1  B9 00000003			mov	ECX,000000003h 
 000017B6  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000017BB  F3/ AB			rep stos	dword ptr [EDI]
 000017BD  EB 02			jmp	 $L000832
 000017BF			$L000831:
 000017BF  33 F6			xor	ESI,ESI
 000017C1			$L000832:
 000017C1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000017C4  89 31			mov	dword ptr [ECX],ESI 
 000017C6  8B CE			mov	ECX,ESI 
 000017C8  E8 FFFFF774			call	 UnitTesting_Circle
 000017CD  8B C6			mov	EAX,ESI 

 000017CF  5F				pop	EDI
 000017D0  5E				pop	ESI 
 000017D1  5B				pop	EBX 
 000017D2  C9				leave	
 000017D3  C3				ret	
 000017D4			__member_Init@UnitTesting_ShapeFactoryCreator ENDP
 000017D4			__member_Init@UnitTesting_Square PROC NEAR

 000017D4  55				push	EBP
 000017D5  8B EC			mov	EBP,ESP
 000017D7  51				push	ECX 
 000017D8  53				push	EBX 
 000017D9  56				push	ESI 
 000017DA  57				push	EDI 
 000017DB  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dWidth= 0.0;
 000017DE  D9 EE			fldz
 000017E0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000017E3  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHeight= 0.0;
 000017E6  D9 EE			fldz
 000017E8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000017EB  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 000017EE  5F				pop	EDI
 000017EF  5E				pop	ESI 
 000017F0  5B				pop	EBX 
 000017F1  C9				leave	
 000017F2  C3				ret	
 000017F3			__member_Init@UnitTesting_Square ENDP
 000017F3			__member_Init@UnitTesting_Triangle PROC NEAR

 000017F3  55				push	EBP
 000017F4  8B EC			mov	EBP,ESP
 000017F6  51				push	ECX 
 000017F7  53				push	EBX 
 000017F8  56				push	ESI 
 000017F9  57				push	EDI 
 000017FA  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dBase= 0.0;
 000017FD  D9 EE			fldz
 000017FF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001802  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHigh= 0.0;
 00001805  D9 EE			fldz
 00001807  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000180A  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 0000180D  5F				pop	EDI
 0000180E  5E				pop	ESI 
 0000180F  5B				pop	EBX 
 00001810  C9				leave	
 00001811  C3				ret	
 00001812			__member_Init@UnitTesting_Triangle ENDP
 00001812			LastFeatures_TestFeatures_main PROC NEAR 
				;void LastFeatures::TestFeatures::main(int argc, string [] argv);
 00001812  55				push	EBP
 00001813  8B EC			mov	EBP,ESP
 00001815  83 EC 7C			sub	ESP,00000007Ch
 00001818  53				push	EBX 
 00001819  56				push	ESI 
 0000181A  57				push	EDI 
 0000181B  8D 7D 84			lea	EDI,dword ptr [EBP-007Ch]
 0000181E  B9 0000001F			mov	ECX,00000001Fh
 00001823  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001828  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{218}:for(ac= 0; ac < argc; ac++ )
 0000182A  33 C0			xor	EAX,EAX
 0000182C  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000182F  EB 06			jmp	OFFSET $L000833
 00001831			$L000834:
 00001831  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001834  FF 45 FC			inc	dword ptr [EBP-4]
 00001837			$L000833:
 00001837  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000183A  50				push	EAX
 0000183B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000183E  5A				pop	EDX
 0000183F  3B D0			cmp	EDX,EAX
 00001841  0F 9C C0			setl	AL
 00001844  84 C0			test	AL,AL
 00001846  74 41			jz	OFFSET $L000835
				;{

				;{220}:Console::WriteLn("Argument: [", ac, "]= ", argv[ac]);
 00001848  8D 05 000000AA R		lea	EAX,OFFSET $S000685
 0000184E  6A 00			push	000000000h
 00001850  50				push	EAX 
 00001851  E8 00000000 E		call	 Console_WriteString
 00001856  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001859  50				push	EAX 
 0000185A  E8 00000000 E		call	 Console_WriteInteger 
 0000185F  8D 05 000001FD R		lea	EAX,OFFSET $S000686
 00001865  6A 00			push	000000000h 
 00001867  50				push	EAX 
 00001868  E8 00000000 E		call	 Console_WriteString 
 0000186D  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001870  8B C3			mov	EAX,EBX 
 00001872  50				push	EAX
 00001873  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001876  5E				pop	ESI
 00001877  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 0000187A  6A 00			push	000000000h 
 0000187C  50				push	EAX 
 0000187D  E8 00000000 E		call	 Console_WriteString 
 00001882  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001887  EB A8			jmp	OFFSET $L000834 
 00001889			$L000835:
 00001889  CC				int	000000003h ;User breakpoint

				;{224}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Circle");
 0000188A  8D 05 000000B6 R		lea	EAX,OFFSET $S000541
 00001890  50				push	EAX
 00001891  E8 FFFFF75D			call	 UnitTesting_ShapeFactoryCreator_Create
 00001896  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00001899  89 03			mov	dword ptr [EBX],EAX

				;{226}:obj_ptr.Draw();
 0000189B  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 0000189E  8B 11			mov	EDX,dword ptr [ECX]
 000018A0  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{228}:circl= dynamic_cast(obj_ptr);
 000018A3  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000018A6  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000018A9  89 03			mov	dword ptr [EBX],EAX

				;{230}:circl= dynamic_cast(UnitTesting::Circle, obj_ptr);
 000018AB  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000018AE  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000018B1  89 03			mov	dword ptr [EBX],EAX

				;{235}:circl.DrawSphere();
 000018B3  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000018B6  8B 11			mov	EDX,dword ptr [ECX]
 000018B8  FF 52 14			call	dword ptr [EDX+0014h]

				;{237}:visitor;

				;{238}:visitor.Visit(obj_ptr);
 000018BB  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000018BE  50				push	EAX
 000018BF  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 000018C2  E8 FFFFFC36			call	 UnitTesting_Visitor_Visit

				;{240}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 000018C7  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000018CA  8B F1			mov	ESI,ECX
 000018CC  85 C9			test	ECX,ECX
 000018CE  74 05			jz	OFFSET $L000837
 000018D0  8B 01			mov	EAX,dword ptr [ECX] 
 000018D2  FF 50 10			call	dword ptr [EAX+0010h]
 000018D5			$L000837:
 000018D5  56				push	ESI
 000018D6  E8 00000000 E		call	 System_Memory_Destroy

				;{243}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Circle");
 000018DB  8D 05 000000B6 R		lea	EAX,OFFSET $S000541
 000018E1  50				push	EAX
 000018E2  E8 FFFFF70C			call	 UnitTesting_ShapeFactoryCreator_Create
 000018E7  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 000018EA  89 03			mov	dword ptr [EBX],EAX

				;{245}:obj_ptr.Draw();
 000018EC  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000018EF  8B 11			mov	EDX,dword ptr [ECX]
 000018F1  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{247}:destroy obj_ptr;
 000018F4  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000018F7  8B F1			mov	ESI,ECX
 000018F9  85 C9			test	ECX,ECX
 000018FB  74 05			jz	OFFSET $L000839
 000018FD  8B 01			mov	EAX,dword ptr [ECX] 
 000018FF  FF 50 10			call	dword ptr [EAX+0010h]
 00001902			$L000839:
 00001902  56				push	ESI
 00001903  E8 00000000 E		call	 System_Memory_Destroy

				;{249}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Triangle");
 00001908  8D 05 000001F4 R		lea	EAX,OFFSET $S000587
 0000190E  50				push	EAX
 0000190F  E8 FFFFF6DF			call	 UnitTesting_ShapeFactoryCreator_Create
 00001914  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00001917  89 03			mov	dword ptr [EBX],EAX

				;{251}:obj_ptr.Draw();
 00001919  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 0000191C  8B 11			mov	EDX,dword ptr [ECX]
 0000191E  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{253}:destroy obj_ptr;
 00001921  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00001924  8B F1			mov	ESI,ECX
 00001926  85 C9			test	ECX,ECX
 00001928  74 05			jz	OFFSET $L000841
 0000192A  8B 01			mov	EAX,dword ptr [ECX] 
 0000192C  FF 50 10			call	dword ptr [EAX+0010h]
 0000192F			$L000841:
 0000192F  56				push	ESI
 00001930  E8 00000000 E		call	 System_Memory_Destroy

				;{255}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Square");
 00001935  8D 05 000001ED R		lea	EAX,OFFSET $S000567
 0000193B  50				push	EAX
 0000193C  E8 FFFFF6B2			call	 UnitTesting_ShapeFactoryCreator_Create
 00001941  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00001944  89 03			mov	dword ptr [EBX],EAX

				;{257}:obj_ptr.Draw();
 00001946  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00001949  8B 11			mov	EDX,dword ptr [ECX]
 0000194B  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{259}:destroy obj_ptr;
 0000194E  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00001951  8B F1			mov	ESI,ECX
 00001953  85 C9			test	ECX,ECX
 00001955  74 05			jz	OFFSET $L000843
 00001957  8B 01			mov	EAX,dword ptr [ECX] 
 00001959  FF 50 10			call	dword ptr [EAX+0010h]
 0000195C			$L000843:
 0000195C  56				push	ESI
 0000195D  E8 00000000 E		call	 System_Memory_Destroy

				;{262}:testProp;
 00001962  8D 4D A8			lea	ECX,dword ptr [EBP-0058h]
 00001965  E8 FFFFEDDF			call	 LastFeatures_TestProperties

				;{264}:shapes= new UnitTesting::Circle[20];
 0000196A  B8 00000014			mov	EAX,000000014h
 0000196F  6B C0 0C			imul	EAX,00000000Ch
 00001972  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00001975  53				push	EBX
 00001976  8B D8			mov	EBX,EAX
 00001978  E8 00000000 E		call	 System_Memory_New
 0000197D  85 C0			test	EAX,EAX
 0000197F  74 14			jz	 $L000844
 00001981  8B F0			mov	ESI,EAX 
 00001983  8D 3E			lea	EDI,dword ptr [ESI]
 00001985  8B CB			mov	ECX,EBX 
 00001987  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000198C  F3/ AA			rep stos	byte ptr [EDI]
 0000198E  89 1E			mov	dword ptr [ESI],EBX 
 00001990  83 C6 04			add	ESI,000000004h
 00001993  EB 02			jmp	 $L000845
 00001995			$L000844:
 00001995  33 F6			xor	ESI,ESI
 00001997			$L000845:
 00001997  89 75 A4			mov	dword ptr [EBP-005Ch],ESI 
 0000199A  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 0000199D  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000019A0  8B DE			mov	EBX,ESI 
 000019A2			$L000846:
 000019A2  8B CB			mov	ECX,EBX 
 000019A4  E8 FFFFF598			call	 UnitTesting_Circle
 000019A9  83 C3 0C			add	EBX,00000000Ch 
 000019AC  3B DF			cmp	EBX,EDI
 000019AE  75 F2			jnz	OFFSET $L000846
 000019B0  8B C6			mov	EAX,ESI 

				;{265}:testProp.Shapes= shapes;
 000019B2  8B 45 A4			mov	EAX,dword ptr [EBP-92]
 000019B5  50				push	EAX
 000019B6  8D 4D A8			lea	ECX,dword ptr [EBP-0058h]
 000019B9  E8 FFFFE959			call	 LastFeatures_TestProperties_put_Shapes

				;{275}:hex_value= 0xDEADC0DEh;
 000019BE  B8 DEADC0DE			mov	EAX,0DEADC0DEh
 000019C3  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{277}:hex_value= hex_value << 0x10;
 000019C6  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 000019C9  C1 E0 10			shl	EAX,000000010h
 000019CC  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{279}:hex_value= hex_value >> 8;
 000019CF  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 000019D2  C1 E8 08			shr	EAX,000000008h
 000019D5  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{281}:hex_value= hex_value >> 8;
 000019D8  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 000019DB  C1 E8 08			shr	EAX,000000008h
 000019DE  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{283}:shift= 0x10;
 000019E1  B8 00000010			mov	EAX,000000010h
 000019E6  66| 89 45 9C			mov	word ptr [EBP-0064h],AX

				;{285}:hex_value << shift;
 000019EA  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 000019ED  50				push	EAX
 000019EE  0F BF 45 9C			movsx	EAX,word ptr [EBP-0064h]
 000019F2  8A C8			mov	CL,AL
 000019F4  58				pop	EAX
 000019F5  D3 E0			shl	EAX,CL

				;{287}:p= new double;
 000019F7  6A 08			push	000000008h
 000019F9  E8 00000000 E		call	 System_Memory_New
 000019FE  85 C0			test	EAX,EAX
 00001A00  74 12			jz	 $L000847
 00001A02  8B F0			mov	ESI,EAX
 00001A04  8D 3E			lea	EDI,dword ptr [ESI]
 00001A06  B9 00000002			mov	ECX,000000002h 
 00001A0B  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001A10  F3/ AB			rep stos	dword ptr [EDI]
 00001A12  EB 02			jmp	 $L000848
 00001A14			$L000847:
 00001A14  33 F6			xor	ESI,ESI
 00001A16			$L000848:
 00001A16  89 75 98			mov	dword ptr [EBP-0068h],ESI 

				;{289}:*p= 3.141516927;
 00001A19  8B 45 98			mov	EAX,dword ptr [EBP-104]
 00001A1C  50				push	EAX
 00001A1D  BA A06A5D05			mov	EDX,0A06A5D05h
 00001A22  B8 400921D3			mov	EAX,0400921D3h 
 00001A27  5B				pop	EBX
 00001A28  89 13			mov	dword ptr [EBX],EDX
 00001A2A  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{291}:Console::WriteLn("*p (3.1415...)= ", *p);
 00001A2D  8D 05 00000099 R		lea	EAX,OFFSET $S000700
 00001A33  6A 00			push	000000000h
 00001A35  50				push	EAX 
 00001A36  E8 00000000 E		call	 Console_WriteString
 00001A3B  8B 45 98			mov	EAX,dword ptr [EBP-104]
 00001A3E  8B 10			mov	EDX,dword ptr [EAX]
 00001A40  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00001A43  50				push	EAX 
 00001A44  52				push	EDX 
 00001A45  E8 00000000 E		call	 Console_WriteDouble 
 00001A4A  E8 00000000 E		call	 Console_WriteCrLf 

				;{293}:res= *p;
 00001A4F  8B 45 98			mov	EAX,dword ptr [EBP-104]
 00001A52  8B 10			mov	EDX,dword ptr [EAX]
 00001A54  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00001A57  50				push	EAX
 00001A58  52				push	EDX 
 00001A59  DD 04 24			fld	qword ptr [ESP]
 00001A5C  DD 5D 90			fstp	qword ptr [EBP-0070h]

				;{295}:Console::WriteLn("res (3.1415...)= ", res);
 00001A5F  5A				pop	EDX
 00001A60  58				pop	EAX 
 00001A61  8D 05 0000025D R		lea	EAX,OFFSET $S000702
 00001A67  6A 00			push	000000000h
 00001A69  50				push	EAX 
 00001A6A  E8 00000000 E		call	 Console_WriteString
 00001A6F  8B 55 90			mov	EDX,dword ptr [EBP-0070h]
 00001A72  8B 45 94			mov	EAX,dword ptr [EBP-006Ch] 
 00001A75  50				push	EAX 
 00001A76  52				push	EDX 
 00001A77  E8 00000000 E		call	 Console_WriteDouble 
 00001A7C  E8 00000000 E		call	 Console_WriteCrLf 

				;{297}:destroy p;
 00001A81  8B 45 98			mov	EAX,dword ptr [EBP-104]
 00001A84  85 C0			test	EAX,EAX
 00001A86  74 06			jz	OFFSET $L000849
 00001A88  50				push	EAX
 00001A89  E8 00000000 E		call	 System_Memory_Destroy
 00001A8E			$L000849:

				;{306}:sorter;

				;{308}:n= 10;
 00001A8E  B8 0000000A			mov	EAX,00000000Ah
 00001A93  89 45 88			mov	dword ptr [EBP-0078h],EAX

				;{309}:array= new LastFeatures::DoubleProxy[n];
 00001A96  8B 45 88			mov	EAX,dword ptr [EBP-0078h]
 00001A99  6B C0 0C			imul	EAX,00000000Ch
 00001A9C  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00001A9F  53				push	EBX
 00001AA0  8B D8			mov	EBX,EAX
 00001AA2  E8 00000000 E		call	 System_Memory_New
 00001AA7  85 C0			test	EAX,EAX
 00001AA9  74 14			jz	 $L000850
 00001AAB  8B F0			mov	ESI,EAX 
 00001AAD  8D 3E			lea	EDI,dword ptr [ESI]
 00001AAF  8B CB			mov	ECX,EBX 
 00001AB1  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001AB6  F3/ AA			rep stos	byte ptr [EDI]
 00001AB8  89 1E			mov	dword ptr [ESI],EBX 
 00001ABA  83 C6 04			add	ESI,000000004h
 00001ABD  EB 02			jmp	 $L000851
 00001ABF			$L000850:
 00001ABF  33 F6			xor	ESI,ESI
 00001AC1			$L000851:
 00001AC1  89 75 84			mov	dword ptr [EBP-007Ch],ESI 
 00001AC4  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00001AC7  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00001ACA  8B DE			mov	EBX,ESI 
 00001ACC			$L000852:
 00001ACC  8B CB			mov	ECX,EBX 
 00001ACE  E8 FFFFE52D			call	 LastFeatures_DoubleProxy
 00001AD3  83 C3 0C			add	EBX,00000000Ch 
 00001AD6  3B DF			cmp	EBX,EDI
 00001AD8  75 F2			jnz	OFFSET $L000852
 00001ADA  8B C6			mov	EAX,ESI 

				;{311}:array[0].val= 19.2;
 00001ADC  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001ADF  50				push	EAX
 00001AE0  33 C0			xor	EAX,EAX
 00001AE2  5E				pop	ESI
 00001AE3  6B C0 0C			imul	EAX,00000000Ch
 00001AE6  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001AE9  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001AEC  50				push	EAX
 00001AED  BA 33333334			mov	EDX,033333334h
 00001AF2  B8 40333333			mov	EAX,040333333h 
 00001AF7  50				push	EAX
 00001AF8  52				push	EDX 
 00001AF9  DD 04 24			fld	qword ptr [ESP]
 00001AFC  5A				pop	EDX
 00001AFD  58				pop	EAX 
 00001AFE  5B				pop	EBX
 00001AFF  DD 1B			fstp	qword ptr [EBX]

				;{312}:array[1].val= 1.2;
 00001B01  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001B04  50				push	EAX
 00001B05  B8 00000001			mov	EAX,000000001h
 00001B0A  5E				pop	ESI
 00001B0B  6B C0 0C			imul	EAX,00000000Ch
 00001B0E  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001B11  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001B14  50				push	EAX
 00001B15  BA 33333334			mov	EDX,033333334h
 00001B1A  B8 3FF33333			mov	EAX,03FF33333h 
 00001B1F  50				push	EAX
 00001B20  52				push	EDX 
 00001B21  DD 04 24			fld	qword ptr [ESP]
 00001B24  5A				pop	EDX
 00001B25  58				pop	EAX 
 00001B26  5B				pop	EBX
 00001B27  DD 1B			fstp	qword ptr [EBX]

				;{313}:array[2].val= 6.3456;
 00001B29  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001B2C  50				push	EAX
 00001B2D  B8 00000002			mov	EAX,000000002h
 00001B32  5E				pop	ESI
 00001B33  6B C0 0C			imul	EAX,00000000Ch
 00001B36  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001B39  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001B3C  50				push	EAX
 00001B3D  BA F765FD8B			mov	EDX,0F765FD8Bh
 00001B42  B8 401961E4			mov	EAX,0401961E4h 
 00001B47  50				push	EAX
 00001B48  52				push	EDX 
 00001B49  DD 04 24			fld	qword ptr [ESP]
 00001B4C  5A				pop	EDX
 00001B4D  58				pop	EAX 
 00001B4E  5B				pop	EBX
 00001B4F  DD 1B			fstp	qword ptr [EBX]

				;{314}:array[4].val= 7.2345;
 00001B51  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001B54  50				push	EAX
 00001B55  B8 00000004			mov	EAX,000000004h
 00001B5A  5E				pop	ESI
 00001B5B  6B C0 0C			imul	EAX,00000000Ch
 00001B5E  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001B61  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001B64  50				push	EAX
 00001B65  BA C49BA5E4			mov	EDX,0C49BA5E4h
 00001B6A  B8 401CF020			mov	EAX,0401CF020h 
 00001B6F  50				push	EAX
 00001B70  52				push	EDX 
 00001B71  DD 04 24			fld	qword ptr [ESP]
 00001B74  5A				pop	EDX
 00001B75  58				pop	EAX 
 00001B76  5B				pop	EBX
 00001B77  DD 1B			fstp	qword ptr [EBX]

				;{315}:array[5].val= 12.4567;
 00001B79  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001B7C  50				push	EAX
 00001B7D  B8 00000005			mov	EAX,000000005h
 00001B82  5E				pop	ESI
 00001B83  6B C0 0C			imul	EAX,00000000Ch
 00001B86  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001B89  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001B8C  50				push	EAX
 00001B8D  BA 95182A9A			mov	EDX,095182A9Ah
 00001B92  B8 4028E9D4			mov	EAX,04028E9D4h 
 00001B97  50				push	EAX
 00001B98  52				push	EDX 
 00001B99  DD 04 24			fld	qword ptr [ESP]
 00001B9C  5A				pop	EDX
 00001B9D  58				pop	EAX 
 00001B9E  5B				pop	EBX
 00001B9F  DD 1B			fstp	qword ptr [EBX]

				;{316}:array[6].val= 9.2345;
 00001BA1  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001BA4  50				push	EAX
 00001BA5  B8 00000006			mov	EAX,000000006h
 00001BAA  5E				pop	ESI
 00001BAB  6B C0 0C			imul	EAX,00000000Ch
 00001BAE  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001BB1  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001BB4  50				push	EAX
 00001BB5  BA 624DD2F2			mov	EDX,0624DD2F2h
 00001BBA  B8 40227810			mov	EAX,040227810h 
 00001BBF  50				push	EAX
 00001BC0  52				push	EDX 
 00001BC1  DD 04 24			fld	qword ptr [ESP]
 00001BC4  5A				pop	EDX
 00001BC5  58				pop	EAX 
 00001BC6  5B				pop	EBX
 00001BC7  DD 1B			fstp	qword ptr [EBX]

				;{317}:array[7].val= 15.123;
 00001BC9  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001BCC  50				push	EAX
 00001BCD  B8 00000007			mov	EAX,000000007h
 00001BD2  5E				pop	ESI
 00001BD3  6B C0 0C			imul	EAX,00000000Ch
 00001BD6  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001BD9  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001BDC  50				push	EAX
 00001BDD  BA DB22D0E6			mov	EDX,0DB22D0E6h
 00001BE2  B8 402E3EF9			mov	EAX,0402E3EF9h 
 00001BE7  50				push	EAX
 00001BE8  52				push	EDX 
 00001BE9  DD 04 24			fld	qword ptr [ESP]
 00001BEC  5A				pop	EDX
 00001BED  58				pop	EAX 
 00001BEE  5B				pop	EBX
 00001BEF  DD 1B			fstp	qword ptr [EBX]

				;{318}:array[8].val= 3.2345;
 00001BF1  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001BF4  50				push	EAX
 00001BF5  B8 00000008			mov	EAX,000000008h
 00001BFA  5E				pop	ESI
 00001BFB  6B C0 0C			imul	EAX,00000000Ch
 00001BFE  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001C01  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001C04  50				push	EAX
 00001C05  BA 89374BC7			mov	EDX,089374BC7h
 00001C0A  B8 4009E041			mov	EAX,04009E041h 
 00001C0F  50				push	EAX
 00001C10  52				push	EDX 
 00001C11  DD 04 24			fld	qword ptr [ESP]
 00001C14  5A				pop	EDX
 00001C15  58				pop	EAX 
 00001C16  5B				pop	EBX
 00001C17  DD 1B			fstp	qword ptr [EBX]

				;{319}:array[9].val= 18.1234;
 00001C19  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001C1C  50				push	EAX
 00001C1D  B8 00000009			mov	EAX,000000009h
 00001C22  5E				pop	ESI
 00001C23  6B C0 0C			imul	EAX,00000000Ch
 00001C26  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001C29  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00001C2C  50				push	EAX
 00001C2D  BA 2474538F			mov	EDX,02474538Fh
 00001C32  B8 40321F97			mov	EAX,040321F97h 
 00001C37  50				push	EAX
 00001C38  52				push	EDX 
 00001C39  DD 04 24			fld	qword ptr [ESP]
 00001C3C  5A				pop	EDX
 00001C3D  58				pop	EAX 
 00001C3E  5B				pop	EBX
 00001C3F  DD 1B			fstp	qword ptr [EBX]

				;{320}:sorter.Sort(array, n);
 00001C41  8B 45 88			mov	EAX,dword ptr [EBP-0078h]
 00001C44  50				push	EAX 
 00001C45  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001C48  50				push	EAX
 00001C49  8D 4D 8C			lea	ECX,dword ptr [EBP-0074h]
 00001C4C  E8 FFFFE553			call	 LastFeatures_SortDoubleProxy_Sort

				;{322}:destroy []array;
 00001C51  8B 45 84			mov	EAX,dword ptr [EBP-124]
 00001C54  85 C0			test	EAX,EAX
 00001C56  74 25			jz	OFFSET $L000853
 00001C58  8B F0			mov	ESI,EAX
 00001C5A  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00001C5D  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00001C60  8B DE			mov	EBX,ESI 
 00001C62			$L000854:
 00001C62  8B CB			mov	ECX,EBX 
 00001C64  85 C9			test	ECX,ECX
 00001C66  74 05			jz	OFFSET $L000855
 00001C68  8B 01			mov	EAX,dword ptr [ECX]
 00001C6A  FF 50 0C			call	dword ptr [EAX+000Ch]
 00001C6D			$L000855:
 00001C6D  83 C3 0C			add	EBX,00000000Ch
 00001C70  3B DF			cmp	EBX,EDI
 00001C72  75 EE			jnz	OFFSET $L000854

 00001C74  83 C6 FC			add	ESI,0FFFFFFFCh
 00001C77  56				push	ESI
 00001C78  E8 00000000 E		call	 System_Memory_Destroy
 00001C7D			$L000853:

				;{324}:return 
 00001C7D  EB 00			jmp	OFFSET $L000681
				;}
 00001C7F			$L000681:

 00001C7F  5F				pop	EDI
 00001C80  5E				pop	ESI 
 00001C81  5B				pop	EBX 
 00001C82  C9				leave	
 00001C83  C2 0008			retn	000000008h
 00001C86			LastFeatures_TestFeatures_main ENDP

 00001C86			__System_Hpp_Runtime_Init PROC

 00001C86  55				push	EBP
 00001C87  8B EC			mov	EBP,ESP
 00001C89  51				push	ECX 
 00001C8A  53				push	EBX 
 00001C8B  56				push	ESI 
 00001C8C  57				push	EDI 
 00001C8D  E8 00000000 E		call	 GetVersion
 00001C92  A3 000002A4 R		mov	 __osver,EAX ;os version
 00001C97  A1 000002A4 R		mov	EAX, __osver 
 00001C9C  C1 E8 08			shr	EAX,000000008h
 00001C9F  25 000000FF			and	EAX,0000000FFh
 00001CA4  A3 000002A8 R		mov	 __winminor,EAX ;windows minor
 00001CA9  8B 0D 000002A4 R		mov	ECX, __osver 
 00001CAF  81 E1 000000FF		and	ECX,0000000FFh 
 00001CB5  89 0D 000002AC R		mov	 __winmajor,ECX ;windows major
 00001CBB  8B 15 000002AC R		mov	EDX,dword ptr __winmajor 
 00001CC1  C1 E2 08			shl	EDX,000000008h
 00001CC4  03 15 000002A8 R		add	EDX,dword ptr __winminor
 00001CCA  89 15 000002B0 R		mov	dword ptr __winver,EDX ;windows version
 00001CD0  A1 000002A4 R		mov	EAX, __osver 
 00001CD5  C1 E8 10			shr	EAX,000000010h 
 00001CD8  25 0000FFFF			and	EAX,00000FFFFh 
 00001CDD  A3 000002A4 R		mov	 __osver,EAX 
 00001CE2  8D 1D 000002D8 R		lea	EBX,dword ptr ___argc
 00001CE8  53				push	EBX
 00001CE9  E8 00000000 E		call	 System_GetCommandLineArgv 
 00001CEE  A3 000002D4 R		mov	dword ptr ___argv,EAX 
 00001CF3  50				push	EAX 
 00001CF4  8B 0D 000002D8 R		mov	ECX,dword ptr ___argc 
 00001CFA  51				push	ECX 
 00001CFB  E8 FFFFFB12			call	 LastFeatures_TestFeatures_main ;user entry point (stdcall calling convention)
 00001D00  50				push	EAX 
 00001D01  A1 000002D4 R		mov	EAX,dword ptr ___argv 
 00001D06  50				push	EAX 
 00001D07  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00001D0C  50				push	EAX 
 00001D0D  E8 00000000 E		call	 System_Memory_Free 
 00001D12  E8 00000000 E		call	 System_Exit 

 00001D17  5F				pop	EDI
 00001D18  5E				pop	ESI 
 00001D19  5B				pop	EBX 
 00001D1A  C9				leave	
 00001D1B  C3				ret	
 00001D1C			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 00000000 000000FB R		@@class_vptr_vtbl@@__LastFeatures_DoubleProxy	DWORD	OFFSET LastFeatures_DoubleProxy_lessThan,
	   000000A7 R
	   00000038 R
	   00000170 R
										OFFSET LastFeatures_DoubleProxy_isEqual,
										OFFSET LastFeatures_DoubleProxy_Swap,
										OFFSET LastFeatures_SimpleObject_Destructor

 00000010 00000000 E		@@class_vptr_vtbl@@__LastFeatures_SimpleObject	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000170 R
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET LastFeatures_SimpleObject_Destructor

 00000020 0000014F R		@@class_vptr_vtbl@@__LastFeatures_HObject	DWORD	OFFSET LastFeatures_HObject_Destructor

 00000024 0000027A R		@@class_vptr_vtbl@@__LastFeatures_SwapperObject	DWORD	OFFSET LastFeatures_SwapperObject_Swap

 00000028 00000F2E R		@@class_vptr_vtbl@@__UnitTesting_Circle	DWORD	OFFSET UnitTesting_Circle_Type,
	   00000E44 R
	   00000EE2 R
	   00000EA4 R
	   00000E79 R
	   00000EC3 R
										OFFSET UnitTesting_Circle_ComputeArea,
										OFFSET UnitTesting_Circle_Name,
										OFFSET UnitTesting_Circle_Draw,
										OFFSET UnitTesting_Circle_Destructor,
										OFFSET UnitTesting_Circle_DrawSphere

 00000040 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Shape	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 00000054 00001233 R		@@class_vptr_vtbl@@__UnitTesting_Square	DWORD	OFFSET UnitTesting_Square_Type,
	   0000114C R
	   0000121F R
	   000011A9 R
	   0000117E R
										OFFSET UnitTesting_Square_ComputeArea,
										OFFSET UnitTesting_Square_Name,
										OFFSET UnitTesting_Square_Draw,
										OFFSET UnitTesting_Square_Destructor

 00000068 000014C5 R		@@class_vptr_vtbl@@__UnitTesting_Triangle	DWORD	OFFSET UnitTesting_Triangle_Type,
	   000013C1 R
	   000014B1 R
	   0000143B R
	   0000140E R
	   0000145A R
										OFFSET UnitTesting_Triangle_ComputeArea,
										OFFSET UnitTesting_Triangle_Name,
										OFFSET UnitTesting_Triangle_Draw,
										OFFSET UnitTesting_Triangle_Destructor,
										OFFSET UnitTesting_Triangle_DrawPiramid

 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh
 = 00000001			UnitTesting_TestSwitch_open	=	000000001h
 = 00000002			UnitTesting_TestSwitch_close	=	000000002h
 = 00000003			UnitTesting_TestSwitch_write	=	000000003h
 = 00000004			UnitTesting_TestSwitch_read	=	000000004h

 00000080 2A 2A 56 69 73	$S000611 		BYTE 	"**Visited object name = ",0
	   69 74 65 64 20
	   6F 62 6A 65 63
	   74 20 6E 61 6D
	   65 20 3D 20 00
 00000099 2A 70 20 28 33	$S000700 		BYTE 	"*p (3.1415...)= ",0
	   2E 31 34 31 35
	   2E 2E 2E 29 3D
	   20 00
 000000AA 41 72 67 75 6D	$S000685 		BYTE 	"Argument: [",0
	   65 6E 74 3A 20
	   5B 00
 000000B6 43 69 72 63 6C	$S000541 		BYTE 	"Circle",0
	   65 00
 000000BD 43 6C 6F 73 69	$S000510 		BYTE 	"Closing file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 000000CD 43 6F 6E 73 74	$S000628 		BYTE 	"Constructing a Double Proxy...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   44 6F 75 62 6C
	   65 20 50 72 6F
	   78 79 2E 2E 2E
	   00
 000000EC 44 65 73 74 72	$S000623 		BYTE 	"Destroying a Simple Object...",0
	   6F 79 69 6E 67
	   20 61 20 53 69
	   6D 70 6C 65 20
	   4F 62 6A 65 63
	   74 2E 2E 2E 00
 0000010A 44 6F 20 36 2C	$S000516 		BYTE 	"Do 6, then finish",0
	   20 74 68 65 6E
	   20 66 69 6E 69
	   73 68 00
 0000011C 44 6F 20 52 65	$S000512 		BYTE 	"Do Read from file...",0
	   61 64 20 66 72
	   6F 6D 20 66 69
	   6C 65 2E 2E 2E
	   00
 00000131 44 6F 20 57 72	$S000511 		BYTE 	"Do Write to file...",0
	   69 74 65 20 74
	   6F 20 66 69 6C
	   65 2E 2E 2E 00
 00000145 44 6F 20 66 6F	$S000514 		BYTE 	"Do for 5 and follow to 6",0
	   72 20 35 20 61
	   6E 64 20 66 6F
	   6C 6C 6F 77 20
	   74 6F 20 36 00
 0000015E 44 72 61 77 69	$S000543 		BYTE 	"Drawing a Circle!",0
	   6E 67 20 61 20
	   43 69 72 63 6C
	   65 21 00
 00000170 44 72 61 77 69	$S000571 		BYTE 	"Drawing a Cube!",0
	   6E 67 20 61 20
	   43 75 62 65 21
	   00
 00000180 44 72 61 77 69	$S000594 		BYTE 	"Drawing a Piramid!",0
	   6E 67 20 61 20
	   50 69 72 61 6D
	   69 64 21 00
 00000193 44 72 61 77 69	$S000548 		BYTE 	"Drawing a Sphere!",0
	   6E 67 20 61 20
	   53 70 68 65 72
	   65 21 00
 000001A5 44 72 61 77 69	$S000569 		BYTE 	"Drawing a Square!",0
	   6E 67 20 61 20
	   53 71 75 61 72
	   65 21 00
 000001B7 44 72 61 77 69	$S000589 		BYTE 	"Drawing a Triangle!",0
	   6E 67 20 61 20
	   54 72 69 61 6E
	   67 6C 65 21 00
 000001CB 49 6E 76 61 6C	$S000517 		BYTE 	"Invalid Option : ",0
	   69 64 20 4F 70
	   74 69 6F 6E 20
	   3A 20 00
 000001DD 4F 70 65 6E 69	$S000509 		BYTE 	"Opening file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 000001ED 53 71 75 61 72	$S000567 		BYTE 	"Square",0
	   65 00
 000001F4 54 72 69 61 6E	$S000587 		BYTE 	"Triangle",0
	   67 6C 65 00
 000001FD 5D 3D 20 00		$S000686 		BYTE 	"]= ",0
 00000201 64 65 73 74 72	$S000546 		BYTE 	"destroying a Circle object...",0
	   6F 79 69 6E 67
	   20 61 20 43 69
	   72 63 6C 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 0000021F 64 65 73 74 72	$S000555 		BYTE 	"destroying a Square object...",0
	   6F 79 69 6E 67
	   20 61 20 53 71
	   75 61 72 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 0000023D 64 65 73 74 72	$S000592 		BYTE 	"destroying a Triangle object...",0
	   6F 79 69 6E 67
	   20 61 20 54 72
	   69 61 6E 67 6C
	   65 20 6F 62 6A
	   65 63 74 2E 2E
	   2E 00
 0000025D 72 65 73 20 28	$S000702 		BYTE 	"res (3.1415...)= ",0
	   33 2E 31 34 31
	   35 2E 2E 2E 29
	   3D 20 00
 0000026F 74 79 70 65 20	$S000605 		BYTE 	"type == stCircle",0
	   3D 3D 20 73 74
	   43 69 72 63 6C
	   65 00
 00000280 74 79 70 65 20	$S000607 		BYTE 	"type == stSquare",0
	   3D 3D 20 73 74
	   53 71 75 61 72
	   65 00
 00000291 74 79 70 65 20	$S000609 		BYTE 	"type == stTriangle",0
	   3D 3D 20 73 74
	   54 72 69 61 6E
	   67 6C 65 00

 000002A4 00000000		__osver 		DWORD 	0;Windows OS version
 000002A8 00000000		__winminor 		DWORD 	0;Windows minor version
 000002AC 00000000		__winmajor 		DWORD 	0;Windows major version
 000002B0 00000000		__winver 		DWORD 	0;Windows version
 000002B4  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 000002D4 00000000		___argv 		DWORD 	0;Array of argument values
 000002D8 00000000		___argc 		DWORD 	0;Argument count

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 8.00.50727.762	    01/27/09 11:59:34
&c:\hcc\hcc\TestSource\lastfeatures.hp			     Symbols 2 - 1
<This file was automatically generated by the 32-bit H++ Com



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002DC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001D1C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LastFeatures_DoubleProxy_Swap  .	P Near	 00000038 _TEXT	Length= 0000006F Public STDCALL
  $L000635 . . . . . . . . . . .	L Near	 000000A0 _TEXT	
LastFeatures_DoubleProxy_isEqual .	P Near	 000000A7 _TEXT	Length= 00000054 Public STDCALL
  $L000632 . . . . . . . . . . .	L Near	 000000F4 _TEXT	
LastFeatures_DoubleProxy_lessThan 	P Near	 000000FB _TEXT	Length= 00000054 Public STDCALL
  $L000629 . . . . . . . . . . .	L Near	 00000148 _TEXT	
LastFeatures_DoubleProxy . . . .	P Near	 00000000 _TEXT	Length= 00000038 Public STDCALL
LastFeatures_HObject_Destructor 	P Near	 0000014F _TEXT	Length= 0000000C Public STDCALL
  $L000654 . . . . . . . . . . .	L Near	 00000156 _TEXT	
LastFeatures_HObject . . . . . .	P Near	 0000015B _TEXT	Length= 00000015 Public STDCALL
LastFeatures_SimpleObject_Destructor .	P Near	 00000170 _TEXT	Length= 0000001F Public STDCALL
  $L000622 . . . . . . . . . . .	L Near	 0000018A _TEXT	
LastFeatures_SimpleObject  . . .	P Near	 0000018F _TEXT	Length= 00000015 Public STDCALL
LastFeatures_SortDoubleProxy_Sort 	P Near	 000001A4 _TEXT	Length= 000000D6 Public STDCALL
  $L000720 . . . . . . . . . . .	L Near	 000001CC _TEXT	
  $L000719 . . . . . . . . . . .	L Near	 000001D2 _TEXT	
  $L000723 . . . . . . . . . . .	L Near	 000001EE _TEXT	
  $L000722 . . . . . . . . . . .	L Near	 000001F4 _TEXT	
  $L000725 . . . . . . . . . . .	L Near	 0000026C _TEXT	
  $L000724 . . . . . . . . . . .	L Near	 0000026E _TEXT	
  $L000721 . . . . . . . . . . .	L Near	 00000273 _TEXT	
  $L000646 . . . . . . . . . . .	L Near	 00000273 _TEXT	
LastFeatures_SwapperObject_Swap 	P Near	 0000027A _TEXT	Length= 00000073 Public STDCALL
  $L000640 . . . . . . . . . . .	L Near	 000002DE _TEXT	
  $L000727 . . . . . . . . . . .	L Near	 000002E6 _TEXT	
LastFeatures_SwapperObject . . .	P Near	 000002ED _TEXT	Length= 00000015 Public STDCALL
LastFeatures_TestFeatures_main .	P Near	 00001812 _TEXT	Length= 00000474 Public STDCALL
  $L000834 . . . . . . . . . . .	L Near	 00001831 _TEXT	
  $L000833 . . . . . . . . . . .	L Near	 00001837 _TEXT	
  $L000835 . . . . . . . . . . .	L Near	 00001889 _TEXT	
  $L000837 . . . . . . . . . . .	L Near	 000018D5 _TEXT	
  $L000839 . . . . . . . . . . .	L Near	 00001902 _TEXT	
  $L000841 . . . . . . . . . . .	L Near	 0000192F _TEXT	
  $L000843 . . . . . . . . . . .	L Near	 0000195C _TEXT	
  $L000844 . . . . . . . . . . .	L Near	 00001995 _TEXT	
  $L000845 . . . . . . . . . . .	L Near	 00001997 _TEXT	
  $L000846 . . . . . . . . . . .	L Near	 000019A2 _TEXT	
  $L000847 . . . . . . . . . . .	L Near	 00001A14 _TEXT	
  $L000848 . . . . . . . . . . .	L Near	 00001A16 _TEXT	
  $L000849 . . . . . . . . . . .	L Near	 00001A8E _TEXT	
  $L000850 . . . . . . . . . . .	L Near	 00001ABF _TEXT	
  $L000851 . . . . . . . . . . .	L Near	 00001AC1 _TEXT	
  $L000852 . . . . . . . . . . .	L Near	 00001ACC _TEXT	
  $L000854 . . . . . . . . . . .	L Near	 00001C62 _TEXT	
  $L000855 . . . . . . . . . . .	L Near	 00001C6D _TEXT	
  $L000853 . . . . . . . . . . .	L Near	 00001C7D _TEXT	
  $L000681 . . . . . . . . . . .	L Near	 00001C7F _TEXT	
LastFeatures_TestProperties_get_Shapes . P Near	  00000302 _TEXT	Length= 00000015 Public STDCALL
  $L000670 . . . . . . . . . . .	L Near	 00000312 _TEXT	
LastFeatures_TestProperties_node_Destructor  P Near   0000075D _TEXT	Length= 00000093 Public STDCALL
  $L000770 . . . . . . . . . . .	L Near	 0000078A _TEXT	
  $L000767 . . . . . . . . . . .	L Near	 00000790 _TEXT	
  $L000774 . . . . . . . . . . .	L Near	 000007B8 _TEXT	
  $L000771 . . . . . . . . . . .	L Near	 000007BE _TEXT	
  $L000778 . . . . . . . . . . .	L Near	 000007E5 _TEXT	
  $L000775 . . . . . . . . . . .	L Near	 000007EB _TEXT	
  $L000662 . . . . . . . . . . .	L Near	 000007EB _TEXT	
LastFeatures_TestProperties_node .	P Near	 000007F0 _TEXT	Length= 00000014 Public STDCALL
LastFeatures_TestProperties_put_Shapes . P Near	  00000317 _TEXT	Length= 00000432 Public STDCALL
  $L000729 . . . . . . . . . . .	L Near	 0000036C _TEXT	
  $L000730 . . . . . . . . . . .	L Near	 0000036E _TEXT	
  $L000731 . . . . . . . . . . .	L Near	 0000039E _TEXT	
  $L000732 . . . . . . . . . . .	L Near	 000003A0 _TEXT	
  $L000733 . . . . . . . . . . .	L Near	 000003D0 _TEXT	
  $L000734 . . . . . . . . . . .	L Near	 000003D2 _TEXT	
  $L000736 . . . . . . . . . . .	L Near	 000003F8 _TEXT	
  $L000737 . . . . . . . . . . .	L Near	 0000043E _TEXT	
  $L000738 . . . . . . . . . . .	L Near	 00000440 _TEXT	
  $L000740 . . . . . . . . . . .	L Near	 00000467 _TEXT	
  $L000741 . . . . . . . . . . .	L Near	 000004A1 _TEXT	
  $L000742 . . . . . . . . . . .	L Near	 000004A3 _TEXT	
  $L000745 . . . . . . . . . . .	L Near	 00000595 _TEXT	
  $L000743 . . . . . . . . . . .	L Near	 00000595 _TEXT	
  $L000747 . . . . . . . . . . .	L Near	 000005AD _TEXT	
  $L000748 . . . . . . . . . . .	L Near	 000005B8 _TEXT	
  $L000746 . . . . . . . . . . .	L Near	 000005C8 _TEXT	
  $L000750 . . . . . . . . . . .	L Near	 000005EE _TEXT	
  $L000751 . . . . . . . . . . .	L Near	 000005F9 _TEXT	
  $L000749 . . . . . . . . . . .	L Near	 00000609 _TEXT	
  $L000752 . . . . . . . . . . .	L Near	 00000616 _TEXT	
  $L000754 . . . . . . . . . . .	L Near	 00000653 _TEXT	
  $L000753 . . . . . . . . . . .	L Near	 0000065F _TEXT	
  $L000755 . . . . . . . . . . .	L Near	 0000068C _TEXT	
  $L000756 . . . . . . . . . . .	L Near	 000006B7 _TEXT	
  $L000757 . . . . . . . . . . .	L Near	 000006B9 _TEXT	
  $L000758 . . . . . . . . . . .	L Near	 000006C7 _TEXT	
  $L000760 . . . . . . . . . . .	L Near	 00000700 _TEXT	
  $L000761 . . . . . . . . . . .	L Near	 0000070B _TEXT	
  $L000759 . . . . . . . . . . .	L Near	 0000071B _TEXT	
  $L000671 . . . . . . . . . . .	L Near	 0000071B _TEXT	
  $L000763 . . . . . . . . . . .	L Near	 00000728 _TEXT	
  $L000764 . . . . . . . . . . .	L Near	 00000733 _TEXT	
  $L000765 . . . . . . . . . . .	L Near	 00000742 _TEXT	
LastFeatures_TestProperties  . .	P Near	 00000749 _TEXT	Length= 00000014 Public STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000804 _TEXT	Length= 0000004A Public STDCALL
  $L000460 . . . . . . . . . . .	L Near	 00000847 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000008AC _TEXT	Length= 00000060 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 00000905 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000084E _TEXT	Length= 0000005E Public STDCALL
  $L000477 . . . . . . . . . . .	L Near	 000008A5 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000090C _TEXT	Length= 00000084 Public STDCALL
  $L000485 . . . . . . . . . . .	L Near	 00000989 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00000990 _TEXT	Length= 0000005E Public STDCALL
  $L000481 . . . . . . . . . . .	L Near	 000009E7 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000009EE _TEXT	Length= 00000060 Public STDCALL
  $L000474 . . . . . . . . . . .	L Near	 00000A47 _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 00000A4E _TEXT	Length= 00000084 Public STDCALL
  $L000479 . . . . . . . . . . .	L Near	 00000ACB _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000B39 _TEXT	Length= 0000009D Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 00000BCF _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 00000AD2 _TEXT	Length= 00000067 Public STDCALL
  $L000491 . . . . . . . . . . .	L Near	 00000B32 _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 00000BD6 _TEXT	Length= 00000084 Public STDCALL
  $L000499 . . . . . . . . . . .	L Near	 00000C53 _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 00000C5A _TEXT	Length= 00000088 Public STDCALL
  $L000495 . . . . . . . . . . .	L Near	 00000CDB _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 00000CE2 _TEXT	Length= 00000065 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 00000D40 _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 00000D47 _TEXT	Length= 00000084 Public STDCALL
  $L000493 . . . . . . . . . . .	L Near	 00000DC4 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 00000DCB _TEXT	Length= 0000004A Public STDCALL
  $L000457 . . . . . . . . . . .	L Near	 00000E0E _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnitTesting_Circle_Circumference .	P Near	 00000E15 _TEXT	Length= 0000002F Public STDCALL
  $L000538 . . . . . . . . . . .	L Near	 00000E3F _TEXT	
UnitTesting_Circle_ComputeArea .	P Near	 00000E44 _TEXT	Length= 00000035 Public STDCALL
  $L000544 . . . . . . . . . . .	L Near	 00000E74 _TEXT	
UnitTesting_Circle_Destructor  .	P Near	 00000E79 _TEXT	Length= 0000002B Public STDCALL
  $L000545 . . . . . . . . . . .	L Near	 00000E9F _TEXT	
UnitTesting_Circle_DrawSphere  .	P Near	 00000EC3 _TEXT	Length= 0000001F Public STDCALL
  $L000547 . . . . . . . . . . .	L Near	 00000EDD _TEXT	
UnitTesting_Circle_Draw  . . . .	P Near	 00000EA4 _TEXT	Length= 0000001F Public STDCALL
  $L000542 . . . . . . . . . . .	L Near	 00000EBE _TEXT	
UnitTesting_Circle_Name  . . . .	P Near	 00000EE2 _TEXT	Length= 00000014 Public STDCALL
  $L000540 . . . . . . . . . . .	L Near	 00000EF1 _TEXT	
UnitTesting_Circle_Type  . . . .	P Near	 00000F2E _TEXT	Length= 00000013 Public STDCALL
  $L000539 . . . . . . . . . . .	L Near	 00000F3C _TEXT	
UnitTesting_Circle_get_Radius  .	P Near	 00000EF6 _TEXT	Length= 00000017 Public STDCALL
  $L000535 . . . . . . . . . . .	L Near	 00000F08 _TEXT	
UnitTesting_Circle_put_Radius  .	P Near	 00000F0D _TEXT	Length= 00000021 Public STDCALL
  $L000536 . . . . . . . . . . .	L Near	 00000F25 _TEXT	
UnitTesting_Circle . . . . . . .	P Near	 00000F41 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_ShapeFactoryCreator_Create . P Near	  00000FF3 _TEXT	Length= 00000159 Public STDCALL
  $L000789 . . . . . . . . . . .	L Near	 00001028 _TEXT	
  $L000790 . . . . . . . . . . .	L Near	 0000102A _TEXT	
  $L000792 . . . . . . . . . . .	L Near	 00001044 _TEXT	
  $L000795 . . . . . . . . . . .	L Near	 0000108C _TEXT	
  $L000796 . . . . . . . . . . .	L Near	 0000108E _TEXT	
  $L000793 . . . . . . . . . . .	L Near	 000010A1 _TEXT	
  $L000799 . . . . . . . . . . .	L Near	 000010E3 _TEXT	
  $L000800 . . . . . . . . . . .	L Near	 000010E5 _TEXT	
  $L000797 . . . . . . . . . . .	L Near	 000010F2 _TEXT	
  $L000803 . . . . . . . . . . .	L Near	 00001134 _TEXT	
  $L000804 . . . . . . . . . . .	L Near	 00001136 _TEXT	
  $L000801 . . . . . . . . . . .	L Near	 00001141 _TEXT	
  $L000798 . . . . . . . . . . .	L Near	 00001141 _TEXT	
  $L000794 . . . . . . . . . . .	L Near	 00001141 _TEXT	
  $L000597 . . . . . . . . . . .	L Near	 00001145 _TEXT	
UnitTesting_ShapeFactoryCreator_Destructor . P Near   00000F7B _TEXT	Length= 00000064 Public STDCALL
  $L000783 . . . . . . . . . . .	L Near	 00000FA8 _TEXT	
  $L000780 . . . . . . . . . . .	L Near	 00000FAE _TEXT	
  $L000787 . . . . . . . . . . .	L Near	 00000FD4 _TEXT	
  $L000784 . . . . . . . . . . .	L Near	 00000FDA _TEXT	
  $L000600 . . . . . . . . . . .	L Near	 00000FDA _TEXT	
UnitTesting_ShapeFactoryCreator 	P Near	 00000FDF _TEXT	Length= 00000014 Public STDCALL
UnitTesting_Shape  . . . . . . .	P Near	 00000F66 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Square_ComputeArea .	P Near	 0000114C _TEXT	Length= 00000032 Public STDCALL
  $L000564 . . . . . . . . . . .	L Near	 00001179 _TEXT	
UnitTesting_Square_Destructor  .	P Near	 0000117E _TEXT	Length= 0000002B Public STDCALL
  $L000554 . . . . . . . . . . .	L Near	 000011A4 _TEXT	
UnitTesting_Square_DrawCube  . .	P Near	 000011C8 _TEXT	Length= 0000001F Public STDCALL
  $L000570 . . . . . . . . . . .	L Near	 000011E2 _TEXT	
UnitTesting_Square_Draw  . . . .	P Near	 000011A9 _TEXT	Length= 0000001F Public STDCALL
  $L000568 . . . . . . . . . . .	L Near	 000011C3 _TEXT	
UnitTesting_Square_Name  . . . .	P Near	 0000121F _TEXT	Length= 00000014 Public STDCALL
  $L000566 . . . . . . . . . . .	L Near	 0000122E _TEXT	
UnitTesting_Square_Type  . . . .	P Near	 00001233 _TEXT	Length= 00000013 Public STDCALL
  $L000565 . . . . . . . . . . .	L Near	 00001241 _TEXT	
UnitTesting_Square_get_Height  .	P Near	 000011E7 _TEXT	Length= 00000017 Public STDCALL
  $L000561 . . . . . . . . . . .	L Near	 000011F9 _TEXT	
UnitTesting_Square_get_Width . .	P Near	 0000126B _TEXT	Length= 00000017 Public STDCALL
  $L000557 . . . . . . . . . . .	L Near	 0000127D _TEXT	
UnitTesting_Square_put_Height  .	P Near	 000011FE _TEXT	Length= 00000021 Public STDCALL
  $L000562 . . . . . . . . . . .	L Near	 00001216 _TEXT	
UnitTesting_Square_put_Width . .	P Near	 00001282 _TEXT	Length= 00000021 Public STDCALL
  $L000558 . . . . . . . . . . .	L Near	 0000129A _TEXT	
UnitTesting_Square . . . . . . .	P Near	 00001246 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_TestSwitch_RunTest .	P Near	 000012A3 _TEXT	Length= 000000E6 Public STDCALL
  $L000806 . . . . . . . . . . .	L Near	 000012E7 _TEXT	
  $L000807 . . . . . . . . . . .	L Near	 000012FF _TEXT	
  $L000808 . . . . . . . . . . .	L Near	 00001314 _TEXT	
  $L000809 . . . . . . . . . . .	L Near	 00001329 _TEXT	
  $L000810 . . . . . . . . . . .	L Near	 0000133E _TEXT	
  $L000811 . . . . . . . . . . .	L Near	 00001351 _TEXT	
  $L000812 . . . . . . . . . . .	L Near	 00001366 _TEXT	
  $L000805 . . . . . . . . . . .	L Near	 00001382 _TEXT	
  $L000507 . . . . . . . . . . .	L Near	 00001382 _TEXT	
UnitTesting_Triangle_ComputeArea .	P Near	 000013C1 _TEXT	Length= 0000004D Public STDCALL
  $L000590 . . . . . . . . . . .	L Near	 00001409 _TEXT	
UnitTesting_Triangle_Destructor 	P Near	 0000140E _TEXT	Length= 0000002D Public STDCALL
  $L000591 . . . . . . . . . . .	L Near	 00001436 _TEXT	
UnitTesting_Triangle_DrawPiramid .	P Near	 0000145A _TEXT	Length= 0000001F Public STDCALL
  $L000593 . . . . . . . . . . .	L Near	 00001474 _TEXT	
UnitTesting_Triangle_Draw  . . .	P Near	 0000143B _TEXT	Length= 0000001F Public STDCALL
  $L000588 . . . . . . . . . . .	L Near	 00001455 _TEXT	
UnitTesting_Triangle_Name  . . .	P Near	 000014B1 _TEXT	Length= 00000014 Public STDCALL
  $L000586 . . . . . . . . . . .	L Near	 000014C0 _TEXT	
UnitTesting_Triangle_Type  . . .	P Near	 000014C5 _TEXT	Length= 00000013 Public STDCALL
  $L000585 . . . . . . . . . . .	L Near	 000014D3 _TEXT	
UnitTesting_Triangle_get_Base  .	P Near	 00001389 _TEXT	Length= 00000017 Public STDCALL
  $L000578 . . . . . . . . . . .	L Near	 0000139B _TEXT	
UnitTesting_Triangle_get_High  .	P Near	 00001479 _TEXT	Length= 00000017 Public STDCALL
  $L000582 . . . . . . . . . . .	L Near	 0000148B _TEXT	
UnitTesting_Triangle_put_Base  .	P Near	 000013A0 _TEXT	Length= 00000021 Public STDCALL
  $L000579 . . . . . . . . . . .	L Near	 000013B8 _TEXT	
UnitTesting_Triangle_put_High  .	P Near	 00001490 _TEXT	Length= 00000021 Public STDCALL
  $L000583 . . . . . . . . . . .	L Near	 000014A8 _TEXT	
UnitTesting_Triangle . . . . . .	P Near	 000014D8 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_Visitor_Visit  . . .	P Near	 000014FD _TEXT	Length= 00000140 Public STDCALL
  $L000814 . . . . . . . . . . .	L Near	 00001553 _TEXT	
  $L000815 . . . . . . . . . . .	L Near	 00001582 _TEXT	
  $L000816 . . . . . . . . . . .	L Near	 000015B1 _TEXT	
  $L000817 . . . . . . . . . . .	L Near	 000015E0 _TEXT	
  $L000813 . . . . . . . . . . .	L Near	 000015E1 _TEXT	
  $L000818 . . . . . . . . . . .	L Near	 000015FB _TEXT	
  $L000820 . . . . . . . . . . .	L Near	 00001613 _TEXT	
  $L000602 . . . . . . . . . . .	L Near	 00001636 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00001C86 _TEXT	Length= 00000096 Public STDCALL
__member_Init@LastFeatures_DoubleProxy . P Near	  0000163D _TEXT	Length= 00000017 Public STDCALL
__member_Init@LastFeatures_TestProperties_node . P Near	  0000175B _TEXT	Length= 00000026 Public STDCALL
__member_Init@LastFeatures_TestProperties  P Near   00001654 _TEXT	Length= 00000107 Public STDCALL
  $L000822 . . . . . . . . . . .	L Near	 00001695 _TEXT	
  $L000823 . . . . . . . . . . .	L Near	 00001697 _TEXT	
  $L000824 . . . . . . . . . . .	L Near	 000016A4 _TEXT	
  $L000825 . . . . . . . . . . .	L Near	 000016DF _TEXT	
  $L000826 . . . . . . . . . . .	L Near	 000016E1 _TEXT	
  $L000827 . . . . . . . . . . .	L Near	 000016EF _TEXT	
  $L000828 . . . . . . . . . . .	L Near	 00001736 _TEXT	
  $L000829 . . . . . . . . . . .	L Near	 00001738 _TEXT	
  $L000830 . . . . . . . . . . .	L Near	 00001746 _TEXT	
__member_Init@UnitTesting_Circle .	P Near	 00001781 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_ShapeFactoryCreator  P Near   00001798 _TEXT	Length= 0000003C Public STDCALL
  $L000831 . . . . . . . . . . .	L Near	 000017BF _TEXT	
  $L000832 . . . . . . . . . . .	L Near	 000017C1 _TEXT	
__member_Init@UnitTesting_Square .	P Near	 000017D4 _TEXT	Length= 0000001F Public STDCALL
__member_Init@UnitTesting_Triangle .	P Near	 000017F3 _TEXT	Length= 0000001F Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000509 . . . . . . . . . . . .	Byte	 000001DD _DATA	
$S000510 . . . . . . . . . . . .	Byte	 000000BD _DATA	
$S000511 . . . . . . . . . . . .	Byte	 00000131 _DATA	
$S000512 . . . . . . . . . . . .	Byte	 0000011C _DATA	
$S000514 . . . . . . . . . . . .	Byte	 00000145 _DATA	
$S000516 . . . . . . . . . . . .	Byte	 0000010A _DATA	
$S000517 . . . . . . . . . . . .	Byte	 000001CB _DATA	
$S000541 . . . . . . . . . . . .	Byte	 000000B6 _DATA	
$S000543 . . . . . . . . . . . .	Byte	 0000015E _DATA	
$S000546 . . . . . . . . . . . .	Byte	 00000201 _DATA	
$S000548 . . . . . . . . . . . .	Byte	 00000193 _DATA	
$S000555 . . . . . . . . . . . .	Byte	 0000021F _DATA	
$S000567 . . . . . . . . . . . .	Byte	 000001ED _DATA	
$S000569 . . . . . . . . . . . .	Byte	 000001A5 _DATA	
$S000571 . . . . . . . . . . . .	Byte	 00000170 _DATA	
$S000587 . . . . . . . . . . . .	Byte	 000001F4 _DATA	
$S000589 . . . . . . . . . . . .	Byte	 000001B7 _DATA	
$S000592 . . . . . . . . . . . .	Byte	 0000023D _DATA	
$S000594 . . . . . . . . . . . .	Byte	 00000180 _DATA	
$S000605 . . . . . . . . . . . .	Byte	 0000026F _DATA	
$S000607 . . . . . . . . . . . .	Byte	 00000280 _DATA	
$S000609 . . . . . . . . . . . .	Byte	 00000291 _DATA	
$S000611 . . . . . . . . . . . .	Byte	 00000080 _DATA	
$S000623 . . . . . . . . . . . .	Byte	 000000EC _DATA	
$S000628 . . . . . . . . . . . .	Byte	 000000CD _DATA	
$S000685 . . . . . . . . . . . .	Byte	 000000AA _DATA	
$S000686 . . . . . . . . . . . .	Byte	 000001FD _DATA	
$S000700 . . . . . . . . . . . .	Byte	 00000099 _DATA	
$S000702 . . . . . . . . . . . .	Byte	 0000025D _DATA	
@@class_vptr_vtbl@@__LastFeatures_DoubleProxy  DWord    00000000 _DATA	
@@class_vptr_vtbl@@__LastFeatures_HObject  DWord    00000020 _DATA	
@@class_vptr_vtbl@@__LastFeatures_SimpleObject . DWord	  00000010 _DATA	
@@class_vptr_vtbl@@__LastFeatures_SwapperObject  DWord	  00000024 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Circle  DWord	  00000028 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Shape . DWord	  00000040 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Square  DWord	  00000054 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Triangle  DWord    00000068 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UnitTesting_TestSwitch_close . .	Number	 00000002h   
UnitTesting_TestSwitch_open  . .	Number	 00000001h   
UnitTesting_TestSwitch_read  . .	Number	 00000004h   
UnitTesting_TestSwitch_write . .	Number	 00000003h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 000002D8 _DATA	
___argv  . . . . . . . . . . . .	DWord	 000002D4 _DATA	
__computer . . . . . . . . . . .	Byte	 000002B4 _DATA	
__osver  . . . . . . . . . . . .	DWord	 000002A4 _DATA	
__winmajor . . . . . . . . . . .	DWord	 000002AC _DATA	
__winminor . . . . . . . . . . .	DWord	 000002A8 _DATA	
__winver . . . . . . . . . . . .	DWord	 000002B0 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
