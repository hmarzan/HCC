Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:15:40
TestSorting.hpp						     Page 1 - 1


				TITLE	 TestSorting.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Algorithms_Sorting_BinaryInsertionSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  83 EC 20			sub	ESP,000000020h
 00000006  53				push	EBX 
 00000007  56				push	ESI 
 00000008  57				push	EDI 
 00000009  89 4D E0			mov	dword ptr [EBP-0020h],ECX
				;{

				;{333}:for(i= 1; i < size; ++i)
 0000000C  B8 00000001			mov	EAX,000000001h
 00000011  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000014  EB 06			jmp	OFFSET $L000932
 00000016			$L000933:
 00000016  FF 45 FC			inc	dword ptr [EBP-4]
 00000019  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000001C			$L000932:
 0000001C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000001F  50				push	EAX
 00000020  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000023  5A				pop	EDX
 00000024  3B D0			cmp	EDX,EAX
 00000026  0F 9C C0			setl	AL
 00000029  84 C0			test	AL,AL
 0000002B  0F 84 000000F9		jz	OFFSET $L000934
				;{

				;{335}:tmp= array[i];
 00000031  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000034  8B C3			mov	EAX,EBX 
 00000036  50				push	EAX
 00000037  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000003A  5E				pop	ESI
 0000003B  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000003E  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00000045  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000048  50				push	EAX
 00000049  52				push	EDX 
 0000004A  DD C0			ffree	st
 0000004C  DD 04 24			fld	qword ptr [ESP]
 0000004F  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{336}:_F= 0;
 00000052  5A				pop	EDX
 00000053  58				pop	EAX 
 00000054  33 C0			xor	EAX,EAX
 00000056  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{337}:_L= i;
 00000059  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000005C  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{338}:while(_F < _L)
 0000005F			$L000935:
 0000005F  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000062  50				push	EAX
 00000063  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000066  5A				pop	EDX
 00000067  3B D0			cmp	EDX,EAX
 00000069  0F 9C C0			setl	AL
 0000006C  84 C0			test	AL,AL
 0000006E  74 65			jz	OFFSET $L000936
				;{

				;{340}:_M= (_F + _L) div 2;
 00000070  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000073  50				push	EAX
 00000074  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000077  5A				pop	EDX
 00000078  03 C2			add	EAX,EDX
 0000007A  50				push	EAX
 0000007B  B8 00000002			mov	EAX,000000002h
 00000080  8B C8			mov	ECX,EAX
 00000082  58				pop	EAX
 00000083  33 D2			xor	EDX,EDX
 00000085  F7 F9			idiv	ECX
 00000087  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{341}:if(tmp >= array[_M])
 0000008A  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000008D  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000090  50				push	EAX
 00000091  52				push	EDX 
 00000092  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000095  8B C3			mov	EAX,EBX 
 00000097  50				push	EAX
 00000098  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 0000009B  5E				pop	ESI
 0000009C  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000009F  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000000A6  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000000A9  50				push	EAX
 000000AA  52				push	EDX 
 000000AB  E8 00000000 E		call	 FloatingPoint_Compare
 000000B0  83 F8 00			cmp	EAX,000000000h
 000000B3  F7 D8			neg	EAX
 000000B5  0F 9D C0			setge	AL
 000000B8  84 C0			test	AL,AL
 000000BA  74 11			jz	OFFSET $L000937

				;{342}:_F= _M + 1;
 000000BC  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000000BF  50				push	EAX
 000000C0  B8 00000001			mov	EAX,000000001h
 000000C5  5A				pop	EDX
 000000C6  03 C2			add	EAX,EDX
 000000C8  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 000000CB  EB 06			jmp	OFFSET $L000938

				; else {
 000000CD			$L000937:

				;{344}:_L= _M;
 000000CD  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000000D0  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 000000D3			$L000938:

				; }
				;}
 000000D3  EB 8A			jmp	OFFSET $L000935
 000000D5			$L000936:

				;{346}:for(j= i; j > _F; --j)
 000000D5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000000D8  89 45 E4			mov	dword ptr [EBP-001Ch],EAX
 000000DB  EB 06			jmp	OFFSET $L000939
 000000DD			$L000940:
 000000DD  FF 4D E4			dec	dword ptr [EBP-28]
 000000E0  8B 45 E4			mov	EAX,dword ptr [EBP-28]
 000000E3			$L000939:
 000000E3  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000000E6  50				push	EAX
 000000E7  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000000EA  5A				pop	EDX
 000000EB  3B D0			cmp	EDX,EAX
 000000ED  0F 9F C0			setg	AL
 000000F0  84 C0			test	AL,AL
 000000F2  74 31			jz	OFFSET $L000941

				;{347}:SwapValues(array[j - 1], array[j]);
 000000F4  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000000F7  8B C3			mov	EAX,EBX 
 000000F9  50				push	EAX
 000000FA  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000000FD  5E				pop	ESI
 000000FE  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000101  50				push	EAX 
 00000102  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000105  8B C3			mov	EAX,EBX 
 00000107  50				push	EAX
 00000108  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 0000010B  50				push	EAX
 0000010C  B8 00000001			mov	EAX,000000001h
 00000111  5A				pop	EDX
 00000112  2B D0			sub	EDX,EAX
 00000114  8B C2			mov	EAX,EDX
 00000116  5E				pop	ESI
 00000117  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 0000011A  50				push	EAX
 0000011B  8B 4D E0			mov	ECX,dword ptr [EBP-0020h]
 0000011E  8B 11			mov	EDX,dword ptr [ECX]
 00000120  FF 52 04			call	dword ptr [EDX+0004h]
 00000123  EB B8			jmp	OFFSET $L000940 
 00000125			$L000941:
				;}
 00000125  E9 FFFFFEEC			jmp	OFFSET $L000933 
 0000012A			$L000934:
				;}
 0000012A			$L000627:

 0000012A  5F				pop	EDI
 0000012B  5E				pop	ESI 
 0000012C  5B				pop	EBX 
 0000012D  8B E5			mov	ESP,EBP
 0000012F  5D				pop	EBP 
 00000130  C2 0008			retn	000000008h
 00000133			Algorithms_Sorting_BinaryInsertionSort_Sort ENDP

 00000133			Algorithms_Sorting_BinaryInsertionSort PROC NEAR 
				;void Algorithms::Sorting::BinaryInsertionSort(void);
 00000133  55				push	EBP
 00000134  8B EC			mov	EBP,ESP
 00000136  51				push	ECX 
 00000137  53				push	EBX 
 00000138  56				push	ESI 
 00000139  57				push	EDI 
 0000013A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000013D  E8 00002114			call	 Algorithms_Sorting_Sorter ;base constructor call
 00000142  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000145  C7 01 00000000 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_BinaryInsertionSort 

 0000014B  5F				pop	EDI
 0000014C  5E				pop	ESI 
 0000014D  5B				pop	EBX 
 0000014E  8B E5			mov	ESP,EBP
 00000150  5D				pop	EBP 
 00000151  C3				ret	
 00000152			Algorithms_Sorting_BinaryInsertionSort ENDP

 00000152			Algorithms_Sorting_BubbleSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 00000152  55				push	EBP
 00000153  8B EC			mov	EBP,ESP
 00000155  83 EC 0C			sub	ESP,00000000Ch
 00000158  53				push	EBX 
 00000159  56				push	ESI 
 0000015A  57				push	EDI 
 0000015B  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{68}:for(i= (size - 1); i >= 0; i-- )
 0000015E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000161  50				push	EAX
 00000162  B8 00000001			mov	EAX,000000001h
 00000167  5A				pop	EDX
 00000168  2B D0			sub	EDX,EAX
 0000016A  8B C2			mov	EAX,EDX
 0000016C  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000016F  EB 06			jmp	OFFSET $L000943
 00000171			$L000944:
 00000171  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000174  FF 4D FC			dec	dword ptr [EBP-4]
 00000177			$L000943:
 00000177  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000017A  50				push	EAX
 0000017B  33 C0			xor	EAX,EAX
 0000017D  5A				pop	EDX
 0000017E  3B D0			cmp	EDX,EAX
 00000180  0F 9D C0			setge	AL
 00000183  84 C0			test	AL,AL
 00000185  0F 84 00000099		jz	OFFSET $L000945
				;{

				;{70}:for(j= 1; j <= i; j++ )
 0000018B  B8 00000001			mov	EAX,000000001h
 00000190  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000193  EB 06			jmp	OFFSET $L000946
 00000195			$L000947:
 00000195  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000198  FF 45 F8			inc	dword ptr [EBP-8]
 0000019B			$L000946:
 0000019B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000019E  50				push	EAX
 0000019F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000001A2  5A				pop	EDX
 000001A3  3B D0			cmp	EDX,EAX
 000001A5  0F 9E C0			setle	AL
 000001A8  84 C0			test	AL,AL
 000001AA  74 73			jz	OFFSET $L000948
				;{

				;{72}:if(array[j] < array[j - 1])
 000001AC  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000001AF  8B C3			mov	EAX,EBX 
 000001B1  50				push	EAX
 000001B2  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000001B5  5E				pop	ESI
 000001B6  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000001B9  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000001C0  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000001C3  50				push	EAX
 000001C4  52				push	EDX 
 000001C5  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000001C8  8B C3			mov	EAX,EBX 
 000001CA  50				push	EAX
 000001CB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000001CE  50				push	EAX
 000001CF  B8 00000001			mov	EAX,000000001h
 000001D4  5A				pop	EDX
 000001D5  2B D0			sub	EDX,EAX
 000001D7  8B C2			mov	EAX,EDX
 000001D9  5E				pop	ESI
 000001DA  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000001DD  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000001E4  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000001E7  50				push	EAX
 000001E8  52				push	EDX 
 000001E9  E8 00000000 E		call	 FloatingPoint_Compare
 000001EE  83 F8 00			cmp	EAX,000000000h
 000001F1  F7 D8			neg	EAX
 000001F3  0F 9C C0			setl	AL
 000001F6  84 C0			test	AL,AL
 000001F8  74 20			jz	OFFSET $L000949
				;{

				;{79}:Swap(array, j - 1, j);
 000001FA  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000001FD  50				push	EAX 
 000001FE  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000201  50				push	EAX
 00000202  B8 00000001			mov	EAX,000000001h
 00000207  5A				pop	EDX
 00000208  2B D0			sub	EDX,EAX
 0000020A  8B C2			mov	EAX,EDX
 0000020C  50				push	EAX 
 0000020D  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000210  8B C3			mov	EAX,EBX 
 00000212  50				push	EAX
 00000213  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000216  8B 11			mov	EDX,dword ptr [ECX]
 00000218  FF 12			call	dword ptr [EDX]
				;}
 0000021A			$L000949:
				;}
 0000021A  E9 FFFFFF76			jmp	OFFSET $L000947 
 0000021F			$L000948:
				;}
 0000021F  E9 FFFFFF4D			jmp	OFFSET $L000944 
 00000224			$L000945:
				;}
 00000224			$L000550:

 00000224  5F				pop	EDI
 00000225  5E				pop	ESI 
 00000226  5B				pop	EBX 
 00000227  8B E5			mov	ESP,EBP
 00000229  5D				pop	EBP 
 0000022A  C2 0008			retn	000000008h
 0000022D			Algorithms_Sorting_BubbleSort_Sort ENDP

 0000022D			Algorithms_Sorting_BubbleSort PROC NEAR 
				;void Algorithms::Sorting::BubbleSort(void);
 0000022D  55				push	EBP
 0000022E  8B EC			mov	EBP,ESP
 00000230  51				push	ECX 
 00000231  53				push	EBX 
 00000232  56				push	ESI 
 00000233  57				push	EDI 
 00000234  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000237  E8 0000201A			call	 Algorithms_Sorting_Sorter ;base constructor call
 0000023C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000023F  C7 01 00000018 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_BubbleSort 

 00000245  5F				pop	EDI
 00000246  5E				pop	ESI 
 00000247  5B				pop	EBX 
 00000248  8B E5			mov	ESP,EBP
 0000024A  5D				pop	EBP 
 0000024B  C3				ret	
 0000024C			Algorithms_Sorting_BubbleSort ENDP

 0000024C			Algorithms_Sorting_HeapSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 0000024C  55				push	EBP
 0000024D  8B EC			mov	EBP,ESP
 0000024F  83 EC 08			sub	ESP,000000008h
 00000252  53				push	EBX 
 00000253  56				push	ESI 
 00000254  57				push	EDI 
 00000255  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{311}:for(i= (size div 2) - 1; i >= 0; i-- )
 00000258  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000025B  50				push	EAX
 0000025C  B8 00000002			mov	EAX,000000002h
 00000261  8B C8			mov	ECX,EAX
 00000263  58				pop	EAX
 00000264  33 D2			xor	EDX,EDX
 00000266  F7 F9			idiv	ECX
 00000268  50				push	EAX
 00000269  B8 00000001			mov	EAX,000000001h
 0000026E  5A				pop	EDX
 0000026F  2B D0			sub	EDX,EAX
 00000271  8B C2			mov	EAX,EDX
 00000273  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000276  EB 06			jmp	OFFSET $L000952
 00000278			$L000953:
 00000278  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000027B  FF 4D FC			dec	dword ptr [EBP-4]
 0000027E			$L000952:
 0000027E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000281  50				push	EAX
 00000282  33 C0			xor	EAX,EAX
 00000284  5A				pop	EDX
 00000285  3B D0			cmp	EDX,EAX
 00000287  0F 9D C0			setge	AL
 0000028A  84 C0			test	AL,AL
 0000028C  74 18			jz	OFFSET $L000954

				;{312}:siftDown(array, i, size);
 0000028E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000291  50				push	EAX 
 00000292  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000295  50				push	EAX 
 00000296  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000299  8B C3			mov	EAX,EBX 
 0000029B  50				push	EAX
 0000029C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000029F  E8 0000007C			call	 Algorithms_Sorting_HeapSort_siftDown
 000002A4  EB D2			jmp	OFFSET $L000953 
 000002A6			$L000954:

				;{314}:for(i= size - 1; i >= 1; i-- )
 000002A6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000002A9  50				push	EAX
 000002AA  B8 00000001			mov	EAX,000000001h
 000002AF  5A				pop	EDX
 000002B0  2B D0			sub	EDX,EAX
 000002B2  8B C2			mov	EAX,EDX
 000002B4  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000002B7  EB 06			jmp	OFFSET $L000955
 000002B9			$L000956:
 000002B9  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000002BC  FF 4D FC			dec	dword ptr [EBP-4]
 000002BF			$L000955:
 000002BF  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000002C2  50				push	EAX
 000002C3  B8 00000001			mov	EAX,000000001h
 000002C8  5A				pop	EDX
 000002C9  3B D0			cmp	EDX,EAX
 000002CB  0F 9D C0			setge	AL
 000002CE  84 C0			test	AL,AL
 000002D0  74 45			jz	OFFSET $L000957
				;{

				;{322}:SwapValues(array[0], array[i]);
 000002D2  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000002D5  8B C3			mov	EAX,EBX 
 000002D7  50				push	EAX
 000002D8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000002DB  5E				pop	ESI
 000002DC  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000002DF  50				push	EAX 
 000002E0  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000002E3  8B C3			mov	EAX,EBX 
 000002E5  50				push	EAX
 000002E6  33 C0			xor	EAX,EAX
 000002E8  5E				pop	ESI
 000002E9  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000002EC  50				push	EAX
 000002ED  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000002F0  8B 11			mov	EDX,dword ptr [ECX]
 000002F2  FF 52 04			call	dword ptr [EDX+0004h]

				;{324}:siftDown(array, 0, i - 1);
 000002F5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000002F8  50				push	EAX
 000002F9  B8 00000001			mov	EAX,000000001h
 000002FE  5A				pop	EDX
 000002FF  2B D0			sub	EDX,EAX
 00000301  8B C2			mov	EAX,EDX
 00000303  50				push	EAX 
 00000304  33 C0			xor	EAX,EAX
 00000306  50				push	EAX 
 00000307  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000030A  8B C3			mov	EAX,EBX 
 0000030C  50				push	EAX
 0000030D  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000310  E8 0000000B			call	 Algorithms_Sorting_HeapSort_siftDown
				;}
 00000315  EB A2			jmp	OFFSET $L000956 
 00000317			$L000957:
				;}
 00000317			$L000621:

 00000317  5F				pop	EDI
 00000318  5E				pop	ESI 
 00000319  5B				pop	EBX 
 0000031A  8B E5			mov	ESP,EBP
 0000031C  5D				pop	EBP 
 0000031D  C2 0008			retn	000000008h
 00000320			Algorithms_Sorting_HeapSort_Sort ENDP

 00000320			Algorithms_Sorting_HeapSort_siftDown PROC NEAR 
				;void siftDown(double double [] array, Algorithms::Sorting::__uint _Root, Algorithms::Sorting::__uint _Bottom);
 00000320  55				push	EBP
 00000321  8B EC			mov	EBP,ESP
 00000323  83 EC 08			sub	ESP,000000008h
 00000326  53				push	EBX 
 00000327  56				push	ESI 
 00000328  57				push	EDI 
 00000329  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{281}:maxChild= 0;
 0000032C  33 C0			xor	EAX,EAX
 0000032E  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{283}:while(_Root * 2 <= _Bottom)
 00000331			$L000958:
 00000331  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000334  50				push	EAX
 00000335  B8 00000002			mov	EAX,000000002h
 0000033A  59				pop	ECX
 0000033B  33 D2			xor	EDX,EDX
 0000033D  0F AF C1			imul	EAX,ECX
 00000340  50				push	EAX
 00000341  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000344  5A				pop	EDX
 00000345  3B D0			cmp	EDX,EAX
 00000347  0F 9E C0			setle	AL
 0000034A  84 C0			test	AL,AL
 0000034C  0F 84 00000131		jz	OFFSET $L000959
				;{

				;{285}:if(_Root * 2 == _Bottom)
 00000352  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000355  50				push	EAX
 00000356  B8 00000002			mov	EAX,000000002h
 0000035B  59				pop	ECX
 0000035C  33 D2			xor	EDX,EDX
 0000035E  0F AF C1			imul	EAX,ECX
 00000361  50				push	EAX
 00000362  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000365  5A				pop	EDX
 00000366  3B D0			cmp	EDX,EAX
 00000368  0F 94 C0			setz	AL
 0000036B  84 C0			test	AL,AL
 0000036D  74 17			jz	OFFSET $L000960

				;{286}:maxChild= _Root * 2;
 0000036F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000372  50				push	EAX
 00000373  B8 00000002			mov	EAX,000000002h
 00000378  59				pop	ECX
 00000379  33 D2			xor	EDX,EDX
 0000037B  0F AF C1			imul	EAX,ECX
 0000037E  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000381  E9 00000093			jmp	OFFSET $L000961

				; else {
 00000386			$L000960:

				;{287}:if(array[_Root * 2] > array[_Root * 2 + 1])
 00000386  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000389  8B C3			mov	EAX,EBX 
 0000038B  50				push	EAX
 0000038C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000038F  50				push	EAX
 00000390  B8 00000002			mov	EAX,000000002h
 00000395  59				pop	ECX
 00000396  33 D2			xor	EDX,EDX
 00000398  0F AF C1			imul	EAX,ECX
 0000039B  5E				pop	ESI
 0000039C  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000039F  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000003A6  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000003A9  50				push	EAX
 000003AA  52				push	EDX 
 000003AB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000003AE  8B C3			mov	EAX,EBX 
 000003B0  50				push	EAX
 000003B1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000003B4  50				push	EAX
 000003B5  B8 00000002			mov	EAX,000000002h
 000003BA  59				pop	ECX
 000003BB  33 D2			xor	EDX,EDX
 000003BD  0F AF C1			imul	EAX,ECX
 000003C0  50				push	EAX
 000003C1  B8 00000001			mov	EAX,000000001h
 000003C6  5A				pop	EDX
 000003C7  03 C2			add	EAX,EDX
 000003C9  5E				pop	ESI
 000003CA  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000003CD  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000003D4  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000003D7  50				push	EAX
 000003D8  52				push	EDX 
 000003D9  E8 00000000 E		call	 FloatingPoint_Compare
 000003DE  83 F8 00			cmp	EAX,000000000h
 000003E1  F7 D8			neg	EAX
 000003E3  0F 9F C0			setg	AL
 000003E6  84 C0			test	AL,AL
 000003E8  74 14			jz	OFFSET $L000962

				;{288}:maxChild= _Root * 2;
 000003EA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000003ED  50				push	EAX
 000003EE  B8 00000002			mov	EAX,000000002h
 000003F3  59				pop	ECX
 000003F4  33 D2			xor	EDX,EDX
 000003F6  0F AF C1			imul	EAX,ECX
 000003F9  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000003FC  EB 1B			jmp	OFFSET $L000963

				; else {
 000003FE			$L000962:

				;{290}:maxChild= _Root * 2 + 1;
 000003FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000401  50				push	EAX
 00000402  B8 00000002			mov	EAX,000000002h
 00000407  59				pop	ECX
 00000408  33 D2			xor	EDX,EDX
 0000040A  0F AF C1			imul	EAX,ECX
 0000040D  50				push	EAX
 0000040E  B8 00000001			mov	EAX,000000001h
 00000413  5A				pop	EDX
 00000414  03 C2			add	EAX,EDX
 00000416  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000419			$L000963:

				; }
 00000419			$L000961:

				; }

				;{292}:if(array[_Root] < array[maxChild])
 00000419  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000041C  8B C3			mov	EAX,EBX 
 0000041E  50				push	EAX
 0000041F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000422  5E				pop	ESI
 00000423  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000426  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000042D  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000430  50				push	EAX
 00000431  52				push	EDX 
 00000432  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000435  8B C3			mov	EAX,EBX 
 00000437  50				push	EAX
 00000438  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000043B  5E				pop	ESI
 0000043C  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000043F  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00000446  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000449  50				push	EAX
 0000044A  52				push	EDX 
 0000044B  E8 00000000 E		call	 FloatingPoint_Compare
 00000450  83 F8 00			cmp	EAX,000000000h
 00000453  F7 D8			neg	EAX
 00000455  0F 9C C0			setl	AL
 00000458  84 C0			test	AL,AL
 0000045A  74 20			jz	OFFSET $L000964
				;{

				;{300}:Swap(array, _Root, maxChild);
 0000045C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000045F  50				push	EAX 
 00000460  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000463  50				push	EAX 
 00000464  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000467  8B C3			mov	EAX,EBX 
 00000469  50				push	EAX
 0000046A  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000046D  8B 11			mov	EDX,dword ptr [ECX]
 0000046F  FF 12			call	dword ptr [EDX]

				;{301}:_Root= maxChild;
 00000471  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000474  89 45 0C			mov	dword ptr [EBP+000Ch],EAX

				;continue;
 00000477  E9 FFFFFEB5			jmp	OFFSET $L000958
				;}
 0000047C			$L000964:

				;break;
 0000047C  EB 05			jmp	OFFSET $L000959
				;}
 0000047E  E9 FFFFFEAE			jmp	OFFSET $L000958
 00000483			$L000959:
				;}
 00000483			$L000616:

 00000483  5F				pop	EDI
 00000484  5E				pop	ESI 
 00000485  5B				pop	EBX 
 00000486  8B E5			mov	ESP,EBP
 00000488  5D				pop	EBP 
 00000489  C2 000C			retn	00000000Ch
 0000048C			Algorithms_Sorting_HeapSort_siftDown ENDP

 0000048C			Algorithms_Sorting_HeapSort PROC NEAR 
				;void Algorithms::Sorting::HeapSort(void);
 0000048C  55				push	EBP
 0000048D  8B EC			mov	EBP,ESP
 0000048F  51				push	ECX 
 00000490  53				push	EBX 
 00000491  56				push	ESI 
 00000492  57				push	EDI 
 00000493  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000496  E8 00001DBB			call	 Algorithms_Sorting_Sorter ;base constructor call
 0000049B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000049E  C7 01 00000024 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_HeapSort 

 000004A4  5F				pop	EDI
 000004A5  5E				pop	ESI 
 000004A6  5B				pop	EBX 
 000004A7  8B E5			mov	ESP,EBP
 000004A9  5D				pop	EBP 
 000004AA  C3				ret	
 000004AB			Algorithms_Sorting_HeapSort ENDP

 000004AB			Algorithms_Sorting_InsertionSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 000004AB  55				push	EBP
 000004AC  8B EC			mov	EBP,ESP
 000004AE  83 EC 14			sub	ESP,000000014h
 000004B1  53				push	EBX 
 000004B2  56				push	ESI 
 000004B3  57				push	EDI 
 000004B4  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{96}:for(i= 1; i < size; i++ )
 000004B7  B8 00000001			mov	EAX,000000001h
 000004BC  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000004BF  EB 06			jmp	OFFSET $L000967
 000004C1			$L000968:
 000004C1  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000004C4  FF 45 FC			inc	dword ptr [EBP-4]
 000004C7			$L000967:
 000004C7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000004CA  50				push	EAX
 000004CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000004CE  5A				pop	EDX
 000004CF  3B D0			cmp	EDX,EAX
 000004D1  0F 9C C0			setl	AL
 000004D4  84 C0			test	AL,AL
 000004D6  0F 84 000000E2		jz	OFFSET $L000969
				;{

				;{98}:dIndex= array[i];
 000004DC  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000004DF  8B C3			mov	EAX,EBX 
 000004E1  50				push	EAX
 000004E2  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000004E5  5E				pop	ESI
 000004E6  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000004E9  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000004F0  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000004F3  50				push	EAX
 000004F4  52				push	EDX 
 000004F5  DD C0			ffree	st
 000004F7  DD 04 24			fld	qword ptr [ESP]
 000004FA  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{99}:j= i;
 000004FD  5A				pop	EDX
 000004FE  58				pop	EAX 
 000004FF  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000502  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{100}:while(j > 0 && array[j - 1] > dIndex)
 00000505			$L000970:
 00000505  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000508  50				push	EAX
 00000509  33 C0			xor	EAX,EAX
 0000050B  5A				pop	EDX
 0000050C  3B D0			cmp	EDX,EAX
 0000050E  0F 9F C0			setg	AL
 00000511  84 C0			test	AL,AL
 00000513  74 39			jz	OFFSET $L000972
 00000515  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000518  8B C3			mov	EAX,EBX 
 0000051A  50				push	EAX
 0000051B  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000051E  50				push	EAX
 0000051F  B8 00000001			mov	EAX,000000001h
 00000524  5A				pop	EDX
 00000525  2B D0			sub	EDX,EAX
 00000527  8B C2			mov	EAX,EDX
 00000529  5E				pop	ESI
 0000052A  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000052D  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00000534  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000537  50				push	EAX
 00000538  52				push	EDX 
 00000539  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000053C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 0000053F  50				push	EAX
 00000540  52				push	EDX 
 00000541  E8 00000000 E		call	 FloatingPoint_Compare
 00000546  83 F8 00			cmp	EAX,000000000h
 00000549  F7 D8			neg	EAX
 0000054B  0F 9F C0			setg	AL
 0000054E			$L000972:
 0000054E  84 C0			test	AL,AL
 00000550  74 47			jz	OFFSET $L000971
				;{

				;{102}:array[j]= array[j - 1];
 00000552  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000555  8B C3			mov	EAX,EBX 
 00000557  50				push	EAX
 00000558  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000055B  5E				pop	ESI
 0000055C  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 0000055F  50				push	EAX
 00000560  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000563  8B C3			mov	EAX,EBX 
 00000565  50				push	EAX
 00000566  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000569  50				push	EAX
 0000056A  B8 00000001			mov	EAX,000000001h
 0000056F  5A				pop	EDX
 00000570  2B D0			sub	EDX,EAX
 00000572  8B C2			mov	EAX,EDX
 00000574  5E				pop	ESI
 00000575  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000578  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000057F  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000582  50				push	EAX
 00000583  52				push	EDX 
 00000584  DD C0			ffree	st
 00000586  DD 04 24			fld	qword ptr [ESP]
 00000589  5A				pop	EDX
 0000058A  58				pop	EAX 
 0000058B  5B				pop	EBX
 0000058C  DD 1B			fstp	qword ptr [EBX]

				;{103}:j-- ;
 0000058E  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000591  FF 4D F0			dec	dword ptr [EBP-16]
				;}
 00000594  E9 FFFFFF6C			jmp	OFFSET $L000970
 00000599			$L000971:

				;{105}:array[j]= dIndex;
 00000599  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000059C  8B C3			mov	EAX,EBX 
 0000059E  50				push	EAX
 0000059F  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000005A2  5E				pop	ESI
 000005A3  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000005A6  50				push	EAX
 000005A7  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000005AA  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000005AD  50				push	EAX
 000005AE  52				push	EDX 
 000005AF  DD C0			ffree	st
 000005B1  DD 04 24			fld	qword ptr [ESP]
 000005B4  5A				pop	EDX
 000005B5  58				pop	EAX 
 000005B6  5B				pop	EBX
 000005B7  DD 1B			fstp	qword ptr [EBX]
				;}
 000005B9  E9 FFFFFF03			jmp	OFFSET $L000968 
 000005BE			$L000969:
				;}
 000005BE			$L000557:

 000005BE  5F				pop	EDI
 000005BF  5E				pop	ESI 
 000005C0  5B				pop	EBX 
 000005C1  8B E5			mov	ESP,EBP
 000005C3  5D				pop	EBP 
 000005C4  C2 0008			retn	000000008h
 000005C7			Algorithms_Sorting_InsertionSort_Sort ENDP

 000005C7			Algorithms_Sorting_InsertionSort PROC NEAR 
				;void Algorithms::Sorting::InsertionSort(void);
 000005C7  55				push	EBP
 000005C8  8B EC			mov	EBP,ESP
 000005CA  51				push	ECX 
 000005CB  53				push	EBX 
 000005CC  56				push	ESI 
 000005CD  57				push	EDI 
 000005CE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000005D1  E8 00001C80			call	 Algorithms_Sorting_Sorter ;base constructor call
 000005D6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000005D9  C7 01 00000030 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_InsertionSort 

 000005DF  5F				pop	EDI
 000005E0  5E				pop	ESI 
 000005E1  5B				pop	EBX 
 000005E2  8B E5			mov	ESP,EBP
 000005E4  5D				pop	EBP 
 000005E5  C3				ret	
 000005E6			Algorithms_Sorting_InsertionSort ENDP

 000005E6			Algorithms_Sorting_MergeSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 000005E6  55				push	EBP
 000005E7  8B EC			mov	EBP,ESP
 000005E9  83 EC 08			sub	ESP,000000008h
 000005EC  53				push	EBX 
 000005ED  56				push	ESI 
 000005EE  57				push	EDI 
 000005EF  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{265}:temp= new double[size];
 000005F2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000005F5  6B C0 08			imul	EAX,000000008h
 000005F8  50				push	EAX
 000005F9  8B D8			mov	EBX,EAX
 000005FB  E8 00000000 E		call	 System_Memory_New
 00000600  85 C0			test	EAX,EAX
 00000602  74 04			jz	 $L000974
 00000604  8B F0			mov	ESI,EAX 
 00000606  EB 02			jmp	 $L000975
 00000608			$L000974:
 00000608  33 F6			xor	ESI,ESI
 0000060A			$L000975:
 0000060A  89 75 FC			mov	dword ptr [EBP-0004h],ESI 

				;{266}:mergeSort(array, temp, 0, size - 1);
 0000060D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000610  50				push	EAX
 00000611  B8 00000001			mov	EAX,000000001h
 00000616  5A				pop	EDX
 00000617  2B D0			sub	EDX,EAX
 00000619  8B C2			mov	EAX,EDX
 0000061B  50				push	EAX 
 0000061C  33 C0			xor	EAX,EAX
 0000061E  50				push	EAX 
 0000061F  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000622  50				push	EAX 
 00000623  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000626  8B C3			mov	EAX,EBX 
 00000628  50				push	EAX
 00000629  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000062C  E8 0000023B			call	 Algorithms_Sorting_MergeSort_mergeSort

				;{267}:destroy []temp;
 00000631  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000634  85 C0			test	EAX,EAX
 00000636  74 06			jz	OFFSET $L000976
 00000638  50				push	EAX
 00000639  E8 00000000 E		call	 System_Memory_Destroy
 0000063E			$L000976:
				;}
 0000063E			$L000610:

 0000063E  5F				pop	EDI
 0000063F  5E				pop	ESI 
 00000640  5B				pop	EBX 
 00000641  8B E5			mov	ESP,EBP
 00000643  5D				pop	EBP 
 00000644  C2 0008			retn	000000008h
 00000647			Algorithms_Sorting_MergeSort_Sort ENDP

 00000647			Algorithms_Sorting_MergeSort_doMerge PROC NEAR 
				;void doMerge(double double [] array, double double [] temp, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _M, Algorithms::Sorting::__uint _L);
 00000647  55				push	EBP
 00000648  8B EC			mov	EBP,ESP
 0000064A  83 EC 14			sub	ESP,000000014h
 0000064D  53				push	EBX 
 0000064E  56				push	ESI 
 0000064F  57				push	EDI 
 00000650  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{216}:_F_End= _M - 1, tmp_pos= _F, item_count= _L - _F + 1;
 00000653  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00000656  50				push	EAX
 00000657  B8 00000001			mov	EAX,000000001h
 0000065C  5A				pop	EDX
 0000065D  2B D0			sub	EDX,EAX
 0000065F  8B C2			mov	EAX,EDX
 00000661  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000664  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000667  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 0000066A  8B 45 18			mov	EAX,dword ptr [EBP+0018h]
 0000066D  50				push	EAX
 0000066E  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000671  5A				pop	EDX
 00000672  2B D0			sub	EDX,EAX
 00000674  8B C2			mov	EAX,EDX
 00000676  50				push	EAX
 00000677  B8 00000001			mov	EAX,000000001h
 0000067C  5A				pop	EDX 
 0000067D  03 C2			add	EAX,EDX
 0000067F  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{220}:while(_F <= _F_End && _M <= _L)
 00000682			$L000977:
 00000682  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000685  50				push	EAX
 00000686  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000689  5A				pop	EDX
 0000068A  3B D0			cmp	EDX,EAX
 0000068C  0F 9E C0			setle	AL
 0000068F  84 C0			test	AL,AL
 00000691  74 0D			jz	OFFSET $L000979
 00000693  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00000696  50				push	EAX
 00000697  8B 45 18			mov	EAX,dword ptr [EBP+0018h]
 0000069A  5A				pop	EDX
 0000069B  3B D0			cmp	EDX,EAX
 0000069D  0F 9E C0			setle	AL
 000006A0			$L000979:
 000006A0  84 C0			test	AL,AL
 000006A2  0F 84 000000C4		jz	OFFSET $L000978
				;{

				;{222}:if(array[_F] <= array[_M])
 000006A8  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000006AB  8B C3			mov	EAX,EBX 
 000006AD  50				push	EAX
 000006AE  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000006B1  5E				pop	ESI
 000006B2  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000006B5  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000006BC  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000006BF  50				push	EAX
 000006C0  52				push	EDX 
 000006C1  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000006C4  8B C3			mov	EAX,EBX 
 000006C6  50				push	EAX
 000006C7  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 000006CA  5E				pop	ESI
 000006CB  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000006CE  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000006D5  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000006D8  50				push	EAX
 000006D9  52				push	EDX 
 000006DA  E8 00000000 E		call	 FloatingPoint_Compare
 000006DF  83 F8 00			cmp	EAX,000000000h
 000006E2  F7 D8			neg	EAX
 000006E4  0F 9E C0			setle	AL
 000006E7  84 C0			test	AL,AL
 000006E9  74 3F			jz	OFFSET $L000980
				;{

				;{223}:temp[tmp_pos]= array[_F];
 000006EB  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000006EE  8B C3			mov	EAX,EBX 
 000006F0  50				push	EAX
 000006F1  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000006F4  5E				pop	ESI
 000006F5  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000006F8  50				push	EAX
 000006F9  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000006FC  8B C3			mov	EAX,EBX 
 000006FE  50				push	EAX
 000006FF  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000702  5E				pop	ESI
 00000703  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000706  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000070D  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000710  50				push	EAX
 00000711  52				push	EDX 
 00000712  DD C0			ffree	st
 00000714  DD 04 24			fld	qword ptr [ESP]
 00000717  5A				pop	EDX
 00000718  58				pop	EAX 
 00000719  5B				pop	EBX
 0000071A  DD 1B			fstp	qword ptr [EBX]

				;{224}:tmp_pos++ ;
 0000071C  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 0000071F  FF 45 F8			inc	dword ptr [EBP-8]

				;{225}:_F++ ;
 00000722  8B 45 10			mov	EAX,dword ptr [EBP+16]
 00000725  FF 45 10			inc	dword ptr [EBP+16]
				;}
 00000728  EB 3D			jmp	OFFSET $L000981

				; else {
 0000072A			$L000980:
				;{

				;{227}:temp[tmp_pos]= array[_M];
 0000072A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000072D  8B C3			mov	EAX,EBX 
 0000072F  50				push	EAX
 00000730  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000733  5E				pop	ESI
 00000734  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000737  50				push	EAX
 00000738  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000073B  8B C3			mov	EAX,EBX 
 0000073D  50				push	EAX
 0000073E  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00000741  5E				pop	ESI
 00000742  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000745  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000074C  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 0000074F  50				push	EAX
 00000750  52				push	EDX 
 00000751  DD C0			ffree	st
 00000753  DD 04 24			fld	qword ptr [ESP]
 00000756  5A				pop	EDX
 00000757  58				pop	EAX 
 00000758  5B				pop	EBX
 00000759  DD 1B			fstp	qword ptr [EBX]

				;{228}:tmp_pos++ ;
 0000075B  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 0000075E  FF 45 F8			inc	dword ptr [EBP-8]

				;{229}:_M++ ;
 00000761  8B 45 14			mov	EAX,dword ptr [EBP+20]
 00000764  FF 45 14			inc	dword ptr [EBP+20]
				;}
 00000767			$L000981:

				; }
				;}
 00000767  E9 FFFFFF16			jmp	OFFSET $L000977
 0000076C			$L000978:

				;{232}:while(_F <= _F_End)
 0000076C			$L000982:
 0000076C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000076F  50				push	EAX
 00000770  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000773  5A				pop	EDX
 00000774  3B D0			cmp	EDX,EAX
 00000776  0F 9E C0			setle	AL
 00000779  84 C0			test	AL,AL
 0000077B  74 3F			jz	OFFSET $L000983
				;{

				;{233}:temp[tmp_pos]= array[_F];
 0000077D  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00000780  8B C3			mov	EAX,EBX 
 00000782  50				push	EAX
 00000783  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000786  5E				pop	ESI
 00000787  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 0000078A  50				push	EAX
 0000078B  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000078E  8B C3			mov	EAX,EBX 
 00000790  50				push	EAX
 00000791  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000794  5E				pop	ESI
 00000795  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000798  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000079F  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000007A2  50				push	EAX
 000007A3  52				push	EDX 
 000007A4  DD C0			ffree	st
 000007A6  DD 04 24			fld	qword ptr [ESP]
 000007A9  5A				pop	EDX
 000007AA  58				pop	EAX 
 000007AB  5B				pop	EBX
 000007AC  DD 1B			fstp	qword ptr [EBX]

				;{234}:tmp_pos++ ;
 000007AE  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000007B1  FF 45 F8			inc	dword ptr [EBP-8]

				;{235}:_F++ ;
 000007B4  8B 45 10			mov	EAX,dword ptr [EBP+16]
 000007B7  FF 45 10			inc	dword ptr [EBP+16]
				;}
 000007BA  EB B0			jmp	OFFSET $L000982
 000007BC			$L000983:

				;{237}:while(_M <= _L)
 000007BC			$L000984:
 000007BC  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 000007BF  50				push	EAX
 000007C0  8B 45 18			mov	EAX,dword ptr [EBP+0018h]
 000007C3  5A				pop	EDX
 000007C4  3B D0			cmp	EDX,EAX
 000007C6  0F 9E C0			setle	AL
 000007C9  84 C0			test	AL,AL
 000007CB  74 3F			jz	OFFSET $L000985
				;{

				;{238}:temp[tmp_pos]= array[_M];
 000007CD  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000007D0  8B C3			mov	EAX,EBX 
 000007D2  50				push	EAX
 000007D3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000007D6  5E				pop	ESI
 000007D7  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000007DA  50				push	EAX
 000007DB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000007DE  8B C3			mov	EAX,EBX 
 000007E0  50				push	EAX
 000007E1  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 000007E4  5E				pop	ESI
 000007E5  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000007E8  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000007EF  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000007F2  50				push	EAX
 000007F3  52				push	EDX 
 000007F4  DD C0			ffree	st
 000007F6  DD 04 24			fld	qword ptr [ESP]
 000007F9  5A				pop	EDX
 000007FA  58				pop	EAX 
 000007FB  5B				pop	EBX
 000007FC  DD 1B			fstp	qword ptr [EBX]

				;{239}:tmp_pos++ ;
 000007FE  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000801  FF 45 F8			inc	dword ptr [EBP-8]

				;{240}:_M++ ;
 00000804  8B 45 14			mov	EAX,dword ptr [EBP+20]
 00000807  FF 45 14			inc	dword ptr [EBP+20]
				;}
 0000080A  EB B0			jmp	OFFSET $L000984
 0000080C			$L000985:

				;{243}:for(index= 0; index < item_count; index++ )
 0000080C  33 C0			xor	EAX,EAX
 0000080E  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000811  EB 06			jmp	OFFSET $L000986
 00000813			$L000987:
 00000813  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000816  FF 45 F0			inc	dword ptr [EBP-16]
 00000819			$L000986:
 00000819  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000081C  50				push	EAX
 0000081D  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000820  5A				pop	EDX
 00000821  3B D0			cmp	EDX,EAX
 00000823  0F 9C C0			setl	AL
 00000826  84 C0			test	AL,AL
 00000828  74 39			jz	OFFSET $L000988
				;{

				;{245}:array[_L]= temp[_L];
 0000082A  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000082D  8B C3			mov	EAX,EBX 
 0000082F  50				push	EAX
 00000830  8B 45 18			mov	EAX,dword ptr [EBP+0018h]
 00000833  5E				pop	ESI
 00000834  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000837  50				push	EAX
 00000838  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000083B  8B C3			mov	EAX,EBX 
 0000083D  50				push	EAX
 0000083E  8B 45 18			mov	EAX,dword ptr [EBP+0018h]
 00000841  5E				pop	ESI
 00000842  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000845  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000084C  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 0000084F  50				push	EAX
 00000850  52				push	EDX 
 00000851  DD C0			ffree	st
 00000853  DD 04 24			fld	qword ptr [ESP]
 00000856  5A				pop	EDX
 00000857  58				pop	EAX 
 00000858  5B				pop	EBX
 00000859  DD 1B			fstp	qword ptr [EBX]

				;{246}:_L-- ;
 0000085B  8B 45 18			mov	EAX,dword ptr [EBP+24]
 0000085E  FF 4D 18			dec	dword ptr [EBP+24]
				;}
 00000861  EB B0			jmp	OFFSET $L000987 
 00000863			$L000988:
				;}
 00000863			$L000594:

 00000863  5F				pop	EDI
 00000864  5E				pop	ESI 
 00000865  5B				pop	EBX 
 00000866  8B E5			mov	ESP,EBP
 00000868  5D				pop	EBP 
 00000869  C2 0014			retn	000000014h
 0000086C			Algorithms_Sorting_MergeSort_doMerge ENDP

 0000086C			Algorithms_Sorting_MergeSort_mergeSort PROC NEAR 
				;void mergeSort(double double [] array, double double [] temp, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _L);
 0000086C  55				push	EBP
 0000086D  8B EC			mov	EBP,ESP
 0000086F  83 EC 08			sub	ESP,000000008h
 00000872  53				push	EBX 
 00000873  56				push	ESI 
 00000874  57				push	EDI 
 00000875  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{252}:if(_L > _F)
 00000878  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 0000087B  50				push	EAX
 0000087C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000087F  5A				pop	EDX
 00000880  3B D0			cmp	EDX,EAX
 00000882  0F 9F C0			setg	AL
 00000885  84 C0			test	AL,AL
 00000887  0F 84 00000084		jz	OFFSET $L000989
				;{

				;{254}:_M= (_L + _F) div 2;
 0000088D  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00000890  50				push	EAX
 00000891  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000894  5A				pop	EDX
 00000895  03 C2			add	EAX,EDX
 00000897  50				push	EAX
 00000898  B8 00000002			mov	EAX,000000002h
 0000089D  8B C8			mov	ECX,EAX
 0000089F  58				pop	EAX
 000008A0  33 D2			xor	EDX,EDX
 000008A2  F7 F9			idiv	ECX
 000008A4  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{255}:mergeSort(array, temp, _F, _M);
 000008A7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000008AA  50				push	EAX 
 000008AB  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000008AE  50				push	EAX 
 000008AF  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000008B2  8B C3			mov	EAX,EBX 
 000008B4  50				push	EAX 
 000008B5  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000008B8  8B C3			mov	EAX,EBX 
 000008BA  50				push	EAX
 000008BB  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000008BE  E8 FFFFFFA9			call	 Algorithms_Sorting_MergeSort_mergeSort

				;{256}:mergeSort(array, temp, _M + 1, _L);
 000008C3  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 000008C6  50				push	EAX 
 000008C7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000008CA  50				push	EAX
 000008CB  B8 00000001			mov	EAX,000000001h
 000008D0  5A				pop	EDX
 000008D1  03 C2			add	EAX,EDX
 000008D3  50				push	EAX 
 000008D4  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000008D7  8B C3			mov	EAX,EBX 
 000008D9  50				push	EAX 
 000008DA  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000008DD  8B C3			mov	EAX,EBX 
 000008DF  50				push	EAX
 000008E0  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000008E3  E8 FFFFFF84			call	 Algorithms_Sorting_MergeSort_mergeSort

				;{258}:doMerge(array, temp, _F, _M + 1, _L);
 000008E8  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 000008EB  50				push	EAX 
 000008EC  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000008EF  50				push	EAX
 000008F0  B8 00000001			mov	EAX,000000001h
 000008F5  5A				pop	EDX
 000008F6  03 C2			add	EAX,EDX
 000008F8  50				push	EAX 
 000008F9  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000008FC  50				push	EAX 
 000008FD  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00000900  8B C3			mov	EAX,EBX 
 00000902  50				push	EAX 
 00000903  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000906  8B C3			mov	EAX,EBX 
 00000908  50				push	EAX
 00000909  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000090C  E8 FFFFFD36			call	 Algorithms_Sorting_MergeSort_doMerge
				;}
 00000911			$L000989:

				;{260}:return 
 00000911  EB 00			jmp	OFFSET $L000604
				;}
 00000913			$L000604:

 00000913  5F				pop	EDI
 00000914  5E				pop	ESI 
 00000915  5B				pop	EBX 
 00000916  8B E5			mov	ESP,EBP
 00000918  5D				pop	EBP 
 00000919  C2 0010			retn	000000010h
 0000091C			Algorithms_Sorting_MergeSort_mergeSort ENDP

 0000091C			Algorithms_Sorting_MergeSort PROC NEAR 
				;void Algorithms::Sorting::MergeSort(void);
 0000091C  55				push	EBP
 0000091D  8B EC			mov	EBP,ESP
 0000091F  51				push	ECX 
 00000920  53				push	EBX 
 00000921  56				push	ESI 
 00000922  57				push	EDI 
 00000923  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000926  E8 0000192B			call	 Algorithms_Sorting_Sorter ;base constructor call
 0000092B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000092E  C7 01 0000003C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_MergeSort 

 00000934  5F				pop	EDI
 00000935  5E				pop	ESI 
 00000936  5B				pop	EBX 
 00000937  8B E5			mov	ESP,EBP
 00000939  5D				pop	EBP 
 0000093A  C3				ret	
 0000093B			Algorithms_Sorting_MergeSort ENDP

 0000093B			Algorithms_Sorting_Proxy_Array_Destructor PROC NEAR 
				;void Destructor(void);
 0000093B  55				push	EBP
 0000093C  8B EC			mov	EBP,ESP
 0000093E  51				push	ECX 
 0000093F  53				push	EBX 
 00000940  56				push	ESI 
 00000941  57				push	EDI 
				;{

				;{380}:if(array != null)
 00000942  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000945  8B 01			mov	EAX,dword ptr [ECX]
 00000947  8B C8			mov	ECX,EAX 
 00000949  50				push	EAX
 0000094A  33 C0			xor	EAX,EAX
 0000094C  5A				pop	EDX
 0000094D  3B D0			cmp	EDX,EAX
 0000094F  0F 95 C0			setnz	AL
 00000952  84 C0			test	AL,AL
 00000954  74 37			jz	OFFSET $L000992
				;{

				;{382}:destroy []array;
 00000956  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000959  8B 01			mov	EAX,dword ptr [ECX]
 0000095B  8B C8			mov	ECX,EAX 
 0000095D  85 C0			test	EAX,EAX
 0000095F  74 25			jz	OFFSET $L000994
 00000961  8B F0			mov	ESI,EAX
 00000963  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00000966  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00000969  8B DE			mov	EBX,ESI 
 0000096B			$L000995:
 0000096B  8B CB			mov	ECX,EBX 
 0000096D  85 C9			test	ECX,ECX
 0000096F  74 05			jz	OFFSET $L000996
 00000971  8B 01			mov	EAX,dword ptr [ECX]
 00000973  FF 50 04			call	dword ptr [EAX+0004h]
 00000976			$L000996:
 00000976  83 C3 12			add	EBX,000000012h
 00000979  3B DF			cmp	EBX,EDI
 0000097B  75 EE			jnz	OFFSET $L000995

 0000097D  83 C6 FC			add	ESI,0FFFFFFFCh
 00000980  56				push	ESI
 00000981  E8 00000000 E		call	 System_Memory_Destroy
 00000986			$L000994:

				;{383}:array= null;
 00000986  33 C0			xor	EAX,EAX
 00000988  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000098B  89 01			mov	dword ptr [ECX],EAX
				;}
 0000098D			$L000992:
				;}
 0000098D			$L000663:

 0000098D  5F				pop	EDI
 0000098E  5E				pop	ESI 
 0000098F  5B				pop	EBX 
 00000990  8B E5			mov	ESP,EBP
 00000992  5D				pop	EBP 
 00000993  C3				ret	
 00000994			Algorithms_Sorting_Proxy_Array_Destructor ENDP

 00000994			Algorithms_Sorting_Proxy_Array_get_item_size PROC NEAR 
				;unsigned get::item_size(void);
 00000994  55				push	EBP
 00000995  8B EC			mov	EBP,ESP
 00000997  51				push	ECX 
 00000998  53				push	EBX 
 00000999  56				push	ESI 
 0000099A  57				push	EDI 
				;{

				;{370}:return _item_size
 0000099B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000099E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000009A1  EB 00			jmp	OFFSET $L000648
				;}
 000009A3			$L000648:

 000009A3  5F				pop	EDI
 000009A4  5E				pop	ESI 
 000009A5  5B				pop	EBX 
 000009A6  8B E5			mov	ESP,EBP
 000009A8  5D				pop	EBP 
 000009A9  C3				ret	
 000009AA			Algorithms_Sorting_Proxy_Array_get_item_size ENDP

 000009AA			Algorithms_Sorting_Proxy_Array_get_length PROC NEAR 
				;unsigned get::length(void);
 000009AA  55				push	EBP
 000009AB  8B EC			mov	EBP,ESP
 000009AD  51				push	ECX 
 000009AE  53				push	EBX 
 000009AF  56				push	ESI 
 000009B0  57				push	EDI 
				;{

				;{368}:return _length
 000009B1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000009B4  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 000009B7  EB 00			jmp	OFFSET $L000646
				;}
 000009B9			$L000646:

 000009B9  5F				pop	EDI
 000009BA  5E				pop	ESI 
 000009BB  5B				pop	EBX 
 000009BC  8B E5			mov	ESP,EBP
 000009BE  5D				pop	EBP 
 000009BF  C3				ret	
 000009C0			Algorithms_Sorting_Proxy_Array_get_length ENDP

 000009C0			Algorithms_Sorting_Proxy_Array PROC NEAR 
				;void Algorithms::Sorting::Proxy::Array(void);
 000009C0  55				push	EBP
 000009C1  8B EC			mov	EBP,ESP
 000009C3  51				push	ECX 
 000009C4  53				push	EBX 
 000009C5  56				push	ESI 
 000009C6  57				push	EDI 
 000009C7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000009CA  C7 41 0C			mov	dword ptr [ECX+000Ch],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Array 
	   00000048 R
 000009D1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000009D4  E8 00002941			call	 __member_Init@Algorithms_Sorting_Proxy_Array

 000009D9  5F				pop	EDI
 000009DA  5E				pop	ESI 
 000009DB  5B				pop	EBX 
 000009DC  8B E5			mov	ESP,EBP
 000009DE  5D				pop	EBP 
 000009DF  C3				ret	
 000009E0			Algorithms_Sorting_Proxy_Array ENDP

 000009E0			Algorithms_Sorting_Proxy_ArrayOfAutomobile PROC NEAR 
				;void Algorithms::Sorting::Proxy::ArrayOfAutomobile(Algorithms::Sorting::__uint len);
 000009E0  55				push	EBP
 000009E1  8B EC			mov	EBP,ESP
 000009E3  51				push	ECX 
 000009E4  53				push	EBX 
 000009E5  56				push	ESI 
 000009E6  57				push	EDI 
 000009E7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000009EA  E8 FFFFFFD1			call	 Algorithms_Sorting_Proxy_Array ;base constructor call
 000009EF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000009F2  C7 41 0C			mov	dword ptr [ECX+000Ch],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ArrayOfAutomobile 
	   0000005C R
				;{

				;{438}:_item_size= sizeof (Algorithms::Sorting::Proxy::Automobile);
 000009F9  B8 00000012			mov	EAX,000000012h
 000009FE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A01  89 41 08			mov	dword ptr [ECX+0008h],EAX

				;{439}:array= new Algorithms::Sorting::Proxy::Automobile[_length= len];
 00000A04  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000A07  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A0A  89 41 04			mov	dword ptr [ECX+0004h],EAX
 00000A0D  6B C0 12			imul	EAX,000000012h
 00000A10  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00000A13  53				push	EBX
 00000A14  8B D8			mov	EBX,EAX
 00000A16  E8 00000000 E		call	 System_Memory_New
 00000A1B  85 C0			test	EAX,EAX
 00000A1D  74 09			jz	 $L000998
 00000A1F  8B F0			mov	ESI,EAX 
 00000A21  89 1E			mov	dword ptr [ESI],EBX 
 00000A23  83 C6 04			add	ESI,000000004h
 00000A26  EB 02			jmp	 $L000999
 00000A28			$L000998:
 00000A28  33 F6			xor	ESI,ESI
 00000A2A			$L000999:
 00000A2A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A2D  89 31			mov	dword ptr [ECX],ESI 
 00000A2F  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00000A32  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00000A35  8B DE			mov	EBX,ESI 
 00000A37			$L001000:
 00000A37  8B CB			mov	ECX,EBX 
 00000A39  E8 000002F3			call	 Algorithms_Sorting_Proxy_Automobile
 00000A3E  83 C3 12			add	EBX,000000012h 
 00000A41  3B DF			cmp	EBX,EDI
 00000A43  75 F2			jnz	OFFSET $L001000
 00000A45  8B C6			mov	EAX,ESI 
				;}

 00000A47  5F				pop	EDI
 00000A48  5E				pop	ESI 
 00000A49  5B				pop	EBX 
 00000A4A  8B E5			mov	ESP,EBP
 00000A4C  5D				pop	EBP 
 00000A4D  C2 0004			retn	000000004h
 00000A50			Algorithms_Sorting_Proxy_ArrayOfAutomobile ENDP

 00000A50			Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyFrom PROC NEAR 
				;void CopyFrom(Algorithms::Sorting::Proxy::Array ref fromArray, Algorithms::Sorting::__uint from, Algorithms::Sorting::__uint to);
 00000A50  55				push	EBP
 00000A51  8B EC			mov	EBP,ESP
 00000A53  83 EC 0C			sub	ESP,00000000Ch
 00000A56  53				push	EBX 
 00000A57  56				push	ESI 
 00000A58  57				push	EDI 
 00000A59  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{483}:fromObject= fromArray.getAt(from);
 00000A5C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000A5F  50				push	EAX
 00000A60  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00000A63  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00000A66  FF 52 04			call	dword ptr [EDX+0004h]
 00000A69  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000A6C  89 03			mov	dword ptr [EBX],EAX

				;{484}:fromAuto= dynamic_cast(fromObject);
 00000A6E  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000A71  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A74  89 03			mov	dword ptr [EBX],EAX

				;{486}:array[to].Cost= fromAuto.Cost;
 00000A76  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000A79  8B 01			mov	EAX,dword ptr [ECX]
 00000A7B  8B C8			mov	ECX,EAX 
 00000A7D  50				push	EAX
 00000A7E  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000A81  5E				pop	ESI
 00000A82  6B C0 12			imul	EAX,000000012h
 00000A85  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000A88  51				push	ECX
 00000A89  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000A8C  E8 000003DB			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 00000A91  50				push	EAX
 00000A92  52				push	EDX 
 00000A93  DD C0			ffree	st
 00000A95  DD 04 24			fld	qword ptr [ESP]
 00000A98  5A				pop	EDX
 00000A99  58				pop	EAX 
 00000A9A  59				pop	ECX
 00000A9B  50				push	EAX
 00000A9C  52				push	EDX 
 00000A9D  E8 000003E3			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{487}:array[to].Year= fromAuto.Year;
 00000AA2  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000AA5  8B 01			mov	EAX,dword ptr [ECX]
 00000AA7  8B C8			mov	ECX,EAX 
 00000AA9  50				push	EAX
 00000AAA  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000AAD  5E				pop	ESI
 00000AAE  6B C0 12			imul	EAX,000000012h
 00000AB1  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000AB4  51				push	ECX
 00000AB5  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000AB8  E8 0000043D			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 00000ABD  59				pop	ECX
 00000ABE  50				push	EAX
 00000ABF  E8 0000044D			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{488}:array[to].Model= fromAuto.Model;
 00000AC4  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000AC7  8B 01			mov	EAX,dword ptr [ECX]
 00000AC9  8B C8			mov	ECX,EAX 
 00000ACB  50				push	EAX
 00000ACC  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000ACF  5E				pop	ESI
 00000AD0  6B C0 12			imul	EAX,000000012h
 00000AD3  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000AD6  51				push	ECX
 00000AD7  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000ADA  E8 000003EC			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 00000ADF  59				pop	ECX
 00000AE0  50				push	EAX
 00000AE1  E8 000003FB			call	 Algorithms_Sorting_Proxy_Automobile_put_Model
				;}
 00000AE6			$L000707:

 00000AE6  5F				pop	EDI
 00000AE7  5E				pop	ESI 
 00000AE8  5B				pop	EBX 
 00000AE9  8B E5			mov	ESP,EBP
 00000AEB  5D				pop	EBP 
 00000AEC  C2 000C			retn	00000000Ch
 00000AEF			Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyFrom ENDP

 00000AEF			Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyTo PROC NEAR 
				;void CopyTo(Algorithms::Sorting::Proxy::Array ref toArray, Algorithms::Sorting::__uint to, Algorithms::Sorting::__uint from);
 00000AEF  55				push	EBP
 00000AF0  8B EC			mov	EBP,ESP
 00000AF2  83 EC 0C			sub	ESP,00000000Ch
 00000AF5  53				push	EBX 
 00000AF6  56				push	ESI 
 00000AF7  57				push	EDI 
 00000AF8  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{474}:toObject= toArray.getAt(to);
 00000AFB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000AFE  50				push	EAX
 00000AFF  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00000B02  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00000B05  FF 52 04			call	dword ptr [EDX+0004h]
 00000B08  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000B0B  89 03			mov	dword ptr [EBX],EAX

				;{475}:toAuto= dynamic_cast(toObject);
 00000B0D  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000B10  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000B13  89 03			mov	dword ptr [EBX],EAX

				;{477}:toAuto.Cost= array[from].Cost;
 00000B15  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000B18  8B 01			mov	EAX,dword ptr [ECX]
 00000B1A  8B C8			mov	ECX,EAX 
 00000B1C  50				push	EAX
 00000B1D  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000B20  5E				pop	ESI
 00000B21  6B C0 12			imul	EAX,000000012h
 00000B24  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000B27  E8 00000340			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 00000B2C  50				push	EAX
 00000B2D  52				push	EDX 
 00000B2E  DD C0			ffree	st
 00000B30  DD 04 24			fld	qword ptr [ESP]
 00000B33  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000B36  E8 0000034A			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{478}:toAuto.Year= array[from].Year;
 00000B3B  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000B3E  8B 01			mov	EAX,dword ptr [ECX]
 00000B40  8B C8			mov	ECX,EAX 
 00000B42  50				push	EAX
 00000B43  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000B46  5E				pop	ESI
 00000B47  6B C0 12			imul	EAX,000000012h
 00000B4A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000B4D  E8 000003A8			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 00000B52  50				push	EAX
 00000B53  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000B56  E8 000003B6			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{479}:toAuto.Model= array[from].Model;
 00000B5B  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000B5E  8B 01			mov	EAX,dword ptr [ECX]
 00000B60  8B C8			mov	ECX,EAX 
 00000B62  50				push	EAX
 00000B63  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000B66  5E				pop	ESI
 00000B67  6B C0 12			imul	EAX,000000012h
 00000B6A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000B6D  E8 00000359			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 00000B72  50				push	EAX
 00000B73  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000B76  E8 00000366			call	 Algorithms_Sorting_Proxy_Automobile_put_Model
				;}
 00000B7B			$L000701:

 00000B7B  5F				pop	EDI
 00000B7C  5E				pop	ESI 
 00000B7D  5B				pop	EBX 
 00000B7E  8B E5			mov	ESP,EBP
 00000B80  5D				pop	EBP 
 00000B81  C2 000C			retn	00000000Ch
 00000B84			Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyTo ENDP

 00000B84			Algorithms_Sorting_Proxy_ArrayOfAutomobile_Swap PROC NEAR 
				;void Swap(Algorithms::Sorting::__uint left, Algorithms::Sorting::__uint right);
 00000B84  55				push	EBP
 00000B85  8B EC			mov	EBP,ESP
 00000B87  83 EC 14			sub	ESP,000000014h
 00000B8A  53				push	EBX 
 00000B8B  56				push	ESI 
 00000B8C  57				push	EDI 
 00000B8D  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{449}:cost= array[left].Cost;
 00000B90  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000B93  8B 01			mov	EAX,dword ptr [ECX]
 00000B95  8B C8			mov	ECX,EAX 
 00000B97  50				push	EAX
 00000B98  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000B9B  5E				pop	ESI
 00000B9C  6B C0 12			imul	EAX,000000012h
 00000B9F  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000BA2  E8 000002C5			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 00000BA7  50				push	EAX
 00000BA8  52				push	EDX 
 00000BA9  DD C0			ffree	st
 00000BAB  DD 04 24			fld	qword ptr [ESP]
 00000BAE  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{450}:year= array[left].Year;
 00000BB1  5A				pop	EDX
 00000BB2  58				pop	EAX 
 00000BB3  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000BB6  8B 01			mov	EAX,dword ptr [ECX]
 00000BB8  8B C8			mov	ECX,EAX 
 00000BBA  50				push	EAX
 00000BBB  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000BBE  5E				pop	ESI
 00000BBF  6B C0 12			imul	EAX,000000012h
 00000BC2  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000BC5  E8 00000330			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 00000BCA  66| 89 45 F4			mov	word ptr [EBP-000Ch],AX

				;{451}:model= array[left].Model;
 00000BCE  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000BD1  8B 01			mov	EAX,dword ptr [ECX]
 00000BD3  8B C8			mov	ECX,EAX 
 00000BD5  50				push	EAX
 00000BD6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000BD9  5E				pop	ESI
 00000BDA  6B C0 12			imul	EAX,000000012h
 00000BDD  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000BE0  E8 000002E6			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 00000BE5  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{453}:array[left].Cost= array[right].Cost;
 00000BE8  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000BEB  8B 01			mov	EAX,dword ptr [ECX]
 00000BED  8B C8			mov	ECX,EAX 
 00000BEF  50				push	EAX
 00000BF0  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000BF3  5E				pop	ESI
 00000BF4  6B C0 12			imul	EAX,000000012h
 00000BF7  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000BFA  51				push	ECX
 00000BFB  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000BFE  8B 01			mov	EAX,dword ptr [ECX]
 00000C00  8B C8			mov	ECX,EAX 
 00000C02  50				push	EAX
 00000C03  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C06  5E				pop	ESI
 00000C07  6B C0 12			imul	EAX,000000012h
 00000C0A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C0D  E8 0000025A			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 00000C12  50				push	EAX
 00000C13  52				push	EDX 
 00000C14  DD C0			ffree	st
 00000C16  DD 04 24			fld	qword ptr [ESP]
 00000C19  5A				pop	EDX
 00000C1A  58				pop	EAX 
 00000C1B  59				pop	ECX
 00000C1C  50				push	EAX
 00000C1D  52				push	EDX 
 00000C1E  E8 00000262			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{454}:array[left].Year= array[right].Year;
 00000C23  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000C26  8B 01			mov	EAX,dword ptr [ECX]
 00000C28  8B C8			mov	ECX,EAX 
 00000C2A  50				push	EAX
 00000C2B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C2E  5E				pop	ESI
 00000C2F  6B C0 12			imul	EAX,000000012h
 00000C32  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C35  51				push	ECX
 00000C36  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000C39  8B 01			mov	EAX,dword ptr [ECX]
 00000C3B  8B C8			mov	ECX,EAX 
 00000C3D  50				push	EAX
 00000C3E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C41  5E				pop	ESI
 00000C42  6B C0 12			imul	EAX,000000012h
 00000C45  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C48  E8 000002AD			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 00000C4D  59				pop	ECX
 00000C4E  50				push	EAX
 00000C4F  E8 000002BD			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{455}:array[left].Model= array[right].Model;
 00000C54  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000C57  8B 01			mov	EAX,dword ptr [ECX]
 00000C59  8B C8			mov	ECX,EAX 
 00000C5B  50				push	EAX
 00000C5C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C5F  5E				pop	ESI
 00000C60  6B C0 12			imul	EAX,000000012h
 00000C63  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C66  51				push	ECX
 00000C67  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000C6A  8B 01			mov	EAX,dword ptr [ECX]
 00000C6C  8B C8			mov	ECX,EAX 
 00000C6E  50				push	EAX
 00000C6F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C72  5E				pop	ESI
 00000C73  6B C0 12			imul	EAX,000000012h
 00000C76  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C79  E8 0000024D			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 00000C7E  59				pop	ECX
 00000C7F  50				push	EAX
 00000C80  E8 0000025C			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{458}:array[right].Cost= cost;
 00000C85  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000C88  8B 01			mov	EAX,dword ptr [ECX]
 00000C8A  8B C8			mov	ECX,EAX 
 00000C8C  50				push	EAX
 00000C8D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C90  5E				pop	ESI
 00000C91  6B C0 12			imul	EAX,000000012h
 00000C94  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000C97  51				push	ECX
 00000C98  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000C9B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000C9E  50				push	EAX
 00000C9F  52				push	EDX 
 00000CA0  DD C0			ffree	st
 00000CA2  DD 04 24			fld	qword ptr [ESP]
 00000CA5  5A				pop	EDX
 00000CA6  58				pop	EAX 
 00000CA7  59				pop	ECX
 00000CA8  50				push	EAX
 00000CA9  52				push	EDX 
 00000CAA  E8 000001D6			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{459}:array[right].Year= year;
 00000CAF  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000CB2  8B 01			mov	EAX,dword ptr [ECX]
 00000CB4  8B C8			mov	ECX,EAX 
 00000CB6  50				push	EAX
 00000CB7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000CBA  5E				pop	ESI
 00000CBB  6B C0 12			imul	EAX,000000012h
 00000CBE  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000CC1  51				push	ECX
 00000CC2  0F BF 45 F4			movsx	EAX,word ptr [EBP-000Ch]
 00000CC6  59				pop	ECX
 00000CC7  50				push	EAX
 00000CC8  E8 00000244			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{460}:array[right].Model= model;
 00000CCD  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000CD0  8B 01			mov	EAX,dword ptr [ECX]
 00000CD2  8B C8			mov	ECX,EAX 
 00000CD4  50				push	EAX
 00000CD5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000CD8  5E				pop	ESI
 00000CD9  6B C0 12			imul	EAX,000000012h
 00000CDC  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000CDF  51				push	ECX
 00000CE0  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000CE3  59				pop	ECX
 00000CE4  50				push	EAX
 00000CE5  E8 000001F7			call	 Algorithms_Sorting_Proxy_Automobile_put_Model
				;}
 00000CEA			$L000693:

 00000CEA  5F				pop	EDI
 00000CEB  5E				pop	ESI 
 00000CEC  5B				pop	EBX 
 00000CED  8B E5			mov	ESP,EBP
 00000CEF  5D				pop	EBP 
 00000CF0  C2 0008			retn	000000008h
 00000CF3			Algorithms_Sorting_Proxy_ArrayOfAutomobile_Swap ENDP

 00000CF3			Algorithms_Sorting_Proxy_ArrayOfAutomobile_getAt PROC NEAR 
				;Algorithms::Sorting::Proxy::ProxyObject getAt(Algorithms::Sorting::__uint pos);
 00000CF3  55				push	EBP
 00000CF4  8B EC			mov	EBP,ESP
 00000CF6  51				push	ECX 
 00000CF7  53				push	EBX 
 00000CF8  56				push	ESI 
 00000CF9  57				push	EDI 
				;{

				;{466}:if(pos > _length)
 00000CFA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000CFD  50				push	EAX
 00000CFE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D01  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000D04  5A				pop	EDX
 00000D05  3B D0			cmp	EDX,EAX
 00000D07  0F 9F C0			setg	AL
 00000D0A  84 C0			test	AL,AL
 00000D0C  74 04			jz	OFFSET $L001001

				;{467}:return null
 00000D0E  33 C0			xor	EAX,EAX
 00000D10  EB 16			jmp	OFFSET $L000699
 00000D12			$L001001:

				;{469}:return &array[pos]
 00000D12  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D15  8B 01			mov	EAX,dword ptr [ECX]
 00000D17  8B C8			mov	ECX,EAX 
 00000D19  50				push	EAX
 00000D1A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D1D  5E				pop	ESI
 00000D1E  6B C0 12			imul	EAX,000000012h
 00000D21  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000D24  8B C1			mov	EAX,ECX
 00000D26  EB 00			jmp	OFFSET $L000699
				;}
 00000D28			$L000699:

 00000D28  5F				pop	EDI
 00000D29  5E				pop	ESI 
 00000D2A  5B				pop	EBX 
 00000D2B  8B E5			mov	ESP,EBP
 00000D2D  5D				pop	EBP 
 00000D2E  C2 0004			retn	000000004h
 00000D31			Algorithms_Sorting_Proxy_ArrayOfAutomobile_getAt ENDP

 00000D31			Algorithms_Sorting_Proxy_Automobile PROC NEAR 
				;void Algorithms::Sorting::Proxy::Automobile(void);
 00000D31  55				push	EBP
 00000D32  8B EC			mov	EBP,ESP
 00000D34  51				push	ECX 
 00000D35  53				push	EBX 
 00000D36  56				push	ESI 
 00000D37  57				push	EDI 
 00000D38  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D3B  E8 0000085E			call	 Algorithms_Sorting_Proxy_ProxyObject ;base constructor call
 00000D40  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000D43  C7 01 00000070 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Automobile 
 00000D49  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000D4C  E8 000025F1			call	 __member_Init@Algorithms_Sorting_Proxy_Automobile 
				;{
				;}

 00000D51  5F				pop	EDI
 00000D52  5E				pop	ESI 
 00000D53  5B				pop	EBX 
 00000D54  8B E5			mov	ESP,EBP
 00000D56  5D				pop	EBP 
 00000D57  C3				ret	
 00000D58			Algorithms_Sorting_Proxy_Automobile ENDP

 00000D58			Algorithms_Sorting_Proxy_Automobile_Compare PROC NEAR 
				;int Compare(Algorithms::Sorting::Proxy::ProxyObject ^ obj);
 00000D58  55				push	EBP
 00000D59  8B EC			mov	EBP,ESP
 00000D5B  83 EC 08			sub	ESP,000000008h
 00000D5E  53				push	EBX 
 00000D5F  56				push	ESI 
 00000D60  57				push	EDI 
 00000D61  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{413}:pobj= dynamic_cast(obj);
 00000D64  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000D67  8B C3			mov	EAX,EBX 
 00000D69  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000D6C  89 03			mov	dword ptr [EBX],EAX

				;{415}:if(_year < pobj._year && _cost <= pobj._cost)
 00000D6E  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000D71  0F B7 41 10			movzx	EAX,word ptr [ECX+0010h]
 00000D75  50				push	EAX
 00000D76  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000D79  0F B7 41 10			movzx	EAX,word ptr [ECX+0010h]
 00000D7D  5A				pop	EDX
 00000D7E  3B D0			cmp	EDX,EAX
 00000D80  0F 9C C0			setl	AL
 00000D83  84 C0			test	AL,AL
 00000D85  74 23			jz	OFFSET $L001005
 00000D87  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000D8A  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000D8D  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000D90  50				push	EAX
 00000D91  52				push	EDX 
 00000D92  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000D95  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000D98  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000D9B  50				push	EAX
 00000D9C  52				push	EDX 
 00000D9D  E8 00000000 E		call	 FloatingPoint_Compare
 00000DA2  83 F8 00			cmp	EAX,000000000h
 00000DA5  F7 D8			neg	EAX
 00000DA7  0F 9E C0			setle	AL
 00000DAA			$L001005:
 00000DAA  84 C0			test	AL,AL
 00000DAC  74 0C			jz	OFFSET $L001003

				;{416}:return -1
 00000DAE  B8 00000001			mov	EAX,000000001h
 00000DB3  F7 D8			neg	EAX
 00000DB5  E9 000000A9			jmp	OFFSET $L000684

				; else {
 00000DBA			$L001003:

				;{417}:if(_year > pobj._year && _cost >= pobj._cost)
 00000DBA  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000DBD  0F B7 41 10			movzx	EAX,word ptr [ECX+0010h]
 00000DC1  50				push	EAX
 00000DC2  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000DC5  0F B7 41 10			movzx	EAX,word ptr [ECX+0010h]
 00000DC9  5A				pop	EDX
 00000DCA  3B D0			cmp	EDX,EAX
 00000DCC  0F 9F C0			setg	AL
 00000DCF  84 C0			test	AL,AL
 00000DD1  74 23			jz	OFFSET $L001008
 00000DD3  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000DD6  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000DD9  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000DDC  50				push	EAX
 00000DDD  52				push	EDX 
 00000DDE  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000DE1  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000DE4  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000DE7  50				push	EAX
 00000DE8  52				push	EDX 
 00000DE9  E8 00000000 E		call	 FloatingPoint_Compare
 00000DEE  83 F8 00			cmp	EAX,000000000h
 00000DF1  F7 D8			neg	EAX
 00000DF3  0F 9D C0			setge	AL
 00000DF6			$L001008:
 00000DF6  84 C0			test	AL,AL
 00000DF8  74 07			jz	OFFSET $L001006

				;{418}:return 1
 00000DFA  B8 00000001			mov	EAX,000000001h
 00000DFF  EB 62			jmp	OFFSET $L000684
 00000E01			$L001006:
 00000E01			$L001004:

				; }

				;{420}:if(_cost < pobj._cost)
 00000E01  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000E04  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000E07  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000E0A  50				push	EAX
 00000E0B  52				push	EDX 
 00000E0C  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000E0F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000E12  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000E15  50				push	EAX
 00000E16  52				push	EDX 
 00000E17  E8 00000000 E		call	 FloatingPoint_Compare
 00000E1C  83 F8 00			cmp	EAX,000000000h
 00000E1F  F7 D8			neg	EAX
 00000E21  0F 9C C0			setl	AL
 00000E24  84 C0			test	AL,AL
 00000E26  74 09			jz	OFFSET $L001009

				;{421}:return -1
 00000E28  B8 00000001			mov	EAX,000000001h
 00000E2D  F7 D8			neg	EAX
 00000E2F  EB 32			jmp	OFFSET $L000684

				; else {
 00000E31			$L001009:

				;{422}:if(_cost > pobj._cost)
 00000E31  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000E34  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000E37  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000E3A  50				push	EAX
 00000E3B  52				push	EDX 
 00000E3C  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000E3F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000E42  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000E45  50				push	EAX
 00000E46  52				push	EDX 
 00000E47  E8 00000000 E		call	 FloatingPoint_Compare
 00000E4C  83 F8 00			cmp	EAX,000000000h
 00000E4F  F7 D8			neg	EAX
 00000E51  0F 9F C0			setg	AL
 00000E54  84 C0			test	AL,AL
 00000E56  74 07			jz	OFFSET $L001011

				;{423}:return 1
 00000E58  B8 00000001			mov	EAX,000000001h
 00000E5D  EB 04			jmp	OFFSET $L000684
 00000E5F			$L001011:
 00000E5F			$L001010:

				; }

				;{425}:return 0
 00000E5F  33 C0			xor	EAX,EAX
 00000E61  EB 00			jmp	OFFSET $L000684
				;}
 00000E63			$L000684:

 00000E63  5F				pop	EDI
 00000E64  5E				pop	ESI 
 00000E65  5B				pop	EBX 
 00000E66  8B E5			mov	ESP,EBP
 00000E68  5D				pop	EBP 
 00000E69  C2 0004			retn	000000004h
 00000E6C			Algorithms_Sorting_Proxy_Automobile_Compare ENDP

 00000E6C			Algorithms_Sorting_Proxy_Automobile_get_Cost PROC NEAR 
				;double get::Cost(void);
 00000E6C  55				push	EBP
 00000E6D  8B EC			mov	EBP,ESP
 00000E6F  51				push	ECX 
 00000E70  53				push	EBX 
 00000E71  56				push	ESI 
 00000E72  57				push	EDI 
				;{

				;{395}:return _cost
 00000E73  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E76  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000E79  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000E7C  EB 00			jmp	OFFSET $L000672
				;}
 00000E7E			$L000672:

 00000E7E  5F				pop	EDI
 00000E7F  5E				pop	ESI 
 00000E80  5B				pop	EBX 
 00000E81  8B E5			mov	ESP,EBP
 00000E83  5D				pop	EBP 
 00000E84  C3				ret	
 00000E85			Algorithms_Sorting_Proxy_Automobile_get_Cost ENDP

 00000E85			Algorithms_Sorting_Proxy_Automobile_put_Cost PROC NEAR 
				;void put::Cost(double val);
 00000E85  55				push	EBP
 00000E86  8B EC			mov	EBP,ESP
 00000E88  51				push	ECX 
 00000E89  53				push	EBX 
 00000E8A  56				push	ESI 
 00000E8B  57				push	EDI 
				;{

				;{397}:_cost= val;
 00000E8C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000E8F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000E92  50				push	EAX
 00000E93  52				push	EDX 
 00000E94  DD C0			ffree	st
 00000E96  DD 04 24			fld	qword ptr [ESP]
 00000E99  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E9C  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000E9F			$L000673:
 00000E9F  5A				pop	EDX
 00000EA0  58				pop	EAX 

 00000EA1  5F				pop	EDI
 00000EA2  5E				pop	ESI 
 00000EA3  5B				pop	EBX 
 00000EA4  8B E5			mov	ESP,EBP
 00000EA6  5D				pop	EBP 
 00000EA7  C2 0008			retn	000000008h
 00000EAA			Algorithms_Sorting_Proxy_Automobile_put_Cost ENDP

 00000EAA			Algorithms_Sorting_Proxy_Automobile_Destructor PROC NEAR 
				;void Destructor(void);
 00000EAA  55				push	EBP
 00000EAB  8B EC			mov	EBP,ESP
 00000EAD  51				push	ECX 
 00000EAE  53				push	EBX 
 00000EAF  56				push	ESI 
 00000EB0  57				push	EDI 
				;{

				;{430}:Console::WriteLn("Destroying an auto...");
 00000EB1  8D 05 00000129 R		lea	EAX,OFFSET $S000688
 00000EB7  6A 00			push	000000000h
 00000EB9  50				push	EAX 
 00000EBA  E8 00000000 E		call	 Console_WriteString
 00000EBF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000EC4			$L000687:

 00000EC4  5F				pop	EDI
 00000EC5  5E				pop	ESI 
 00000EC6  5B				pop	EBX 
 00000EC7  8B E5			mov	ESP,EBP
 00000EC9  5D				pop	EBP 
 00000ECA  C3				ret	
 00000ECB			Algorithms_Sorting_Proxy_Automobile_Destructor ENDP

 00000ECB			Algorithms_Sorting_Proxy_Automobile_get_Model PROC NEAR 
				;string get::Model(void);
 00000ECB  55				push	EBP
 00000ECC  8B EC			mov	EBP,ESP
 00000ECE  51				push	ECX 
 00000ECF  53				push	EBX 
 00000ED0  56				push	ESI 
 00000ED1  57				push	EDI 
				;{

				;{400}:return _model
 00000ED2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ED5  8B 41 0C			mov	EAX,dword ptr [ECX+000Ch]
 00000ED8  EB 00			jmp	OFFSET $L000676
				;}
 00000EDA			$L000676:

 00000EDA  5F				pop	EDI
 00000EDB  5E				pop	ESI 
 00000EDC  5B				pop	EBX 
 00000EDD  8B E5			mov	ESP,EBP
 00000EDF  5D				pop	EBP 
 00000EE0  C3				ret	
 00000EE1			Algorithms_Sorting_Proxy_Automobile_get_Model ENDP

 00000EE1			Algorithms_Sorting_Proxy_Automobile_put_Model PROC NEAR 
				;void put::Model(string model);
 00000EE1  55				push	EBP
 00000EE2  8B EC			mov	EBP,ESP
 00000EE4  51				push	ECX 
 00000EE5  53				push	EBX 
 00000EE6  56				push	ESI 
 00000EE7  57				push	EDI 
				;{

				;{402}:_model= model;
 00000EE8  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000EEB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000EEE  89 41 0C			mov	dword ptr [ECX+000Ch],EAX
				;}
 00000EF1			$L000677:

 00000EF1  5F				pop	EDI
 00000EF2  5E				pop	ESI 
 00000EF3  5B				pop	EBX 
 00000EF4  8B E5			mov	ESP,EBP
 00000EF6  5D				pop	EBP 
 00000EF7  C2 0004			retn	000000004h
 00000EFA			Algorithms_Sorting_Proxy_Automobile_put_Model ENDP

 00000EFA			Algorithms_Sorting_Proxy_Automobile_get_Year PROC NEAR 
				;unsigned short get::Year(void);
 00000EFA  55				push	EBP
 00000EFB  8B EC			mov	EBP,ESP
 00000EFD  51				push	ECX 
 00000EFE  53				push	EBX 
 00000EFF  56				push	ESI 
 00000F00  57				push	EDI 
				;{

				;{405}:return _year
 00000F01  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F04  0F B7 41 10			movzx	EAX,word ptr [ECX+0010h]
 00000F08  EB 00			jmp	OFFSET $L000680
				;}
 00000F0A			$L000680:

 00000F0A  5F				pop	EDI
 00000F0B  5E				pop	ESI 
 00000F0C  5B				pop	EBX 
 00000F0D  8B E5			mov	ESP,EBP
 00000F0F  5D				pop	EBP 
 00000F10  C3				ret	
 00000F11			Algorithms_Sorting_Proxy_Automobile_get_Year ENDP

 00000F11			Algorithms_Sorting_Proxy_Automobile_put_Year PROC NEAR 
				;void put::Year(unsigned short year);
 00000F11  55				push	EBP
 00000F12  8B EC			mov	EBP,ESP
 00000F14  51				push	ECX 
 00000F15  53				push	EBX 
 00000F16  56				push	ESI 
 00000F17  57				push	EDI 
				;{

				;{407}:_year= year;
 00000F18  0F B7 45 08			movzx	EAX,word ptr [EBP+0008h]
 00000F1C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F1F  66| 89 41 10			mov	word ptr [ECX+0010h],AX
				;}
 00000F23			$L000681:

 00000F23  5F				pop	EDI
 00000F24  5E				pop	ESI 
 00000F25  5B				pop	EBX 
 00000F26  8B E5			mov	ESP,EBP
 00000F28  5D				pop	EBP 
 00000F29  C2 0004			retn	000000004h
 00000F2C			Algorithms_Sorting_Proxy_Automobile_put_Year ENDP

 00000F2C			Algorithms_Sorting_Proxy_BinaryInsertionSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 00000F2C  55				push	EBP
 00000F2D  8B EC			mov	EBP,ESP
 00000F2F  83 EC 20			sub	ESP,000000020h
 00000F32  53				push	EBX 
 00000F33  56				push	ESI 
 00000F34  57				push	EDI 
 00000F35  89 4D E0			mov	dword ptr [EBP-0020h],ECX
				;{

				;{530}:_array= &array;
 00000F38  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000F3B  8B 4D E0			mov	ECX,dword ptr [EBP-0020h]
 00000F3E  89 01			mov	dword ptr [ECX],EAX

				;{531}:n= array.length;
 00000F40  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00000F43  E8 FFFFFA62			call	 Algorithms_Sorting_Proxy_Array_get_length
 00000F48  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{532}:for(i= 1; i < n; ++i)
 00000F4B  B8 00000001			mov	EAX,000000001h
 00000F50  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000F53  EB 06			jmp	OFFSET $L001013
 00000F55			$L001014:
 00000F55  FF 45 F8			inc	dword ptr [EBP-8]
 00000F58  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000F5B			$L001013:
 00000F5B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000F5E  50				push	EAX
 00000F5F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000F62  5A				pop	EDX
 00000F63  3B D0			cmp	EDX,EAX
 00000F65  0F 9C C0			setl	AL
 00000F68  84 C0			test	AL,AL
 00000F6A  0F 84 000000C5		jz	OFFSET $L001015
				;{

				;{534}:tmp= array.getAt(i);
 00000F70  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000F73  50				push	EAX
 00000F74  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00000F77  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00000F7A  FF 52 04			call	dword ptr [EDX+0004h]
 00000F7D  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00000F80  89 03			mov	dword ptr [EBX],EAX

				;{535}:_F= 0;
 00000F82  33 C0			xor	EAX,EAX
 00000F84  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{536}:_L= i;
 00000F87  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000F8A  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{537}:while(_F < _L)
 00000F8D			$L001016:
 00000F8D  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000F90  50				push	EAX
 00000F91  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000F94  5A				pop	EDX
 00000F95  3B D0			cmp	EDX,EAX
 00000F97  0F 9C C0			setl	AL
 00000F9A  84 C0			test	AL,AL
 00000F9C  74 55			jz	OFFSET $L001017
				;{

				;{539}:_M= (_F + _L) div 2;
 00000F9E  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000FA1  50				push	EAX
 00000FA2  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000FA5  5A				pop	EDX
 00000FA6  03 C2			add	EAX,EDX
 00000FA8  50				push	EAX
 00000FA9  B8 00000002			mov	EAX,000000002h
 00000FAE  8B C8			mov	ECX,EAX
 00000FB0  58				pop	EAX
 00000FB1  33 D2			xor	EDX,EDX
 00000FB3  F7 F9			idiv	ECX
 00000FB5  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{540}:if(tmp.Compare(array.getAt(_M)) >= 0)
 00000FB8  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00000FBB  50				push	EAX
 00000FBC  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00000FBF  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00000FC2  FF 52 04			call	dword ptr [EDX+0004h]
 00000FC5  50				push	EAX
 00000FC6  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 00000FC9  8B 11			mov	EDX,dword ptr [ECX]
 00000FCB  FF 12			call	dword ptr [EDX]
 00000FCD  50				push	EAX
 00000FCE  33 C0			xor	EAX,EAX
 00000FD0  5A				pop	EDX
 00000FD1  3B D0			cmp	EDX,EAX
 00000FD3  0F 9D C0			setge	AL
 00000FD6  84 C0			test	AL,AL
 00000FD8  74 11			jz	OFFSET $L001018

				;{541}:_F= _M + 1;
 00000FDA  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00000FDD  50				push	EAX
 00000FDE  B8 00000001			mov	EAX,000000001h
 00000FE3  5A				pop	EDX
 00000FE4  03 C2			add	EAX,EDX
 00000FE6  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000FE9  EB 06			jmp	OFFSET $L001019

				; else {
 00000FEB			$L001018:

				;{543}:_L= _M;
 00000FEB  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00000FEE  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 00000FF1			$L001019:

				; }
				;}
 00000FF1  EB 9A			jmp	OFFSET $L001016
 00000FF3			$L001017:

				;{545}:for(j= i; j > _F; --j)
 00000FF3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000FF6  89 45 E4			mov	dword ptr [EBP-001Ch],EAX
 00000FF9  EB 06			jmp	OFFSET $L001020
 00000FFB			$L001021:
 00000FFB  FF 4D E4			dec	dword ptr [EBP-28]
 00000FFE  8B 45 E4			mov	EAX,dword ptr [EBP-28]
 00001001			$L001020:
 00001001  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00001004  50				push	EAX
 00001005  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001008  5A				pop	EDX
 00001009  3B D0			cmp	EDX,EAX
 0000100B  0F 9F C0			setg	AL
 0000100E  84 C0			test	AL,AL
 00001010  74 1E			jz	OFFSET $L001022

				;{546}:Swap(j - 1, j);
 00001012  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00001015  50				push	EAX 
 00001016  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00001019  50				push	EAX
 0000101A  B8 00000001			mov	EAX,000000001h
 0000101F  5A				pop	EDX
 00001020  2B D0			sub	EDX,EAX
 00001022  8B C2			mov	EAX,EDX
 00001024  50				push	EAX
 00001025  8B 4D E0			mov	ECX,dword ptr [EBP-0020h]
 00001028  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 0000102B  FF 52 04			call	dword ptr [EDX+0004h]
 0000102E  EB CB			jmp	OFFSET $L001021 
 00001030			$L001022:
				;}
 00001030  E9 FFFFFF20			jmp	OFFSET $L001014 
 00001035			$L001015:
				;}
 00001035			$L000730:

 00001035  5F				pop	EDI
 00001036  5E				pop	ESI 
 00001037  5B				pop	EBX 
 00001038  8B E5			mov	ESP,EBP
 0000103A  5D				pop	EBP 
 0000103B  C2 0004			retn	000000004h
 0000103E			Algorithms_Sorting_Proxy_BinaryInsertionSortEx_Sort ENDP

 0000103E			Algorithms_Sorting_Proxy_BinaryInsertionSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::BinaryInsertionSortEx(void);
 0000103E  55				push	EBP
 0000103F  8B EC			mov	EBP,ESP
 00001041  51				push	ECX 
 00001042  53				push	EBX 
 00001043  56				push	ESI 
 00001044  57				push	EDI 
 00001045  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001048  E8 000008ED			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 0000104D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001050  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BinaryInsertionSortEx 
	   0000007C R

 00001057  5F				pop	EDI
 00001058  5E				pop	ESI 
 00001059  5B				pop	EBX 
 0000105A  8B E5			mov	ESP,EBP
 0000105C  5D				pop	EBP 
 0000105D  C3				ret	
 0000105E			Algorithms_Sorting_Proxy_BinaryInsertionSortEx ENDP

 0000105E			Algorithms_Sorting_Proxy_BubbleSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 0000105E  55				push	EBP
 0000105F  8B EC			mov	EBP,ESP
 00001061  83 EC 10			sub	ESP,000000010h
 00001064  53				push	EBX 
 00001065  56				push	ESI 
 00001066  57				push	EDI 
 00001067  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{556}:_array= &array;
 0000106A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000106D  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001070  89 01			mov	dword ptr [ECX],EAX

				;{557}:n= array.length;
 00001072  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001075  E8 FFFFF930			call	 Algorithms_Sorting_Proxy_Array_get_length
 0000107A  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{558}:for(i= n; i > 1; --i)
 0000107D  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001080  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001083  EB 06			jmp	OFFSET $L001024
 00001085			$L001025:
 00001085  FF 4D F8			dec	dword ptr [EBP-8]
 00001088  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 0000108B			$L001024:
 0000108B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000108E  50				push	EAX
 0000108F  B8 00000001			mov	EAX,000000001h
 00001094  5A				pop	EDX
 00001095  3B D0			cmp	EDX,EAX
 00001097  0F 9F C0			setg	AL
 0000109A  84 C0			test	AL,AL
 0000109C  0F 84 00000087		jz	OFFSET $L001026

				;{559}:for(j= 0; j < i - 1; ++j)
 000010A2  33 C0			xor	EAX,EAX
 000010A4  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 000010A7  EB 06			jmp	OFFSET $L001027
 000010A9			$L001028:
 000010A9  FF 45 F4			inc	dword ptr [EBP-12]
 000010AC  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000010AF			$L001027:
 000010AF  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000010B2  50				push	EAX
 000010B3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000010B6  50				push	EAX
 000010B7  B8 00000001			mov	EAX,000000001h
 000010BC  5A				pop	EDX
 000010BD  2B D0			sub	EDX,EAX
 000010BF  8B C2			mov	EAX,EDX
 000010C1  5A				pop	EDX
 000010C2  3B D0			cmp	EDX,EAX
 000010C4  0F 9C C0			setl	AL
 000010C7  84 C0			test	AL,AL
 000010C9  74 59			jz	OFFSET $L001029

				;{560}:if(array.getAt(j).Compare(array.getAt(j + 1)) > 0)
 000010CB  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000010CE  50				push	EAX
 000010CF  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000010D2  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000010D5  FF 52 04			call	dword ptr [EDX+0004h]
 000010D8  8B C8			mov	ECX,EAX
 000010DA  51				push	ECX
 000010DB  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000010DE  50				push	EAX
 000010DF  B8 00000001			mov	EAX,000000001h
 000010E4  5A				pop	EDX
 000010E5  03 C2			add	EAX,EDX
 000010E7  50				push	EAX
 000010E8  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000010EB  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000010EE  FF 52 04			call	dword ptr [EDX+0004h]
 000010F1  50				push	EAX
 000010F2  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 000010F6  8B 11			mov	EDX,dword ptr [ECX] 
 000010F8  FF 12			call	dword ptr [EDX]
 000010FA  59				pop	ECX
 000010FB  50				push	EAX
 000010FC  33 C0			xor	EAX,EAX
 000010FE  5A				pop	EDX
 000010FF  3B D0			cmp	EDX,EAX
 00001101  0F 9F C0			setg	AL
 00001104  84 C0			test	AL,AL
 00001106  74 1A			jz	OFFSET $L001030

				;{561}:Swap(j, j + 1);
 00001108  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000110B  50				push	EAX
 0000110C  B8 00000001			mov	EAX,000000001h
 00001111  5A				pop	EDX
 00001112  03 C2			add	EAX,EDX
 00001114  50				push	EAX 
 00001115  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001118  50				push	EAX
 00001119  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 0000111C  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 0000111F  FF 52 04			call	dword ptr [EDX+0004h]
 00001122			$L001030:
 00001122  EB 85			jmp	OFFSET $L001028 
 00001124			$L001029:
 00001124  E9 FFFFFF5C			jmp	OFFSET $L001025 
 00001129			$L001026:
				;}
 00001129			$L000741:

 00001129  5F				pop	EDI
 0000112A  5E				pop	ESI 
 0000112B  5B				pop	EBX 
 0000112C  8B E5			mov	ESP,EBP
 0000112E  5D				pop	EBP 
 0000112F  C2 0004			retn	000000004h
 00001132			Algorithms_Sorting_Proxy_BubbleSortEx_Sort ENDP

 00001132			Algorithms_Sorting_Proxy_BubbleSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::BubbleSortEx(void);
 00001132  55				push	EBP
 00001133  8B EC			mov	EBP,ESP
 00001135  51				push	ECX 
 00001136  53				push	EBX 
 00001137  56				push	ESI 
 00001138  57				push	EDI 
 00001139  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000113C  E8 000007F9			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 00001141  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001144  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BubbleSortEx 
	   0000008C R

 0000114B  5F				pop	EDI
 0000114C  5E				pop	ESI 
 0000114D  5B				pop	EBX 
 0000114E  8B E5			mov	ESP,EBP
 00001150  5D				pop	EBP 
 00001151  C3				ret	
 00001152			Algorithms_Sorting_Proxy_BubbleSortEx ENDP

 00001152			Algorithms_Sorting_Proxy_HeapSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 00001152  55				push	EBP
 00001153  8B EC			mov	EBP,ESP
 00001155  83 EC 08			sub	ESP,000000008h
 00001158  53				push	EBX 
 00001159  56				push	ESI 
 0000115A  57				push	EDI 
 0000115B  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{666}:_array= &array;
 0000115E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001161  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001164  89 01			mov	dword ptr [ECX],EAX

				;{668}:for(i= (array.length div 2) - 1; i >= 0; i-- )
 00001166  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001169  E8 FFFFF83C			call	 Algorithms_Sorting_Proxy_Array_get_length
 0000116E  50				push	EAX
 0000116F  B8 00000002			mov	EAX,000000002h
 00001174  8B C8			mov	ECX,EAX
 00001176  58				pop	EAX
 00001177  33 D2			xor	EDX,EDX
 00001179  F7 F9			idiv	ECX
 0000117B  50				push	EAX
 0000117C  B8 00000001			mov	EAX,000000001h
 00001181  5A				pop	EDX
 00001182  2B D0			sub	EDX,EAX
 00001184  8B C2			mov	EAX,EDX
 00001186  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001189  EB 06			jmp	OFFSET $L001033
 0000118B			$L001034:
 0000118B  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000118E  FF 4D FC			dec	dword ptr [EBP-4]
 00001191			$L001033:
 00001191  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001194  50				push	EAX
 00001195  33 C0			xor	EAX,EAX
 00001197  5A				pop	EDX
 00001198  3B D0			cmp	EDX,EAX
 0000119A  0F 9D C0			setge	AL
 0000119D  84 C0			test	AL,AL
 0000119F  74 1A			jz	OFFSET $L001035

				;{669}:siftDown(array, i, array.length);
 000011A1  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000011A4  E8 FFFFF801			call	 Algorithms_Sorting_Proxy_Array_get_length
 000011A9  50				push	EAX 
 000011AA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000011AD  50				push	EAX
 000011AE  FF 75 08			push	dword ptr [EBP+0008h]
 000011B1  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000011B4  E8 0000006B			call	 Algorithms_Sorting_Proxy_HeapSortEx_siftDown
 000011B9  EB D0			jmp	OFFSET $L001034 
 000011BB			$L001035:

				;{671}:for(i= array.length - 1; i >= 1; i-- )
 000011BB  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000011BE  E8 FFFFF7E7			call	 Algorithms_Sorting_Proxy_Array_get_length
 000011C3  50				push	EAX
 000011C4  B8 00000001			mov	EAX,000000001h
 000011C9  5A				pop	EDX
 000011CA  2B D0			sub	EDX,EAX
 000011CC  8B C2			mov	EAX,EDX
 000011CE  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000011D1  EB 06			jmp	OFFSET $L001036
 000011D3			$L001037:
 000011D3  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000011D6  FF 4D FC			dec	dword ptr [EBP-4]
 000011D9			$L001036:
 000011D9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000011DC  50				push	EAX
 000011DD  B8 00000001			mov	EAX,000000001h
 000011E2  5A				pop	EDX
 000011E3  3B D0			cmp	EDX,EAX
 000011E5  0F 9D C0			setge	AL
 000011E8  84 C0			test	AL,AL
 000011EA  74 2F			jz	OFFSET $L001038
				;{

				;{674}:Swap(0, i);
 000011EC  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000011EF  50				push	EAX 
 000011F0  33 C0			xor	EAX,EAX
 000011F2  50				push	EAX
 000011F3  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000011F6  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000011F9  FF 52 04			call	dword ptr [EDX+0004h]

				;{675}:siftDown(array, 0, i - 1);
 000011FC  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000011FF  50				push	EAX
 00001200  B8 00000001			mov	EAX,000000001h
 00001205  5A				pop	EDX
 00001206  2B D0			sub	EDX,EAX
 00001208  8B C2			mov	EAX,EDX
 0000120A  50				push	EAX 
 0000120B  33 C0			xor	EAX,EAX
 0000120D  50				push	EAX
 0000120E  FF 75 08			push	dword ptr [EBP+0008h]
 00001211  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001214  E8 0000000B			call	 Algorithms_Sorting_Proxy_HeapSortEx_siftDown
				;}
 00001219  EB B8			jmp	OFFSET $L001037 
 0000121B			$L001038:
				;}
 0000121B			$L000785:

 0000121B  5F				pop	EDI
 0000121C  5E				pop	ESI 
 0000121D  5B				pop	EBX 
 0000121E  8B E5			mov	ESP,EBP
 00001220  5D				pop	EBP 
 00001221  C2 0004			retn	000000004h
 00001224			Algorithms_Sorting_Proxy_HeapSortEx_Sort ENDP

 00001224			Algorithms_Sorting_Proxy_HeapSortEx_siftDown PROC NEAR 
				;void siftDown(Algorithms::Sorting::Proxy::Array ref array, Algorithms::Sorting::__uint _Root, Algorithms::Sorting::__uint _Bottom);
 00001224  55				push	EBP
 00001225  8B EC			mov	EBP,ESP
 00001227  83 EC 08			sub	ESP,000000008h
 0000122A  53				push	EBX 
 0000122B  56				push	ESI 
 0000122C  57				push	EDI 
 0000122D  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{641}:maxChild= 0;
 00001230  33 C0			xor	EAX,EAX
 00001232  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{643}:while(_Root * 2 <= _Bottom)
 00001235			$L001039:
 00001235  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001238  50				push	EAX
 00001239  B8 00000002			mov	EAX,000000002h
 0000123E  59				pop	ECX
 0000123F  33 D2			xor	EDX,EDX
 00001241  0F AF C1			imul	EAX,ECX
 00001244  50				push	EAX
 00001245  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001248  5A				pop	EDX
 00001249  3B D0			cmp	EDX,EAX
 0000124B  0F 9E C0			setle	AL
 0000124E  84 C0			test	AL,AL
 00001250  0F 84 0000010F		jz	OFFSET $L001040
				;{

				;{645}:if(_Root * 2 == _Bottom)
 00001256  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001259  50				push	EAX
 0000125A  B8 00000002			mov	EAX,000000002h
 0000125F  59				pop	ECX
 00001260  33 D2			xor	EDX,EDX
 00001262  0F AF C1			imul	EAX,ECX
 00001265  50				push	EAX
 00001266  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001269  5A				pop	EDX
 0000126A  3B D0			cmp	EDX,EAX
 0000126C  0F 94 C0			setz	AL
 0000126F  84 C0			test	AL,AL
 00001271  74 17			jz	OFFSET $L001041

				;{646}:maxChild= _Root * 2;
 00001273  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001276  50				push	EAX
 00001277  B8 00000002			mov	EAX,000000002h
 0000127C  59				pop	ECX
 0000127D  33 D2			xor	EDX,EDX
 0000127F  0F AF C1			imul	EAX,ECX
 00001282  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001285  E9 00000084			jmp	OFFSET $L001042

				; else {
 0000128A			$L001041:

				;{647}:if(array.getAt(_Root * 2).Compare(array.getAt(_Root * 2 + 1)) > 0)
 0000128A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000128D  50				push	EAX
 0000128E  B8 00000002			mov	EAX,000000002h
 00001293  59				pop	ECX
 00001294  33 D2			xor	EDX,EDX
 00001296  0F AF C1			imul	EAX,ECX
 00001299  50				push	EAX
 0000129A  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000129D  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000012A0  FF 52 04			call	dword ptr [EDX+0004h]
 000012A3  8B C8			mov	ECX,EAX
 000012A5  51				push	ECX
 000012A6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000012A9  50				push	EAX
 000012AA  B8 00000002			mov	EAX,000000002h
 000012AF  59				pop	ECX
 000012B0  33 D2			xor	EDX,EDX
 000012B2  0F AF C1			imul	EAX,ECX
 000012B5  50				push	EAX
 000012B6  B8 00000001			mov	EAX,000000001h
 000012BB  5A				pop	EDX
 000012BC  03 C2			add	EAX,EDX
 000012BE  50				push	EAX
 000012BF  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000012C2  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000012C5  FF 52 04			call	dword ptr [EDX+0004h]
 000012C8  50				push	EAX
 000012C9  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 000012CD  8B 11			mov	EDX,dword ptr [ECX] 
 000012CF  FF 12			call	dword ptr [EDX]
 000012D1  59				pop	ECX
 000012D2  50				push	EAX
 000012D3  33 C0			xor	EAX,EAX
 000012D5  5A				pop	EDX
 000012D6  3B D0			cmp	EDX,EAX
 000012D8  0F 9F C0			setg	AL
 000012DB  84 C0			test	AL,AL
 000012DD  74 14			jz	OFFSET $L001043

				;{648}:maxChild= _Root * 2;
 000012DF  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000012E2  50				push	EAX
 000012E3  B8 00000002			mov	EAX,000000002h
 000012E8  59				pop	ECX
 000012E9  33 D2			xor	EDX,EDX
 000012EB  0F AF C1			imul	EAX,ECX
 000012EE  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000012F1  EB 1B			jmp	OFFSET $L001044

				; else {
 000012F3			$L001043:

				;{650}:maxChild= _Root * 2 + 1;
 000012F3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000012F6  50				push	EAX
 000012F7  B8 00000002			mov	EAX,000000002h
 000012FC  59				pop	ECX
 000012FD  33 D2			xor	EDX,EDX
 000012FF  0F AF C1			imul	EAX,ECX
 00001302  50				push	EAX
 00001303  B8 00000001			mov	EAX,000000001h
 00001308  5A				pop	EDX
 00001309  03 C2			add	EAX,EDX
 0000130B  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000130E			$L001044:

				; }
 0000130E			$L001042:

				; }

				;{652}:if(array.getAt(_Root).Compare(array.getAt(maxChild)) < 0)
 0000130E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001311  50				push	EAX
 00001312  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001315  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001318  FF 52 04			call	dword ptr [EDX+0004h]
 0000131B  8B C8			mov	ECX,EAX
 0000131D  51				push	ECX
 0000131E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001321  50				push	EAX
 00001322  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001325  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001328  FF 52 04			call	dword ptr [EDX+0004h]
 0000132B  50				push	EAX
 0000132C  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00001330  8B 11			mov	EDX,dword ptr [ECX] 
 00001332  FF 12			call	dword ptr [EDX]
 00001334  59				pop	ECX
 00001335  50				push	EAX
 00001336  33 C0			xor	EAX,EAX
 00001338  5A				pop	EDX
 00001339  3B D0			cmp	EDX,EAX
 0000133B  0F 9C C0			setl	AL
 0000133E  84 C0			test	AL,AL
 00001340  74 1C			jz	OFFSET $L001045
				;{

				;{655}:Swap(_Root, maxChild);
 00001342  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001345  50				push	EAX 
 00001346  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001349  50				push	EAX
 0000134A  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000134D  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001350  FF 52 04			call	dword ptr [EDX+0004h]

				;{656}:_Root= maxChild;
 00001353  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001356  89 45 0C			mov	dword ptr [EBP+000Ch],EAX

				;continue;
 00001359  E9 FFFFFED7			jmp	OFFSET $L001039
				;}
 0000135E			$L001045:

				;break;
 0000135E  EB 05			jmp	OFFSET $L001040
				;}
 00001360  E9 FFFFFED0			jmp	OFFSET $L001039
 00001365			$L001040:
				;}
 00001365			$L000780:

 00001365  5F				pop	EDI
 00001366  5E				pop	ESI 
 00001367  5B				pop	EBX 
 00001368  8B E5			mov	ESP,EBP
 0000136A  5D				pop	EBP 
 0000136B  C2 000C			retn	00000000Ch
 0000136E			Algorithms_Sorting_Proxy_HeapSortEx_siftDown ENDP

 0000136E			Algorithms_Sorting_Proxy_HeapSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::HeapSortEx(void);
 0000136E  55				push	EBP
 0000136F  8B EC			mov	EBP,ESP
 00001371  51				push	ECX 
 00001372  53				push	EBX 
 00001373  56				push	ESI 
 00001374  57				push	EDI 
 00001375  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001378  E8 000005BD			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 0000137D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001380  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_HeapSortEx 
	   00000094 R

 00001387  5F				pop	EDI
 00001388  5E				pop	ESI 
 00001389  5B				pop	EBX 
 0000138A  8B E5			mov	ESP,EBP
 0000138C  5D				pop	EBP 
 0000138D  C3				ret	
 0000138E			Algorithms_Sorting_Proxy_HeapSortEx ENDP

 0000138E			Algorithms_Sorting_Proxy_InsertionSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 0000138E  55				push	EBP
 0000138F  8B EC			mov	EBP,ESP
 00001391  83 EC 10			sub	ESP,000000010h
 00001394  53				push	EBX 
 00001395  56				push	ESI 
 00001396  57				push	EDI 
 00001397  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{510}:_array= &array;
 0000139A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000139D  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000013A0  89 01			mov	dword ptr [ECX],EAX

				;{511}:n= array.length;
 000013A2  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000013A5  E8 FFFFF600			call	 Algorithms_Sorting_Proxy_Array_get_length
 000013AA  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{513}:for(i= 1; i < n; ++i)
 000013AD  B8 00000001			mov	EAX,000000001h
 000013B2  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000013B5  EB 06			jmp	OFFSET $L001048
 000013B7			$L001049:
 000013B7  FF 45 F8			inc	dword ptr [EBP-8]
 000013BA  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000013BD			$L001048:
 000013BD  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000013C0  50				push	EAX
 000013C1  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000013C4  5A				pop	EDX
 000013C5  3B D0			cmp	EDX,EAX
 000013C7  0F 9C C0			setl	AL
 000013CA  84 C0			test	AL,AL
 000013CC  0F 84 00000080		jz	OFFSET $L001050

				;{514}:for(j= i; j > 0; --j)
 000013D2  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000013D5  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 000013D8  EB 06			jmp	OFFSET $L001051
 000013DA			$L001052:
 000013DA  FF 4D F4			dec	dword ptr [EBP-12]
 000013DD  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000013E0			$L001051:
 000013E0  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000013E3  50				push	EAX
 000013E4  33 C0			xor	EAX,EAX
 000013E6  5A				pop	EDX
 000013E7  3B D0			cmp	EDX,EAX
 000013E9  0F 9F C0			setg	AL
 000013EC  84 C0			test	AL,AL
 000013EE  74 5D			jz	OFFSET $L001053
				;{

				;{516}:if(array.getAt(j - 1).Compare(array.getAt(j)) > 0)
 000013F0  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000013F3  50				push	EAX
 000013F4  B8 00000001			mov	EAX,000000001h
 000013F9  5A				pop	EDX
 000013FA  2B D0			sub	EDX,EAX
 000013FC  8B C2			mov	EAX,EDX
 000013FE  50				push	EAX
 000013FF  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001402  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001405  FF 52 04			call	dword ptr [EDX+0004h]
 00001408  8B C8			mov	ECX,EAX
 0000140A  51				push	ECX
 0000140B  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000140E  50				push	EAX
 0000140F  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001412  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001415  FF 52 04			call	dword ptr [EDX+0004h]
 00001418  50				push	EAX
 00001419  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 0000141D  8B 11			mov	EDX,dword ptr [ECX] 
 0000141F  FF 12			call	dword ptr [EDX]
 00001421  59				pop	ECX
 00001422  50				push	EAX
 00001423  33 C0			xor	EAX,EAX
 00001425  5A				pop	EDX
 00001426  3B D0			cmp	EDX,EAX
 00001428  0F 9F C0			setg	AL
 0000142B  84 C0			test	AL,AL
 0000142D  74 1C			jz	OFFSET $L001054

				;{517}:Swap(j, j - 1);
 0000142F  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001432  50				push	EAX
 00001433  B8 00000001			mov	EAX,000000001h
 00001438  5A				pop	EDX
 00001439  2B D0			sub	EDX,EAX
 0000143B  8B C2			mov	EAX,EDX
 0000143D  50				push	EAX 
 0000143E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001441  50				push	EAX
 00001442  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001445  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001448  FF 52 04			call	dword ptr [EDX+0004h]
 0000144B			$L001054:
				;}
 0000144B  EB 8D			jmp	OFFSET $L001052 
 0000144D			$L001053:
 0000144D  E9 FFFFFF65			jmp	OFFSET $L001049 
 00001452			$L001050:
				;}
 00001452			$L000723:

 00001452  5F				pop	EDI
 00001453  5E				pop	ESI 
 00001454  5B				pop	EBX 
 00001455  8B E5			mov	ESP,EBP
 00001457  5D				pop	EBP 
 00001458  C2 0004			retn	000000004h
 0000145B			Algorithms_Sorting_Proxy_InsertionSortEx_Sort ENDP

 0000145B			Algorithms_Sorting_Proxy_InsertionSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::InsertionSortEx(void);
 0000145B  55				push	EBP
 0000145C  8B EC			mov	EBP,ESP
 0000145E  51				push	ECX 
 0000145F  53				push	EBX 
 00001460  56				push	ESI 
 00001461  57				push	EDI 
 00001462  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001465  E8 000004D0			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 0000146A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000146D  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_InsertionSortEx 
	   0000009C R

 00001474  5F				pop	EDI
 00001475  5E				pop	ESI 
 00001476  5B				pop	EBX 
 00001477  8B E5			mov	ESP,EBP
 00001479  5D				pop	EBP 
 0000147A  C3				ret	
 0000147B			Algorithms_Sorting_Proxy_InsertionSortEx ENDP

 0000147B			Algorithms_Sorting_Proxy_MedianOfThreeQuickSort_selectPivot PROC NEAR 
				;unsigned selectPivot(Algorithms::Sorting::Proxy::Array ref array, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _L);
 0000147B  55				push	EBP
 0000147C  8B EC			mov	EBP,ESP
 0000147E  83 EC 08			sub	ESP,000000008h
 00001481  53				push	EBX 
 00001482  56				push	ESI 
 00001483  57				push	EDI 
 00001484  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{608}:_M= (_F + _L) div 2;
 00001487  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000148A  50				push	EAX
 0000148B  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000148E  5A				pop	EDX
 0000148F  03 C2			add	EAX,EDX
 00001491  50				push	EAX
 00001492  B8 00000002			mov	EAX,000000002h
 00001497  8B C8			mov	ECX,EAX
 00001499  58				pop	EAX
 0000149A  33 D2			xor	EDX,EDX
 0000149C  F7 F9			idiv	ECX
 0000149E  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{609}:if(array.getAt(_F).Compare(array.getAt(_M)) > 0)
 000014A1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000014A4  50				push	EAX
 000014A5  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000014A8  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000014AB  FF 52 04			call	dword ptr [EDX+0004h]
 000014AE  8B C8			mov	ECX,EAX
 000014B0  51				push	ECX
 000014B1  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014B4  50				push	EAX
 000014B5  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000014B8  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000014BB  FF 52 04			call	dword ptr [EDX+0004h]
 000014BE  50				push	EAX
 000014BF  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 000014C3  8B 11			mov	EDX,dword ptr [ECX] 
 000014C5  FF 12			call	dword ptr [EDX]
 000014C7  59				pop	ECX
 000014C8  50				push	EAX
 000014C9  33 C0			xor	EAX,EAX
 000014CB  5A				pop	EDX
 000014CC  3B D0			cmp	EDX,EAX
 000014CE  0F 9F C0			setg	AL
 000014D1  84 C0			test	AL,AL
 000014D3  74 11			jz	OFFSET $L001057

				;{610}:Swap(_F, _M);
 000014D5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014D8  50				push	EAX 
 000014D9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000014DC  50				push	EAX
 000014DD  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000014E0  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000014E3  FF 52 04			call	dword ptr [EDX+0004h]
 000014E6			$L001057:

				;{611}:if(array.getAt(_M).Compare(array.getAt(_L)) > 0)
 000014E6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014E9  50				push	EAX
 000014EA  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000014ED  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000014F0  FF 52 04			call	dword ptr [EDX+0004h]
 000014F3  8B C8			mov	ECX,EAX
 000014F5  51				push	ECX
 000014F6  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000014F9  50				push	EAX
 000014FA  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000014FD  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001500  FF 52 04			call	dword ptr [EDX+0004h]
 00001503  50				push	EAX
 00001504  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00001508  8B 11			mov	EDX,dword ptr [ECX] 
 0000150A  FF 12			call	dword ptr [EDX]
 0000150C  59				pop	ECX
 0000150D  50				push	EAX
 0000150E  33 C0			xor	EAX,EAX
 00001510  5A				pop	EDX
 00001511  3B D0			cmp	EDX,EAX
 00001513  0F 9F C0			setg	AL
 00001516  84 C0			test	AL,AL
 00001518  74 11			jz	OFFSET $L001059

				;{612}:Swap(_M, _L);
 0000151A  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000151D  50				push	EAX 
 0000151E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001521  50				push	EAX
 00001522  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001525  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001528  FF 52 04			call	dword ptr [EDX+0004h]
 0000152B			$L001059:

				;{613}:if(array.getAt(_F).Compare(array.getAt(_L)) > 0)
 0000152B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000152E  50				push	EAX
 0000152F  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001532  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001535  FF 52 04			call	dword ptr [EDX+0004h]
 00001538  8B C8			mov	ECX,EAX
 0000153A  51				push	ECX
 0000153B  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000153E  50				push	EAX
 0000153F  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001542  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001545  FF 52 04			call	dword ptr [EDX+0004h]
 00001548  50				push	EAX
 00001549  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 0000154D  8B 11			mov	EDX,dword ptr [ECX] 
 0000154F  FF 12			call	dword ptr [EDX]
 00001551  59				pop	ECX
 00001552  50				push	EAX
 00001553  33 C0			xor	EAX,EAX
 00001555  5A				pop	EDX
 00001556  3B D0			cmp	EDX,EAX
 00001558  0F 9F C0			setg	AL
 0000155B  84 C0			test	AL,AL
 0000155D  74 11			jz	OFFSET $L001061

				;{614}:Swap(_F, _L);
 0000155F  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001562  50				push	EAX 
 00001563  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001566  50				push	EAX
 00001567  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000156A  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 0000156D  FF 52 04			call	dword ptr [EDX+0004h]
 00001570			$L001061:

				;{615}:return _M
 00001570  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001573  EB 00			jmp	OFFSET $L000766
				;}
 00001575			$L000766:

 00001575  5F				pop	EDI
 00001576  5E				pop	ESI 
 00001577  5B				pop	EBX 
 00001578  8B E5			mov	ESP,EBP
 0000157A  5D				pop	EBP 
 0000157B  C2 000C			retn	00000000Ch
 0000157E			Algorithms_Sorting_Proxy_MedianOfThreeQuickSort_selectPivot ENDP

 0000157E			Algorithms_Sorting_Proxy_MedianOfThreeQuickSort PROC NEAR 
				;void Algorithms::Sorting::Proxy::MedianOfThreeQuickSort(void);
 0000157E  55				push	EBP
 0000157F  8B EC			mov	EBP,ESP
 00001581  51				push	ECX 
 00001582  53				push	EBX 
 00001583  56				push	ESI 
 00001584  57				push	EDI 
 00001585  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001588  E8 00000263			call	 Algorithms_Sorting_Proxy_QuickSortEx ;base constructor call
 0000158D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001590  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_MedianOfThreeQuickSort 
	   000000A4 R

 00001597  5F				pop	EDI
 00001598  5E				pop	ESI 
 00001599  5B				pop	EBX 
 0000159A  8B E5			mov	ESP,EBP
 0000159C  5D				pop	EBP 
 0000159D  C3				ret	
 0000159E			Algorithms_Sorting_Proxy_MedianOfThreeQuickSort ENDP

 0000159E			Algorithms_Sorting_Proxy_ProxyObject PROC NEAR 
				;void Algorithms::Sorting::Proxy::ProxyObject(void);
 0000159E  55				push	EBP
 0000159F  8B EC			mov	EBP,ESP
 000015A1  51				push	ECX 
 000015A2  53				push	EBX 
 000015A3  56				push	ESI 
 000015A4  57				push	EDI 
 000015A5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000015A8  C7 01 00000078 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ProxyObject 

 000015AE  5F				pop	EDI
 000015AF  5E				pop	ESI 
 000015B0  5B				pop	EBX 
 000015B1  8B E5			mov	ESP,EBP
 000015B3  5D				pop	EBP 
 000015B4  C3				ret	
 000015B5			Algorithms_Sorting_Proxy_ProxyObject ENDP

 000015B5			Algorithms_Sorting_Proxy_QuickSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 000015B5  55				push	EBP
 000015B6  8B EC			mov	EBP,ESP
 000015B8  83 EC 0C			sub	ESP,00000000Ch
 000015BB  53				push	EBX 
 000015BC  56				push	ESI 
 000015BD  57				push	EDI 
 000015BE  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{597}:_array= &array;
 000015C1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000015C4  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 000015C7  89 01			mov	dword ptr [ECX],EAX

				;{598}:doSort(array, 0, array.length - 1);
 000015C9  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000015CC  E8 FFFFF3D9			call	 Algorithms_Sorting_Proxy_Array_get_length
 000015D1  50				push	EAX
 000015D2  B8 00000001			mov	EAX,000000001h
 000015D7  5A				pop	EDX
 000015D8  2B D0			sub	EDX,EAX
 000015DA  8B C2			mov	EAX,EDX
 000015DC  50				push	EAX 
 000015DD  33 C0			xor	EAX,EAX
 000015DF  50				push	EAX
 000015E0  FF 75 08			push	dword ptr [EBP+0008h]
 000015E3  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 000015E6  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000015E9  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{599}:sorter;
 000015EC  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 000015EF  E8 FFFFFE67			call	 Algorithms_Sorting_Proxy_InsertionSortEx

				;{600}:sorter.Sort(array);
 000015F4  FF 75 08			push	dword ptr [EBP+0008h]
 000015F7  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 000015FA  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000015FD  FF 12			call	dword ptr [EDX]
				;}
 000015FF			$L000761:

 000015FF  5F				pop	EDI
 00001600  5E				pop	ESI 
 00001601  5B				pop	EBX 
 00001602  8B E5			mov	ESP,EBP
 00001604  5D				pop	EBP 
 00001605  C2 0004			retn	000000004h
 00001608			Algorithms_Sorting_Proxy_QuickSortEx_Sort ENDP

 00001608			Algorithms_Sorting_Proxy_QuickSortEx_doSort PROC NEAR 
				;void doSort(Algorithms::Sorting::Proxy::Array ref array, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _L);
 00001608  55				push	EBP
 00001609  8B EC			mov	EBP,ESP
 0000160B  83 EC 14			sub	ESP,000000014h
 0000160E  53				push	EBX 
 0000160F  56				push	ESI 
 00001610  57				push	EDI 
 00001611  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{572}:if(_L - _F + 1 > Algorithms::Sorting::Proxy::QuickSortEx::cutOff)
 00001614  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001617  50				push	EAX
 00001618  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000161B  5A				pop	EDX
 0000161C  2B D0			sub	EDX,EAX
 0000161E  8B C2			mov	EAX,EDX
 00001620  50				push	EAX
 00001621  B8 00000001			mov	EAX,000000001h
 00001626  5A				pop	EDX 
 00001627  03 C2			add	EAX,EDX
 00001629  50				push	EAX
 0000162A  8D 1D 00000433 R		lea	EBX,OFFSET Algorithms_Sorting_Proxy_QuickSortEx_cutOff
 00001630  8B 03			mov	EAX,dword ptr [EBX]
 00001632  5A				pop	EDX
 00001633  3B D0			cmp	EDX,EAX
 00001635  0F 9F C0			setg	AL
 00001638  84 C0			test	AL,AL
 0000163A  0F 84 000001A7		jz	OFFSET $L001066
				;{

				;{574}:_Piv= selectPivot(array, _F, _L);
 00001640  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001643  50				push	EAX 
 00001644  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001647  50				push	EAX
 00001648  FF 75 08			push	dword ptr [EBP+0008h]
 0000164B  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 0000164E  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001651  FF 52 08			call	dword ptr [EDX+0008h]
 00001654  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{575}:Swap(_Piv, _L);
 00001657  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000165A  50				push	EAX 
 0000165B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000165E  50				push	EAX
 0000165F  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00001662  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001665  FF 52 04			call	dword ptr [EDX+0004h]

				;{576}:_Piv= _L;
 00001668  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000166B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{577}:pivot= array.getAt(_Piv);
 0000166E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001671  50				push	EAX
 00001672  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001675  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001678  FF 52 04			call	dword ptr [EDX+0004h]
 0000167B  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 0000167E  89 03			mov	dword ptr [EBX],EAX

				;{578}:i= _F;
 00001680  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001683  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{579}:j= _L - 1;
 00001686  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001689  50				push	EAX
 0000168A  B8 00000001			mov	EAX,000000001h
 0000168F  5A				pop	EDX
 00001690  2B D0			sub	EDX,EAX
 00001692  8B C2			mov	EAX,EDX
 00001694  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{580}:for(; ; )
 00001697  EB 00			jmp	OFFSET $L001068
 00001699			$L001069:
 00001699			$L001068:
				;{

				;{582}:while(i < j && array.getAt(i).Compare(pivot) < 0)
 00001699			$L001071:
 00001699  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000169C  50				push	EAX
 0000169D  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000016A0  5A				pop	EDX
 000016A1  3B D0			cmp	EDX,EAX
 000016A3  0F 9C C0			setl	AL
 000016A6  84 C0			test	AL,AL
 000016A8  74 26			jz	OFFSET $L001073
 000016AA  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000016AD  50				push	EAX
 000016AE  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000016B1  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000016B4  FF 52 04			call	dword ptr [EDX+0004h]
 000016B7  8B C8			mov	ECX,EAX
 000016B9  51				push	ECX
 000016BA  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000016BD  50				push	EAX
 000016BE  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 000016C2  8B 11			mov	EDX,dword ptr [ECX] 
 000016C4  FF 12			call	dword ptr [EDX]
 000016C6  59				pop	ECX
 000016C7  50				push	EAX
 000016C8  33 C0			xor	EAX,EAX
 000016CA  5A				pop	EDX
 000016CB  3B D0			cmp	EDX,EAX
 000016CD  0F 9C C0			setl	AL
 000016D0			$L001073:
 000016D0  84 C0			test	AL,AL
 000016D2  74 08			jz	OFFSET $L001072

				;{582}:++i;
 000016D4  FF 45 F4			inc	dword ptr [EBP-12]
 000016D7  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000016DA  EB BD			jmp	OFFSET $L001071
 000016DC			$L001072:

				;{583}:while(i < j && array.getAt(i).Compare(pivot) > 0)
 000016DC			$L001074:
 000016DC  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000016DF  50				push	EAX
 000016E0  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000016E3  5A				pop	EDX
 000016E4  3B D0			cmp	EDX,EAX
 000016E6  0F 9C C0			setl	AL
 000016E9  84 C0			test	AL,AL
 000016EB  74 26			jz	OFFSET $L001076
 000016ED  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000016F0  50				push	EAX
 000016F1  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000016F4  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000016F7  FF 52 04			call	dword ptr [EDX+0004h]
 000016FA  8B C8			mov	ECX,EAX
 000016FC  51				push	ECX
 000016FD  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001700  50				push	EAX
 00001701  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00001705  8B 11			mov	EDX,dword ptr [ECX] 
 00001707  FF 12			call	dword ptr [EDX]
 00001709  59				pop	ECX
 0000170A  50				push	EAX
 0000170B  33 C0			xor	EAX,EAX
 0000170D  5A				pop	EDX
 0000170E  3B D0			cmp	EDX,EAX
 00001710  0F 9F C0			setg	AL
 00001713			$L001076:
 00001713  84 C0			test	AL,AL
 00001715  74 08			jz	OFFSET $L001075

				;{583}:--j;
 00001717  FF 4D F0			dec	dword ptr [EBP-16]
 0000171A  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 0000171D  EB BD			jmp	OFFSET $L001074
 0000171F			$L001075:

				;{584}:if(i >= j)
 0000171F  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001722  50				push	EAX
 00001723  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001726  5A				pop	EDX
 00001727  3B D0			cmp	EDX,EAX
 00001729  0F 9D C0			setge	AL
 0000172C  84 C0			test	AL,AL
 0000172E  74 02			jz	OFFSET $L001077

				;break;
 00001730  EB 1C			jmp	OFFSET $L001070
 00001732			$L001077:

				;{585}:Swap(i++ , j-- );
 00001732  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00001735  FF 4D F0			dec	dword ptr [EBP-16]
 00001738  50				push	EAX 
 00001739  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 0000173C  FF 45 F4			inc	dword ptr [EBP-12]
 0000173F  50				push	EAX
 00001740  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00001743  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001746  FF 52 04			call	dword ptr [EDX+0004h]
				;}
 00001749  E9 FFFFFF4B			jmp	OFFSET $L001069 
 0000174E			$L001070:

				;{587}:if(array.getAt(i).Compare(pivot) > 0)
 0000174E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001751  50				push	EAX
 00001752  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001755  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001758  FF 52 04			call	dword ptr [EDX+0004h]
 0000175B  8B C8			mov	ECX,EAX
 0000175D  51				push	ECX
 0000175E  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001761  50				push	EAX
 00001762  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 00001766  8B 11			mov	EDX,dword ptr [ECX] 
 00001768  FF 12			call	dword ptr [EDX]
 0000176A  59				pop	ECX
 0000176B  50				push	EAX
 0000176C  33 C0			xor	EAX,EAX
 0000176E  5A				pop	EDX
 0000176F  3B D0			cmp	EDX,EAX
 00001771  0F 9F C0			setg	AL
 00001774  84 C0			test	AL,AL
 00001776  74 11			jz	OFFSET $L001079

				;{588}:Swap(i, _Piv);
 00001778  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000177B  50				push	EAX 
 0000177C  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000177F  50				push	EAX
 00001780  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00001783  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 00001786  FF 52 04			call	dword ptr [EDX+0004h]
 00001789			$L001079:

				;{589}:if(_F < i)
 00001789  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000178C  50				push	EAX
 0000178D  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001790  5A				pop	EDX
 00001791  3B D0			cmp	EDX,EAX
 00001793  0F 9C C0			setl	AL
 00001796  84 C0			test	AL,AL
 00001798  74 1F			jz	OFFSET $L001081

				;{590}:doSort(array, _F, i - 1);
 0000179A  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000179D  50				push	EAX
 0000179E  B8 00000001			mov	EAX,000000001h
 000017A3  5A				pop	EDX
 000017A4  2B D0			sub	EDX,EAX
 000017A6  8B C2			mov	EAX,EDX
 000017A8  50				push	EAX 
 000017A9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000017AC  50				push	EAX
 000017AD  FF 75 08			push	dword ptr [EBP+0008h]
 000017B0  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 000017B3  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000017B6  FF 52 0C			call	dword ptr [EDX+000Ch]
 000017B9			$L001081:

				;{591}:if(_L > i)
 000017B9  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000017BC  50				push	EAX
 000017BD  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000017C0  5A				pop	EDX
 000017C1  3B D0			cmp	EDX,EAX
 000017C3  0F 9F C0			setg	AL
 000017C6  84 C0			test	AL,AL
 000017C8  74 1D			jz	OFFSET $L001083

				;{592}:doSort(array, i + 1, _L);
 000017CA  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000017CD  50				push	EAX 
 000017CE  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000017D1  50				push	EAX
 000017D2  B8 00000001			mov	EAX,000000001h
 000017D7  5A				pop	EDX
 000017D8  03 C2			add	EAX,EDX
 000017DA  50				push	EAX
 000017DB  FF 75 08			push	dword ptr [EBP+0008h]
 000017DE  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 000017E1  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000017E4  FF 52 0C			call	dword ptr [EDX+000Ch]
 000017E7			$L001083:
				;}
 000017E7			$L001066:
				;}
 000017E7			$L000753:

 000017E7  5F				pop	EDI
 000017E8  5E				pop	ESI 
 000017E9  5B				pop	EBX 
 000017EA  8B E5			mov	ESP,EBP
 000017EC  5D				pop	EBP 
 000017ED  C2 000C			retn	00000000Ch
 000017F0			Algorithms_Sorting_Proxy_QuickSortEx_doSort ENDP

 000017F0			Algorithms_Sorting_Proxy_QuickSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::QuickSortEx(void);
 000017F0  55				push	EBP
 000017F1  8B EC			mov	EBP,ESP
 000017F3  51				push	ECX 
 000017F4  53				push	EBX 
 000017F5  56				push	ESI 
 000017F6  57				push	EDI 
 000017F7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000017FA  E8 0000013B			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 000017FF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001802  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_QuickSortEx 
	   000000B4 R
 00001809  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000180C  E8 00001B5F			call	 __member_Init@Algorithms_Sorting_Proxy_QuickSortEx 

 00001811  5F				pop	EDI
 00001812  5E				pop	ESI 
 00001813  5B				pop	EBX 
 00001814  8B E5			mov	ESP,EBP
 00001816  5D				pop	EBP 
 00001817  C3				ret	
 00001818			Algorithms_Sorting_Proxy_QuickSortEx ENDP

 00001818			Algorithms_Sorting_Proxy_SelectionSortEx_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 00001818  55				push	EBP
 00001819  8B EC			mov	EBP,ESP
 0000181B  83 EC 10			sub	ESP,000000010h
 0000181E  53				push	EBX 
 0000181F  56				push	ESI 
 00001820  57				push	EDI 
 00001821  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{624}:_array= &array;
 00001824  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001827  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 0000182A  89 01			mov	dword ptr [ECX],EAX

				;{625}:for(i= array.length; i > 1; --i)
 0000182C  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000182F  E8 FFFFF176			call	 Algorithms_Sorting_Proxy_Array_get_length
 00001834  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001837  EB 06			jmp	OFFSET $L001086
 00001839			$L001087:
 00001839  FF 4D FC			dec	dword ptr [EBP-4]
 0000183C  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000183F			$L001086:
 0000183F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001842  50				push	EAX
 00001843  B8 00000001			mov	EAX,000000001h
 00001848  5A				pop	EDX
 00001849  3B D0			cmp	EDX,EAX
 0000184B  0F 9F C0			setg	AL
 0000184E  84 C0			test	AL,AL
 00001850  0F 84 00000083		jz	OFFSET $L001088
				;{

				;{627}:max= 0;
 00001856  33 C0			xor	EAX,EAX
 00001858  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{628}:for(j= 1; j < i; ++j)
 0000185B  B8 00000001			mov	EAX,000000001h
 00001860  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00001863  EB 06			jmp	OFFSET $L001089
 00001865			$L001090:
 00001865  FF 45 F4			inc	dword ptr [EBP-12]
 00001868  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 0000186B			$L001089:
 0000186B  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000186E  50				push	EAX
 0000186F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001872  5A				pop	EDX
 00001873  3B D0			cmp	EDX,EAX
 00001875  0F 9C C0			setl	AL
 00001878  84 C0			test	AL,AL
 0000187A  74 3C			jz	OFFSET $L001091

				;{629}:if(array.getAt(j).Compare(array.getAt(max)) > 0)
 0000187C  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000187F  50				push	EAX
 00001880  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001883  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001886  FF 52 04			call	dword ptr [EDX+0004h]
 00001889  8B C8			mov	ECX,EAX
 0000188B  51				push	ECX
 0000188C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000188F  50				push	EAX
 00001890  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001893  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001896  FF 52 04			call	dword ptr [EDX+0004h]
 00001899  50				push	EAX
 0000189A  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 0000189E  8B 11			mov	EDX,dword ptr [ECX] 
 000018A0  FF 12			call	dword ptr [EDX]
 000018A2  59				pop	ECX
 000018A3  50				push	EAX
 000018A4  33 C0			xor	EAX,EAX
 000018A6  5A				pop	EDX
 000018A7  3B D0			cmp	EDX,EAX
 000018A9  0F 9F C0			setg	AL
 000018AC  84 C0			test	AL,AL
 000018AE  74 06			jz	OFFSET $L001092

				;{630}:max= j;
 000018B0  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000018B3  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000018B6			$L001092:
 000018B6  EB AD			jmp	OFFSET $L001090 
 000018B8			$L001091:

				;{631}:Swap(i - 1, max);
 000018B8  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000018BB  50				push	EAX 
 000018BC  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000018BF  50				push	EAX
 000018C0  B8 00000001			mov	EAX,000000001h
 000018C5  5A				pop	EDX
 000018C6  2B D0			sub	EDX,EAX
 000018C8  8B C2			mov	EAX,EDX
 000018CA  50				push	EAX
 000018CB  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000018CE  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 000018D1  FF 52 04			call	dword ptr [EDX+0004h]
				;}
 000018D4  E9 FFFFFF60			jmp	OFFSET $L001087 
 000018D9			$L001088:
				;}
 000018D9			$L000773:

 000018D9  5F				pop	EDI
 000018DA  5E				pop	ESI 
 000018DB  5B				pop	EBX 
 000018DC  8B E5			mov	ESP,EBP
 000018DE  5D				pop	EBP 
 000018DF  C2 0004			retn	000000004h
 000018E2			Algorithms_Sorting_Proxy_SelectionSortEx_Sort ENDP

 000018E2			Algorithms_Sorting_Proxy_SelectionSortEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::SelectionSortEx(void);
 000018E2  55				push	EBP
 000018E3  8B EC			mov	EBP,ESP
 000018E5  51				push	ECX 
 000018E6  53				push	EBX 
 000018E7  56				push	ESI 
 000018E8  57				push	EDI 
 000018E9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000018EC  E8 00000049			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 000018F1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000018F4  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SelectionSortEx 
	   000000C4 R

 000018FB  5F				pop	EDI
 000018FC  5E				pop	ESI 
 000018FD  5B				pop	EBX 
 000018FE  8B E5			mov	ESP,EBP
 00001900  5D				pop	EBP 
 00001901  C3				ret	
 00001902			Algorithms_Sorting_Proxy_SelectionSortEx ENDP

 00001902			Algorithms_Sorting_Proxy_SorterEx_Swap PROC NEAR 
				;void Swap(Algorithms::Sorting::__uint left, Algorithms::Sorting::__uint right);
 00001902  55				push	EBP
 00001903  8B EC			mov	EBP,ESP
 00001905  51				push	ECX 
 00001906  53				push	EBX 
 00001907  56				push	ESI 
 00001908  57				push	EDI 
				;{

				;{499}:if(_array != null)
 00001909  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000190C  8B 01			mov	EAX,dword ptr [ECX]
 0000190E  8B C8			mov	ECX,EAX 
 00001910  51				push	ECX
 00001911  33 C0			xor	EAX,EAX
 00001913  5B				pop	EBX
 00001914  3B D8			cmp	EBX,EAX
 00001916  0F 95 C0			setnz	AL
 00001919  84 C0			test	AL,AL
 0000191B  74 14			jz	OFFSET $L001095

				;{500}:_array.Swap(left, right);
 0000191D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001920  50				push	EAX 
 00001921  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001924  50				push	EAX
 00001925  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001928  8B 01			mov	EAX,dword ptr [ECX]
 0000192A  8B C8			mov	ECX,EAX 
 0000192C  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 0000192F  FF 12			call	dword ptr [EDX]
 00001931			$L001095:
				;}
 00001931			$L000718:

 00001931  5F				pop	EDI
 00001932  5E				pop	ESI 
 00001933  5B				pop	EBX 
 00001934  8B E5			mov	ESP,EBP
 00001936  5D				pop	EBP 
 00001937  C2 0008			retn	000000008h
 0000193A			Algorithms_Sorting_Proxy_SorterEx_Swap ENDP

 0000193A			Algorithms_Sorting_Proxy_SorterEx PROC NEAR 
				;void Algorithms::Sorting::Proxy::SorterEx(void);
 0000193A  55				push	EBP
 0000193B  8B EC			mov	EBP,ESP
 0000193D  51				push	ECX 
 0000193E  53				push	EBX 
 0000193F  56				push	ESI 
 00001940  57				push	EDI 
 00001941  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001944  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SorterEx 
	   00000084 R
 0000194B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000194E  E8 00001A38			call	 __member_Init@Algorithms_Sorting_Proxy_SorterEx

 00001953  5F				pop	EDI
 00001954  5E				pop	ESI 
 00001955  5B				pop	EBX 
 00001956  8B E5			mov	ESP,EBP
 00001958  5D				pop	EBP 
 00001959  C3				ret	
 0000195A			Algorithms_Sorting_Proxy_SorterEx ENDP

 0000195A			Algorithms_Sorting_Proxy_TwoWayMergeSort_Merge PROC NEAR 
				;void Merge(Algorithms::Sorting::Proxy::Array ref array, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _M, Algorithms::Sorting::__uint _L);
 0000195A  55				push	EBP
 0000195B  8B EC			mov	EBP,ESP
 0000195D  83 EC 10			sub	ESP,000000010h
 00001960  53				push	EBX 
 00001961  56				push	ESI 
 00001962  57				push	EDI 
 00001963  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{686}:i= _F;
 00001966  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001969  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{687}:j= _F;
 0000196C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000196F  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{688}:k= _M + 1;
 00001972  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001975  50				push	EAX
 00001976  B8 00000001			mov	EAX,000000001h
 0000197B  5A				pop	EDX
 0000197C  03 C2			add	EAX,EDX
 0000197E  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{689}:while(j <= _M && k <= _L)
 00001981			$L001098:
 00001981  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001984  50				push	EAX
 00001985  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001988  5A				pop	EDX
 00001989  3B D0			cmp	EDX,EAX
 0000198B  0F 9E C0			setle	AL
 0000198E  84 C0			test	AL,AL
 00001990  74 0D			jz	OFFSET $L001100
 00001992  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001995  50				push	EAX
 00001996  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00001999  5A				pop	EDX
 0000199A  3B D0			cmp	EDX,EAX
 0000199C  0F 9E C0			setle	AL
 0000199F			$L001100:
 0000199F  84 C0			test	AL,AL
 000019A1  74 75			jz	OFFSET $L001099
				;{

				;{691}:if(array.getAt(j).Compare(array.getAt(k)) <= 0)
 000019A3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000019A6  50				push	EAX
 000019A7  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000019AA  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000019AD  FF 52 04			call	dword ptr [EDX+0004h]
 000019B0  8B C8			mov	ECX,EAX
 000019B2  51				push	ECX
 000019B3  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019B6  50				push	EAX
 000019B7  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000019BA  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000019BD  FF 52 04			call	dword ptr [EDX+0004h]
 000019C0  50				push	EAX
 000019C1  8B 4C 24 04			mov	ECX,dword ptr [ESP+0004h]
 000019C5  8B 11			mov	EDX,dword ptr [ECX] 
 000019C7  FF 12			call	dword ptr [EDX]
 000019C9  59				pop	ECX
 000019CA  50				push	EAX
 000019CB  33 C0			xor	EAX,EAX
 000019CD  5A				pop	EDX
 000019CE  3B D0			cmp	EDX,EAX
 000019D0  0F 9E C0			setle	AL
 000019D3  84 C0			test	AL,AL
 000019D5  74 1F			jz	OFFSET $L001101

				;{692}:array.CopyTo(tmpArray, i++ , j++ );
 000019D7  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000019DA  FF 45 F8			inc	dword ptr [EBP-8]
 000019DD  50				push	EAX 
 000019DE  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000019E1  FF 45 FC			inc	dword ptr [EBP-4]
 000019E4  50				push	EAX
 000019E5  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000019E8  FF 71 08			push	dword ptr [ECX+0008h]
 000019EB  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 000019EE  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000019F1  FF 52 08			call	dword ptr [EDX+0008h]
 000019F4  EB 1D			jmp	OFFSET $L001102

				; else {
 000019F6			$L001101:

				;{694}:array.CopyTo(tmpArray, i++ , k++ );
 000019F6  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000019F9  FF 45 F4			inc	dword ptr [EBP-12]
 000019FC  50				push	EAX 
 000019FD  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001A00  FF 45 FC			inc	dword ptr [EBP-4]
 00001A03  50				push	EAX
 00001A04  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001A07  FF 71 08			push	dword ptr [ECX+0008h]
 00001A0A  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001A0D  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001A10  FF 52 08			call	dword ptr [EDX+0008h]
 00001A13			$L001102:

				; }
				;}
 00001A13  E9 FFFFFF69			jmp	OFFSET $L001098
 00001A18			$L001099:

				;{696}:while(j <= _M)
 00001A18			$L001103:
 00001A18  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001A1B  50				push	EAX
 00001A1C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001A1F  5A				pop	EDX
 00001A20  3B D0			cmp	EDX,EAX
 00001A22  0F 9E C0			setle	AL
 00001A25  84 C0			test	AL,AL
 00001A27  74 1F			jz	OFFSET $L001104

				;{697}:array.CopyTo(tmpArray, i++ , j++ );
 00001A29  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001A2C  FF 45 F8			inc	dword ptr [EBP-8]
 00001A2F  50				push	EAX 
 00001A30  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001A33  FF 45 FC			inc	dword ptr [EBP-4]
 00001A36  50				push	EAX
 00001A37  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001A3A  FF 71 08			push	dword ptr [ECX+0008h]
 00001A3D  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001A40  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001A43  FF 52 08			call	dword ptr [EDX+0008h]
 00001A46  EB D0			jmp	OFFSET $L001103
 00001A48			$L001104:

				;{698}:while(k <= _L)
 00001A48			$L001105:
 00001A48  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001A4B  50				push	EAX
 00001A4C  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00001A4F  5A				pop	EDX
 00001A50  3B D0			cmp	EDX,EAX
 00001A52  0F 9E C0			setle	AL
 00001A55  84 C0			test	AL,AL
 00001A57  74 1F			jz	OFFSET $L001106

				;{699}:array.CopyTo(tmpArray, i++ , k++ );
 00001A59  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00001A5C  FF 45 F4			inc	dword ptr [EBP-12]
 00001A5F  50				push	EAX 
 00001A60  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001A63  FF 45 FC			inc	dword ptr [EBP-4]
 00001A66  50				push	EAX
 00001A67  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001A6A  FF 71 08			push	dword ptr [ECX+0008h]
 00001A6D  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001A70  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001A73  FF 52 08			call	dword ptr [EDX+0008h]
 00001A76  EB D0			jmp	OFFSET $L001105
 00001A78			$L001106:

				;{700}:for(i= _F; i <= _L; ++i)
 00001A78  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001A7B  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001A7E  EB 06			jmp	OFFSET $L001107
 00001A80			$L001108:
 00001A80  FF 45 FC			inc	dword ptr [EBP-4]
 00001A83  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001A86			$L001107:
 00001A86  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001A89  50				push	EAX
 00001A8A  8B 45 14			mov	EAX,dword ptr [EBP+0014h]
 00001A8D  5A				pop	EDX
 00001A8E  3B D0			cmp	EDX,EAX
 00001A90  0F 9E C0			setle	AL
 00001A93  84 C0			test	AL,AL
 00001A95  74 19			jz	OFFSET $L001109

				;{701}:array.CopyFrom(tmpArray, i, i);
 00001A97  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001A9A  50				push	EAX 
 00001A9B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001A9E  50				push	EAX
 00001A9F  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001AA2  FF 71 08			push	dword ptr [ECX+0008h]
 00001AA5  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001AA8  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00001AAB  FF 52 0C			call	dword ptr [EDX+000Ch]
 00001AAE  EB D0			jmp	OFFSET $L001108 
 00001AB0			$L001109:
				;}
 00001AB0			$L000791:

 00001AB0  5F				pop	EDI
 00001AB1  5E				pop	ESI 
 00001AB2  5B				pop	EBX 
 00001AB3  8B E5			mov	ESP,EBP
 00001AB5  5D				pop	EBP 
 00001AB6  C2 0010			retn	000000010h
 00001AB9			Algorithms_Sorting_Proxy_TwoWayMergeSort_Merge ENDP

 00001AB9			Algorithms_Sorting_Proxy_TwoWayMergeSort_Sort PROC NEAR 
				;void Sort(Algorithms::Sorting::Proxy::Array ref array);
 00001AB9  55				push	EBP
 00001ABA  8B EC			mov	EBP,ESP
 00001ABC  51				push	ECX 
 00001ABD  53				push	EBX 
 00001ABE  56				push	ESI 
 00001ABF  57				push	EDI 
				;{

				;{717}:tmpArray= new Algorithms::Sorting::Proxy::ArrayOfAutomobile(array.length);
 00001AC0  6A 10			push	000000010h
 00001AC2  E8 00000000 E		call	 System_Memory_New
 00001AC7  85 C0			test	EAX,EAX
 00001AC9  74 04			jz	 $L001110
 00001ACB  8B F0			mov	ESI,EAX
 00001ACD  EB 02			jmp	 $L001111
 00001ACF			$L001110:
 00001ACF  33 F6			xor	ESI,ESI
 00001AD1			$L001111:
 00001AD1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001AD4  89 71 08			mov	dword ptr [ECX+0008h],ESI 
 00001AD7  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001ADA  E8 FFFFEECB			call	 Algorithms_Sorting_Proxy_Array_get_length
 00001ADF  50				push	EAX
 00001AE0  8B CE			mov	ECX,ESI
 00001AE2  E8 FFFFEEF9			call	 Algorithms_Sorting_Proxy_ArrayOfAutomobile
 00001AE7  8B C6			mov	EAX,ESI 

				;{719}:doSort(array, 0, array.length - 1);
 00001AE9  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00001AEC  E8 FFFFEEB9			call	 Algorithms_Sorting_Proxy_Array_get_length
 00001AF1  50				push	EAX
 00001AF2  B8 00000001			mov	EAX,000000001h
 00001AF7  5A				pop	EDX
 00001AF8  2B D0			sub	EDX,EAX
 00001AFA  8B C2			mov	EAX,EDX
 00001AFC  50				push	EAX 
 00001AFD  33 C0			xor	EAX,EAX
 00001AFF  50				push	EAX
 00001B00  FF 75 08			push	dword ptr [EBP+0008h]
 00001B03  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B06  E8 0000002B			call	 Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort

				;{720}:destroy tmpArray;
 00001B0B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B0E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00001B11  8B C8			mov	ECX,EAX 
 00001B13  8B F1			mov	ESI,ECX
 00001B15  85 C9			test	ECX,ECX
 00001B17  74 06			jz	OFFSET $L001113
 00001B19  8B 41 0C			mov	EAX,dword ptr [ECX+000Ch] 
 00001B1C  FF 50 10			call	dword ptr [EAX+0010h]
 00001B1F			$L001113:
 00001B1F  56				push	ESI
 00001B20  E8 00000000 E		call	 System_Memory_Destroy

				;{721}:tmpArray= null;
 00001B25  33 C0			xor	EAX,EAX
 00001B27  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B2A  89 41 08			mov	dword ptr [ECX+0008h],EAX
				;}
 00001B2D			$L000804:

 00001B2D  5F				pop	EDI
 00001B2E  5E				pop	ESI 
 00001B2F  5B				pop	EBX 
 00001B30  8B E5			mov	ESP,EBP
 00001B32  5D				pop	EBP 
 00001B33  C2 0004			retn	000000004h
 00001B36			Algorithms_Sorting_Proxy_TwoWayMergeSort_Sort ENDP

 00001B36			Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort PROC NEAR 
				;void doSort(Algorithms::Sorting::Proxy::Array ref array, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _L);
 00001B36  55				push	EBP
 00001B37  8B EC			mov	EBP,ESP
 00001B39  83 EC 08			sub	ESP,000000008h
 00001B3C  53				push	EBX 
 00001B3D  56				push	ESI 
 00001B3E  57				push	EDI 
 00001B3F  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{706}:if(_F < _L)
 00001B42  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B45  50				push	EAX
 00001B46  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001B49  5A				pop	EDX
 00001B4A  3B D0			cmp	EDX,EAX
 00001B4C  0F 9C C0			setl	AL
 00001B4F  84 C0			test	AL,AL
 00001B51  74 60			jz	OFFSET $L001114
				;{

				;{708}:_M= (_F + _L) div 2;
 00001B53  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B56  50				push	EAX
 00001B57  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001B5A  5A				pop	EDX
 00001B5B  03 C2			add	EAX,EDX
 00001B5D  50				push	EAX
 00001B5E  B8 00000002			mov	EAX,000000002h
 00001B63  8B C8			mov	ECX,EAX
 00001B65  58				pop	EAX
 00001B66  33 D2			xor	EDX,EDX
 00001B68  F7 F9			idiv	ECX
 00001B6A  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{709}:doSort(array, _F, _M);
 00001B6D  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001B70  50				push	EAX 
 00001B71  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B74  50				push	EAX
 00001B75  FF 75 08			push	dword ptr [EBP+0008h]
 00001B78  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001B7B  E8 FFFFFFB6			call	 Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort

				;{710}:doSort(array, _M + 1, _L);
 00001B80  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001B83  50				push	EAX 
 00001B84  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001B87  50				push	EAX
 00001B88  B8 00000001			mov	EAX,000000001h
 00001B8D  5A				pop	EDX
 00001B8E  03 C2			add	EAX,EDX
 00001B90  50				push	EAX
 00001B91  FF 75 08			push	dword ptr [EBP+0008h]
 00001B94  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001B97  E8 FFFFFF9A			call	 Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort

				;{711}:Merge(array, _F, _M, _L);
 00001B9C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001B9F  50				push	EAX 
 00001BA0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001BA3  50				push	EAX 
 00001BA4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BA7  50				push	EAX
 00001BA8  FF 75 08			push	dword ptr [EBP+0008h]
 00001BAB  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001BAE  E8 FFFFFDA7			call	 Algorithms_Sorting_Proxy_TwoWayMergeSort_Merge
				;}
 00001BB3			$L001114:
				;}
 00001BB3			$L000799:

 00001BB3  5F				pop	EDI
 00001BB4  5E				pop	ESI 
 00001BB5  5B				pop	EBX 
 00001BB6  8B E5			mov	ESP,EBP
 00001BB8  5D				pop	EBP 
 00001BB9  C2 000C			retn	00000000Ch
 00001BBC			Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort ENDP

 00001BBC			Algorithms_Sorting_Proxy_TwoWayMergeSort PROC NEAR 
				;void Algorithms::Sorting::Proxy::TwoWayMergeSort(void);
 00001BBC  55				push	EBP
 00001BBD  8B EC			mov	EBP,ESP
 00001BBF  51				push	ECX 
 00001BC0  53				push	EBX 
 00001BC1  56				push	ESI 
 00001BC2  57				push	EDI 
 00001BC3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001BC6  E8 FFFFFD6F			call	 Algorithms_Sorting_Proxy_SorterEx ;base constructor call
 00001BCB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001BCE  C7 41 04			mov	dword ptr [ECX+0004h],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_TwoWayMergeSort 
	   000000CC R
 00001BD5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001BD8  E8 000017C6			call	 __member_Init@Algorithms_Sorting_Proxy_TwoWayMergeSort 

 00001BDD  5F				pop	EDI
 00001BDE  5E				pop	ESI 
 00001BDF  5B				pop	EBX 
 00001BE0  8B E5			mov	ESP,EBP
 00001BE2  5D				pop	EBP 
 00001BE3  C3				ret	
 00001BE4			Algorithms_Sorting_Proxy_TwoWayMergeSort ENDP

 00001BE4			Algorithms_Sorting_QuickSort_Partition PROC NEAR 
				;void Partition(double double [] array, Algorithms::Sorting::__uint ref _F, Algorithms::Sorting::__uint ref _L, double dPivot, bool bPartitionRight);
 00001BE4  55				push	EBP
 00001BE5  8B EC			mov	EBP,ESP
 00001BE7  51				push	ECX 
 00001BE8  53				push	EBX 
 00001BE9  56				push	ESI 
 00001BEA  57				push	EDI 
				;{

				;{153}:if(bPartitionRight)
 00001BEB  0F B6 45 1C			movzx	EAX,byte ptr [EBP+001Ch]
 00001BEF  84 C0			test	AL,AL
 00001BF1  74 5C			jz	OFFSET $L001117
				;{

				;{155}:while(array[_L] >= dPivot && (_F < _L))
 00001BF3			$L001119:
 00001BF3  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001BF6  8B C3			mov	EAX,EBX 
 00001BF8  50				push	EAX
 00001BF9  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001BFC  8B C3			mov	EAX,EBX 
 00001BFE  8B 03			mov	EAX,dword ptr [EBX]
 00001C00  5E				pop	ESI
 00001C01  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001C04  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001C0B  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001C0E  50				push	EAX
 00001C0F  52				push	EDX 
 00001C10  8B 55 14			mov	EDX,dword ptr [EBP+0014h]
 00001C13  8B 45 18			mov	EAX,dword ptr [EBP+0018h] 
 00001C16  50				push	EAX
 00001C17  52				push	EDX 
 00001C18  E8 00000000 E		call	 FloatingPoint_Compare
 00001C1D  83 F8 00			cmp	EAX,000000000h
 00001C20  F7 D8			neg	EAX
 00001C22  0F 9D C0			setge	AL
 00001C25  84 C0			test	AL,AL
 00001C27  74 15			jz	OFFSET $L001121
 00001C29  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001C2C  8B C3			mov	EAX,EBX 
 00001C2E  8B 03			mov	EAX,dword ptr [EBX]
 00001C30  50				push	EAX
 00001C31  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001C34  8B C3			mov	EAX,EBX 
 00001C36  8B 03			mov	EAX,dword ptr [EBX]
 00001C38  5A				pop	EDX
 00001C39  3B D0			cmp	EDX,EAX
 00001C3B  0F 9C C0			setl	AL
 00001C3E			$L001121:
 00001C3E  84 C0			test	AL,AL
 00001C40  74 0B			jz	OFFSET $L001120

				;{156}:_L-- ;
 00001C42  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001C45  8B C3			mov	EAX,EBX 
 00001C47  8B 03			mov	EAX,dword ptr [EBX]
 00001C49  FF 0B			dec	dword ptr [EBX]
 00001C4B  EB A6			jmp	OFFSET $L001119
 00001C4D			$L001120:
				;}
 00001C4D  EB 5A			jmp	OFFSET $L001118

				; else {
 00001C4F			$L001117:
				;{

				;{158}:while(array[_F] <= dPivot && _F < _L)
 00001C4F			$L001122:
 00001C4F  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001C52  8B C3			mov	EAX,EBX 
 00001C54  50				push	EAX
 00001C55  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001C58  8B C3			mov	EAX,EBX 
 00001C5A  8B 03			mov	EAX,dword ptr [EBX]
 00001C5C  5E				pop	ESI
 00001C5D  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001C60  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001C67  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001C6A  50				push	EAX
 00001C6B  52				push	EDX 
 00001C6C  8B 55 14			mov	EDX,dword ptr [EBP+0014h]
 00001C6F  8B 45 18			mov	EAX,dword ptr [EBP+0018h] 
 00001C72  50				push	EAX
 00001C73  52				push	EDX 
 00001C74  E8 00000000 E		call	 FloatingPoint_Compare
 00001C79  83 F8 00			cmp	EAX,000000000h
 00001C7C  F7 D8			neg	EAX
 00001C7E  0F 9E C0			setle	AL
 00001C81  84 C0			test	AL,AL
 00001C83  74 15			jz	OFFSET $L001124
 00001C85  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001C88  8B C3			mov	EAX,EBX 
 00001C8A  8B 03			mov	EAX,dword ptr [EBX]
 00001C8C  50				push	EAX
 00001C8D  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001C90  8B C3			mov	EAX,EBX 
 00001C92  8B 03			mov	EAX,dword ptr [EBX]
 00001C94  5A				pop	EDX
 00001C95  3B D0			cmp	EDX,EAX
 00001C97  0F 9C C0			setl	AL
 00001C9A			$L001124:
 00001C9A  84 C0			test	AL,AL
 00001C9C  74 0B			jz	OFFSET $L001123

				;{159}:_F++ ;
 00001C9E  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001CA1  8B C3			mov	EAX,EBX 
 00001CA3  8B 03			mov	EAX,dword ptr [EBX]
 00001CA5  FF 03			inc	dword ptr [EBX]
 00001CA7  EB A6			jmp	OFFSET $L001122
 00001CA9			$L001123:
				;}
 00001CA9			$L001118:

				; }

				;{162}:if(_F != _L)
 00001CA9  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001CAC  8B C3			mov	EAX,EBX 
 00001CAE  8B 03			mov	EAX,dword ptr [EBX]
 00001CB0  50				push	EAX
 00001CB1  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001CB4  8B C3			mov	EAX,EBX 
 00001CB6  8B 03			mov	EAX,dword ptr [EBX]
 00001CB8  5A				pop	EDX
 00001CB9  3B D0			cmp	EDX,EAX
 00001CBB  0F 95 C0			setnz	AL
 00001CBE  84 C0			test	AL,AL
 00001CC0  0F 84 0000008E		jz	OFFSET $L001125
				;{

				;{164}:if(bPartitionRight)
 00001CC6  0F B6 45 1C			movzx	EAX,byte ptr [EBP+001Ch]
 00001CCA  84 C0			test	AL,AL
 00001CCC  74 44			jz	OFFSET $L001127
				;{

				;{166}:array[_F]= array[_L];
 00001CCE  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001CD1  8B C3			mov	EAX,EBX 
 00001CD3  50				push	EAX
 00001CD4  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001CD7  8B C3			mov	EAX,EBX 
 00001CD9  8B 03			mov	EAX,dword ptr [EBX]
 00001CDB  5E				pop	ESI
 00001CDC  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001CDF  50				push	EAX
 00001CE0  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001CE3  8B C3			mov	EAX,EBX 
 00001CE5  50				push	EAX
 00001CE6  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001CE9  8B C3			mov	EAX,EBX 
 00001CEB  8B 03			mov	EAX,dword ptr [EBX]
 00001CED  5E				pop	ESI
 00001CEE  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001CF1  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001CF8  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001CFB  50				push	EAX
 00001CFC  52				push	EDX 
 00001CFD  DD C0			ffree	st
 00001CFF  DD 04 24			fld	qword ptr [ESP]
 00001D02  5A				pop	EDX
 00001D03  58				pop	EAX 
 00001D04  5B				pop	EBX
 00001D05  DD 1B			fstp	qword ptr [EBX]

				;{167}:_F++ ;
 00001D07  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001D0A  8B C3			mov	EAX,EBX 
 00001D0C  8B 03			mov	EAX,dword ptr [EBX]
 00001D0E  FF 03			inc	dword ptr [EBX]
				;}
 00001D10  EB 42			jmp	OFFSET $L001128

				; else {
 00001D12			$L001127:
				;{

				;{169}:array[_L]= array[_F];
 00001D12  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001D15  8B C3			mov	EAX,EBX 
 00001D17  50				push	EAX
 00001D18  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001D1B  8B C3			mov	EAX,EBX 
 00001D1D  8B 03			mov	EAX,dword ptr [EBX]
 00001D1F  5E				pop	ESI
 00001D20  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001D23  50				push	EAX
 00001D24  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001D27  8B C3			mov	EAX,EBX 
 00001D29  50				push	EAX
 00001D2A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001D2D  8B C3			mov	EAX,EBX 
 00001D2F  8B 03			mov	EAX,dword ptr [EBX]
 00001D31  5E				pop	ESI
 00001D32  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001D35  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001D3C  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001D3F  50				push	EAX
 00001D40  52				push	EDX 
 00001D41  DD C0			ffree	st
 00001D43  DD 04 24			fld	qword ptr [ESP]
 00001D46  5A				pop	EDX
 00001D47  58				pop	EAX 
 00001D48  5B				pop	EBX
 00001D49  DD 1B			fstp	qword ptr [EBX]

				;{170}:_L-- ;
 00001D4B  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001D4E  8B C3			mov	EAX,EBX 
 00001D50  8B 03			mov	EAX,dword ptr [EBX]
 00001D52  FF 0B			dec	dword ptr [EBX]
				;}
 00001D54			$L001128:

				; }
				;}
 00001D54			$L001125:
				;}
 00001D54			$L000575:

 00001D54  5F				pop	EDI
 00001D55  5E				pop	ESI 
 00001D56  5B				pop	EBX 
 00001D57  8B E5			mov	ESP,EBP
 00001D59  5D				pop	EBP 
 00001D5A  C2 0018			retn	000000018h
 00001D5D			Algorithms_Sorting_QuickSort_Partition ENDP

 00001D5D			Algorithms_Sorting_QuickSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 00001D5D  55				push	EBP
 00001D5E  8B EC			mov	EBP,ESP
 00001D60  51				push	ECX 
 00001D61  53				push	EBX 
 00001D62  56				push	ESI 
 00001D63  57				push	EDI 
				;{

				;{198}:quickSort(array, 0, size - 1);
 00001D64  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001D67  50				push	EAX
 00001D68  B8 00000001			mov	EAX,000000001h
 00001D6D  5A				pop	EDX
 00001D6E  2B D0			sub	EDX,EAX
 00001D70  8B C2			mov	EAX,EDX
 00001D72  50				push	EAX 
 00001D73  33 C0			xor	EAX,EAX
 00001D75  50				push	EAX 
 00001D76  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001D79  8B C3			mov	EAX,EBX 
 00001D7B  50				push	EAX
 00001D7C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001D7F  E8 0000000B			call	 Algorithms_Sorting_QuickSort_quickSort

				;{199}:return 
 00001D84  EB 00			jmp	OFFSET $L000589
				;}
 00001D86			$L000589:

 00001D86  5F				pop	EDI
 00001D87  5E				pop	ESI 
 00001D88  5B				pop	EBX 
 00001D89  8B E5			mov	ESP,EBP
 00001D8B  5D				pop	EBP 
 00001D8C  C2 0008			retn	000000008h
 00001D8F			Algorithms_Sorting_QuickSort_Sort ENDP

 00001D8F			Algorithms_Sorting_QuickSort_quickSort PROC NEAR 
				;void quickSort(double double [] array, Algorithms::Sorting::__uint _F, Algorithms::Sorting::__uint _L);
 00001D8F  55				push	EBP
 00001D90  8B EC			mov	EBP,ESP
 00001D92  83 EC 18			sub	ESP,000000018h
 00001D95  53				push	EBX 
 00001D96  56				push	ESI 
 00001D97  57				push	EDI 
 00001D98  89 4D E8			mov	dword ptr [EBP-0018h],ECX
				;{

				;{177}:F_Hold= _F;
 00001D9B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001D9E  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{178}:L_Hold= _L;
 00001DA1  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001DA4  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{179}:dPivot= array[_F];
 00001DA7  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001DAA  8B C3			mov	EAX,EBX 
 00001DAC  50				push	EAX
 00001DAD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001DB0  5E				pop	ESI
 00001DB1  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001DB4  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001DBB  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001DBE  50				push	EAX
 00001DBF  52				push	EDX 
 00001DC0  DD C0			ffree	st
 00001DC2  DD 04 24			fld	qword ptr [ESP]
 00001DC5  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{180}:while(_F < _L)
 00001DC8			$L001129:
 00001DC8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001DCB  50				push	EAX
 00001DCC  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001DCF  5A				pop	EDX
 00001DD0  3B D0			cmp	EDX,EAX
 00001DD2  0F 9C C0			setl	AL
 00001DD5  84 C0			test	AL,AL
 00001DD7  74 47			jz	OFFSET $L001130
				;{

				;{182}:Partition(array, _F, _L, dPivot, true);
 00001DD9  B8 00000001			mov	EAX,000000001h
 00001DDE  50				push	EAX 
 00001DDF  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00001DE2  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00001DE5  50				push	EAX 
 00001DE6  52				push	EDX 
 00001DE7  8D 45 10			lea	EAX,dword ptr [EBP+0010h]
 00001DEA  50				push	EAX
 00001DEB  8D 45 0C			lea	EAX,dword ptr [EBP+000Ch]
 00001DEE  50				push	EAX
 00001DEF  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001DF2  8B C3			mov	EAX,EBX 
 00001DF4  50				push	EAX
 00001DF5  8B 4D E8			mov	ECX,dword ptr [EBP-0018h]
 00001DF8  E8 FFFFFDE7			call	 Algorithms_Sorting_QuickSort_Partition

				;{183}:Partition(array, _F, _L, dPivot, false);
 00001DFD  33 C0			xor	EAX,EAX
 00001DFF  50				push	EAX 
 00001E00  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00001E03  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00001E06  50				push	EAX 
 00001E07  52				push	EDX 
 00001E08  8D 45 10			lea	EAX,dword ptr [EBP+0010h]
 00001E0B  50				push	EAX
 00001E0C  8D 45 0C			lea	EAX,dword ptr [EBP+000Ch]
 00001E0F  50				push	EAX
 00001E10  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001E13  8B C3			mov	EAX,EBX 
 00001E15  50				push	EAX
 00001E16  8B 4D E8			mov	ECX,dword ptr [EBP-0018h]
 00001E19  E8 FFFFFDC6			call	 Algorithms_Sorting_QuickSort_Partition
				;}
 00001E1E  EB A8			jmp	OFFSET $L001129
 00001E20			$L001130:

				;{185}:array[_F]= dPivot;
 00001E20  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001E23  8B C3			mov	EAX,EBX 
 00001E25  50				push	EAX
 00001E26  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001E29  5E				pop	ESI
 00001E2A  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001E2D  50				push	EAX
 00001E2E  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00001E31  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00001E34  50				push	EAX
 00001E35  52				push	EDX 
 00001E36  DD C0			ffree	st
 00001E38  DD 04 24			fld	qword ptr [ESP]
 00001E3B  5A				pop	EDX
 00001E3C  58				pop	EAX 
 00001E3D  5B				pop	EBX
 00001E3E  DD 1B			fstp	qword ptr [EBX]

				;{186}:pivot= _F;
 00001E40  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001E43  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{187}:_F= F_Hold;
 00001E46  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001E49  89 45 0C			mov	dword ptr [EBP+000Ch],EAX

				;{188}:_L= L_Hold;
 00001E4C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001E4F  89 45 10			mov	dword ptr [EBP+0010h],EAX

				;{189}:if(_F < pivot)
 00001E52  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001E55  50				push	EAX
 00001E56  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001E59  5A				pop	EDX
 00001E5A  3B D0			cmp	EDX,EAX
 00001E5C  0F 9C C0			setl	AL
 00001E5F  84 C0			test	AL,AL
 00001E61  74 21			jz	OFFSET $L001131

				;{190}:quickSort(array, _F, pivot - 1);
 00001E63  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001E66  50				push	EAX
 00001E67  B8 00000001			mov	EAX,000000001h
 00001E6C  5A				pop	EDX
 00001E6D  2B D0			sub	EDX,EAX
 00001E6F  8B C2			mov	EAX,EDX
 00001E71  50				push	EAX 
 00001E72  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001E75  50				push	EAX 
 00001E76  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001E79  8B C3			mov	EAX,EBX 
 00001E7B  50				push	EAX
 00001E7C  8B 4D E8			mov	ECX,dword ptr [EBP-0018h]
 00001E7F  E8 FFFFFF0B			call	 Algorithms_Sorting_QuickSort_quickSort
 00001E84			$L001131:

				;{191}:if(_L > pivot)
 00001E84  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001E87  50				push	EAX
 00001E88  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001E8B  5A				pop	EDX
 00001E8C  3B D0			cmp	EDX,EAX
 00001E8E  0F 9F C0			setg	AL
 00001E91  84 C0			test	AL,AL
 00001E93  74 1F			jz	OFFSET $L001133

				;{192}:quickSort(array, pivot + 1, _L);
 00001E95  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001E98  50				push	EAX 
 00001E99  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001E9C  50				push	EAX
 00001E9D  B8 00000001			mov	EAX,000000001h
 00001EA2  5A				pop	EDX
 00001EA3  03 C2			add	EAX,EDX
 00001EA5  50				push	EAX 
 00001EA6  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001EA9  8B C3			mov	EAX,EBX 
 00001EAB  50				push	EAX
 00001EAC  8B 4D E8			mov	ECX,dword ptr [EBP-0018h]
 00001EAF  E8 FFFFFEDB			call	 Algorithms_Sorting_QuickSort_quickSort
 00001EB4			$L001133:
				;}
 00001EB4			$L000581:

 00001EB4  5F				pop	EDI
 00001EB5  5E				pop	ESI 
 00001EB6  5B				pop	EBX 
 00001EB7  8B E5			mov	ESP,EBP
 00001EB9  5D				pop	EBP 
 00001EBA  C2 000C			retn	00000000Ch
 00001EBD			Algorithms_Sorting_QuickSort_quickSort ENDP

 00001EBD			Algorithms_Sorting_QuickSort PROC NEAR 
				;void Algorithms::Sorting::QuickSort(void);
 00001EBD  55				push	EBP
 00001EBE  8B EC			mov	EBP,ESP
 00001EC0  51				push	ECX 
 00001EC1  53				push	EBX 
 00001EC2  56				push	ESI 
 00001EC3  57				push	EDI 
 00001EC4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001EC7  E8 0000038A			call	 Algorithms_Sorting_Sorter ;base constructor call
 00001ECC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001ECF  C7 01 000000D4 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_QuickSort 

 00001ED5  5F				pop	EDI
 00001ED6  5E				pop	ESI 
 00001ED7  5B				pop	EBX 
 00001ED8  8B E5			mov	ESP,EBP
 00001EDA  5D				pop	EBP 
 00001EDB  C3				ret	
 00001EDC			Algorithms_Sorting_QuickSort ENDP

 00001EDC			Algorithms_Sorting_SelectionSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 00001EDC  55				push	EBP
 00001EDD  8B EC			mov	EBP,ESP
 00001EDF  83 EC 10			sub	ESP,000000010h
 00001EE2  53				push	EBX 
 00001EE3  56				push	ESI 
 00001EE4  57				push	EDI 
 00001EE5  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{40}:for(i= 0; i < size; i++ )
 00001EE8  33 C0			xor	EAX,EAX
 00001EEA  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001EED  EB 06			jmp	OFFSET $L001136
 00001EEF			$L001137:
 00001EEF  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001EF2  FF 45 FC			inc	dword ptr [EBP-4]
 00001EF5			$L001136:
 00001EF5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001EF8  50				push	EAX
 00001EF9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001EFC  5A				pop	EDX
 00001EFD  3B D0			cmp	EDX,EAX
 00001EFF  0F 9C C0			setl	AL
 00001F02  84 C0			test	AL,AL
 00001F04  0F 84 00000093		jz	OFFSET $L001138
				;{

				;{42}:_min= i;
 00001F0A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001F0D  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{44}:for(j= i + 1; j < size; j++ )
 00001F10  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001F13  50				push	EAX
 00001F14  B8 00000001			mov	EAX,000000001h
 00001F19  5A				pop	EDX
 00001F1A  03 C2			add	EAX,EDX
 00001F1C  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00001F1F  EB 06			jmp	OFFSET $L001139
 00001F21			$L001140:
 00001F21  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00001F24  FF 45 F4			inc	dword ptr [EBP-12]
 00001F27			$L001139:
 00001F27  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001F2A  50				push	EAX
 00001F2B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001F2E  5A				pop	EDX
 00001F2F  3B D0			cmp	EDX,EAX
 00001F31  0F 9C C0			setl	AL
 00001F34  84 C0			test	AL,AL
 00001F36  74 4B			jz	OFFSET $L001141
				;{

				;{46}:if(array[j] < array[_min])
 00001F38  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001F3B  8B C3			mov	EAX,EBX 
 00001F3D  50				push	EAX
 00001F3E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001F41  5E				pop	ESI
 00001F42  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001F45  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001F4C  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001F4F  50				push	EAX
 00001F50  52				push	EDX 
 00001F51  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001F54  8B C3			mov	EAX,EBX 
 00001F56  50				push	EAX
 00001F57  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001F5A  5E				pop	ESI
 00001F5B  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00001F5E  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00001F65  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001F68  50				push	EAX
 00001F69  52				push	EDX 
 00001F6A  E8 00000000 E		call	 FloatingPoint_Compare
 00001F6F  83 F8 00			cmp	EAX,000000000h
 00001F72  F7 D8			neg	EAX
 00001F74  0F 9C C0			setl	AL
 00001F77  84 C0			test	AL,AL
 00001F79  74 06			jz	OFFSET $L001142

				;{47}:_min= j;
 00001F7B  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001F7E  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001F81			$L001142:
				;}
 00001F81  EB 9E			jmp	OFFSET $L001140 
 00001F83			$L001141:

				;{54}:Swap(array, i, _min);
 00001F83  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001F86  50				push	EAX 
 00001F87  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001F8A  50				push	EAX 
 00001F8B  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001F8E  8B C3			mov	EAX,EBX 
 00001F90  50				push	EAX
 00001F91  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00001F94  8B 11			mov	EDX,dword ptr [ECX]
 00001F96  FF 12			call	dword ptr [EDX]
				;}
 00001F98  E9 FFFFFF52			jmp	OFFSET $L001137 
 00001F9D			$L001138:
				;}
 00001F9D			$L000541:

 00001F9D  5F				pop	EDI
 00001F9E  5E				pop	ESI 
 00001F9F  5B				pop	EBX 
 00001FA0  8B E5			mov	ESP,EBP
 00001FA2  5D				pop	EBP 
 00001FA3  C2 0008			retn	000000008h
 00001FA6			Algorithms_Sorting_SelectionSort_Sort ENDP

 00001FA6			Algorithms_Sorting_SelectionSort PROC NEAR 
				;void Algorithms::Sorting::SelectionSort(void);
 00001FA6  55				push	EBP
 00001FA7  8B EC			mov	EBP,ESP
 00001FA9  51				push	ECX 
 00001FAA  53				push	EBX 
 00001FAB  56				push	ESI 
 00001FAC  57				push	EDI 
 00001FAD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001FB0  E8 000002A1			call	 Algorithms_Sorting_Sorter ;base constructor call
 00001FB5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001FB8  C7 01 000000E0 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_SelectionSort 

 00001FBE  5F				pop	EDI
 00001FBF  5E				pop	ESI 
 00001FC0  5B				pop	EBX 
 00001FC1  8B E5			mov	ESP,EBP
 00001FC3  5D				pop	EBP 
 00001FC4  C3				ret	
 00001FC5			Algorithms_Sorting_SelectionSort ENDP

 00001FC5			Algorithms_Sorting_ShellSort_Sort PROC NEAR 
				;void Sort(double double [] array, unsigned size);
 00001FC5  55				push	EBP
 00001FC6  8B EC			mov	EBP,ESP
 00001FC8  83 EC 18			sub	ESP,000000018h
 00001FCB  53				push	EBX 
 00001FCC  56				push	ESI 
 00001FCD  57				push	EDI 
 00001FCE  89 4D E8			mov	dword ptr [EBP-0018h],ECX
				;{

				;{119}:inc= 3;
 00001FD1  B8 00000003			mov	EAX,000000003h
 00001FD6  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{120}:while(inc > 0)
 00001FD9			$L001145:
 00001FD9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001FDC  50				push	EAX
 00001FDD  33 C0			xor	EAX,EAX
 00001FDF  5A				pop	EDX
 00001FE0  3B D0			cmp	EDX,EAX
 00001FE2  0F 9F C0			setg	AL
 00001FE5  84 C0			test	AL,AL
 00001FE7  0F 84 00000161		jz	OFFSET $L001146
				;{

				;{122}:for(i= 0; i < size; i++ )
 00001FED  33 C0			xor	EAX,EAX
 00001FEF  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001FF2  EB 06			jmp	OFFSET $L001147
 00001FF4			$L001148:
 00001FF4  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001FF7  FF 45 F8			inc	dword ptr [EBP-8]
 00001FFA			$L001147:
 00001FFA  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001FFD  50				push	EAX
 00001FFE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002001  5A				pop	EDX
 00002002  3B D0			cmp	EDX,EAX
 00002004  0F 9C C0			setl	AL
 00002007  84 C0			test	AL,AL
 00002009  0F 84 000000E6		jz	OFFSET $L001149
				;{

				;{124}:j= i;
 0000200F  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00002012  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{125}:tmp= array[i];
 00002015  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002018  8B C3			mov	EAX,EBX 
 0000201A  50				push	EAX
 0000201B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000201E  5E				pop	ESI
 0000201F  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00002022  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00002029  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 0000202C  50				push	EAX
 0000202D  52				push	EDX 
 0000202E  DD C0			ffree	st
 00002030  DD 04 24			fld	qword ptr [ESP]
 00002033  DD 5D EC			fstp	qword ptr [EBP-0014h]

				;{126}:while((j >= inc) && (array[j - inc] > tmp))
 00002036			$L001150:
 00002036  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002039  50				push	EAX
 0000203A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000203D  5A				pop	EDX
 0000203E  3B D0			cmp	EDX,EAX
 00002040  0F 9D C0			setge	AL
 00002043  84 C0			test	AL,AL
 00002045  74 37			jz	OFFSET $L001152
 00002047  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000204A  8B C3			mov	EAX,EBX 
 0000204C  50				push	EAX
 0000204D  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002050  50				push	EAX
 00002051  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002054  5A				pop	EDX
 00002055  2B D0			sub	EDX,EAX
 00002057  8B C2			mov	EAX,EDX
 00002059  5E				pop	ESI
 0000205A  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000205D  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00002064  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00002067  50				push	EAX
 00002068  52				push	EDX 
 00002069  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 0000206C  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 0000206F  50				push	EAX
 00002070  52				push	EDX 
 00002071  E8 00000000 E		call	 FloatingPoint_Compare
 00002076  83 F8 00			cmp	EAX,000000000h
 00002079  F7 D8			neg	EAX
 0000207B  0F 9F C0			setg	AL
 0000207E			$L001152:
 0000207E  84 C0			test	AL,AL
 00002080  74 4E			jz	OFFSET $L001151
				;{

				;{128}:array[j]= array[j - inc];
 00002082  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002085  8B C3			mov	EAX,EBX 
 00002087  50				push	EAX
 00002088  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000208B  5E				pop	ESI
 0000208C  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 0000208F  50				push	EAX
 00002090  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002093  8B C3			mov	EAX,EBX 
 00002095  50				push	EAX
 00002096  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002099  50				push	EAX
 0000209A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000209D  5A				pop	EDX
 0000209E  2B D0			sub	EDX,EAX
 000020A0  8B C2			mov	EAX,EDX
 000020A2  5E				pop	ESI
 000020A3  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000020A6  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000020AD  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000020B0  50				push	EAX
 000020B1  52				push	EDX 
 000020B2  DD C0			ffree	st
 000020B4  DD 04 24			fld	qword ptr [ESP]
 000020B7  5A				pop	EDX
 000020B8  58				pop	EAX 
 000020B9  5B				pop	EBX
 000020BA  DD 1B			fstp	qword ptr [EBX]

				;{129}:j= j - inc;
 000020BC  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000020BF  50				push	EAX
 000020C0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000020C3  5A				pop	EDX
 000020C4  2B D0			sub	EDX,EAX
 000020C6  8B C2			mov	EAX,EDX
 000020C8  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
				;}
 000020CB  E9 FFFFFF66			jmp	OFFSET $L001150
 000020D0			$L001151:

				;{131}:array[j]= tmp;
 000020D0  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000020D3  8B C3			mov	EAX,EBX 
 000020D5  50				push	EAX
 000020D6  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000020D9  5E				pop	ESI
 000020DA  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000020DD  50				push	EAX
 000020DE  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 000020E1  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 000020E4  50				push	EAX
 000020E5  52				push	EDX 
 000020E6  DD C0			ffree	st
 000020E8  DD 04 24			fld	qword ptr [ESP]
 000020EB  5A				pop	EDX
 000020EC  58				pop	EAX 
 000020ED  5B				pop	EBX
 000020EE  DD 1B			fstp	qword ptr [EBX]
				;}
 000020F0  E9 FFFFFEFF			jmp	OFFSET $L001148 
 000020F5			$L001149:

				;{133}:if(inc div 2 != 0)
 000020F5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000020F8  50				push	EAX
 000020F9  B8 00000002			mov	EAX,000000002h
 000020FE  8B C8			mov	ECX,EAX
 00002100  58				pop	EAX
 00002101  33 D2			xor	EDX,EDX
 00002103  F7 F9			idiv	ECX
 00002105  50				push	EAX
 00002106  33 C0			xor	EAX,EAX
 00002108  5A				pop	EDX
 00002109  3B D0			cmp	EDX,EAX
 0000210B  0F 95 C0			setnz	AL
 0000210E  84 C0			test	AL,AL
 00002110  74 15			jz	OFFSET $L001153

				;{134}:inc= inc div 2;
 00002112  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002115  50				push	EAX
 00002116  B8 00000002			mov	EAX,000000002h
 0000211B  8B C8			mov	ECX,EAX
 0000211D  58				pop	EAX
 0000211E  33 D2			xor	EDX,EDX
 00002120  F7 F9			idiv	ECX
 00002122  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00002125  EB 22			jmp	OFFSET $L001154

				; else {
 00002127			$L001153:

				;{135}:if(inc == 1)
 00002127  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000212A  50				push	EAX
 0000212B  B8 00000001			mov	EAX,000000001h
 00002130  5A				pop	EDX
 00002131  3B D0			cmp	EDX,EAX
 00002133  0F 94 C0			setz	AL
 00002136  84 C0			test	AL,AL
 00002138  74 07			jz	OFFSET $L001155

				;{136}:inc= 0;
 0000213A  33 C0			xor	EAX,EAX
 0000213C  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000213F  EB 08			jmp	OFFSET $L001156

				; else {
 00002141			$L001155:

				;{138}:inc= 1;
 00002141  B8 00000001			mov	EAX,000000001h
 00002146  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00002149			$L001156:

				; }
 00002149			$L001154:

				; }
				;}
 00002149  E9 FFFFFE8B			jmp	OFFSET $L001145
 0000214E			$L001146:
				;}
 0000214E			$L000565:

 0000214E  5F				pop	EDI
 0000214F  5E				pop	ESI 
 00002150  5B				pop	EBX 
 00002151  8B E5			mov	ESP,EBP
 00002153  5D				pop	EBP 
 00002154  C2 0008			retn	000000008h
 00002157			Algorithms_Sorting_ShellSort_Sort ENDP

 00002157			Algorithms_Sorting_ShellSort PROC NEAR 
				;void Algorithms::Sorting::ShellSort(void);
 00002157  55				push	EBP
 00002158  8B EC			mov	EBP,ESP
 0000215A  51				push	ECX 
 0000215B  53				push	EBX 
 0000215C  56				push	ESI 
 0000215D  57				push	EDI 
 0000215E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002161  E8 000000F0			call	 Algorithms_Sorting_Sorter ;base constructor call
 00002166  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00002169  C7 01 000000EC R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_ShellSort 

 0000216F  5F				pop	EDI
 00002170  5E				pop	ESI 
 00002171  5B				pop	EBX 
 00002172  8B E5			mov	ESP,EBP
 00002174  5D				pop	EBP 
 00002175  C3				ret	
 00002176			Algorithms_Sorting_ShellSort ENDP

 00002176			Algorithms_Sorting_Sorter_Swap PROC NEAR 
				;void Swap(double double [] array, Algorithms::Sorting::__uint a, Algorithms::Sorting::__uint b);
 00002176  55				push	EBP
 00002177  8B EC			mov	EBP,ESP
 00002179  83 EC 0C			sub	ESP,00000000Ch
 0000217C  53				push	EBX 
 0000217D  56				push	ESI 
 0000217E  57				push	EDI 
 0000217F  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{16}:tmp= array[a];
 00002182  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002185  8B C3			mov	EAX,EBX 
 00002187  50				push	EAX
 00002188  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000218B  5E				pop	ESI
 0000218C  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000218F  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00002196  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00002199  50				push	EAX
 0000219A  52				push	EDX 
 0000219B  DD C0			ffree	st
 0000219D  DD 04 24			fld	qword ptr [ESP]
 000021A0  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{17}:array[a]= array[b];
 000021A3  5A				pop	EDX
 000021A4  58				pop	EAX 
 000021A5  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000021A8  8B C3			mov	EAX,EBX 
 000021AA  50				push	EAX
 000021AB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000021AE  5E				pop	ESI
 000021AF  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000021B2  50				push	EAX
 000021B3  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000021B6  8B C3			mov	EAX,EBX 
 000021B8  50				push	EAX
 000021B9  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000021BC  5E				pop	ESI
 000021BD  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000021C0  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000021C7  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000021CA  50				push	EAX
 000021CB  52				push	EDX 
 000021CC  DD C0			ffree	st
 000021CE  DD 04 24			fld	qword ptr [ESP]
 000021D1  5A				pop	EDX
 000021D2  58				pop	EAX 
 000021D3  5B				pop	EBX
 000021D4  DD 1B			fstp	qword ptr [EBX]

				;{18}:array[b]= tmp;
 000021D6  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000021D9  8B C3			mov	EAX,EBX 
 000021DB  50				push	EAX
 000021DC  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000021DF  5E				pop	ESI
 000021E0  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 000021E3  50				push	EAX
 000021E4  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000021E7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000021EA  50				push	EAX
 000021EB  52				push	EDX 
 000021EC  DD C0			ffree	st
 000021EE  DD 04 24			fld	qword ptr [ESP]
 000021F1  5A				pop	EDX
 000021F2  58				pop	EAX 
 000021F3  5B				pop	EBX
 000021F4  DD 1B			fstp	qword ptr [EBX]
				;}
 000021F6			$L000526:

 000021F6  5F				pop	EDI
 000021F7  5E				pop	ESI 
 000021F8  5B				pop	EBX 
 000021F9  8B E5			mov	ESP,EBP
 000021FB  5D				pop	EBP 
 000021FC  C2 000C			retn	00000000Ch
 000021FF			Algorithms_Sorting_Sorter_Swap ENDP

 000021FF			Algorithms_Sorting_Sorter_SwapValues PROC NEAR 
				;void SwapValues(double ref _A, double ref _B);
 000021FF  55				push	EBP
 00002200  8B EC			mov	EBP,ESP
 00002202  83 EC 0C			sub	ESP,00000000Ch
 00002205  53				push	EBX 
 00002206  56				push	ESI 
 00002207  57				push	EDI 
 00002208  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{22}:tmp= _A;
 0000220B  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000220E  8B C3			mov	EAX,EBX 
 00002210  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00002213  8B 13			mov	EDX,dword ptr [EBX] 
 00002215  50				push	EAX
 00002216  52				push	EDX 
 00002217  DD C0			ffree	st
 00002219  DD 04 24			fld	qword ptr [ESP]
 0000221C  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{23}:_A= _B;
 0000221F  5A				pop	EDX
 00002220  58				pop	EAX 
 00002221  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002224  8B C3			mov	EAX,EBX 
 00002226  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00002229  8B 13			mov	EDX,dword ptr [EBX] 
 0000222B  50				push	EAX
 0000222C  52				push	EDX 
 0000222D  DD C0			ffree	st
 0000222F  DD 04 24			fld	qword ptr [ESP]
 00002232  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002235  DD 1B			fstp	qword ptr [EBX]

				;{24}:_B= tmp;
 00002237  5A				pop	EDX
 00002238  58				pop	EAX 
 00002239  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 0000223C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 0000223F  50				push	EAX
 00002240  52				push	EDX 
 00002241  DD C0			ffree	st
 00002243  DD 04 24			fld	qword ptr [ESP]
 00002246  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002249  DD 1B			fstp	qword ptr [EBX]
				;}
 0000224B			$L000532:
 0000224B  5A				pop	EDX
 0000224C  58				pop	EAX 

 0000224D  5F				pop	EDI
 0000224E  5E				pop	ESI 
 0000224F  5B				pop	EBX 
 00002250  8B E5			mov	ESP,EBP
 00002252  5D				pop	EBP 
 00002253  C2 0008			retn	000000008h
 00002256			Algorithms_Sorting_Sorter_SwapValues ENDP

 00002256			Algorithms_Sorting_Sorter PROC NEAR 
				;void Algorithms::Sorting::Sorter(void);
 00002256  55				push	EBP
 00002257  8B EC			mov	EBP,ESP
 00002259  51				push	ECX 
 0000225A  53				push	EBX 
 0000225B  56				push	ESI 
 0000225C  57				push	EDI 
 0000225D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002260  C7 01 0000000C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__Algorithms_Sorting_Sorter 

 00002266  5F				pop	EDI
 00002267  5E				pop	ESI 
 00002268  5B				pop	EBX 
 00002269  8B E5			mov	ESP,EBP
 0000226B  5D				pop	EBP 
 0000226C  C3				ret	
 0000226D			Algorithms_Sorting_Sorter ENDP

 0000226D			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 0000226D  55				push	EBP
 0000226E  8B EC			mov	EBP,ESP
 00002270  51				push	ECX 
 00002271  53				push	EBX 
 00002272  56				push	ESI 
 00002273  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00002274  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002277  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000227A  50				push	EAX
 0000227B  52				push	EDX 
 0000227C  E8 00000000 E		call	 Math_pi
 00002281  9B DB E2			fclex
 00002284  50				push	EAX
 00002285  52				push	EDX 
 00002286  DD 04 24			fld	qword ptr [ESP]
 00002289  59				pop	ECX
 0000228A  59				pop	ECX 
 0000228B  DC 0C 24			fmul	qword ptr [ESP]
 0000228E  DD 1C 24			fstp	qword ptr [ESP]
 00002291  B8 000000B4			mov	EAX,0000000B4h
 00002296  9B DB E2			fclex
 00002299  50				push	EAX
 0000229A  E8 00000000 E		call	 FloatingPoint_FromInt
 0000229F  50				push	EAX
 000022A0  52				push	EDX 
 000022A1  DD 04 24			fld	qword ptr [ESP]
 000022A4  59				pop	ECX
 000022A5  59				pop	ECX 
 000022A6  DC 3C 24			fdivr	qword ptr [ESP]
 000022A9  DD 1C 24			fstp	qword ptr [ESP]
 000022AC  5A				pop	EDX
 000022AD  58				pop	EAX 
 000022AE  EB 00			jmp	OFFSET $L000469
				;}
 000022B0			$L000469:

 000022B0  5F				pop	EDI
 000022B1  5E				pop	ESI 
 000022B2  5B				pop	EBX 
 000022B3  8B E5			mov	ESP,EBP
 000022B5  5D				pop	EBP 
 000022B6  C2 0008			retn	000000008h
 000022B9			Math_DegreesToRadians ENDP

 000022B9			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 000022B9  55				push	EBP
 000022BA  8B EC			mov	EBP,ESP
 000022BC  51				push	ECX 
 000022BD  53				push	EBX 
 000022BE  56				push	ESI 
 000022BF  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 000022C0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000022C3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000022C6  50				push	EAX
 000022C7  52				push	EDX 
 000022C8  E8 00000000 E		call	 Math_Exp
 000022CD  50				push	EAX
 000022CE  52				push	EDX 
 000022CF  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000022D2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000022D5  50				push	EAX
 000022D6  52				push	EDX 
 000022D7  DD 04 24			fld	qword ptr [ESP]
 000022DA  D9 E0			fchs
 000022DC  DD 1C 24			fstp	qword ptr [ESP]
 000022DF  E8 00000000 E		call	 Math_Exp
 000022E4  50				push	EAX
 000022E5  52				push	EDX 
 000022E6  DD 04 24			fld	qword ptr [ESP]
 000022E9  59				pop	ECX
 000022EA  59				pop	ECX 
 000022EB  DC 04 24			fadd	qword ptr [ESP]
 000022EE  DD 1C 24			fstp	qword ptr [ESP]
 000022F1  B8 00000002			mov	EAX,000000002h
 000022F6  9B DB E2			fclex
 000022F9  50				push	EAX
 000022FA  E8 00000000 E		call	 FloatingPoint_FromInt
 000022FF  50				push	EAX
 00002300  52				push	EDX 
 00002301  DD 04 24			fld	qword ptr [ESP]
 00002304  59				pop	ECX
 00002305  59				pop	ECX 
 00002306  DC 3C 24			fdivr	qword ptr [ESP]
 00002309  DD 1C 24			fstp	qword ptr [ESP]
 0000230C  5A				pop	EDX
 0000230D  58				pop	EAX 
 0000230E  EB 00			jmp	OFFSET $L000486
				;}
 00002310			$L000486:

 00002310  5F				pop	EDI
 00002311  5E				pop	ESI 
 00002312  5B				pop	EBX 
 00002313  8B E5			mov	ESP,EBP
 00002315  5D				pop	EBP 
 00002316  C2 0008			retn	000000008h
 00002319			Math_Hyperbolic_HCos ENDP

 00002319			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 00002319  55				push	EBP
 0000231A  8B EC			mov	EBP,ESP
 0000231C  51				push	ECX 
 0000231D  53				push	EBX 
 0000231E  56				push	ESI 
 0000231F  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 00002320  B8 00000002			mov	EAX,000000002h
 00002325  50				push	EAX
 00002326  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002329  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000232C  50				push	EAX
 0000232D  52				push	EDX 
 0000232E  E8 00000000 E		call	 Math_Exp
 00002333  50				push	EAX
 00002334  52				push	EDX 
 00002335  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002338  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000233B  50				push	EAX
 0000233C  52				push	EDX 
 0000233D  DD 04 24			fld	qword ptr [ESP]
 00002340  D9 E0			fchs
 00002342  DD 1C 24			fstp	qword ptr [ESP]
 00002345  E8 00000000 E		call	 Math_Exp
 0000234A  50				push	EAX
 0000234B  52				push	EDX 
 0000234C  DD 04 24			fld	qword ptr [ESP]
 0000234F  59				pop	ECX
 00002350  59				pop	ECX 
 00002351  DD 04 24			fld	qword ptr [ESP]
 00002354  D8 E1			fsub	st,st(1)
 00002356  DD 1C 24			fstp	qword ptr [ESP]
 00002359  9B DB E2			fclex
 0000235C  DD 04 24			fld	qword ptr [ESP]
 0000235F  59				pop	ECX
 00002360  59				pop	ECX 
 00002361  E8 00000000 E		call	 FloatingPoint_FromInt
 00002366  50				push	EAX
 00002367  52				push	EDX 
 00002368  DC 3C 24			fdivr	qword ptr [ESP]
 0000236B  DD 1C 24			fstp	qword ptr [ESP]
 0000236E  5A				pop	EDX
 0000236F  58				pop	EAX 
 00002370  EB 00			jmp	OFFSET $L000492
				;}
 00002372			$L000492:

 00002372  5F				pop	EDI
 00002373  5E				pop	ESI 
 00002374  5B				pop	EBX 
 00002375  8B E5			mov	ESP,EBP
 00002377  5D				pop	EBP 
 00002378  C2 0008			retn	000000008h
 0000237B			Math_Hyperbolic_HCosec ENDP

 0000237B			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000237B  55				push	EBP
 0000237C  8B EC			mov	EBP,ESP
 0000237E  51				push	ECX 
 0000237F  53				push	EBX 
 00002380  56				push	ESI 
 00002381  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00002382  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002385  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002388  50				push	EAX
 00002389  52				push	EDX 
 0000238A  E8 00000000 E		call	 Math_Exp
 0000238F  50				push	EAX
 00002390  52				push	EDX 
 00002391  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002394  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002397  50				push	EAX
 00002398  52				push	EDX 
 00002399  DD 04 24			fld	qword ptr [ESP]
 0000239C  D9 E0			fchs
 0000239E  DD 1C 24			fstp	qword ptr [ESP]
 000023A1  E8 00000000 E		call	 Math_Exp
 000023A6  50				push	EAX
 000023A7  52				push	EDX 
 000023A8  DD 04 24			fld	qword ptr [ESP]
 000023AB  59				pop	ECX
 000023AC  59				pop	ECX 
 000023AD  DC 04 24			fadd	qword ptr [ESP]
 000023B0  DD 1C 24			fstp	qword ptr [ESP]
 000023B3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000023B6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000023B9  50				push	EAX
 000023BA  52				push	EDX 
 000023BB  E8 00000000 E		call	 Math_Exp
 000023C0  50				push	EAX
 000023C1  52				push	EDX 
 000023C2  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000023C5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000023C8  50				push	EAX
 000023C9  52				push	EDX 
 000023CA  DD 04 24			fld	qword ptr [ESP]
 000023CD  D9 E0			fchs
 000023CF  DD 1C 24			fstp	qword ptr [ESP]
 000023D2  E8 00000000 E		call	 Math_Exp
 000023D7  50				push	EAX
 000023D8  52				push	EDX 
 000023D9  DD 04 24			fld	qword ptr [ESP]
 000023DC  59				pop	ECX
 000023DD  59				pop	ECX 
 000023DE  DD 04 24			fld	qword ptr [ESP]
 000023E1  D8 E1			fsub	st,st(1)
 000023E3  DD 1C 24			fstp	qword ptr [ESP]
 000023E6  9B DB E2			fclex
 000023E9  DD 04 24			fld	qword ptr [ESP]
 000023EC  59				pop	ECX
 000023ED  59				pop	ECX 
 000023EE  DC 3C 24			fdivr	qword ptr [ESP]
 000023F1  DD 1C 24			fstp	qword ptr [ESP]
 000023F4  5A				pop	EDX
 000023F5  58				pop	EAX 
 000023F6  EB 00			jmp	OFFSET $L000494
				;}
 000023F8			$L000494:

 000023F8  5F				pop	EDI
 000023F9  5E				pop	ESI 
 000023FA  5B				pop	EBX 
 000023FB  8B E5			mov	ESP,EBP
 000023FD  5D				pop	EBP 
 000023FE  C2 0008			retn	000000008h
 00002401			Math_Hyperbolic_HCotan ENDP

 00002401			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00002401  55				push	EBP
 00002402  8B EC			mov	EBP,ESP
 00002404  51				push	ECX 
 00002405  53				push	EBX 
 00002406  56				push	ESI 
 00002407  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00002408  B8 00000002			mov	EAX,000000002h
 0000240D  50				push	EAX
 0000240E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002411  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002414  50				push	EAX
 00002415  52				push	EDX 
 00002416  E8 00000000 E		call	 Math_Exp
 0000241B  50				push	EAX
 0000241C  52				push	EDX 
 0000241D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002420  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002423  50				push	EAX
 00002424  52				push	EDX 
 00002425  DD 04 24			fld	qword ptr [ESP]
 00002428  D9 E0			fchs
 0000242A  DD 1C 24			fstp	qword ptr [ESP]
 0000242D  E8 00000000 E		call	 Math_Exp
 00002432  50				push	EAX
 00002433  52				push	EDX 
 00002434  DD 04 24			fld	qword ptr [ESP]
 00002437  59				pop	ECX
 00002438  59				pop	ECX 
 00002439  DC 04 24			fadd	qword ptr [ESP]
 0000243C  DD 1C 24			fstp	qword ptr [ESP]
 0000243F  9B DB E2			fclex
 00002442  DD 04 24			fld	qword ptr [ESP]
 00002445  59				pop	ECX
 00002446  59				pop	ECX 
 00002447  E8 00000000 E		call	 FloatingPoint_FromInt
 0000244C  50				push	EAX
 0000244D  52				push	EDX 
 0000244E  DC 3C 24			fdivr	qword ptr [ESP]
 00002451  DD 1C 24			fstp	qword ptr [ESP]
 00002454  5A				pop	EDX
 00002455  58				pop	EAX 
 00002456  EB 00			jmp	OFFSET $L000490
				;}
 00002458			$L000490:

 00002458  5F				pop	EDI
 00002459  5E				pop	ESI 
 0000245A  5B				pop	EBX 
 0000245B  8B E5			mov	ESP,EBP
 0000245D  5D				pop	EBP 
 0000245E  C2 0008			retn	000000008h
 00002461			Math_Hyperbolic_HSec ENDP

 00002461			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 00002461  55				push	EBP
 00002462  8B EC			mov	EBP,ESP
 00002464  51				push	ECX 
 00002465  53				push	EBX 
 00002466  56				push	ESI 
 00002467  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 00002468  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000246B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000246E  50				push	EAX
 0000246F  52				push	EDX 
 00002470  E8 00000000 E		call	 Math_Exp
 00002475  50				push	EAX
 00002476  52				push	EDX 
 00002477  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000247A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000247D  50				push	EAX
 0000247E  52				push	EDX 
 0000247F  DD 04 24			fld	qword ptr [ESP]
 00002482  D9 E0			fchs
 00002484  DD 1C 24			fstp	qword ptr [ESP]
 00002487  E8 00000000 E		call	 Math_Exp
 0000248C  50				push	EAX
 0000248D  52				push	EDX 
 0000248E  DD 04 24			fld	qword ptr [ESP]
 00002491  59				pop	ECX
 00002492  59				pop	ECX 
 00002493  DD 04 24			fld	qword ptr [ESP]
 00002496  D8 E1			fsub	st,st(1)
 00002498  DD 1C 24			fstp	qword ptr [ESP]
 0000249B  B8 00000002			mov	EAX,000000002h
 000024A0  9B DB E2			fclex
 000024A3  50				push	EAX
 000024A4  E8 00000000 E		call	 FloatingPoint_FromInt
 000024A9  50				push	EAX
 000024AA  52				push	EDX 
 000024AB  DD 04 24			fld	qword ptr [ESP]
 000024AE  59				pop	ECX
 000024AF  59				pop	ECX 
 000024B0  DC 3C 24			fdivr	qword ptr [ESP]
 000024B3  DD 1C 24			fstp	qword ptr [ESP]
 000024B6  5A				pop	EDX
 000024B7  58				pop	EAX 
 000024B8  EB 00			jmp	OFFSET $L000483
				;}
 000024BA			$L000483:

 000024BA  5F				pop	EDI
 000024BB  5E				pop	ESI 
 000024BC  5B				pop	EBX 
 000024BD  8B E5			mov	ESP,EBP
 000024BF  5D				pop	EBP 
 000024C0  C2 0008			retn	000000008h
 000024C3			Math_Hyperbolic_HSin ENDP

 000024C3			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 000024C3  55				push	EBP
 000024C4  8B EC			mov	EBP,ESP
 000024C6  51				push	ECX 
 000024C7  53				push	EBX 
 000024C8  56				push	ESI 
 000024C9  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 000024CA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000024CD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000024D0  50				push	EAX
 000024D1  52				push	EDX 
 000024D2  E8 00000000 E		call	 Math_Exp
 000024D7  50				push	EAX
 000024D8  52				push	EDX 
 000024D9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000024DC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000024DF  50				push	EAX
 000024E0  52				push	EDX 
 000024E1  DD 04 24			fld	qword ptr [ESP]
 000024E4  D9 E0			fchs
 000024E6  DD 1C 24			fstp	qword ptr [ESP]
 000024E9  E8 00000000 E		call	 Math_Exp
 000024EE  50				push	EAX
 000024EF  52				push	EDX 
 000024F0  DD 04 24			fld	qword ptr [ESP]
 000024F3  59				pop	ECX
 000024F4  59				pop	ECX 
 000024F5  DD 04 24			fld	qword ptr [ESP]
 000024F8  D8 E1			fsub	st,st(1)
 000024FA  DD 1C 24			fstp	qword ptr [ESP]
 000024FD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002500  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002503  50				push	EAX
 00002504  52				push	EDX 
 00002505  E8 00000000 E		call	 Math_Exp
 0000250A  50				push	EAX
 0000250B  52				push	EDX 
 0000250C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000250F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002512  50				push	EAX
 00002513  52				push	EDX 
 00002514  DD 04 24			fld	qword ptr [ESP]
 00002517  D9 E0			fchs
 00002519  DD 1C 24			fstp	qword ptr [ESP]
 0000251C  E8 00000000 E		call	 Math_Exp
 00002521  50				push	EAX
 00002522  52				push	EDX 
 00002523  DD 04 24			fld	qword ptr [ESP]
 00002526  59				pop	ECX
 00002527  59				pop	ECX 
 00002528  DC 04 24			fadd	qword ptr [ESP]
 0000252B  DD 1C 24			fstp	qword ptr [ESP]
 0000252E  9B DB E2			fclex
 00002531  DD 04 24			fld	qword ptr [ESP]
 00002534  59				pop	ECX
 00002535  59				pop	ECX 
 00002536  DC 3C 24			fdivr	qword ptr [ESP]
 00002539  DD 1C 24			fstp	qword ptr [ESP]
 0000253C  5A				pop	EDX
 0000253D  58				pop	EAX 
 0000253E  EB 00			jmp	OFFSET $L000488
				;}
 00002540			$L000488:

 00002540  5F				pop	EDI
 00002541  5E				pop	ESI 
 00002542  5B				pop	EBX 
 00002543  8B E5			mov	ESP,EBP
 00002545  5D				pop	EBP 
 00002546  C2 0008			retn	000000008h
 00002549			Math_Hyperbolic_HTan ENDP

 00002549			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 00002549  55				push	EBP
 0000254A  8B EC			mov	EBP,ESP
 0000254C  51				push	ECX 
 0000254D  53				push	EBX 
 0000254E  56				push	ESI 
 0000254F  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 00002550  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002553  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002556  50				push	EAX
 00002557  52				push	EDX 
 00002558  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000255B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000255E  50				push	EAX
 0000255F  52				push	EDX 
 00002560  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002563  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002566  9B DB E2			fclex
 00002569  50				push	EAX
 0000256A  52				push	EDX 
 0000256B  DD 04 24			fld	qword ptr [ESP]
 0000256E  59				pop	ECX
 0000256F  59				pop	ECX 
 00002570  DC 0C 24			fmul	qword ptr [ESP]
 00002573  DD 1C 24			fstp	qword ptr [ESP]
 00002576  B8 00000001			mov	EAX,000000001h
 0000257B  50				push	EAX
 0000257C  E8 00000000 E		call	 FloatingPoint_FromInt
 00002581  50				push	EAX
 00002582  52				push	EDX 
 00002583  DD 04 24			fld	qword ptr [ESP]
 00002586  59				pop	ECX
 00002587  59				pop	ECX 
 00002588  DD 04 24			fld	qword ptr [ESP]
 0000258B  D8 E1			fsub	st,st(1)
 0000258D  DD 1C 24			fstp	qword ptr [ESP]
 00002590  E8 00000000 E		call	 Math_Sqrt
 00002595  50				push	EAX
 00002596  52				push	EDX 
 00002597  DD 04 24			fld	qword ptr [ESP]
 0000259A  59				pop	ECX
 0000259B  59				pop	ECX 
 0000259C  DC 04 24			fadd	qword ptr [ESP]
 0000259F  DD 1C 24			fstp	qword ptr [ESP]
 000025A2  E8 00000000 E		call	 Math_Ln
 000025A7  EB 00			jmp	OFFSET $L000500
				;}
 000025A9			$L000500:

 000025A9  5F				pop	EDI
 000025AA  5E				pop	ESI 
 000025AB  5B				pop	EBX 
 000025AC  8B E5			mov	ESP,EBP
 000025AE  5D				pop	EBP 
 000025AF  C2 0008			retn	000000008h
 000025B2			Math_Hyperbolic_Inverse_HArccos ENDP

 000025B2			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 000025B2  55				push	EBP
 000025B3  8B EC			mov	EBP,ESP
 000025B5  51				push	ECX 
 000025B6  53				push	EBX 
 000025B7  56				push	ESI 
 000025B8  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 000025B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000025BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000025BF  50				push	EAX
 000025C0  52				push	EDX 
 000025C1  E8 00000000 E		call	 Math_Sign
 000025C6  50				push	EAX
 000025C7  52				push	EDX 
 000025C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000025CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000025CE  50				push	EAX
 000025CF  52				push	EDX 
 000025D0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000025D3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000025D6  9B DB E2			fclex
 000025D9  50				push	EAX
 000025DA  52				push	EDX 
 000025DB  DD 04 24			fld	qword ptr [ESP]
 000025DE  59				pop	ECX
 000025DF  59				pop	ECX 
 000025E0  DC 0C 24			fmul	qword ptr [ESP]
 000025E3  DD 1C 24			fstp	qword ptr [ESP]
 000025E6  B8 00000001			mov	EAX,000000001h
 000025EB  50				push	EAX
 000025EC  E8 00000000 E		call	 FloatingPoint_FromInt
 000025F1  50				push	EAX
 000025F2  52				push	EDX 
 000025F3  DD 04 24			fld	qword ptr [ESP]
 000025F6  59				pop	ECX
 000025F7  59				pop	ECX 
 000025F8  DC 04 24			fadd	qword ptr [ESP]
 000025FB  DD 1C 24			fstp	qword ptr [ESP]
 000025FE  E8 00000000 E		call	 Math_Sqrt
 00002603  9B DB E2			fclex
 00002606  50				push	EAX
 00002607  52				push	EDX 
 00002608  DD 04 24			fld	qword ptr [ESP]
 0000260B  59				pop	ECX
 0000260C  59				pop	ECX 
 0000260D  DC 0C 24			fmul	qword ptr [ESP]
 00002610  DD 1C 24			fstp	qword ptr [ESP]
 00002613  B8 00000001			mov	EAX,000000001h
 00002618  50				push	EAX
 00002619  E8 00000000 E		call	 FloatingPoint_FromInt
 0000261E  50				push	EAX
 0000261F  52				push	EDX 
 00002620  DD 04 24			fld	qword ptr [ESP]
 00002623  59				pop	ECX
 00002624  59				pop	ECX 
 00002625  DC 04 24			fadd	qword ptr [ESP]
 00002628  DD 1C 24			fstp	qword ptr [ESP]
 0000262B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000262E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002631  9B DB E2			fclex
 00002634  50				push	EAX
 00002635  52				push	EDX 
 00002636  DD 04 24			fld	qword ptr [ESP]
 00002639  59				pop	ECX
 0000263A  59				pop	ECX 
 0000263B  DC 3C 24			fdivr	qword ptr [ESP]
 0000263E  DD 1C 24			fstp	qword ptr [ESP]
 00002641  E8 00000000 E		call	 Math_Ln
 00002646  EB 00			jmp	OFFSET $L000506
				;}
 00002648			$L000506:

 00002648  5F				pop	EDI
 00002649  5E				pop	ESI 
 0000264A  5B				pop	EBX 
 0000264B  8B E5			mov	ESP,EBP
 0000264D  5D				pop	EBP 
 0000264E  C2 0008			retn	000000008h
 00002651			Math_Hyperbolic_Inverse_HArccosec ENDP

 00002651			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 00002651  55				push	EBP
 00002652  8B EC			mov	EBP,ESP
 00002654  51				push	ECX 
 00002655  53				push	EBX 
 00002656  56				push	ESI 
 00002657  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 00002658  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000265B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000265E  50				push	EAX
 0000265F  52				push	EDX 
 00002660  B8 00000001			mov	EAX,000000001h
 00002665  50				push	EAX
 00002666  E8 00000000 E		call	 FloatingPoint_FromInt
 0000266B  50				push	EAX
 0000266C  52				push	EDX 
 0000266D  DD 04 24			fld	qword ptr [ESP]
 00002670  59				pop	ECX
 00002671  59				pop	ECX 
 00002672  DC 04 24			fadd	qword ptr [ESP]
 00002675  DD 1C 24			fstp	qword ptr [ESP]
 00002678  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000267B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000267E  50				push	EAX
 0000267F  52				push	EDX 
 00002680  B8 00000001			mov	EAX,000000001h
 00002685  50				push	EAX
 00002686  E8 00000000 E		call	 FloatingPoint_FromInt
 0000268B  50				push	EAX
 0000268C  52				push	EDX 
 0000268D  DD 04 24			fld	qword ptr [ESP]
 00002690  59				pop	ECX
 00002691  59				pop	ECX 
 00002692  DD 04 24			fld	qword ptr [ESP]
 00002695  D8 E1			fsub	st,st(1)
 00002697  DD 1C 24			fstp	qword ptr [ESP]
 0000269A  9B DB E2			fclex
 0000269D  DD 04 24			fld	qword ptr [ESP]
 000026A0  59				pop	ECX
 000026A1  59				pop	ECX 
 000026A2  DC 3C 24			fdivr	qword ptr [ESP]
 000026A5  DD 1C 24			fstp	qword ptr [ESP]
 000026A8  E8 00000000 E		call	 Math_Ln
 000026AD  50				push	EAX
 000026AE  52				push	EDX 
 000026AF  B8 00000002			mov	EAX,000000002h
 000026B4  9B DB E2			fclex
 000026B7  50				push	EAX
 000026B8  E8 00000000 E		call	 FloatingPoint_FromInt
 000026BD  50				push	EAX
 000026BE  52				push	EDX 
 000026BF  DD 04 24			fld	qword ptr [ESP]
 000026C2  59				pop	ECX
 000026C3  59				pop	ECX 
 000026C4  DC 3C 24			fdivr	qword ptr [ESP]
 000026C7  DD 1C 24			fstp	qword ptr [ESP]
 000026CA  5A				pop	EDX
 000026CB  58				pop	EAX 
 000026CC  EB 00			jmp	OFFSET $L000508
				;}
 000026CE			$L000508:

 000026CE  5F				pop	EDI
 000026CF  5E				pop	ESI 
 000026D0  5B				pop	EBX 
 000026D1  8B E5			mov	ESP,EBP
 000026D3  5D				pop	EBP 
 000026D4  C2 0008			retn	000000008h
 000026D7			Math_Hyperbolic_Inverse_HArccotan ENDP

 000026D7			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 000026D7  55				push	EBP
 000026D8  8B EC			mov	EBP,ESP
 000026DA  51				push	ECX 
 000026DB  53				push	EBX 
 000026DC  56				push	ESI 
 000026DD  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 000026DE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000026E1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000026E4  50				push	EAX
 000026E5  52				push	EDX 
 000026E6  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000026E9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000026EC  9B DB E2			fclex
 000026EF  50				push	EAX
 000026F0  52				push	EDX 
 000026F1  DD 04 24			fld	qword ptr [ESP]
 000026F4  59				pop	ECX
 000026F5  59				pop	ECX 
 000026F6  DC 0C 24			fmul	qword ptr [ESP]
 000026F9  DD 1C 24			fstp	qword ptr [ESP]
 000026FC  DD 04 24			fld	qword ptr [ESP]
 000026FF  D9 E0			fchs
 00002701  DD 1C 24			fstp	qword ptr [ESP]
 00002704  B8 00000001			mov	EAX,000000001h
 00002709  50				push	EAX
 0000270A  E8 00000000 E		call	 FloatingPoint_FromInt
 0000270F  50				push	EAX
 00002710  52				push	EDX 
 00002711  DD 04 24			fld	qword ptr [ESP]
 00002714  59				pop	ECX
 00002715  59				pop	ECX 
 00002716  DC 04 24			fadd	qword ptr [ESP]
 00002719  DD 1C 24			fstp	qword ptr [ESP]
 0000271C  E8 00000000 E		call	 Math_Sqrt
 00002721  50				push	EAX
 00002722  52				push	EDX 
 00002723  B8 00000001			mov	EAX,000000001h
 00002728  50				push	EAX
 00002729  E8 00000000 E		call	 FloatingPoint_FromInt
 0000272E  50				push	EAX
 0000272F  52				push	EDX 
 00002730  DD 04 24			fld	qword ptr [ESP]
 00002733  59				pop	ECX
 00002734  59				pop	ECX 
 00002735  DC 04 24			fadd	qword ptr [ESP]
 00002738  DD 1C 24			fstp	qword ptr [ESP]
 0000273B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000273E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002741  9B DB E2			fclex
 00002744  50				push	EAX
 00002745  52				push	EDX 
 00002746  DD 04 24			fld	qword ptr [ESP]
 00002749  59				pop	ECX
 0000274A  59				pop	ECX 
 0000274B  DC 3C 24			fdivr	qword ptr [ESP]
 0000274E  DD 1C 24			fstp	qword ptr [ESP]
 00002751  E8 00000000 E		call	 Math_Ln
 00002756  EB 00			jmp	OFFSET $L000504
				;}
 00002758			$L000504:

 00002758  5F				pop	EDI
 00002759  5E				pop	ESI 
 0000275A  5B				pop	EBX 
 0000275B  8B E5			mov	ESP,EBP
 0000275D  5D				pop	EBP 
 0000275E  C2 0008			retn	000000008h
 00002761			Math_Hyperbolic_Inverse_HArcsec ENDP

 00002761			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 00002761  55				push	EBP
 00002762  8B EC			mov	EBP,ESP
 00002764  51				push	ECX 
 00002765  53				push	EBX 
 00002766  56				push	ESI 
 00002767  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 00002768  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000276B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000276E  50				push	EAX
 0000276F  52				push	EDX 
 00002770  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002773  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002776  50				push	EAX
 00002777  52				push	EDX 
 00002778  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000277B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000277E  9B DB E2			fclex
 00002781  50				push	EAX
 00002782  52				push	EDX 
 00002783  DD 04 24			fld	qword ptr [ESP]
 00002786  59				pop	ECX
 00002787  59				pop	ECX 
 00002788  DC 0C 24			fmul	qword ptr [ESP]
 0000278B  DD 1C 24			fstp	qword ptr [ESP]
 0000278E  B8 00000001			mov	EAX,000000001h
 00002793  50				push	EAX
 00002794  E8 00000000 E		call	 FloatingPoint_FromInt
 00002799  50				push	EAX
 0000279A  52				push	EDX 
 0000279B  DD 04 24			fld	qword ptr [ESP]
 0000279E  59				pop	ECX
 0000279F  59				pop	ECX 
 000027A0  DC 04 24			fadd	qword ptr [ESP]
 000027A3  DD 1C 24			fstp	qword ptr [ESP]
 000027A6  E8 00000000 E		call	 Math_Sqrt
 000027AB  50				push	EAX
 000027AC  52				push	EDX 
 000027AD  DD 04 24			fld	qword ptr [ESP]
 000027B0  59				pop	ECX
 000027B1  59				pop	ECX 
 000027B2  DC 04 24			fadd	qword ptr [ESP]
 000027B5  DD 1C 24			fstp	qword ptr [ESP]
 000027B8  E8 00000000 E		call	 Math_Ln
 000027BD  EB 00			jmp	OFFSET $L000497
				;}
 000027BF			$L000497:

 000027BF  5F				pop	EDI
 000027C0  5E				pop	ESI 
 000027C1  5B				pop	EBX 
 000027C2  8B E5			mov	ESP,EBP
 000027C4  5D				pop	EBP 
 000027C5  C2 0008			retn	000000008h
 000027C8			Math_Hyperbolic_Inverse_HArcsin ENDP

 000027C8			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 000027C8  55				push	EBP
 000027C9  8B EC			mov	EBP,ESP
 000027CB  51				push	ECX 
 000027CC  53				push	EBX 
 000027CD  56				push	ESI 
 000027CE  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 000027CF  B8 00000001			mov	EAX,000000001h
 000027D4  50				push	EAX
 000027D5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000027D8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000027DB  50				push	EAX
 000027DC  52				push	EDX 
 000027DD  DD 04 24			fld	qword ptr [ESP]
 000027E0  59				pop	ECX
 000027E1  59				pop	ECX 
 000027E2  E8 00000000 E		call	 FloatingPoint_FromInt
 000027E7  50				push	EAX
 000027E8  52				push	EDX 
 000027E9  DC 04 24			fadd	qword ptr [ESP]
 000027EC  DD 1C 24			fstp	qword ptr [ESP]
 000027EF  B8 00000001			mov	EAX,000000001h
 000027F4  50				push	EAX
 000027F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000027F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000027FB  50				push	EAX
 000027FC  52				push	EDX 
 000027FD  DD 04 24			fld	qword ptr [ESP]
 00002800  59				pop	ECX
 00002801  59				pop	ECX 
 00002802  E8 00000000 E		call	 FloatingPoint_FromInt
 00002807  50				push	EAX
 00002808  52				push	EDX 
 00002809  DD 04 24			fld	qword ptr [ESP]
 0000280C  D8 E1			fsub	st,st(1)
 0000280E  DD 1C 24			fstp	qword ptr [ESP]
 00002811  9B DB E2			fclex
 00002814  DD 04 24			fld	qword ptr [ESP]
 00002817  59				pop	ECX
 00002818  59				pop	ECX 
 00002819  DC 3C 24			fdivr	qword ptr [ESP]
 0000281C  DD 1C 24			fstp	qword ptr [ESP]
 0000281F  E8 00000000 E		call	 Math_Ln
 00002824  50				push	EAX
 00002825  52				push	EDX 
 00002826  B8 00000002			mov	EAX,000000002h
 0000282B  9B DB E2			fclex
 0000282E  50				push	EAX
 0000282F  E8 00000000 E		call	 FloatingPoint_FromInt
 00002834  50				push	EAX
 00002835  52				push	EDX 
 00002836  DD 04 24			fld	qword ptr [ESP]
 00002839  59				pop	ECX
 0000283A  59				pop	ECX 
 0000283B  DC 3C 24			fdivr	qword ptr [ESP]
 0000283E  DD 1C 24			fstp	qword ptr [ESP]
 00002841  5A				pop	EDX
 00002842  58				pop	EAX 
 00002843  EB 00			jmp	OFFSET $L000502
				;}
 00002845			$L000502:

 00002845  5F				pop	EDI
 00002846  5E				pop	ESI 
 00002847  5B				pop	EBX 
 00002848  8B E5			mov	ESP,EBP
 0000284A  5D				pop	EBP 
 0000284B  C2 0008			retn	000000008h
 0000284E			Math_Hyperbolic_Inverse_HArctan ENDP

 0000284E			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 0000284E  55				push	EBP
 0000284F  8B EC			mov	EBP,ESP
 00002851  51				push	ECX 
 00002852  53				push	EBX 
 00002853  56				push	ESI 
 00002854  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 00002855  B8 000000B4			mov	EAX,0000000B4h
 0000285A  50				push	EAX
 0000285B  E8 00000000 E		call	 Math_pi
 00002860  9B DB E2			fclex
 00002863  50				push	EAX
 00002864  52				push	EDX 
 00002865  DD 04 24			fld	qword ptr [ESP]
 00002868  59				pop	ECX
 00002869  59				pop	ECX 
 0000286A  E8 00000000 E		call	 FloatingPoint_FromInt
 0000286F  50				push	EAX
 00002870  52				push	EDX 
 00002871  DC 3C 24			fdivr	qword ptr [ESP]
 00002874  DD 1C 24			fstp	qword ptr [ESP]
 00002877  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000287A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000287D  9B DB E2			fclex
 00002880  50				push	EAX
 00002881  52				push	EDX 
 00002882  DD 04 24			fld	qword ptr [ESP]
 00002885  59				pop	ECX
 00002886  59				pop	ECX 
 00002887  DC 0C 24			fmul	qword ptr [ESP]
 0000288A  DD 1C 24			fstp	qword ptr [ESP]
 0000288D  5A				pop	EDX
 0000288E  58				pop	EAX 
 0000288F  EB 00			jmp	OFFSET $L000466
				;}
 00002891			$L000466:

 00002891  5F				pop	EDI
 00002892  5E				pop	ESI 
 00002893  5B				pop	EBX 
 00002894  8B E5			mov	ESP,EBP
 00002896  5D				pop	EBP 
 00002897  C2 0008			retn	000000008h
 0000289A			Math_RadiansToDegrees ENDP

 0000289A			Program_TestBinaryInsertionSort PROC NEAR 
				;void Program::TestBinaryInsertionSort(void);
 0000289A  55				push	EBP
 0000289B  8B EC			mov	EBP,ESP
 0000289D  83 EC 08			sub	ESP,000000008h
 000028A0  53				push	EBX 
 000028A1  56				push	ESI 
 000028A2  57				push	EDI 
				;{

				;{178}:sorter;
 000028A3  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 000028A6  E8 FFFFD888			call	 Algorithms_Sorting_BinaryInsertionSort

				;{179}:Program::TestSortingAlgorithm(sorter, "\nTesting BINARY INSERTION SORT Algorithm: worst: O(n^2), best: O(n lg n)");
 000028AB  8D 05 00000263 R		lea	EAX,OFFSET $S000906
 000028B1  50				push	EAX
 000028B2  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 000028B5  50				push	EAX
 000028B6  E8 00000237			call	 Program_TestSortingAlgorithm
				;}
 000028BB			$L000904:

 000028BB  5F				pop	EDI
 000028BC  5E				pop	ESI 
 000028BD  5B				pop	EBX 
 000028BE  8B E5			mov	ESP,EBP
 000028C0  5D				pop	EBP 
 000028C1  C3				ret	
 000028C2			Program_TestBinaryInsertionSort ENDP

 000028C2			Program_TestBubbleSort PROC NEAR 
				;void Program::TestBubbleSort(void);
 000028C2  55				push	EBP
 000028C3  8B EC			mov	EBP,ESP
 000028C5  83 EC 08			sub	ESP,000000008h
 000028C8  53				push	EBX 
 000028C9  56				push	ESI 
 000028CA  57				push	EDI 
				;{

				;{142}:sorter;
 000028CB  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 000028CE  E8 FFFFD95A			call	 Algorithms_Sorting_BubbleSort

				;{143}:Program::TestSortingAlgorithm(sorter, "\nTesting BUBBLE SORT Algorithm: O(n^2)");
 000028D3  8D 05 000002AC R		lea	EAX,OFFSET $S000888
 000028D9  50				push	EAX
 000028DA  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 000028DD  50				push	EAX
 000028DE  E8 0000020F			call	 Program_TestSortingAlgorithm
				;}
 000028E3			$L000886:

 000028E3  5F				pop	EDI
 000028E4  5E				pop	ESI 
 000028E5  5B				pop	EBX 
 000028E6  8B E5			mov	ESP,EBP
 000028E8  5D				pop	EBP 
 000028E9  C3				ret	
 000028EA			Program_TestBubbleSort ENDP

 000028EA			Program_TestHeapSort PROC NEAR 
				;void Program::TestHeapSort(void);
 000028EA  55				push	EBP
 000028EB  8B EC			mov	EBP,ESP
 000028ED  83 EC 08			sub	ESP,000000008h
 000028F0  53				push	EBX 
 000028F1  56				push	ESI 
 000028F2  57				push	EDI 
				;{

				;{172}:sorter;
 000028F3  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 000028F6  E8 FFFFDB91			call	 Algorithms_Sorting_HeapSort

				;{173}:Program::TestSortingAlgorithm(sorter, "\nTesting HEAP SORT Algorithm: O(n lg n)");
 000028FB  8D 05 000002D3 R		lea	EAX,OFFSET $S000903
 00002901  50				push	EAX
 00002902  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 00002905  50				push	EAX
 00002906  E8 000001E7			call	 Program_TestSortingAlgorithm
				;}
 0000290B			$L000901:

 0000290B  5F				pop	EDI
 0000290C  5E				pop	ESI 
 0000290D  5B				pop	EBX 
 0000290E  8B E5			mov	ESP,EBP
 00002910  5D				pop	EBP 
 00002911  C3				ret	
 00002912			Program_TestHeapSort ENDP

 00002912			Program_TestInsertionSort PROC NEAR 
				;void Program::TestInsertionSort(void);
 00002912  55				push	EBP
 00002913  8B EC			mov	EBP,ESP
 00002915  83 EC 08			sub	ESP,000000008h
 00002918  53				push	EBX 
 00002919  56				push	ESI 
 0000291A  57				push	EDI 
				;{

				;{148}:sorter;
 0000291B  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 0000291E  E8 FFFFDCA4			call	 Algorithms_Sorting_InsertionSort

				;{149}:Program::TestSortingAlgorithm(sorter, "\nTesting INSERTION SORT Algorithm: O(n^2) - faster");
 00002923  8D 05 000002FB R		lea	EAX,OFFSET $S000891
 00002929  50				push	EAX
 0000292A  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 0000292D  50				push	EAX
 0000292E  E8 000001BF			call	 Program_TestSortingAlgorithm
				;}
 00002933			$L000889:

 00002933  5F				pop	EDI
 00002934  5E				pop	ESI 
 00002935  5B				pop	EBX 
 00002936  8B E5			mov	ESP,EBP
 00002938  5D				pop	EBP 
 00002939  C3				ret	
 0000293A			Program_TestInsertionSort ENDP

 0000293A			Program_TestMergeSort PROC NEAR 
				;void Program::TestMergeSort(void);
 0000293A  55				push	EBP
 0000293B  8B EC			mov	EBP,ESP
 0000293D  83 EC 08			sub	ESP,000000008h
 00002940  53				push	EBX 
 00002941  56				push	ESI 
 00002942  57				push	EDI 
				;{

				;{166}:sorter;
 00002943  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00002946  E8 FFFFDFD1			call	 Algorithms_Sorting_MergeSort

				;{167}:Program::TestSortingAlgorithm(sorter, "\nTesting MERGE SORT Algorithm: O(n lg n)");
 0000294B  8D 05 0000032E R		lea	EAX,OFFSET $S000900
 00002951  50				push	EAX
 00002952  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 00002955  50				push	EAX
 00002956  E8 00000197			call	 Program_TestSortingAlgorithm
				;}
 0000295B			$L000898:

 0000295B  5F				pop	EDI
 0000295C  5E				pop	ESI 
 0000295D  5B				pop	EBX 
 0000295E  8B E5			mov	ESP,EBP
 00002960  5D				pop	EBP 
 00002961  C3				ret	
 00002962			Program_TestMergeSort ENDP

 00002962			Program_TestOOBinaryInsertionSort PROC NEAR 
				;void Program::TestOOBinaryInsertionSort(void);
 00002962  55				push	EBP
 00002963  8B EC			mov	EBP,ESP
 00002965  83 EC 0C			sub	ESP,00000000Ch
 00002968  53				push	EBX 
 00002969  56				push	ESI 
 0000296A  57				push	EDI 
				;{

				;{204}:sorter;
 0000296B  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 0000296E  E8 FFFFE6CB			call	 Algorithms_Sorting_Proxy_BinaryInsertionSortEx

				;{205}:Program::TestSortingEx(sorter, "\nTesting BINARY INSERTION SORT Algorithm: worst: O(n^2), best: O(n lg n)");
 00002973  8D 05 00000263 R		lea	EAX,OFFSET $S000906
 00002979  50				push	EAX
 0000297A  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 0000297D  50				push	EAX
 0000297E  E8 0000052B			call	 Program_TestSortingEx
				;}
 00002983			$L000913:

 00002983  5F				pop	EDI
 00002984  5E				pop	ESI 
 00002985  5B				pop	EBX 
 00002986  8B E5			mov	ESP,EBP
 00002988  5D				pop	EBP 
 00002989  C3				ret	
 0000298A			Program_TestOOBinaryInsertionSort ENDP

 0000298A			Program_TestOOBubbleSort PROC NEAR 
				;void Program::TestOOBubbleSort(void);
 0000298A  55				push	EBP
 0000298B  8B EC			mov	EBP,ESP
 0000298D  83 EC 0C			sub	ESP,00000000Ch
 00002990  53				push	EBX 
 00002991  56				push	ESI 
 00002992  57				push	EDI 
				;{

				;{198}:sorter;
 00002993  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002996  E8 FFFFE797			call	 Algorithms_Sorting_Proxy_BubbleSortEx

				;{199}:Program::TestSortingEx(sorter, "\nTesting BUBBLE SORT Algorithm: O(n^2)");
 0000299B  8D 05 000002AC R		lea	EAX,OFFSET $S000888
 000029A1  50				push	EAX
 000029A2  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 000029A5  50				push	EAX
 000029A6  E8 00000503			call	 Program_TestSortingEx
				;}
 000029AB			$L000911:

 000029AB  5F				pop	EDI
 000029AC  5E				pop	ESI 
 000029AD  5B				pop	EBX 
 000029AE  8B E5			mov	ESP,EBP
 000029B0  5D				pop	EBP 
 000029B1  C3				ret	
 000029B2			Program_TestOOBubbleSort ENDP

 000029B2			Program_TestOOHeapSort PROC NEAR 
				;void Program::TestOOHeapSort(void);
 000029B2  55				push	EBP
 000029B3  8B EC			mov	EBP,ESP
 000029B5  83 EC 0C			sub	ESP,00000000Ch
 000029B8  53				push	EBX 
 000029B9  56				push	ESI 
 000029BA  57				push	EDI 
				;{

				;{216}:sorter;
 000029BB  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 000029BE  E8 FFFFE9AB			call	 Algorithms_Sorting_Proxy_HeapSortEx

				;{217}:Program::TestSortingEx(sorter, "\nTesting HEAP SORT Algorithm: O(n lg n)");
 000029C3  8D 05 000002D3 R		lea	EAX,OFFSET $S000903
 000029C9  50				push	EAX
 000029CA  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 000029CD  50				push	EAX
 000029CE  E8 000004DB			call	 Program_TestSortingEx
				;}
 000029D3			$L000917:

 000029D3  5F				pop	EDI
 000029D4  5E				pop	ESI 
 000029D5  5B				pop	EBX 
 000029D6  8B E5			mov	ESP,EBP
 000029D8  5D				pop	EBP 
 000029D9  C3				ret	
 000029DA			Program_TestOOHeapSort ENDP

 000029DA			Program_TestOOInsertionSort PROC NEAR 
				;void Program::TestOOInsertionSort(void);
 000029DA  55				push	EBP
 000029DB  8B EC			mov	EBP,ESP
 000029DD  83 EC 0C			sub	ESP,00000000Ch
 000029E0  53				push	EBX 
 000029E1  56				push	ESI 
 000029E2  57				push	EDI 
				;{

				;{186}:sorter;
 000029E3  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 000029E6  E8 FFFFEA70			call	 Algorithms_Sorting_Proxy_InsertionSortEx

				;{187}:Program::TestSortingEx(sorter, "\nTesting INSERTION SORT Algorithm: O(n^2) - faster");
 000029EB  8D 05 000002FB R		lea	EAX,OFFSET $S000891
 000029F1  50				push	EAX
 000029F2  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 000029F5  50				push	EAX
 000029F6  E8 000004B3			call	 Program_TestSortingEx
				;}
 000029FB			$L000907:

 000029FB  5F				pop	EDI
 000029FC  5E				pop	ESI 
 000029FD  5B				pop	EBX 
 000029FE  8B E5			mov	ESP,EBP
 00002A00  5D				pop	EBP 
 00002A01  C3				ret	
 00002A02			Program_TestOOInsertionSort ENDP

 00002A02			Program_TestOOMergeSort PROC NEAR 
				;void Program::TestOOMergeSort(void);
 00002A02  55				push	EBP
 00002A03  8B EC			mov	EBP,ESP
 00002A05  83 EC 10			sub	ESP,000000010h
 00002A08  53				push	EBX 
 00002A09  56				push	ESI 
 00002A0A  57				push	EDI 
				;{

				;{222}:sorter;
 00002A0B  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00002A0E  E8 FFFFF1A9			call	 Algorithms_Sorting_Proxy_TwoWayMergeSort

				;{223}:Program::TestSortingEx(sorter, "\nTesting MERGE SORT Algorithm: O(n lg n)");
 00002A13  8D 05 0000032E R		lea	EAX,OFFSET $S000900
 00002A19  50				push	EAX
 00002A1A  8D 45 F4			lea	EAX,dword ptr [EBP-000Ch]
 00002A1D  50				push	EAX
 00002A1E  E8 0000048B			call	 Program_TestSortingEx
				;}
 00002A23			$L000919:

 00002A23  5F				pop	EDI
 00002A24  5E				pop	ESI 
 00002A25  5B				pop	EBX 
 00002A26  8B E5			mov	ESP,EBP
 00002A28  5D				pop	EBP 
 00002A29  C3				ret	
 00002A2A			Program_TestOOMergeSort ENDP

 00002A2A			Program_TestOOQuickSort PROC NEAR 
				;void Program::TestOOQuickSort(void);
 00002A2A  55				push	EBP
 00002A2B  8B EC			mov	EBP,ESP
 00002A2D  83 EC 0C			sub	ESP,00000000Ch
 00002A30  53				push	EBX 
 00002A31  56				push	ESI 
 00002A32  57				push	EDI 
				;{

				;{210}:sorter;
 00002A33  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002A36  E8 FFFFEB43			call	 Algorithms_Sorting_Proxy_MedianOfThreeQuickSort

				;{211}:Program::TestSortingEx(sorter, "\nTesting QUICK SORT Algorithm: worst: O(n^2), best: O(n lg n)");
 00002A3B  8D 05 00000357 R		lea	EAX,OFFSET $S000897
 00002A41  50				push	EAX
 00002A42  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 00002A45  50				push	EAX
 00002A46  E8 00000463			call	 Program_TestSortingEx
				;}
 00002A4B			$L000915:

 00002A4B  5F				pop	EDI
 00002A4C  5E				pop	ESI 
 00002A4D  5B				pop	EBX 
 00002A4E  8B E5			mov	ESP,EBP
 00002A50  5D				pop	EBP 
 00002A51  C3				ret	
 00002A52			Program_TestOOQuickSort ENDP

 00002A52			Program_TestOOSelectionSort PROC NEAR 
				;void Program::TestOOSelectionSort(void);
 00002A52  55				push	EBP
 00002A53  8B EC			mov	EBP,ESP
 00002A55  83 EC 0C			sub	ESP,00000000Ch
 00002A58  53				push	EBX 
 00002A59  56				push	ESI 
 00002A5A  57				push	EDI 
				;{

				;{192}:sorter;
 00002A5B  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002A5E  E8 FFFFEE7F			call	 Algorithms_Sorting_Proxy_SelectionSortEx

				;{193}:Program::TestSortingEx(sorter, "\nTesting SELECTION SORT Algorithm: O(n^2)");
 00002A63  8D 05 00000395 R		lea	EAX,OFFSET $S000885
 00002A69  50				push	EAX
 00002A6A  8D 45 F8			lea	EAX,dword ptr [EBP-0008h]
 00002A6D  50				push	EAX
 00002A6E  E8 0000043B			call	 Program_TestSortingEx
				;}
 00002A73			$L000909:

 00002A73  5F				pop	EDI
 00002A74  5E				pop	ESI 
 00002A75  5B				pop	EBX 
 00002A76  8B E5			mov	ESP,EBP
 00002A78  5D				pop	EBP 
 00002A79  C3				ret	
 00002A7A			Program_TestOOSelectionSort ENDP

 00002A7A			Program_TestQuickSort PROC NEAR 
				;void Program::TestQuickSort(void);
 00002A7A  55				push	EBP
 00002A7B  8B EC			mov	EBP,ESP
 00002A7D  83 EC 08			sub	ESP,000000008h
 00002A80  53				push	EBX 
 00002A81  56				push	ESI 
 00002A82  57				push	EDI 
				;{

				;{160}:sorter;
 00002A83  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00002A86  E8 FFFFF432			call	 Algorithms_Sorting_QuickSort

				;{161}:Program::TestSortingAlgorithm(sorter, "\nTesting QUICK SORT Algorithm: worst: O(n^2), best: O(n lg n)");
 00002A8B  8D 05 00000357 R		lea	EAX,OFFSET $S000897
 00002A91  50				push	EAX
 00002A92  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 00002A95  50				push	EAX
 00002A96  E8 00000057			call	 Program_TestSortingAlgorithm
				;}
 00002A9B			$L000895:

 00002A9B  5F				pop	EDI
 00002A9C  5E				pop	ESI 
 00002A9D  5B				pop	EBX 
 00002A9E  8B E5			mov	ESP,EBP
 00002AA0  5D				pop	EBP 
 00002AA1  C3				ret	
 00002AA2			Program_TestQuickSort ENDP

 00002AA2			Program_TestSelectionSort PROC NEAR 
				;void Program::TestSelectionSort(void);
 00002AA2  55				push	EBP
 00002AA3  8B EC			mov	EBP,ESP
 00002AA5  83 EC 08			sub	ESP,000000008h
 00002AA8  53				push	EBX 
 00002AA9  56				push	ESI 
 00002AAA  57				push	EDI 
				;{

				;{136}:sorter;
 00002AAB  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00002AAE  E8 FFFFF4F3			call	 Algorithms_Sorting_SelectionSort

				;{137}:Program::TestSortingAlgorithm(sorter, "\nTesting SELECTION SORT Algorithm: O(n^2)");
 00002AB3  8D 05 00000395 R		lea	EAX,OFFSET $S000885
 00002AB9  50				push	EAX
 00002ABA  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 00002ABD  50				push	EAX
 00002ABE  E8 0000002F			call	 Program_TestSortingAlgorithm
				;}
 00002AC3			$L000883:

 00002AC3  5F				pop	EDI
 00002AC4  5E				pop	ESI 
 00002AC5  5B				pop	EBX 
 00002AC6  8B E5			mov	ESP,EBP
 00002AC8  5D				pop	EBP 
 00002AC9  C3				ret	
 00002ACA			Program_TestSelectionSort ENDP

 00002ACA			Program_TestShellSort PROC NEAR 
				;void Program::TestShellSort(void);
 00002ACA  55				push	EBP
 00002ACB  8B EC			mov	EBP,ESP
 00002ACD  83 EC 08			sub	ESP,000000008h
 00002AD0  53				push	EBX 
 00002AD1  56				push	ESI 
 00002AD2  57				push	EDI 
				;{

				;{154}:sorter;
 00002AD3  8D 4D FC			lea	ECX,dword ptr [EBP-0004h]
 00002AD6  E8 FFFFF67C			call	 Algorithms_Sorting_ShellSort

				;{155}:Program::TestSortingAlgorithm(sorter, "\nTesting SHELL SORT Algorithm: O(n^2) - fastest");
 00002ADB  8D 05 000003BF R		lea	EAX,OFFSET $S000894
 00002AE1  50				push	EAX
 00002AE2  8D 45 FC			lea	EAX,dword ptr [EBP-0004h]
 00002AE5  50				push	EAX
 00002AE6  E8 00000007			call	 Program_TestSortingAlgorithm
				;}
 00002AEB			$L000892:

 00002AEB  5F				pop	EDI
 00002AEC  5E				pop	ESI 
 00002AED  5B				pop	EBX 
 00002AEE  8B E5			mov	ESP,EBP
 00002AF0  5D				pop	EBP 
 00002AF1  C3				ret	
 00002AF2			Program_TestShellSort ENDP

 00002AF2			Program_TestSortingAlgorithm PROC NEAR 
				;void Program::TestSortingAlgorithm(Algorithms::Sorting::Sorter ref sorter, string title);
 00002AF2  55				push	EBP
 00002AF3  8B EC			mov	EBP,ESP
 00002AF5  81 EC 0000008C		sub	ESP,00000008Ch
 00002AFB  53				push	EBX 
 00002AFC  56				push	ESI 
 00002AFD  57				push	EDI 
				;{

				;{100}:Console::WriteLn(title);
 00002AFE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002B01  6A 00			push	000000000h
 00002B03  50				push	EAX 
 00002B04  E8 00000000 E		call	 Console_WriteString
 00002B09  E8 00000000 E		call	 Console_WriteCrLf 

				;{101}:array;
 00002B0E  8D 45 80			lea	EAX,dword ptr [EBP-0080h]

				;{103}:array[0]= 203.78;
 00002B11  33 C0			xor	EAX,EAX
 00002B13  6B C0 08			imul	EAX,EAX,000000008h
 00002B16  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002B1A  50				push	EAX
 00002B1B  BA C28F5C29			mov	EDX,0C28F5C29h
 00002B20  B8 406978F5			mov	EAX,0406978F5h 
 00002B25  50				push	EAX
 00002B26  52				push	EDX 
 00002B27  DD C0			ffree	st
 00002B29  DD 04 24			fld	qword ptr [ESP]
 00002B2C  5A				pop	EDX
 00002B2D  58				pop	EAX 
 00002B2E  5B				pop	EBX
 00002B2F  DD 1B			fstp	qword ptr [EBX]

				;{104}:array[1]= 12.345;
 00002B31  B8 00000001			mov	EAX,000000001h
 00002B36  6B C0 08			imul	EAX,EAX,000000008h
 00002B39  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002B3D  50				push	EAX
 00002B3E  BA D70A3D71			mov	EDX,0D70A3D71h
 00002B43  B8 4028B0A3			mov	EAX,04028B0A3h 
 00002B48  50				push	EAX
 00002B49  52				push	EDX 
 00002B4A  DD C0			ffree	st
 00002B4C  DD 04 24			fld	qword ptr [ESP]
 00002B4F  5A				pop	EDX
 00002B50  58				pop	EAX 
 00002B51  5B				pop	EBX
 00002B52  DD 1B			fstp	qword ptr [EBX]

				;{105}:array[2]= 10.4567;
 00002B54  B8 00000002			mov	EAX,000000002h
 00002B59  6B C0 08			imul	EAX,EAX,000000008h
 00002B5C  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002B60  50				push	EAX
 00002B61  BA 95182A99			mov	EDX,095182A99h
 00002B66  B8 4024E9D4			mov	EAX,04024E9D4h 
 00002B6B  50				push	EAX
 00002B6C  52				push	EDX 
 00002B6D  DD C0			ffree	st
 00002B6F  DD 04 24			fld	qword ptr [ESP]
 00002B72  5A				pop	EDX
 00002B73  58				pop	EAX 
 00002B74  5B				pop	EBX
 00002B75  DD 1B			fstp	qword ptr [EBX]

				;{106}:array[3]= 687.35;
 00002B77  B8 00000003			mov	EAX,000000003h
 00002B7C  6B C0 08			imul	EAX,EAX,000000008h
 00002B7F  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002B83  50				push	EAX
 00002B84  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 00002B89  B8 40857ACC			mov	EAX,040857ACCh 
 00002B8E  50				push	EAX
 00002B8F  52				push	EDX 
 00002B90  DD C0			ffree	st
 00002B92  DD 04 24			fld	qword ptr [ESP]
 00002B95  5A				pop	EDX
 00002B96  58				pop	EAX 
 00002B97  5B				pop	EBX
 00002B98  DD 1B			fstp	qword ptr [EBX]

				;{107}:array[4]= 5.7556789;
 00002B9A  B8 00000004			mov	EAX,000000004h
 00002B9F  6B C0 08			imul	EAX,EAX,000000008h
 00002BA2  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002BA6  50				push	EAX
 00002BA7  BA B0871BE8			mov	EDX,0B0871BE8h
 00002BAC  B8 401705D0			mov	EAX,0401705D0h 
 00002BB1  50				push	EAX
 00002BB2  52				push	EDX 
 00002BB3  DD C0			ffree	st
 00002BB5  DD 04 24			fld	qword ptr [ESP]
 00002BB8  5A				pop	EDX
 00002BB9  58				pop	EAX 
 00002BBA  5B				pop	EBX
 00002BBB  DD 1B			fstp	qword ptr [EBX]

				;{108}:array[5]= 9.985;
 00002BBD  B8 00000005			mov	EAX,000000005h
 00002BC2  6B C0 08			imul	EAX,EAX,000000008h
 00002BC5  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002BC9  50				push	EAX
 00002BCA  BA EB851EB8			mov	EDX,0EB851EB8h
 00002BCF  B8 4023F851			mov	EAX,04023F851h 
 00002BD4  50				push	EAX
 00002BD5  52				push	EDX 
 00002BD6  DD C0			ffree	st
 00002BD8  DD 04 24			fld	qword ptr [ESP]
 00002BDB  5A				pop	EDX
 00002BDC  58				pop	EAX 
 00002BDD  5B				pop	EBX
 00002BDE  DD 1B			fstp	qword ptr [EBX]

				;{109}:array[6]= 3.389;
 00002BE0  B8 00000006			mov	EAX,000000006h
 00002BE5  6B C0 08			imul	EAX,EAX,000000008h
 00002BE8  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002BEC  50				push	EAX
 00002BED  BA 083126EA			mov	EDX,0083126EAh
 00002BF2  B8 400B1CAC			mov	EAX,0400B1CACh 
 00002BF7  50				push	EAX
 00002BF8  52				push	EDX 
 00002BF9  DD C0			ffree	st
 00002BFB  DD 04 24			fld	qword ptr [ESP]
 00002BFE  5A				pop	EDX
 00002BFF  58				pop	EAX 
 00002C00  5B				pop	EBX
 00002C01  DD 1B			fstp	qword ptr [EBX]

				;{110}:array[7]= 478.2345;
 00002C03  B8 00000007			mov	EAX,000000007h
 00002C08  6B C0 08			imul	EAX,EAX,000000008h
 00002C0B  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002C0F  50				push	EAX
 00002C10  BA 83126E98			mov	EDX,083126E98h
 00002C15  B8 407DE3C0			mov	EAX,0407DE3C0h 
 00002C1A  50				push	EAX
 00002C1B  52				push	EDX 
 00002C1C  DD C0			ffree	st
 00002C1E  DD 04 24			fld	qword ptr [ESP]
 00002C21  5A				pop	EDX
 00002C22  58				pop	EAX 
 00002C23  5B				pop	EBX
 00002C24  DD 1B			fstp	qword ptr [EBX]

				;{111}:array[8]= 0.98754;
 00002C26  B8 00000008			mov	EAX,000000008h
 00002C2B  6B C0 08			imul	EAX,EAX,000000008h
 00002C2E  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002C32  50				push	EAX
 00002C33  BA 7C6FBD28			mov	EDX,07C6FBD28h
 00002C38  B8 3FEF99ED			mov	EAX,03FEF99EDh 
 00002C3D  50				push	EAX
 00002C3E  52				push	EDX 
 00002C3F  DD C0			ffree	st
 00002C41  DD 04 24			fld	qword ptr [ESP]
 00002C44  5A				pop	EDX
 00002C45  58				pop	EAX 
 00002C46  5B				pop	EBX
 00002C47  DD 1B			fstp	qword ptr [EBX]

				;{112}:array[9]= 356.2345;
 00002C49  B8 00000009			mov	EAX,000000009h
 00002C4E  6B C0 08			imul	EAX,EAX,000000008h
 00002C51  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002C55  50				push	EAX
 00002C56  BA 83126E98			mov	EDX,083126E98h
 00002C5B  B8 407643C0			mov	EAX,0407643C0h 
 00002C60  50				push	EAX
 00002C61  52				push	EDX 
 00002C62  DD C0			ffree	st
 00002C64  DD 04 24			fld	qword ptr [ESP]
 00002C67  5A				pop	EDX
 00002C68  58				pop	EAX 
 00002C69  5B				pop	EBX
 00002C6A  DD 1B			fstp	qword ptr [EBX]

				;{114}:array[0xA]= -1.75;
 00002C6C  B8 0000000A			mov	EAX,00000000Ah
 00002C71  6B C0 08			imul	EAX,EAX,000000008h
 00002C74  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002C78  50				push	EAX
 00002C79  33 D2			xor	EDX,EDX
 00002C7B  B8 3FFC0000			mov	EAX,03FFC0000h
 00002C80  50				push	EAX
 00002C81  52				push	EDX 
 00002C82  DD 04 24			fld	qword ptr [ESP]
 00002C85  D9 E0			fchs
 00002C87  DD 1C 24			fstp	qword ptr [ESP]
 00002C8A  DD C0			ffree	st
 00002C8C  DD 04 24			fld	qword ptr [ESP]
 00002C8F  5A				pop	EDX
 00002C90  58				pop	EAX 
 00002C91  5B				pop	EBX
 00002C92  DD 1B			fstp	qword ptr [EBX]

				;{115}:array[0xB]= 47.977;
 00002C94  B8 0000000B			mov	EAX,00000000Bh
 00002C99  6B C0 08			imul	EAX,EAX,000000008h
 00002C9C  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002CA0  50				push	EAX
 00002CA1  BA 56041894			mov	EDX,056041894h
 00002CA6  B8 4047FD0E			mov	EAX,04047FD0Eh 
 00002CAB  50				push	EAX
 00002CAC  52				push	EDX 
 00002CAD  DD C0			ffree	st
 00002CAF  DD 04 24			fld	qword ptr [ESP]
 00002CB2  5A				pop	EDX
 00002CB3  58				pop	EAX 
 00002CB4  5B				pop	EBX
 00002CB5  DD 1B			fstp	qword ptr [EBX]

				;{116}:array[0xC]= -0.67;
 00002CB7  B8 0000000C			mov	EAX,00000000Ch
 00002CBC  6B C0 08			imul	EAX,EAX,000000008h
 00002CBF  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002CC3  50				push	EAX
 00002CC4  BA D70A3D71			mov	EDX,0D70A3D71h
 00002CC9  B8 3FE570A3			mov	EAX,03FE570A3h 
 00002CCE  50				push	EAX
 00002CCF  52				push	EDX 
 00002CD0  DD 04 24			fld	qword ptr [ESP]
 00002CD3  D9 E0			fchs
 00002CD5  DD 1C 24			fstp	qword ptr [ESP]
 00002CD8  DD C0			ffree	st
 00002CDA  DD 04 24			fld	qword ptr [ESP]
 00002CDD  5A				pop	EDX
 00002CDE  58				pop	EAX 
 00002CDF  5B				pop	EBX
 00002CE0  DD 1B			fstp	qword ptr [EBX]

				;{117}:array[0xD]= 4.758;
 00002CE2  B8 0000000D			mov	EAX,00000000Dh
 00002CE7  6B C0 08			imul	EAX,EAX,000000008h
 00002CEA  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002CEE  50				push	EAX
 00002CEF  BA 26E978D5			mov	EDX,026E978D5h
 00002CF4  B8 40130831			mov	EAX,040130831h 
 00002CF9  50				push	EAX
 00002CFA  52				push	EDX 
 00002CFB  DD C0			ffree	st
 00002CFD  DD 04 24			fld	qword ptr [ESP]
 00002D00  5A				pop	EDX
 00002D01  58				pop	EAX 
 00002D02  5B				pop	EBX
 00002D03  DD 1B			fstp	qword ptr [EBX]

				;{118}:array[0xE]= 1.2345;
 00002D05  B8 0000000E			mov	EAX,00000000Eh
 00002D0A  6B C0 08			imul	EAX,EAX,000000008h
 00002D0D  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002D11  50				push	EAX
 00002D12  BA 126E978E			mov	EDX,0126E978Eh
 00002D17  B8 3FF3C083			mov	EAX,03FF3C083h 
 00002D1C  50				push	EAX
 00002D1D  52				push	EDX 
 00002D1E  DD C0			ffree	st
 00002D20  DD 04 24			fld	qword ptr [ESP]
 00002D23  5A				pop	EDX
 00002D24  58				pop	EAX 
 00002D25  5B				pop	EBX
 00002D26  DD 1B			fstp	qword ptr [EBX]

				;{119}:array[0xF]= 2.8789;
 00002D28  B8 0000000F			mov	EAX,00000000Fh
 00002D2D  6B C0 08			imul	EAX,EAX,000000008h
 00002D30  8D 44 28 80			lea	EAX,dword ptr [EBP+EAX-0080h]
 00002D34  50				push	EAX
 00002D35  BA B923A29D			mov	EDX,0B923A29Dh
 00002D3A  B8 400707FC			mov	EAX,0400707FCh 
 00002D3F  50				push	EAX
 00002D40  52				push	EDX 
 00002D41  DD C0			ffree	st
 00002D43  DD 04 24			fld	qword ptr [ESP]
 00002D46  5A				pop	EDX
 00002D47  58				pop	EAX 
 00002D48  5B				pop	EBX
 00002D49  DD 1B			fstp	qword ptr [EBX]

				;{121}:n= sizeof (array) / sizeof (double);
 00002D4B  B8 00000080			mov	EAX,000000080h
 00002D50  50				push	EAX
 00002D51  B8 00000008			mov	EAX,000000008h
 00002D56  9B DB E2			fclex
 00002D59  50				push	EAX
 00002D5A  E8 00000000 E		call	 FloatingPoint_FromInt
 00002D5F  50				push	EAX
 00002D60  52				push	EDX 
 00002D61  DD 04 24			fld	qword ptr [ESP]
 00002D64  59				pop	ECX
 00002D65  59				pop	ECX 
 00002D66  E8 00000000 E		call	 FloatingPoint_FromInt
 00002D6B  50				push	EAX
 00002D6C  52				push	EDX 
 00002D6D  DC 3C 24			fdivr	qword ptr [ESP]
 00002D70  DD 1C 24			fstp	qword ptr [ESP]
 00002D73  E8 00000000 E		call	 FloatingPoint_ToInt
 00002D78  89 85 FFFFFF7C		mov	dword ptr [EBP-0084h],EAX

				;{123}:Console::WriteLn("\nBefore sorting...");
 00002D7E  8D 05 00000200 R		lea	EAX,OFFSET $S000878
 00002D84  6A 00			push	000000000h
 00002D86  50				push	EAX 
 00002D87  E8 00000000 E		call	 Console_WriteString
 00002D8C  E8 00000000 E		call	 Console_WriteCrLf 

				;{124}:for(x= 0; x < n; x++ )
 00002D91  33 C0			xor	EAX,EAX
 00002D93  89 85 FFFFFF78		mov	dword ptr [EBP-0088h],EAX
 00002D99  EB 0C			jmp	OFFSET $L001174
 00002D9B			$L001175:
 00002D9B  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-136]
 00002DA1  FF 85 FFFFFF78		inc	dword ptr [EBP-136]
 00002DA7			$L001174:
 00002DA7  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002DAD  50				push	EAX
 00002DAE  8B 85 FFFFFF7C		mov	EAX,dword ptr [EBP-0084h]
 00002DB4  5A				pop	EDX
 00002DB5  3B D0			cmp	EDX,EAX
 00002DB7  0F 9C C0			setl	AL
 00002DBA  84 C0			test	AL,AL
 00002DBC  74 4A			jz	OFFSET $L001176

				;{125}:Console::WriteLn("array[", x, "] = ", array[x]);
 00002DBE  8D 05 000003F4 R		lea	EAX,OFFSET $S000880
 00002DC4  6A 00			push	000000000h
 00002DC6  50				push	EAX 
 00002DC7  E8 00000000 E		call	 Console_WriteString
 00002DCC  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002DD2  50				push	EAX 
 00002DD3  E8 00000000 E		call	 Console_WriteInteger 
 00002DD8  8D 05 000003EF R		lea	EAX,OFFSET $S000881
 00002DDE  6A 00			push	000000000h 
 00002DE0  50				push	EAX 
 00002DE1  E8 00000000 E		call	 Console_WriteString 
 00002DE6  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002DEC  6B C0 08			imul	EAX,EAX,000000008h
 00002DEF  8B 54 28 80			mov	EDX,dword ptr [EBP+EAX-0080h]
 00002DF3  83 C0 04			add	EAX,000000004h ;low part
 00002DF6  8B 44 28 80			mov	EAX,dword ptr [EBP+EAX-0080h] 
 00002DFA  50				push	EAX 
 00002DFB  52				push	EDX 
 00002DFC  E8 00000000 E		call	 Console_WriteDouble 
 00002E01  E8 00000000 E		call	 Console_WriteCrLf 
 00002E06  EB 93			jmp	OFFSET $L001175 
 00002E08			$L001176:

				;{127}:sorter.Sort(array, n);
 00002E08  8B 85 FFFFFF7C		mov	EAX,dword ptr [EBP-0084h]
 00002E0E  50				push	EAX 
 00002E0F  8D 45 80			lea	EAX,dword ptr [EBP-0080h]
 00002E12  50				push	EAX
 00002E13  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00002E16  8B 11			mov	EDX,dword ptr [ECX]
 00002E18  FF 52 08			call	dword ptr [EDX+0008h]

				;{129}:Console::WriteLn("\nAfter sorting...");
 00002E1B  8D 05 000001DA R		lea	EAX,OFFSET $S000882
 00002E21  6A 00			push	000000000h
 00002E23  50				push	EAX 
 00002E24  E8 00000000 E		call	 Console_WriteString
 00002E29  E8 00000000 E		call	 Console_WriteCrLf 

				;{130}:for(x= 0; x < n; x++ )
 00002E2E  33 C0			xor	EAX,EAX
 00002E30  89 85 FFFFFF78		mov	dword ptr [EBP-0088h],EAX
 00002E36  EB 0C			jmp	OFFSET $L001177
 00002E38			$L001178:
 00002E38  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-136]
 00002E3E  FF 85 FFFFFF78		inc	dword ptr [EBP-136]
 00002E44			$L001177:
 00002E44  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002E4A  50				push	EAX
 00002E4B  8B 85 FFFFFF7C		mov	EAX,dword ptr [EBP-0084h]
 00002E51  5A				pop	EDX
 00002E52  3B D0			cmp	EDX,EAX
 00002E54  0F 9C C0			setl	AL
 00002E57  84 C0			test	AL,AL
 00002E59  74 4A			jz	OFFSET $L001179

				;{131}:Console::WriteLn("array[", x, "] = ", array[x]);
 00002E5B  8D 05 000003F4 R		lea	EAX,OFFSET $S000880
 00002E61  6A 00			push	000000000h
 00002E63  50				push	EAX 
 00002E64  E8 00000000 E		call	 Console_WriteString
 00002E69  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002E6F  50				push	EAX 
 00002E70  E8 00000000 E		call	 Console_WriteInteger 
 00002E75  8D 05 000003EF R		lea	EAX,OFFSET $S000881
 00002E7B  6A 00			push	000000000h 
 00002E7D  50				push	EAX 
 00002E7E  E8 00000000 E		call	 Console_WriteString 
 00002E83  8B 85 FFFFFF78		mov	EAX,dword ptr [EBP-0088h]
 00002E89  6B C0 08			imul	EAX,EAX,000000008h
 00002E8C  8B 54 28 80			mov	EDX,dword ptr [EBP+EAX-0080h]
 00002E90  83 C0 04			add	EAX,000000004h ;low part
 00002E93  8B 44 28 80			mov	EAX,dword ptr [EBP+EAX-0080h] 
 00002E97  50				push	EAX 
 00002E98  52				push	EDX 
 00002E99  E8 00000000 E		call	 Console_WriteDouble 
 00002E9E  E8 00000000 E		call	 Console_WriteCrLf 
 00002EA3  EB 93			jmp	OFFSET $L001178 
 00002EA5			$L001179:
				;}
 00002EA5			$L000851:

 00002EA5  5F				pop	EDI
 00002EA6  5E				pop	ESI 
 00002EA7  5B				pop	EBX 
 00002EA8  8B E5			mov	ESP,EBP
 00002EAA  5D				pop	EBP 
 00002EAB  C2 0008			retn	000000008h
 00002EAE			Program_TestSortingAlgorithm ENDP

 00002EAE			Program_TestSortingEx PROC NEAR 
				;void Program::TestSortingEx(Algorithms::Sorting::Proxy::SorterEx ref sorter, string title);
 00002EAE  55				push	EBP
 00002EAF  8B EC			mov	EBP,ESP
 00002EB1  83 EC 24			sub	ESP,000000024h
 00002EB4  53				push	EBX 
 00002EB5  56				push	ESI 
 00002EB6  57				push	EDI 
				;{

				;{12}:Console::WriteLn(title);
 00002EB7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002EBA  6A 00			push	000000000h
 00002EBC  50				push	EAX 
 00002EBD  E8 00000000 E		call	 Console_WriteString
 00002EC2  E8 00000000 E		call	 Console_WriteCrLf 

				;{13}:array(9);
 00002EC7  B8 00000009			mov	EAX,000000009h
 00002ECC  50				push	EAX
 00002ECD  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00002ED0  E8 FFFFDB0B			call	 Algorithms_Sorting_Proxy_ArrayOfAutomobile

				;{15}:tmp= array.getAt(0);
 00002ED5  33 C0			xor	EAX,EAX
 00002ED7  50				push	EAX
 00002ED8  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00002EDB  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00002EDE  FF 52 04			call	dword ptr [EDX+0004h]
 00002EE1  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00002EE4  89 03			mov	dword ptr [EBX],EAX

				;{16}:autom= dynamic_cast(tmp);
 00002EE6  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00002EE9  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00002EEC  89 03			mov	dword ptr [EBX],EAX

				;{18}:autom.Year= 2009;
 00002EEE  B8 000007D9			mov	EAX,0000007D9h
 00002EF3  50				push	EAX
 00002EF4  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002EF7  E8 FFFFE015			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{19}:autom.Cost= 260798.0;
 00002EFC  33 D2			xor	EDX,EDX
 00002EFE  B8 410FD5F0			mov	EAX,0410FD5F0h
 00002F03  50				push	EAX
 00002F04  52				push	EDX 
 00002F05  DD C0			ffree	st
 00002F07  DD 04 24			fld	qword ptr [ESP]
 00002F0A  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F0D  E8 FFFFDF73			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{20}:autom.Model= "Bentley";
 00002F12  8D 05 00000118 R		lea	EAX,OFFSET $S000816
 00002F18  50				push	EAX
 00002F19  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F1C  E8 FFFFDFC0			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{22}:tmp= array.getAt(1);
 00002F21  B8 00000001			mov	EAX,000000001h
 00002F26  50				push	EAX
 00002F27  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00002F2A  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00002F2D  FF 52 04			call	dword ptr [EDX+0004h]
 00002F30  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00002F33  89 03			mov	dword ptr [EBX],EAX

				;{23}:autom= dynamic_cast(tmp);
 00002F35  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00002F38  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00002F3B  89 03			mov	dword ptr [EBX],EAX

				;{25}:autom.Year= 2006;
 00002F3D  B8 000007D6			mov	EAX,0000007D6h
 00002F42  50				push	EAX
 00002F43  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F46  E8 FFFFDFC6			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{26}:autom.Cost= 105000.0;
 00002F4B  33 D2			xor	EDX,EDX
 00002F4D  B8 40F9A280			mov	EAX,040F9A280h
 00002F52  50				push	EAX
 00002F53  52				push	EDX 
 00002F54  DD C0			ffree	st
 00002F56  DD 04 24			fld	qword ptr [ESP]
 00002F59  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F5C  E8 FFFFDF24			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{27}:autom.Model= "Range Rover";
 00002F61  8D 05 00000197 R		lea	EAX,OFFSET $S000819
 00002F67  50				push	EAX
 00002F68  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F6B  E8 FFFFDF71			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{29}:tmp= array.getAt(2);
 00002F70  B8 00000002			mov	EAX,000000002h
 00002F75  50				push	EAX
 00002F76  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00002F79  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00002F7C  FF 52 04			call	dword ptr [EDX+0004h]
 00002F7F  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00002F82  89 03			mov	dword ptr [EBX],EAX

				;{30}:autom= dynamic_cast(tmp);
 00002F84  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00002F87  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00002F8A  89 03			mov	dword ptr [EBX],EAX

				;{32}:autom.Year= 2005;
 00002F8C  B8 000007D5			mov	EAX,0000007D5h
 00002F91  50				push	EAX
 00002F92  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002F95  E8 FFFFDF77			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{33}:autom.Cost= 21400.0;
 00002F9A  33 D2			xor	EDX,EDX
 00002F9C  B8 40D4E600			mov	EAX,040D4E600h
 00002FA1  50				push	EAX
 00002FA2  52				push	EDX 
 00002FA3  DD C0			ffree	st
 00002FA5  DD 04 24			fld	qword ptr [ESP]
 00002FA8  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002FAB  E8 FFFFDED5			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{34}:autom.Model= "Passat";
 00002FB0  8D 05 00000190 R		lea	EAX,OFFSET $S000822
 00002FB6  50				push	EAX
 00002FB7  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002FBA  E8 FFFFDF22			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{36}:tmp= array.getAt(3);
 00002FBF  B8 00000003			mov	EAX,000000003h
 00002FC4  50				push	EAX
 00002FC5  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00002FC8  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00002FCB  FF 52 04			call	dword ptr [EDX+0004h]
 00002FCE  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00002FD1  89 03			mov	dword ptr [EBX],EAX

				;{37}:autom= dynamic_cast(tmp);
 00002FD3  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00002FD6  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00002FD9  89 03			mov	dword ptr [EBX],EAX

				;{39}:autom.Year= 2001;
 00002FDB  B8 000007D1			mov	EAX,0000007D1h
 00002FE0  50				push	EAX
 00002FE1  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002FE4  E8 FFFFDF28			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{40}:autom.Cost= 13900.0;
 00002FE9  33 D2			xor	EDX,EDX
 00002FEB  B8 40CB2600			mov	EAX,040CB2600h
 00002FF0  50				push	EAX
 00002FF1  52				push	EDX 
 00002FF2  DD C0			ffree	st
 00002FF4  DD 04 24			fld	qword ptr [ESP]
 00002FF7  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00002FFA  E8 FFFFDE86			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{41}:autom.Model= "Toyota Camry";
 00002FFF  8D 05 000001BA R		lea	EAX,OFFSET $S000825
 00003005  50				push	EAX
 00003006  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003009  E8 FFFFDED3			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{43}:tmp= array.getAt(4);
 0000300E  B8 00000004			mov	EAX,000000004h
 00003013  50				push	EAX
 00003014  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00003017  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 0000301A  FF 52 04			call	dword ptr [EDX+0004h]
 0000301D  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003020  89 03			mov	dword ptr [EBX],EAX

				;{44}:autom= dynamic_cast(tmp);
 00003022  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003025  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00003028  89 03			mov	dword ptr [EBX],EAX

				;{46}:autom.Year= 2008;
 0000302A  B8 000007D8			mov	EAX,0000007D8h
 0000302F  50				push	EAX
 00003030  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003033  E8 FFFFDED9			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{47}:autom.Cost= 150000.0;
 00003038  33 D2			xor	EDX,EDX
 0000303A  B8 41024F80			mov	EAX,041024F80h
 0000303F  50				push	EAX
 00003040  52				push	EDX 
 00003041  DD C0			ffree	st
 00003043  DD 04 24			fld	qword ptr [ESP]
 00003046  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003049  E8 FFFFDE37			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{48}:autom.Model= "Hummer";
 0000304E  8D 05 0000014B R		lea	EAX,OFFSET $S000829
 00003054  50				push	EAX
 00003055  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003058  E8 FFFFDE84			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{50}:tmp= array.getAt(5);
 0000305D  B8 00000005			mov	EAX,000000005h
 00003062  50				push	EAX
 00003063  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00003066  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00003069  FF 52 04			call	dword ptr [EDX+0004h]
 0000306C  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000306F  89 03			mov	dword ptr [EBX],EAX

				;{51}:autom= dynamic_cast(tmp);
 00003071  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003074  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00003077  89 03			mov	dword ptr [EBX],EAX

				;{53}:autom.Year= 2009;
 00003079  B8 000007D9			mov	EAX,0000007D9h
 0000307E  50				push	EAX
 0000307F  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003082  E8 FFFFDE8A			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{54}:autom.Cost= 190000.0;
 00003087  33 D2			xor	EDX,EDX
 00003089  B8 41073180			mov	EAX,041073180h
 0000308E  50				push	EAX
 0000308F  52				push	EDX 
 00003090  DD C0			ffree	st
 00003092  DD 04 24			fld	qword ptr [ESP]
 00003095  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003098  E8 FFFFDDE8			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{55}:autom.Model= "Cadillac";
 0000309D  8D 05 00000120 R		lea	EAX,OFFSET $S000832
 000030A3  50				push	EAX
 000030A4  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000030A7  E8 FFFFDE35			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{57}:tmp= array.getAt(6);
 000030AC  B8 00000006			mov	EAX,000000006h
 000030B1  50				push	EAX
 000030B2  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 000030B5  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000030B8  FF 52 04			call	dword ptr [EDX+0004h]
 000030BB  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030BE  89 03			mov	dword ptr [EBX],EAX

				;{58}:autom= dynamic_cast(tmp);
 000030C0  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000030C3  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 000030C6  89 03			mov	dword ptr [EBX],EAX

				;{60}:autom.Year= 2007;
 000030C8  B8 000007D7			mov	EAX,0000007D7h
 000030CD  50				push	EAX
 000030CE  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000030D1  E8 FFFFDE3B			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{61}:autom.Cost= 1500000.0;
 000030D6  33 D2			xor	EDX,EDX
 000030D8  B8 4136E360			mov	EAX,04136E360h
 000030DD  50				push	EAX
 000030DE  52				push	EDX 
 000030DF  DD C0			ffree	st
 000030E1  DD 04 24			fld	qword ptr [ESP]
 000030E4  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000030E7  E8 FFFFDD99			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{62}:autom.Model= "Maseratti";
 000030EC  8D 05 00000158 R		lea	EAX,OFFSET $S000836
 000030F2  50				push	EAX
 000030F3  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000030F6  E8 FFFFDDE6			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{64}:tmp= array.getAt(7);
 000030FB  B8 00000007			mov	EAX,000000007h
 00003100  50				push	EAX
 00003101  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00003104  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00003107  FF 52 04			call	dword ptr [EDX+0004h]
 0000310A  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000310D  89 03			mov	dword ptr [EBX],EAX

				;{65}:autom= dynamic_cast(tmp);
 0000310F  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003112  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00003115  89 03			mov	dword ptr [EBX],EAX

				;{67}:autom.Year= 2004;
 00003117  B8 000007D4			mov	EAX,0000007D4h
 0000311C  50				push	EAX
 0000311D  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003120  E8 FFFFDDEC			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{68}:autom.Cost= 17500.0;
 00003125  33 D2			xor	EDX,EDX
 00003127  B8 40D11700			mov	EAX,040D11700h
 0000312C  50				push	EAX
 0000312D  52				push	EDX 
 0000312E  DD C0			ffree	st
 00003130  DD 04 24			fld	qword ptr [ESP]
 00003133  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003136  E8 FFFFDD4A			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{69}:autom.Model= "Honda Civic";
 0000313B  8D 05 0000013F R		lea	EAX,OFFSET $S000840
 00003141  50				push	EAX
 00003142  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003145  E8 FFFFDD97			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{71}:tmp= array.getAt(8);
 0000314A  B8 00000008			mov	EAX,000000008h
 0000314F  50				push	EAX
 00003150  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00003153  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00003156  FF 52 04			call	dword ptr [EDX+0004h]
 00003159  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000315C  89 03			mov	dword ptr [EBX],EAX

				;{72}:autom= dynamic_cast(tmp);
 0000315E  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003161  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 00003164  89 03			mov	dword ptr [EBX],EAX

				;{74}:autom.Year= 2006;
 00003166  B8 000007D6			mov	EAX,0000007D6h
 0000316B  50				push	EAX
 0000316C  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 0000316F  E8 FFFFDD9D			call	 Algorithms_Sorting_Proxy_Automobile_put_Year

				;{75}:autom.Cost= 15500.0;
 00003174  33 D2			xor	EDX,EDX
 00003176  B8 40CE4600			mov	EAX,040CE4600h
 0000317B  50				push	EAX
 0000317C  52				push	EDX 
 0000317D  DD C0			ffree	st
 0000317F  DD 04 24			fld	qword ptr [ESP]
 00003182  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003185  E8 FFFFDCFB			call	 Algorithms_Sorting_Proxy_Automobile_put_Cost

				;{76}:autom.Model= "Jetta";
 0000318A  8D 05 00000152 R		lea	EAX,OFFSET $S000843
 00003190  50				push	EAX
 00003191  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003194  E8 FFFFDD48			call	 Algorithms_Sorting_Proxy_Automobile_put_Model

				;{78}:n= array.length;
 00003199  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 0000319C  E8 FFFFD809			call	 Algorithms_Sorting_Proxy_Array_get_length
 000031A1  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{80}:Console::WriteLn("\nBefore Sorting...\n");
 000031A4  8D 05 000001EC R		lea	EAX,OFFSET $S000845
 000031AA  6A 00			push	000000000h
 000031AC  50				push	EAX 
 000031AD  E8 00000000 E		call	 Console_WriteString
 000031B2  E8 00000000 E		call	 Console_WriteCrLf 

				;{81}:for(i= 0; i < n; i++ )
 000031B7  33 C0			xor	EAX,EAX
 000031B9  89 45 E0			mov	dword ptr [EBP-0020h],EAX
 000031BC  EB 06			jmp	OFFSET $L001180
 000031BE			$L001181:
 000031BE  8B 45 E0			mov	EAX,dword ptr [EBP-32]
 000031C1  FF 45 E0			inc	dword ptr [EBP-32]
 000031C4			$L001180:
 000031C4  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000031C7  50				push	EAX
 000031C8  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000031CB  5A				pop	EDX
 000031CC  3B D0			cmp	EDX,EAX
 000031CE  0F 9C C0			setl	AL
 000031D1  84 C0			test	AL,AL
 000031D3  74 7B			jz	OFFSET $L001182
				;{

				;{83}:tmp= array.getAt(i);
 000031D5  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000031D8  50				push	EAX
 000031D9  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 000031DC  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 000031DF  FF 52 04			call	dword ptr [EDX+0004h]
 000031E2  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000031E5  89 03			mov	dword ptr [EBX],EAX

				;{84}:autom= dynamic_cast(tmp);
 000031E7  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000031EA  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 000031ED  89 03			mov	dword ptr [EBX],EAX

				;{85}:Console::WriteLn("Auto :\t", autom.Model, "  ,\tYear :\t\t", autom.Year, ", Cost:\t", autom.Cost);
 000031EF  8D 05 00000110 R		lea	EAX,OFFSET $S000847
 000031F5  6A 00			push	000000000h
 000031F7  50				push	EAX 
 000031F8  E8 00000000 E		call	 Console_WriteString
 000031FD  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 00003200  E8 FFFFDCC6			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 00003205  6A 00			push	000000000h 
 00003207  50				push	EAX 
 00003208  E8 00000000 E		call	 Console_WriteString 
 0000320D  8D 05 000000F8 R		lea	EAX,OFFSET $S000848
 00003213  6A 00			push	000000000h 
 00003215  50				push	EAX 
 00003216  E8 00000000 E		call	 Console_WriteString 
 0000321B  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 0000321E  E8 FFFFDCD7			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 00003223  50				push	EAX 
 00003224  E8 00000000 E		call	 Console_WriteInteger 
 00003229  8D 05 00000107 R		lea	EAX,OFFSET $S000849
 0000322F  6A 00			push	000000000h 
 00003231  50				push	EAX 
 00003232  E8 00000000 E		call	 Console_WriteString 
 00003237  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 0000323A  E8 FFFFDC2D			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 0000323F  50				push	EAX 
 00003240  52				push	EDX 
 00003241  E8 00000000 E		call	 Console_WriteDouble 
 00003246  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000324B  E9 FFFFFF6E			jmp	OFFSET $L001181 
 00003250			$L001182:

				;{88}:sorter.Sort(array);
 00003250  8D 45 F0			lea	EAX,dword ptr [EBP-0010h]
 00003253  50				push	EAX
 00003254  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00003257  8B 51 04			mov	EDX,dword ptr [ECX+0004h]
 0000325A  FF 12			call	dword ptr [EDX]

				;{89}:Console::WriteLn("\nAfter Sorting...\n");
 0000325C  8D 05 000001C7 R		lea	EAX,OFFSET $S000850
 00003262  6A 00			push	000000000h
 00003264  50				push	EAX 
 00003265  E8 00000000 E		call	 Console_WriteString
 0000326A  E8 00000000 E		call	 Console_WriteCrLf 

				;{90}:for(i= 0; i < n; i++ )
 0000326F  33 C0			xor	EAX,EAX
 00003271  89 45 E0			mov	dword ptr [EBP-0020h],EAX
 00003274  EB 06			jmp	OFFSET $L001183
 00003276			$L001184:
 00003276  8B 45 E0			mov	EAX,dword ptr [EBP-32]
 00003279  FF 45 E0			inc	dword ptr [EBP-32]
 0000327C			$L001183:
 0000327C  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000327F  50				push	EAX
 00003280  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00003283  5A				pop	EDX
 00003284  3B D0			cmp	EDX,EAX
 00003286  0F 9C C0			setl	AL
 00003289  84 C0			test	AL,AL
 0000328B  74 7B			jz	OFFSET $L001185
				;{

				;{92}:tmp= array.getAt(i);
 0000328D  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 00003290  50				push	EAX
 00003291  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 00003294  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch]
 00003297  FF 52 04			call	dword ptr [EDX+0004h]
 0000329A  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000329D  89 03			mov	dword ptr [EBX],EAX

				;{93}:autom= dynamic_cast(tmp);
 0000329F  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000032A2  8D 5D E8			lea	EBX,dword ptr [EBP-0018h]
 000032A5  89 03			mov	dword ptr [EBX],EAX

				;{94}:Console::WriteLn("Auto :\t", autom.Model, "  ,\tYear :\t\t", autom.Year, ", Cost:\t", autom.Cost);
 000032A7  8D 05 00000110 R		lea	EAX,OFFSET $S000847
 000032AD  6A 00			push	000000000h
 000032AF  50				push	EAX 
 000032B0  E8 00000000 E		call	 Console_WriteString
 000032B5  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000032B8  E8 FFFFDC0E			call	 Algorithms_Sorting_Proxy_Automobile_get_Model
 000032BD  6A 00			push	000000000h 
 000032BF  50				push	EAX 
 000032C0  E8 00000000 E		call	 Console_WriteString 
 000032C5  8D 05 000000F8 R		lea	EAX,OFFSET $S000848
 000032CB  6A 00			push	000000000h 
 000032CD  50				push	EAX 
 000032CE  E8 00000000 E		call	 Console_WriteString 
 000032D3  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000032D6  E8 FFFFDC1F			call	 Algorithms_Sorting_Proxy_Automobile_get_Year
 000032DB  50				push	EAX 
 000032DC  E8 00000000 E		call	 Console_WriteInteger 
 000032E1  8D 05 00000107 R		lea	EAX,OFFSET $S000849
 000032E7  6A 00			push	000000000h 
 000032E9  50				push	EAX 
 000032EA  E8 00000000 E		call	 Console_WriteString 
 000032EF  8B 4D E8			mov	ECX,dword ptr [EBP-24]
 000032F2  E8 FFFFDB75			call	 Algorithms_Sorting_Proxy_Automobile_get_Cost
 000032F7  50				push	EAX 
 000032F8  52				push	EDX 
 000032F9  E8 00000000 E		call	 Console_WriteDouble 
 000032FE  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00003303  E9 FFFFFF6E			jmp	OFFSET $L001184 
 00003308			$L001185:
				;}
 00003308			$L000807:
 00003308  8D 4D F0			lea	ECX,dword ptr [EBP-0010h]
 0000330B  8B 41 0C			mov	EAX,dword ptr [ECX+000Ch]
 0000330E  FF 50 10			call	dword ptr [EAX+0010h]
 00003311			$L001186:

 00003311  5F				pop	EDI
 00003312  5E				pop	ESI 
 00003313  5B				pop	EBX 
 00003314  8B E5			mov	ESP,EBP
 00003316  5D				pop	EBP 
 00003317  C2 0008			retn	000000008h
 0000331A			Program_TestSortingEx ENDP

 0000331A			__member_Init@Algorithms_Sorting_Proxy_Array PROC NEAR

 0000331A  55				push	EBP
 0000331B  8B EC			mov	EBP,ESP
 0000331D  51				push	ECX 
 0000331E  53				push	EBX 
 0000331F  56				push	ESI 
 00003320  57				push	EDI 
 00003321  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:array= null;
 00003324  33 C0			xor	EAX,EAX
 00003326  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003329  89 01			mov	dword ptr [ECX],EAX

				;{0}:_length= 0;
 0000332B  33 C0			xor	EAX,EAX
 0000332D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003330  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:_item_size= 0;
 00003333  33 C0			xor	EAX,EAX
 00003335  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003338  89 41 08			mov	dword ptr [ECX+0008h],EAX

 0000333B  5F				pop	EDI
 0000333C  5E				pop	ESI 
 0000333D  5B				pop	EBX 
 0000333E  8B E5			mov	ESP,EBP
 00003340  5D				pop	EBP 
 00003341  C3				ret	
 00003342			__member_Init@Algorithms_Sorting_Proxy_Array ENDP
 00003342			__member_Init@Algorithms_Sorting_Proxy_Automobile PROC NEAR

 00003342  55				push	EBP
 00003343  8B EC			mov	EBP,ESP
 00003345  51				push	ECX 
 00003346  53				push	EBX 
 00003347  56				push	ESI 
 00003348  57				push	EDI 
 00003349  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:_cost= 0.0;
 0000334C  D9 EE			fldz
 0000334E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003351  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:_model= "";
 00003354  8D 05 00000105 R		lea	EAX,OFFSET $S000669
 0000335A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000335D  89 41 0C			mov	dword ptr [ECX+000Ch],EAX

				;{0}:_year= 0;
 00003360  33 C0			xor	EAX,EAX
 00003362  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003365  66| 89 41 10			mov	word ptr [ECX+0010h],AX

 00003369  5F				pop	EDI
 0000336A  5E				pop	ESI 
 0000336B  5B				pop	EBX 
 0000336C  8B E5			mov	ESP,EBP
 0000336E  5D				pop	EBP 
 0000336F  C3				ret	
 00003370			__member_Init@Algorithms_Sorting_Proxy_Automobile ENDP
 00003370			__member_Init@Algorithms_Sorting_Proxy_QuickSortEx PROC NEAR

 00003370  55				push	EBP
 00003371  8B EC			mov	EBP,ESP
 00003373  51				push	ECX 
 00003374  53				push	EBX 
 00003375  56				push	ESI 
 00003376  57				push	EDI 
 00003377  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:Algorithms::Sorting::Proxy::QuickSortEx::cutOff= 1;
 0000337A  B8 00000001			mov	EAX,000000001h
 0000337F  A3 00000433 R		mov	 Algorithms_Sorting_Proxy_QuickSortEx_cutOff,EAX

 00003384  5F				pop	EDI
 00003385  5E				pop	ESI 
 00003386  5B				pop	EBX 
 00003387  8B E5			mov	ESP,EBP
 00003389  5D				pop	EBP 
 0000338A  C3				ret	
 0000338B			__member_Init@Algorithms_Sorting_Proxy_QuickSortEx ENDP
 0000338B			__member_Init@Algorithms_Sorting_Proxy_SorterEx PROC NEAR

 0000338B  55				push	EBP
 0000338C  8B EC			mov	EBP,ESP
 0000338E  51				push	ECX 
 0000338F  53				push	EBX 
 00003390  56				push	ESI 
 00003391  57				push	EDI 
 00003392  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:_array= null;
 00003395  33 C0			xor	EAX,EAX
 00003397  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000339A  89 01			mov	dword ptr [ECX],EAX

 0000339C  5F				pop	EDI
 0000339D  5E				pop	ESI 
 0000339E  5B				pop	EBX 
 0000339F  8B E5			mov	ESP,EBP
 000033A1  5D				pop	EBP 
 000033A2  C3				ret	
 000033A3			__member_Init@Algorithms_Sorting_Proxy_SorterEx ENDP
 000033A3			__member_Init@Algorithms_Sorting_Proxy_TwoWayMergeSort PROC NEAR

 000033A3  55				push	EBP
 000033A4  8B EC			mov	EBP,ESP
 000033A6  51				push	ECX 
 000033A7  53				push	EBX 
 000033A8  56				push	ESI 
 000033A9  57				push	EDI 
 000033AA  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:tmpArray= null;
 000033AD  33 C0			xor	EAX,EAX
 000033AF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000033B2  89 41 08			mov	dword ptr [ECX+0008h],EAX

 000033B5  5F				pop	EDI
 000033B6  5E				pop	ESI 
 000033B7  5B				pop	EBX 
 000033B8  8B E5			mov	ESP,EBP
 000033BA  5D				pop	EBP 
 000033BB  C3				ret	
 000033BC			__member_Init@Algorithms_Sorting_Proxy_TwoWayMergeSort ENDP
 000033BC			Program_main PROC NEAR 
				;void Program::main(void);
 000033BC  55				push	EBP
 000033BD  8B EC			mov	EBP,ESP
 000033BF  53				push	EBX 
 000033C0  56				push	ESI 
 000033C1  57				push	EDI 
				;{

				;{228}:Console::WriteLn("\nTest 1:\n");
 000033C2  8D 05 00000213 R		lea	EAX,OFFSET $S000922
 000033C8  6A 00			push	000000000h
 000033CA  50				push	EAX 
 000033CB  E8 00000000 E		call	 Console_WriteString
 000033D0  E8 00000000 E		call	 Console_WriteCrLf 

				;{229}:Program::TestSelectionSort();
 000033D5  E8 FFFFF6C8			call	 Program_TestSelectionSort

				;{230}:Console::WriteLn("\nTest 2:\n");
 000033DA  8D 05 0000021D R		lea	EAX,OFFSET $S000923
 000033E0  6A 00			push	000000000h
 000033E2  50				push	EAX 
 000033E3  E8 00000000 E		call	 Console_WriteString
 000033E8  E8 00000000 E		call	 Console_WriteCrLf 

				;{231}:Program::TestBubbleSort();
 000033ED  E8 FFFFF4D0			call	 Program_TestBubbleSort

				;{232}:Console::WriteLn("\nTest 3:\n");
 000033F2  8D 05 00000227 R		lea	EAX,OFFSET $S000924
 000033F8  6A 00			push	000000000h
 000033FA  50				push	EAX 
 000033FB  E8 00000000 E		call	 Console_WriteString
 00003400  E8 00000000 E		call	 Console_WriteCrLf 

				;{233}:Program::TestInsertionSort();
 00003405  E8 FFFFF508			call	 Program_TestInsertionSort

				;{234}:Console::WriteLn("\nTest 4:\n");
 0000340A  8D 05 00000231 R		lea	EAX,OFFSET $S000925
 00003410  6A 00			push	000000000h
 00003412  50				push	EAX 
 00003413  E8 00000000 E		call	 Console_WriteString
 00003418  E8 00000000 E		call	 Console_WriteCrLf 

				;{235}:Program::TestShellSort();
 0000341D  E8 FFFFF6A8			call	 Program_TestShellSort

				;{236}:Console::WriteLn("\nTest 5:\n");
 00003422  8D 05 0000023B R		lea	EAX,OFFSET $S000926
 00003428  6A 00			push	000000000h
 0000342A  50				push	EAX 
 0000342B  E8 00000000 E		call	 Console_WriteString
 00003430  E8 00000000 E		call	 Console_WriteCrLf 

				;{237}:Program::TestQuickSort();
 00003435  E8 FFFFF640			call	 Program_TestQuickSort

				;{238}:Console::WriteLn("\nTest 6:\n");
 0000343A  8D 05 00000245 R		lea	EAX,OFFSET $S000927
 00003440  6A 00			push	000000000h
 00003442  50				push	EAX 
 00003443  E8 00000000 E		call	 Console_WriteString
 00003448  E8 00000000 E		call	 Console_WriteCrLf 

				;{239}:Program::TestMergeSort();
 0000344D  E8 FFFFF4E8			call	 Program_TestMergeSort

				;{240}:Console::WriteLn("\nTest 7:\n");
 00003452  8D 05 0000024F R		lea	EAX,OFFSET $S000928
 00003458  6A 00			push	000000000h
 0000345A  50				push	EAX 
 0000345B  E8 00000000 E		call	 Console_WriteString
 00003460  E8 00000000 E		call	 Console_WriteCrLf 

				;{241}:Program::TestHeapSort();
 00003465  E8 FFFFF480			call	 Program_TestHeapSort

				;{242}:Console::WriteLn("\nTest 8:\n");
 0000346A  8D 05 00000259 R		lea	EAX,OFFSET $S000929
 00003470  6A 00			push	000000000h
 00003472  50				push	EAX 
 00003473  E8 00000000 E		call	 Console_WriteString
 00003478  E8 00000000 E		call	 Console_WriteCrLf 

				;{243}:Program::TestBinaryInsertionSort();
 0000347D  E8 FFFFF418			call	 Program_TestBinaryInsertionSort

				;{245}:System::ShowMessage("Now, we are going to test the Objects Sorters", "Sample Sorting Library", System::IconInformation);
 00003482  B8 00000040			mov	EAX,000000040h
 00003487  50				push	EAX 
 00003488  8D 05 000001A3 R		lea	EAX,OFFSET $S000931
 0000348E  50				push	EAX 
 0000348F  8D 05 00000162 R		lea	EAX,OFFSET $S000930
 00003495  50				push	EAX
 00003496  E8 00000000 E		call	 System_ShowMessage

				;{247}:Program::TestOOInsertionSort();
 0000349B  E8 FFFFF53A			call	 Program_TestOOInsertionSort

				;{248}:Program::TestOOBubbleSort();
 000034A0  E8 FFFFF4E5			call	 Program_TestOOBubbleSort

				;{249}:Program::TestOOSelectionSort();
 000034A5  E8 FFFFF5A8			call	 Program_TestOOSelectionSort

				;{250}:Program::TestOOQuickSort();
 000034AA  E8 FFFFF57B			call	 Program_TestOOQuickSort

				;{251}:Program::TestOOHeapSort();
 000034AF  E8 FFFFF4FE			call	 Program_TestOOHeapSort

				;{252}:Program::TestOOBinaryInsertionSort();
 000034B4  E8 FFFFF4A9			call	 Program_TestOOBinaryInsertionSort

				;{253}:Program::TestOOMergeSort();
 000034B9  E8 FFFFF544			call	 Program_TestOOMergeSort
				;}
 000034BE			$L000921:

 000034BE  5F				pop	EDI
 000034BF  5E				pop	ESI 
 000034C0  5B				pop	EBX 
 000034C1  8B E5			mov	ESP,EBP
 000034C3  5D				pop	EBP 
 000034C4  C3				ret	
 000034C5			Program_main ENDP

 000034C5			__System_Hpp_Runtime_Init PROC

 000034C5  55				push	EBP
 000034C6  8B EC			mov	EBP,ESP
 000034C8  51				push	ECX 
 000034C9  53				push	EBX 
 000034CA  56				push	ESI 
 000034CB  57				push	EDI 
 000034CC  E8 00000000 E		call	 GetVersion
 000034D1  A3 000003FB R		mov	 __osver,EAX ;os version
 000034D6  A1 000003FB R		mov	EAX, __osver 
 000034DB  C1 E8 08			shr	EAX,000000008h
 000034DE  25 000000FF			and	EAX,0000000FFh
 000034E3  A3 000003FF R		mov	 __winminor,EAX ;windows minor
 000034E8  8B 0D 000003FB R		mov	ECX, __osver 
 000034EE  81 E1 000000FF		and	ECX,0000000FFh 
 000034F4  89 0D 00000403 R		mov	 __winmajor,ECX ;windows major
 000034FA  8B 15 00000403 R		mov	EDX,dword ptr __winmajor 
 00003500  C1 E2 08			shl	EDX,000000008h
 00003503  03 15 000003FF R		add	EDX,dword ptr __winminor
 00003509  89 15 00000407 R		mov	dword ptr __winver,EDX ;windows version
 0000350F  A1 000003FB R		mov	EAX, __osver 
 00003514  C1 E8 10			shr	EAX,000000010h 
 00003517  25 0000FFFF			and	EAX,00000FFFFh 
 0000351C  A3 000003FB R		mov	 __osver,EAX 
 00003521  E8 FFFFFE96			call	 Program_main ;user entry point (stdcall calling convention)
 00003526  50				push	EAX
 00003527  E8 00000000 E		call	 System_Exit 

 0000352C  5F				pop	EDI
 0000352D  5E				pop	ESI 
 0000352E  5B				pop	EBX 
 0000352F  8B E5			mov	ESP,EBP
 00003531  5D				pop	EBP 
 00003532  C3				ret	
 00003533			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 00000000 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_BinaryInsertionSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00000000 R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_BinaryInsertionSort_Sort

 0000000C 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Sorter	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00000000 E
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET __purecall

 00000018 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_BubbleSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00000152 R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_BubbleSort_Sort

 00000024 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_HeapSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   0000024C R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_HeapSort_Sort

 00000030 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_InsertionSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   000004AB R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_InsertionSort_Sort

 0000003C 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_MergeSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   000005E6 R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_MergeSort_Sort

 00000048 00000000 E		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Array	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
	   0000093B R
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET Algorithms_Sorting_Proxy_Array_Destructor

 0000005C 00000B84 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ArrayOfAutomobile	DWORD	OFFSET Algorithms_Sorting_Proxy_ArrayOfAutomobile_Swap,
	   00000CF3 R
	   00000AEF R
	   00000A50 R
	   0000093B R
										OFFSET Algorithms_Sorting_Proxy_ArrayOfAutomobile_getAt,
										OFFSET Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyTo,
										OFFSET Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyFrom,
										OFFSET Algorithms_Sorting_Proxy_Array_Destructor

 00000070 00000D58 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Automobile	DWORD	OFFSET Algorithms_Sorting_Proxy_Automobile_Compare,
	   00000EAA R
										OFFSET Algorithms_Sorting_Proxy_Automobile_Destructor

 00000078 00000000 E		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ProxyObject	DWORD	OFFSET __purecall

 0000007C 00000F2C R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BinaryInsertionSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_BinaryInsertionSortEx_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 00000084 00000000 E		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SorterEx	DWORD	OFFSET __purecall,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 0000008C 0000105E R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BubbleSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_BubbleSortEx_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 00000094 00001152 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_HeapSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_HeapSortEx_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 0000009C 0000138E R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_InsertionSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_InsertionSortEx_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 000000A4 000015B5 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_MedianOfThreeQuickSort	DWORD	OFFSET Algorithms_Sorting_Proxy_QuickSortEx_Sort,
	   00001902 R
	   0000147B R
	   00001608 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap,
										OFFSET Algorithms_Sorting_Proxy_MedianOfThreeQuickSort_selectPivot,
										OFFSET Algorithms_Sorting_Proxy_QuickSortEx_doSort

 000000B4 000015B5 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_QuickSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_QuickSortEx_Sort,
	   00001902 R
	   00000000 E
	   00001608 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap,
										OFFSET __purecall,
										OFFSET Algorithms_Sorting_Proxy_QuickSortEx_doSort

 000000C4 00001818 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SelectionSortEx	DWORD	OFFSET Algorithms_Sorting_Proxy_SelectionSortEx_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 000000CC 00001AB9 R		@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_TwoWayMergeSort	DWORD	OFFSET Algorithms_Sorting_Proxy_TwoWayMergeSort_Sort,
	   00001902 R
										OFFSET Algorithms_Sorting_Proxy_SorterEx_Swap

 000000D4 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_QuickSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00001D5D R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_QuickSort_Sort

 000000E0 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_SelectionSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00001EDC R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_SelectionSort_Sort

 000000EC 00002176 R		@@class_vptr_vtbl@@__Algorithms_Sorting_ShellSort	DWORD	OFFSET Algorithms_Sorting_Sorter_Swap,
	   000021FF R
	   00001FC5 R
										OFFSET Algorithms_Sorting_Sorter_SwapValues,
										OFFSET Algorithms_Sorting_ShellSort_Sort

 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 000000F8 20 20 2C 09 59	$S000848 		BYTE 	"  ,",09h,"Year :",09h,09h,0
	   65 61 72 20 3A
	   09 09 00
 00000105 00 00			$S000669 		BYTE 	0,0 ;null-string
 00000107 2C 20 43 6F 73	$S000849 		BYTE 	", Cost:",09h,0
	   74 3A 09 00
 00000110 41 75 74 6F 20	$S000847 		BYTE 	"Auto :",09h,0
	   3A 09 00
 00000118 42 65 6E 74 6C	$S000816 		BYTE 	"Bentley",0
	   65 79 00
 00000120 43 61 64 69 6C	$S000832 		BYTE 	"Cadillac",0
	   6C 61 63 00
 00000129 44 65 73 74 72	$S000688 		BYTE 	"Destroying an auto...",0
	   6F 79 69 6E 67
	   20 61 6E 20 61
	   75 74 6F 2E 2E
	   2E 00
 0000013F 48 6F 6E 64 61	$S000840 		BYTE 	"Honda Civic",0
	   20 43 69 76 69
	   63 00
 0000014B 48 75 6D 6D 65	$S000829 		BYTE 	"Hummer",0
	   72 00
 00000152 4A 65 74 74 61	$S000843 		BYTE 	"Jetta",0
	   00
 00000158 4D 61 73 65 72	$S000836 		BYTE 	"Maseratti",0
	   61 74 74 69 00
 00000162 4E 6F 77 2C 20	$S000930 		BYTE 	"Now, we are going to test the Objects Sorters",0
	   77 65 20 61 72
	   65 20 67 6F 69
	   6E 67 20 74 6F
	   20 74 65 73 74
	   20 74 68 65 20
	   4F 62 6A 65 63
	   74 73 20 53 6F
	   72 74 65 72 73
	   00
 00000190 50 61 73 73 61	$S000822 		BYTE 	"Passat",0
	   74 00
 00000197 52 61 6E 67 65	$S000819 		BYTE 	"Range Rover",0
	   20 52 6F 76 65
	   72 00
 000001A3 53 61 6D 70 6C	$S000931 		BYTE 	"Sample Sorting Library",0
	   65 20 53 6F 72
	   74 69 6E 67 20
	   4C 69 62 72 61
	   72 79 00
 000001BA 54 6F 79 6F 74	$S000825 		BYTE 	"Toyota Camry",0
	   61 20 43 61 6D
	   72 79 00
 000001C7 0A 41 66 74 65	$S000850 		BYTE 	0Ah,"After Sorting...",0Ah,0
	   72 20 53 6F 72
	   74 69 6E 67 2E
	   2E 2E 0A 00
 000001DA 0A 41 66 74 65	$S000882 		BYTE 	0Ah,"After sorting...",0
	   72 20 73 6F 72
	   74 69 6E 67 2E
	   2E 2E 00
 000001EC 0A 42 65 66 6F	$S000845 		BYTE 	0Ah,"Before Sorting...",0Ah,0
	   72 65 20 53 6F
	   72 74 69 6E 67
	   2E 2E 2E 0A 00
 00000200 0A 42 65 66 6F	$S000878 		BYTE 	0Ah,"Before sorting...",0
	   72 65 20 73 6F
	   72 74 69 6E 67
	   2E 2E 2E 00
 00000213 0A 54 65 73 74	$S000922 		BYTE 	0Ah,"Test 1:",0Ah,0
	   20 31 3A 0A 00
 0000021D 0A 54 65 73 74	$S000923 		BYTE 	0Ah,"Test 2:",0Ah,0
	   20 32 3A 0A 00
 00000227 0A 54 65 73 74	$S000924 		BYTE 	0Ah,"Test 3:",0Ah,0
	   20 33 3A 0A 00
 00000231 0A 54 65 73 74	$S000925 		BYTE 	0Ah,"Test 4:",0Ah,0
	   20 34 3A 0A 00
 0000023B 0A 54 65 73 74	$S000926 		BYTE 	0Ah,"Test 5:",0Ah,0
	   20 35 3A 0A 00
 00000245 0A 54 65 73 74	$S000927 		BYTE 	0Ah,"Test 6:",0Ah,0
	   20 36 3A 0A 00
 0000024F 0A 54 65 73 74	$S000928 		BYTE 	0Ah,"Test 7:",0Ah,0
	   20 37 3A 0A 00
 00000259 0A 54 65 73 74	$S000929 		BYTE 	0Ah,"Test 8:",0Ah,0
	   20 38 3A 0A 00
 00000263 0A 54 65 73 74	$S000906 		BYTE 	0Ah,"Testing BINARY INSERTION SORT Algorithm: worst: O(n^2), best: O(n lg n)",0
	   69 6E 67 20 42
	   49 4E 41 52 59
	   20 49 4E 53 45
	   52 54 49 4F 4E
	   20 53 4F 52 54
	   20 41 6C 67 6F
	   72 69 74 68 6D
	   3A 20 77 6F 72
	   73 74 3A 20 4F
	   28 6E 5E 32 29
	   2C 20 62 65 73
	   74 3A 20 4F 28
	   6E 20 6C 67 20
	   6E 29 00
 000002AC 0A 54 65 73 74	$S000888 		BYTE 	0Ah,"Testing BUBBLE SORT Algorithm: O(n^2)",0
	   69 6E 67 20 42
	   55 42 42 4C 45
	   20 53 4F 52 54
	   20 41 6C 67 6F
	   72 69 74 68 6D
	   3A 20 4F 28 6E
	   5E 32 29 00
 000002D3 0A 54 65 73 74	$S000903 		BYTE 	0Ah,"Testing HEAP SORT Algorithm: O(n lg n)",0
	   69 6E 67 20 48
	   45 41 50 20 53
	   4F 52 54 20 41
	   6C 67 6F 72 69
	   74 68 6D 3A 20
	   4F 28 6E 20 6C
	   67 20 6E 29 00
 000002FB 0A 54 65 73 74	$S000891 		BYTE 	0Ah,"Testing INSERTION SORT Algorithm: O(n^2) - faster",0
	   69 6E 67 20 49
	   4E 53 45 52 54
	   49 4F 4E 20 53
	   4F 52 54 20 41
	   6C 67 6F 72 69
	   74 68 6D 3A 20
	   4F 28 6E 5E 32
	   29 20 2D 20 66
	   61 73 74 65 72
	   00
 0000032E 0A 54 65 73 74	$S000900 		BYTE 	0Ah,"Testing MERGE SORT Algorithm: O(n lg n)",0
	   69 6E 67 20 4D
	   45 52 47 45 20
	   53 4F 52 54 20
	   41 6C 67 6F 72
	   69 74 68 6D 3A
	   20 4F 28 6E 20
	   6C 67 20 6E 29
	   00
 00000357 0A 54 65 73 74	$S000897 		BYTE 	0Ah,"Testing QUICK SORT Algorithm: worst: O(n^2), best: O(n lg n)",0
	   69 6E 67 20 51
	   55 49 43 4B 20
	   53 4F 52 54 20
	   41 6C 67 6F 72
	   69 74 68 6D 3A
	   20 77 6F 72 73
	   74 3A 20 4F 28
	   6E 5E 32 29 2C
	   20 62 65 73 74
	   3A 20 4F 28 6E
	   20 6C 67 20 6E
	   29 00
 00000395 0A 54 65 73 74	$S000885 		BYTE 	0Ah,"Testing SELECTION SORT Algorithm: O(n^2)",0
	   69 6E 67 20 53
	   45 4C 45 43 54
	   49 4F 4E 20 53
	   4F 52 54 20 41
	   6C 67 6F 72 69
	   74 68 6D 3A 20
	   4F 28 6E 5E 32
	   29 00
 000003BF 0A 54 65 73 74	$S000894 		BYTE 	0Ah,"Testing SHELL SORT Algorithm: O(n^2) - fastest",0
	   69 6E 67 20 53
	   48 45 4C 4C 20
	   53 4F 52 54 20
	   41 6C 67 6F 72
	   69 74 68 6D 3A
	   20 4F 28 6E 5E
	   32 29 20 2D 20
	   66 61 73 74 65
	   73 74 00
 000003EF 5D 20 3D 20 00	$S000881 		BYTE 	"] = ",0
 000003F4 61 72 72 61 79	$S000880 		BYTE 	"array[",0
	   5B 00

 000003FB 00000000		__osver 		DWORD 	0;Windows OS version
 000003FF 00000000		__winminor 		DWORD 	0;Windows minor version
 00000403 00000000		__winmajor 		DWORD 	0;Windows major version
 00000407 00000000		__winver 		DWORD 	0;Windows version
 0000040B  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 0000042B 00000000		___argv 		DWORD 	0;Array of argument values
 0000042F 00000000		___argc 		DWORD 	0;Argument count
 00000433 00000000		Algorithms_Sorting_Proxy_QuickSortEx_cutOff	 DWORD	0

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:15:40
TestSorting.hpp						     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000437 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00003533 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Algorithms_Sorting_BinaryInsertionSort_Sort  P Near   00000000 _TEXT	Length= 00000133 Public STDCALL
  $L000933 . . . . . . . . . . .	L Near	 00000016 _TEXT	
  $L000932 . . . . . . . . . . .	L Near	 0000001C _TEXT	
  $L000935 . . . . . . . . . . .	L Near	 0000005F _TEXT	
  $L000937 . . . . . . . . . . .	L Near	 000000CD _TEXT	
  $L000938 . . . . . . . . . . .	L Near	 000000D3 _TEXT	
  $L000936 . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  $L000940 . . . . . . . . . . .	L Near	 000000DD _TEXT	
  $L000939 . . . . . . . . . . .	L Near	 000000E3 _TEXT	
  $L000941 . . . . . . . . . . .	L Near	 00000125 _TEXT	
  $L000934 . . . . . . . . . . .	L Near	 0000012A _TEXT	
  $L000627 . . . . . . . . . . .	L Near	 0000012A _TEXT	
Algorithms_Sorting_BinaryInsertionSort . P Near	  00000133 _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_BubbleSort_Sort .	P Near	 00000152 _TEXT	Length= 000000DB Public STDCALL
  $L000944 . . . . . . . . . . .	L Near	 00000171 _TEXT	
  $L000943 . . . . . . . . . . .	L Near	 00000177 _TEXT	
  $L000947 . . . . . . . . . . .	L Near	 00000195 _TEXT	
  $L000946 . . . . . . . . . . .	L Near	 0000019B _TEXT	
  $L000949 . . . . . . . . . . .	L Near	 0000021A _TEXT	
  $L000948 . . . . . . . . . . .	L Near	 0000021F _TEXT	
  $L000945 . . . . . . . . . . .	L Near	 00000224 _TEXT	
  $L000550 . . . . . . . . . . .	L Near	 00000224 _TEXT	
Algorithms_Sorting_BubbleSort  .	P Near	 0000022D _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_HeapSort_Sort .	P Near	 0000024C _TEXT	Length= 000000D4 Public STDCALL
  $L000953 . . . . . . . . . . .	L Near	 00000278 _TEXT	
  $L000952 . . . . . . . . . . .	L Near	 0000027E _TEXT	
  $L000954 . . . . . . . . . . .	L Near	 000002A6 _TEXT	
  $L000956 . . . . . . . . . . .	L Near	 000002B9 _TEXT	
  $L000955 . . . . . . . . . . .	L Near	 000002BF _TEXT	
  $L000957 . . . . . . . . . . .	L Near	 00000317 _TEXT	
  $L000621 . . . . . . . . . . .	L Near	 00000317 _TEXT	
Algorithms_Sorting_HeapSort_siftDown .	P Near	 00000320 _TEXT	Length= 0000016C Public STDCALL
  $L000958 . . . . . . . . . . .	L Near	 00000331 _TEXT	
  $L000960 . . . . . . . . . . .	L Near	 00000386 _TEXT	
  $L000962 . . . . . . . . . . .	L Near	 000003FE _TEXT	
  $L000963 . . . . . . . . . . .	L Near	 00000419 _TEXT	
  $L000961 . . . . . . . . . . .	L Near	 00000419 _TEXT	
  $L000964 . . . . . . . . . . .	L Near	 0000047C _TEXT	
  $L000959 . . . . . . . . . . .	L Near	 00000483 _TEXT	
  $L000616 . . . . . . . . . . .	L Near	 00000483 _TEXT	
Algorithms_Sorting_HeapSort  . .	P Near	 0000048C _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_InsertionSort_Sort 	P Near	 000004AB _TEXT	Length= 0000011C Public STDCALL
  $L000968 . . . . . . . . . . .	L Near	 000004C1 _TEXT	
  $L000967 . . . . . . . . . . .	L Near	 000004C7 _TEXT	
  $L000970 . . . . . . . . . . .	L Near	 00000505 _TEXT	
  $L000972 . . . . . . . . . . .	L Near	 0000054E _TEXT	
  $L000971 . . . . . . . . . . .	L Near	 00000599 _TEXT	
  $L000969 . . . . . . . . . . .	L Near	 000005BE _TEXT	
  $L000557 . . . . . . . . . . .	L Near	 000005BE _TEXT	
Algorithms_Sorting_InsertionSort .	P Near	 000005C7 _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_MergeSort_Sort 	P Near	 000005E6 _TEXT	Length= 00000061 Public STDCALL
  $L000974 . . . . . . . . . . .	L Near	 00000608 _TEXT	
  $L000975 . . . . . . . . . . .	L Near	 0000060A _TEXT	
  $L000976 . . . . . . . . . . .	L Near	 0000063E _TEXT	
  $L000610 . . . . . . . . . . .	L Near	 0000063E _TEXT	
Algorithms_Sorting_MergeSort_doMerge .	P Near	 00000647 _TEXT	Length= 00000225 Public STDCALL
  $L000977 . . . . . . . . . . .	L Near	 00000682 _TEXT	
  $L000979 . . . . . . . . . . .	L Near	 000006A0 _TEXT	
  $L000980 . . . . . . . . . . .	L Near	 0000072A _TEXT	
  $L000981 . . . . . . . . . . .	L Near	 00000767 _TEXT	
  $L000978 . . . . . . . . . . .	L Near	 0000076C _TEXT	
  $L000982 . . . . . . . . . . .	L Near	 0000076C _TEXT	
  $L000983 . . . . . . . . . . .	L Near	 000007BC _TEXT	
  $L000984 . . . . . . . . . . .	L Near	 000007BC _TEXT	
  $L000985 . . . . . . . . . . .	L Near	 0000080C _TEXT	
  $L000987 . . . . . . . . . . .	L Near	 00000813 _TEXT	
  $L000986 . . . . . . . . . . .	L Near	 00000819 _TEXT	
  $L000988 . . . . . . . . . . .	L Near	 00000863 _TEXT	
  $L000594 . . . . . . . . . . .	L Near	 00000863 _TEXT	
Algorithms_Sorting_MergeSort_mergeSort . P Near	  0000086C _TEXT	Length= 000000B0 Public STDCALL
  $L000989 . . . . . . . . . . .	L Near	 00000911 _TEXT	
  $L000604 . . . . . . . . . . .	L Near	 00000913 _TEXT	
Algorithms_Sorting_MergeSort . .	P Near	 0000091C _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyFrom  P Near   00000A50 _TEXT	Length= 0000009F Public STDCALL
  $L000707 . . . . . . . . . . .	L Near	 00000AE6 _TEXT	
Algorithms_Sorting_Proxy_ArrayOfAutomobile_CopyTo  P Near   00000AEF _TEXT	Length= 00000095 Public STDCALL
  $L000701 . . . . . . . . . . .	L Near	 00000B7B _TEXT	
Algorithms_Sorting_Proxy_ArrayOfAutomobile_Swap  P Near	  00000B84 _TEXT	Length= 0000016F Public STDCALL
  $L000693 . . . . . . . . . . .	L Near	 00000CEA _TEXT	
Algorithms_Sorting_Proxy_ArrayOfAutomobile_getAt . P Near   00000CF3 _TEXT	Length= 0000003E Public STDCALL
  $L001001 . . . . . . . . . . .	L Near	 00000D12 _TEXT	
  $L000699 . . . . . . . . . . .	L Near	 00000D28 _TEXT	
Algorithms_Sorting_Proxy_ArrayOfAutomobile . P Near   000009E0 _TEXT	Length= 00000070 Public STDCALL
  $L000998 . . . . . . . . . . .	L Near	 00000A28 _TEXT	
  $L000999 . . . . . . . . . . .	L Near	 00000A2A _TEXT	
  $L001000 . . . . . . . . . . .	L Near	 00000A37 _TEXT	
Algorithms_Sorting_Proxy_Array_Destructor  P Near   0000093B _TEXT	Length= 00000059 Public STDCALL
  $L000995 . . . . . . . . . . .	L Near	 0000096B _TEXT	
  $L000996 . . . . . . . . . . .	L Near	 00000976 _TEXT	
  $L000994 . . . . . . . . . . .	L Near	 00000986 _TEXT	
  $L000992 . . . . . . . . . . .	L Near	 0000098D _TEXT	
  $L000663 . . . . . . . . . . .	L Near	 0000098D _TEXT	
Algorithms_Sorting_Proxy_Array_get_item_size . P Near   00000994 _TEXT	Length= 00000016 Public STDCALL
  $L000648 . . . . . . . . . . .	L Near	 000009A3 _TEXT	
Algorithms_Sorting_Proxy_Array_get_length  P Near   000009AA _TEXT	Length= 00000016 Public STDCALL
  $L000646 . . . . . . . . . . .	L Near	 000009B9 _TEXT	
Algorithms_Sorting_Proxy_Array .	P Near	 000009C0 _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_Automobile_Compare  P Near   00000D58 _TEXT	Length= 00000114 Public STDCALL
  $L001005 . . . . . . . . . . .	L Near	 00000DAA _TEXT	
  $L001003 . . . . . . . . . . .	L Near	 00000DBA _TEXT	
  $L001008 . . . . . . . . . . .	L Near	 00000DF6 _TEXT	
  $L001006 . . . . . . . . . . .	L Near	 00000E01 _TEXT	
  $L001004 . . . . . . . . . . .	L Near	 00000E01 _TEXT	
  $L001009 . . . . . . . . . . .	L Near	 00000E31 _TEXT	
  $L001011 . . . . . . . . . . .	L Near	 00000E5F _TEXT	
  $L001010 . . . . . . . . . . .	L Near	 00000E5F _TEXT	
  $L000684 . . . . . . . . . . .	L Near	 00000E63 _TEXT	
Algorithms_Sorting_Proxy_Automobile_Destructor . P Near	  00000EAA _TEXT	Length= 00000021 Public STDCALL
  $L000687 . . . . . . . . . . .	L Near	 00000EC4 _TEXT	
Algorithms_Sorting_Proxy_Automobile_get_Cost . P Near   00000E6C _TEXT	Length= 00000019 Public STDCALL
  $L000672 . . . . . . . . . . .	L Near	 00000E7E _TEXT	
Algorithms_Sorting_Proxy_Automobile_get_Model  P Near   00000ECB _TEXT	Length= 00000016 Public STDCALL
  $L000676 . . . . . . . . . . .	L Near	 00000EDA _TEXT	
Algorithms_Sorting_Proxy_Automobile_get_Year . P Near   00000EFA _TEXT	Length= 00000017 Public STDCALL
  $L000680 . . . . . . . . . . .	L Near	 00000F0A _TEXT	
Algorithms_Sorting_Proxy_Automobile_put_Cost . P Near   00000E85 _TEXT	Length= 00000025 Public STDCALL
  $L000673 . . . . . . . . . . .	L Near	 00000E9F _TEXT	
Algorithms_Sorting_Proxy_Automobile_put_Model  P Near   00000EE1 _TEXT	Length= 00000019 Public STDCALL
  $L000677 . . . . . . . . . . .	L Near	 00000EF1 _TEXT	
Algorithms_Sorting_Proxy_Automobile_put_Year . P Near   00000F11 _TEXT	Length= 0000001B Public STDCALL
  $L000681 . . . . . . . . . . .	L Near	 00000F23 _TEXT	
Algorithms_Sorting_Proxy_Automobile 	P Near	 00000D31 _TEXT	Length= 00000027 Public STDCALL
Algorithms_Sorting_Proxy_BinaryInsertionSortEx_Sort  P Near   00000F2C _TEXT	Length= 00000112 Public STDCALL
  $L001014 . . . . . . . . . . .	L Near	 00000F55 _TEXT	
  $L001013 . . . . . . . . . . .	L Near	 00000F5B _TEXT	
  $L001016 . . . . . . . . . . .	L Near	 00000F8D _TEXT	
  $L001018 . . . . . . . . . . .	L Near	 00000FEB _TEXT	
  $L001019 . . . . . . . . . . .	L Near	 00000FF1 _TEXT	
  $L001017 . . . . . . . . . . .	L Near	 00000FF3 _TEXT	
  $L001021 . . . . . . . . . . .	L Near	 00000FFB _TEXT	
  $L001020 . . . . . . . . . . .	L Near	 00001001 _TEXT	
  $L001022 . . . . . . . . . . .	L Near	 00001030 _TEXT	
  $L001015 . . . . . . . . . . .	L Near	 00001035 _TEXT	
  $L000730 . . . . . . . . . . .	L Near	 00001035 _TEXT	
Algorithms_Sorting_Proxy_BinaryInsertionSortEx . P Near	  0000103E _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_BubbleSortEx_Sort . P Near   0000105E _TEXT	Length= 000000D4 Public STDCALL
  $L001025 . . . . . . . . . . .	L Near	 00001085 _TEXT	
  $L001024 . . . . . . . . . . .	L Near	 0000108B _TEXT	
  $L001028 . . . . . . . . . . .	L Near	 000010A9 _TEXT	
  $L001027 . . . . . . . . . . .	L Near	 000010AF _TEXT	
  $L001030 . . . . . . . . . . .	L Near	 00001122 _TEXT	
  $L001029 . . . . . . . . . . .	L Near	 00001124 _TEXT	
  $L001026 . . . . . . . . . . .	L Near	 00001129 _TEXT	
  $L000741 . . . . . . . . . . .	L Near	 00001129 _TEXT	
Algorithms_Sorting_Proxy_BubbleSortEx 	P Near	 00001132 _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_HeapSortEx_Sort . P Near   00001152 _TEXT	Length= 000000D2 Public STDCALL
  $L001034 . . . . . . . . . . .	L Near	 0000118B _TEXT	
  $L001033 . . . . . . . . . . .	L Near	 00001191 _TEXT	
  $L001035 . . . . . . . . . . .	L Near	 000011BB _TEXT	
  $L001037 . . . . . . . . . . .	L Near	 000011D3 _TEXT	
  $L001036 . . . . . . . . . . .	L Near	 000011D9 _TEXT	
  $L001038 . . . . . . . . . . .	L Near	 0000121B _TEXT	
  $L000785 . . . . . . . . . . .	L Near	 0000121B _TEXT	
Algorithms_Sorting_Proxy_HeapSortEx_siftDown . P Near   00001224 _TEXT	Length= 0000014A Public STDCALL
  $L001039 . . . . . . . . . . .	L Near	 00001235 _TEXT	
  $L001041 . . . . . . . . . . .	L Near	 0000128A _TEXT	
  $L001043 . . . . . . . . . . .	L Near	 000012F3 _TEXT	
  $L001044 . . . . . . . . . . .	L Near	 0000130E _TEXT	
  $L001042 . . . . . . . . . . .	L Near	 0000130E _TEXT	
  $L001045 . . . . . . . . . . .	L Near	 0000135E _TEXT	
  $L001040 . . . . . . . . . . .	L Near	 00001365 _TEXT	
  $L000780 . . . . . . . . . . .	L Near	 00001365 _TEXT	
Algorithms_Sorting_Proxy_HeapSortEx 	P Near	 0000136E _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_InsertionSortEx_Sort  P Near   0000138E _TEXT	Length= 000000CD Public STDCALL
  $L001049 . . . . . . . . . . .	L Near	 000013B7 _TEXT	
  $L001048 . . . . . . . . . . .	L Near	 000013BD _TEXT	
  $L001052 . . . . . . . . . . .	L Near	 000013DA _TEXT	
  $L001051 . . . . . . . . . . .	L Near	 000013E0 _TEXT	
  $L001054 . . . . . . . . . . .	L Near	 0000144B _TEXT	
  $L001053 . . . . . . . . . . .	L Near	 0000144D _TEXT	
  $L001050 . . . . . . . . . . .	L Near	 00001452 _TEXT	
  $L000723 . . . . . . . . . . .	L Near	 00001452 _TEXT	
Algorithms_Sorting_Proxy_InsertionSortEx . P Near   0000145B _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_MedianOfThreeQuickSort_selectPivot  P Near   0000147B _TEXT	Length= 00000103 Public STDCALL
  $L001057 . . . . . . . . . . .	L Near	 000014E6 _TEXT	
  $L001059 . . . . . . . . . . .	L Near	 0000152B _TEXT	
  $L001061 . . . . . . . . . . .	L Near	 00001570 _TEXT	
  $L000766 . . . . . . . . . . .	L Near	 00001575 _TEXT	
Algorithms_Sorting_Proxy_MedianOfThreeQuickSort  P Near	  0000157E _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_ProxyObject .	P Near	 0000159E _TEXT	Length= 00000017 Public STDCALL
Algorithms_Sorting_Proxy_QuickSortEx_Sort  P Near   000015B5 _TEXT	Length= 00000053 Public STDCALL
  $L000761 . . . . . . . . . . .	L Near	 000015FF _TEXT	
Algorithms_Sorting_Proxy_QuickSortEx_doSort  P Near   00001608 _TEXT	Length= 000001E8 Public STDCALL
  $L001069 . . . . . . . . . . .	L Near	 00001699 _TEXT	
  $L001068 . . . . . . . . . . .	L Near	 00001699 _TEXT	
  $L001071 . . . . . . . . . . .	L Near	 00001699 _TEXT	
  $L001073 . . . . . . . . . . .	L Near	 000016D0 _TEXT	
  $L001072 . . . . . . . . . . .	L Near	 000016DC _TEXT	
  $L001074 . . . . . . . . . . .	L Near	 000016DC _TEXT	
  $L001076 . . . . . . . . . . .	L Near	 00001713 _TEXT	
  $L001075 . . . . . . . . . . .	L Near	 0000171F _TEXT	
  $L001077 . . . . . . . . . . .	L Near	 00001732 _TEXT	
  $L001070 . . . . . . . . . . .	L Near	 0000174E _TEXT	
  $L001079 . . . . . . . . . . .	L Near	 00001789 _TEXT	
  $L001081 . . . . . . . . . . .	L Near	 000017B9 _TEXT	
  $L001083 . . . . . . . . . . .	L Near	 000017E7 _TEXT	
  $L001066 . . . . . . . . . . .	L Near	 000017E7 _TEXT	
  $L000753 . . . . . . . . . . .	L Near	 000017E7 _TEXT	
Algorithms_Sorting_Proxy_QuickSortEx .	P Near	 000017F0 _TEXT	Length= 00000028 Public STDCALL
Algorithms_Sorting_Proxy_SelectionSortEx_Sort  P Near   00001818 _TEXT	Length= 000000CA Public STDCALL
  $L001087 . . . . . . . . . . .	L Near	 00001839 _TEXT	
  $L001086 . . . . . . . . . . .	L Near	 0000183F _TEXT	
  $L001090 . . . . . . . . . . .	L Near	 00001865 _TEXT	
  $L001089 . . . . . . . . . . .	L Near	 0000186B _TEXT	
  $L001092 . . . . . . . . . . .	L Near	 000018B6 _TEXT	
  $L001091 . . . . . . . . . . .	L Near	 000018B8 _TEXT	
  $L001088 . . . . . . . . . . .	L Near	 000018D9 _TEXT	
  $L000773 . . . . . . . . . . .	L Near	 000018D9 _TEXT	
Algorithms_Sorting_Proxy_SelectionSortEx . P Near   000018E2 _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_SorterEx_Swap . P Near	  00001902 _TEXT	Length= 00000038 Public STDCALL
  $L001095 . . . . . . . . . . .	L Near	 00001931 _TEXT	
  $L000718 . . . . . . . . . . .	L Near	 00001931 _TEXT	
Algorithms_Sorting_Proxy_SorterEx 	P Near	 0000193A _TEXT	Length= 00000020 Public STDCALL
Algorithms_Sorting_Proxy_TwoWayMergeSort_Merge . P Near	  0000195A _TEXT	Length= 0000015F Public STDCALL
  $L001098 . . . . . . . . . . .	L Near	 00001981 _TEXT	
  $L001100 . . . . . . . . . . .	L Near	 0000199F _TEXT	
  $L001101 . . . . . . . . . . .	L Near	 000019F6 _TEXT	
  $L001102 . . . . . . . . . . .	L Near	 00001A13 _TEXT	
  $L001099 . . . . . . . . . . .	L Near	 00001A18 _TEXT	
  $L001103 . . . . . . . . . . .	L Near	 00001A18 _TEXT	
  $L001104 . . . . . . . . . . .	L Near	 00001A48 _TEXT	
  $L001105 . . . . . . . . . . .	L Near	 00001A48 _TEXT	
  $L001106 . . . . . . . . . . .	L Near	 00001A78 _TEXT	
  $L001108 . . . . . . . . . . .	L Near	 00001A80 _TEXT	
  $L001107 . . . . . . . . . . .	L Near	 00001A86 _TEXT	
  $L001109 . . . . . . . . . . .	L Near	 00001AB0 _TEXT	
  $L000791 . . . . . . . . . . .	L Near	 00001AB0 _TEXT	
Algorithms_Sorting_Proxy_TwoWayMergeSort_Sort  P Near   00001AB9 _TEXT	Length= 0000007D Public STDCALL
  $L001110 . . . . . . . . . . .	L Near	 00001ACF _TEXT	
  $L001111 . . . . . . . . . . .	L Near	 00001AD1 _TEXT	
  $L001113 . . . . . . . . . . .	L Near	 00001B1F _TEXT	
  $L000804 . . . . . . . . . . .	L Near	 00001B2D _TEXT	
Algorithms_Sorting_Proxy_TwoWayMergeSort_doSort  P Near	  00001B36 _TEXT	Length= 00000086 Public STDCALL
  $L001114 . . . . . . . . . . .	L Near	 00001BB3 _TEXT	
  $L000799 . . . . . . . . . . .	L Near	 00001BB3 _TEXT	
Algorithms_Sorting_Proxy_TwoWayMergeSort . P Near   00001BBC _TEXT	Length= 00000028 Public STDCALL
Algorithms_Sorting_QuickSort_Partition . P Near	  00001BE4 _TEXT	Length= 00000179 Public STDCALL
  $L001119 . . . . . . . . . . .	L Near	 00001BF3 _TEXT	
  $L001121 . . . . . . . . . . .	L Near	 00001C3E _TEXT	
  $L001120 . . . . . . . . . . .	L Near	 00001C4D _TEXT	
  $L001117 . . . . . . . . . . .	L Near	 00001C4F _TEXT	
  $L001122 . . . . . . . . . . .	L Near	 00001C4F _TEXT	
  $L001124 . . . . . . . . . . .	L Near	 00001C9A _TEXT	
  $L001123 . . . . . . . . . . .	L Near	 00001CA9 _TEXT	
  $L001118 . . . . . . . . . . .	L Near	 00001CA9 _TEXT	
  $L001127 . . . . . . . . . . .	L Near	 00001D12 _TEXT	
  $L001128 . . . . . . . . . . .	L Near	 00001D54 _TEXT	
  $L001125 . . . . . . . . . . .	L Near	 00001D54 _TEXT	
  $L000575 . . . . . . . . . . .	L Near	 00001D54 _TEXT	
Algorithms_Sorting_QuickSort_Sort 	P Near	 00001D5D _TEXT	Length= 00000032 Public STDCALL
  $L000589 . . . . . . . . . . .	L Near	 00001D86 _TEXT	
Algorithms_Sorting_QuickSort_quickSort . P Near	  00001D8F _TEXT	Length= 0000012E Public STDCALL
  $L001129 . . . . . . . . . . .	L Near	 00001DC8 _TEXT	
  $L001130 . . . . . . . . . . .	L Near	 00001E20 _TEXT	
  $L001131 . . . . . . . . . . .	L Near	 00001E84 _TEXT	
  $L001133 . . . . . . . . . . .	L Near	 00001EB4 _TEXT	
  $L000581 . . . . . . . . . . .	L Near	 00001EB4 _TEXT	
Algorithms_Sorting_QuickSort . .	P Near	 00001EBD _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_SelectionSort_Sort 	P Near	 00001EDC _TEXT	Length= 000000CA Public STDCALL
  $L001137 . . . . . . . . . . .	L Near	 00001EEF _TEXT	
  $L001136 . . . . . . . . . . .	L Near	 00001EF5 _TEXT	
  $L001140 . . . . . . . . . . .	L Near	 00001F21 _TEXT	
  $L001139 . . . . . . . . . . .	L Near	 00001F27 _TEXT	
  $L001142 . . . . . . . . . . .	L Near	 00001F81 _TEXT	
  $L001141 . . . . . . . . . . .	L Near	 00001F83 _TEXT	
  $L001138 . . . . . . . . . . .	L Near	 00001F9D _TEXT	
  $L000541 . . . . . . . . . . .	L Near	 00001F9D _TEXT	
Algorithms_Sorting_SelectionSort .	P Near	 00001FA6 _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_ShellSort_Sort 	P Near	 00001FC5 _TEXT	Length= 00000192 Public STDCALL
  $L001145 . . . . . . . . . . .	L Near	 00001FD9 _TEXT	
  $L001148 . . . . . . . . . . .	L Near	 00001FF4 _TEXT	
  $L001147 . . . . . . . . . . .	L Near	 00001FFA _TEXT	
  $L001150 . . . . . . . . . . .	L Near	 00002036 _TEXT	
  $L001152 . . . . . . . . . . .	L Near	 0000207E _TEXT	
  $L001151 . . . . . . . . . . .	L Near	 000020D0 _TEXT	
  $L001149 . . . . . . . . . . .	L Near	 000020F5 _TEXT	
  $L001153 . . . . . . . . . . .	L Near	 00002127 _TEXT	
  $L001155 . . . . . . . . . . .	L Near	 00002141 _TEXT	
  $L001156 . . . . . . . . . . .	L Near	 00002149 _TEXT	
  $L001154 . . . . . . . . . . .	L Near	 00002149 _TEXT	
  $L001146 . . . . . . . . . . .	L Near	 0000214E _TEXT	
  $L000565 . . . . . . . . . . .	L Near	 0000214E _TEXT	
Algorithms_Sorting_ShellSort . .	P Near	 00002157 _TEXT	Length= 0000001F Public STDCALL
Algorithms_Sorting_Sorter_SwapValues .	P Near	 000021FF _TEXT	Length= 00000057 Public STDCALL
  $L000532 . . . . . . . . . . .	L Near	 0000224B _TEXT	
Algorithms_Sorting_Sorter_Swap .	P Near	 00002176 _TEXT	Length= 00000089 Public STDCALL
  $L000526 . . . . . . . . . . .	L Near	 000021F6 _TEXT	
Algorithms_Sorting_Sorter  . . .	P Near	 00002256 _TEXT	Length= 00000017 Public STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 0000226D _TEXT	Length= 0000004C Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 000022B0 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 00002319 _TEXT	Length= 00000062 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00002372 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 000022B9 _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 00002310 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000237B _TEXT	Length= 00000086 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 000023F8 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00002401 _TEXT	Length= 00000060 Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 00002458 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 00002461 _TEXT	Length= 00000062 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 000024BA _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 000024C3 _TEXT	Length= 00000086 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 00002540 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 000025B2 _TEXT	Length= 0000009F Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 00002648 _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 00002549 _TEXT	Length= 00000069 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 000025A9 _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 00002651 _TEXT	Length= 00000086 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 000026CE _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 000026D7 _TEXT	Length= 0000008A Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 00002758 _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 00002761 _TEXT	Length= 00000067 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 000027BF _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 000027C8 _TEXT	Length= 00000086 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 00002845 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 0000284E _TEXT	Length= 0000004C Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00002891 _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Program_TestBinaryInsertionSort 	P Near	 0000289A _TEXT	Length= 00000028 Public STDCALL
  $L000904 . . . . . . . . . . .	L Near	 000028BB _TEXT	
Program_TestBubbleSort . . . . .	P Near	 000028C2 _TEXT	Length= 00000028 Public STDCALL
  $L000886 . . . . . . . . . . .	L Near	 000028E3 _TEXT	
Program_TestHeapSort . . . . . .	P Near	 000028EA _TEXT	Length= 00000028 Public STDCALL
  $L000901 . . . . . . . . . . .	L Near	 0000290B _TEXT	
Program_TestInsertionSort  . . .	P Near	 00002912 _TEXT	Length= 00000028 Public STDCALL
  $L000889 . . . . . . . . . . .	L Near	 00002933 _TEXT	
Program_TestMergeSort  . . . . .	P Near	 0000293A _TEXT	Length= 00000028 Public STDCALL
  $L000898 . . . . . . . . . . .	L Near	 0000295B _TEXT	
Program_TestOOBinaryInsertionSort 	P Near	 00002962 _TEXT	Length= 00000028 Public STDCALL
  $L000913 . . . . . . . . . . .	L Near	 00002983 _TEXT	
Program_TestOOBubbleSort . . . .	P Near	 0000298A _TEXT	Length= 00000028 Public STDCALL
  $L000911 . . . . . . . . . . .	L Near	 000029AB _TEXT	
Program_TestOOHeapSort . . . . .	P Near	 000029B2 _TEXT	Length= 00000028 Public STDCALL
  $L000917 . . . . . . . . . . .	L Near	 000029D3 _TEXT	
Program_TestOOInsertionSort  . .	P Near	 000029DA _TEXT	Length= 00000028 Public STDCALL
  $L000907 . . . . . . . . . . .	L Near	 000029FB _TEXT	
Program_TestOOMergeSort  . . . .	P Near	 00002A02 _TEXT	Length= 00000028 Public STDCALL
  $L000919 . . . . . . . . . . .	L Near	 00002A23 _TEXT	
Program_TestOOQuickSort  . . . .	P Near	 00002A2A _TEXT	Length= 00000028 Public STDCALL
  $L000915 . . . . . . . . . . .	L Near	 00002A4B _TEXT	
Program_TestOOSelectionSort  . .	P Near	 00002A52 _TEXT	Length= 00000028 Public STDCALL
  $L000909 . . . . . . . . . . .	L Near	 00002A73 _TEXT	
Program_TestQuickSort  . . . . .	P Near	 00002A7A _TEXT	Length= 00000028 Public STDCALL
  $L000895 . . . . . . . . . . .	L Near	 00002A9B _TEXT	
Program_TestSelectionSort  . . .	P Near	 00002AA2 _TEXT	Length= 00000028 Public STDCALL
  $L000883 . . . . . . . . . . .	L Near	 00002AC3 _TEXT	
Program_TestShellSort  . . . . .	P Near	 00002ACA _TEXT	Length= 00000028 Public STDCALL
  $L000892 . . . . . . . . . . .	L Near	 00002AEB _TEXT	
Program_TestSortingAlgorithm . .	P Near	 00002AF2 _TEXT	Length= 000003BC Public STDCALL
  $L001175 . . . . . . . . . . .	L Near	 00002D9B _TEXT	
  $L001174 . . . . . . . . . . .	L Near	 00002DA7 _TEXT	
  $L001176 . . . . . . . . . . .	L Near	 00002E08 _TEXT	
  $L001178 . . . . . . . . . . .	L Near	 00002E38 _TEXT	
  $L001177 . . . . . . . . . . .	L Near	 00002E44 _TEXT	
  $L001179 . . . . . . . . . . .	L Near	 00002EA5 _TEXT	
  $L000851 . . . . . . . . . . .	L Near	 00002EA5 _TEXT	
Program_TestSortingEx  . . . . .	P Near	 00002EAE _TEXT	Length= 0000046C Public STDCALL
  $L001181 . . . . . . . . . . .	L Near	 000031BE _TEXT	
  $L001180 . . . . . . . . . . .	L Near	 000031C4 _TEXT	
  $L001182 . . . . . . . . . . .	L Near	 00003250 _TEXT	
  $L001184 . . . . . . . . . . .	L Near	 00003276 _TEXT	
  $L001183 . . . . . . . . . . .	L Near	 0000327C _TEXT	
  $L001185 . . . . . . . . . . .	L Near	 00003308 _TEXT	
  $L000807 . . . . . . . . . . .	L Near	 00003308 _TEXT	
  $L001186 . . . . . . . . . . .	L Near	 00003311 _TEXT	
Program_main . . . . . . . . . .	P Near	 000033BC _TEXT	Length= 00000109 Public STDCALL
  $L000921 . . . . . . . . . . .	L Near	 000034BE _TEXT	
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 000034C5 _TEXT	Length= 0000006E Public STDCALL
__member_Init@Algorithms_Sorting_Proxy_Array . P Near   0000331A _TEXT	Length= 00000028 Public STDCALL
__member_Init@Algorithms_Sorting_Proxy_Automobile  P Near   00003342 _TEXT	Length= 0000002E Public STDCALL
__member_Init@Algorithms_Sorting_Proxy_QuickSortEx . P Near   00003370 _TEXT	Length= 0000001B Public STDCALL
__member_Init@Algorithms_Sorting_Proxy_SorterEx  P Near	  0000338B _TEXT	Length= 00000018 Public STDCALL
__member_Init@Algorithms_Sorting_Proxy_TwoWayMergeSort . P Near	  000033A3 _TEXT	Length= 00000019 Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000669 . . . . . . . . . . . .	Byte	 00000105 _DATA	
$S000688 . . . . . . . . . . . .	Byte	 00000129 _DATA	
$S000816 . . . . . . . . . . . .	Byte	 00000118 _DATA	
$S000819 . . . . . . . . . . . .	Byte	 00000197 _DATA	
$S000822 . . . . . . . . . . . .	Byte	 00000190 _DATA	
$S000825 . . . . . . . . . . . .	Byte	 000001BA _DATA	
$S000829 . . . . . . . . . . . .	Byte	 0000014B _DATA	
$S000832 . . . . . . . . . . . .	Byte	 00000120 _DATA	
$S000836 . . . . . . . . . . . .	Byte	 00000158 _DATA	
$S000840 . . . . . . . . . . . .	Byte	 0000013F _DATA	
$S000843 . . . . . . . . . . . .	Byte	 00000152 _DATA	
$S000845 . . . . . . . . . . . .	Byte	 000001EC _DATA	
$S000847 . . . . . . . . . . . .	Byte	 00000110 _DATA	
$S000848 . . . . . . . . . . . .	Byte	 000000F8 _DATA	
$S000849 . . . . . . . . . . . .	Byte	 00000107 _DATA	
$S000850 . . . . . . . . . . . .	Byte	 000001C7 _DATA	
$S000878 . . . . . . . . . . . .	Byte	 00000200 _DATA	
$S000880 . . . . . . . . . . . .	Byte	 000003F4 _DATA	
$S000881 . . . . . . . . . . . .	Byte	 000003EF _DATA	
$S000882 . . . . . . . . . . . .	Byte	 000001DA _DATA	
$S000885 . . . . . . . . . . . .	Byte	 00000395 _DATA	
$S000888 . . . . . . . . . . . .	Byte	 000002AC _DATA	
$S000891 . . . . . . . . . . . .	Byte	 000002FB _DATA	
$S000894 . . . . . . . . . . . .	Byte	 000003BF _DATA	
$S000897 . . . . . . . . . . . .	Byte	 00000357 _DATA	
$S000900 . . . . . . . . . . . .	Byte	 0000032E _DATA	
$S000903 . . . . . . . . . . . .	Byte	 000002D3 _DATA	
$S000906 . . . . . . . . . . . .	Byte	 00000263 _DATA	
$S000922 . . . . . . . . . . . .	Byte	 00000213 _DATA	
$S000923 . . . . . . . . . . . .	Byte	 0000021D _DATA	
$S000924 . . . . . . . . . . . .	Byte	 00000227 _DATA	
$S000925 . . . . . . . . . . . .	Byte	 00000231 _DATA	
$S000926 . . . . . . . . . . . .	Byte	 0000023B _DATA	
$S000927 . . . . . . . . . . . .	Byte	 00000245 _DATA	
$S000928 . . . . . . . . . . . .	Byte	 0000024F _DATA	
$S000929 . . . . . . . . . . . .	Byte	 00000259 _DATA	
$S000930 . . . . . . . . . . . .	Byte	 00000162 _DATA	
$S000931 . . . . . . . . . . . .	Byte	 000001A3 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_BinaryInsertionSort  DWord    00000000 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_BubbleSort . DWord    00000018 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_HeapSort . DWord    00000024 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_InsertionSort  DWord    00000030 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_MergeSort  DWord    0000003C _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ArrayOfAutomobile  DWord	  0000005C _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Array  DWord    00000048 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_Automobile . DWord    00000070 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BinaryInsertionSortEx  DWord    0000007C _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_BubbleSortEx . DWord    0000008C _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_HeapSortEx . DWord    00000094 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_InsertionSortEx  DWord    0000009C _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_MedianOfThreeQuickSort . DWord    000000A4 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_ProxyObject  DWord    00000078 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_QuickSortEx  DWord    000000B4 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SelectionSortEx  DWord    000000C4 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_SorterEx . DWord	  00000084 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Proxy_TwoWayMergeSort  DWord    000000CC _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_QuickSort  DWord    000000D4 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_SelectionSort  DWord    000000E0 _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_ShellSort  DWord    000000EC _DATA	
@@class_vptr_vtbl@@__Algorithms_Sorting_Sorter . DWord	  0000000C _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
Algorithms_Sorting_Proxy_QuickSortEx_cutOff  DWord    00000433 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 0000042F _DATA	
___argv  . . . . . . . . . . . .	DWord	 0000042B _DATA	
__computer . . . . . . . . . . .	Byte	 0000040B _DATA	
__osver  . . . . . . . . . . . .	DWord	 000003FB _DATA	
__winmajor . . . . . . . . . . .	DWord	 00000403 _DATA	
__winminor . . . . . . . . . . .	DWord	 000003FF _DATA	
__winver . . . . . . . . . . . .	DWord	 00000407 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
