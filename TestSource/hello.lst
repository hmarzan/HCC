Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:11:44
hello.hpp						     Page 1 - 1


				TITLE	 hello.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000469
				;}
 00000043			$L000469:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  8B E5			mov	ESP,EBP
 00000048  5D				pop	EBP 
 00000049  C2 0008			retn	000000008h
 0000004C			Math_DegreesToRadians ENDP

 0000004C			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004C  55				push	EBP
 0000004D  8B EC			mov	EBP,ESP
 0000004F  51				push	ECX 
 00000050  53				push	EBX 
 00000051  56				push	ESI 
 00000052  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000053  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000056  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000059  50				push	EAX
 0000005A  52				push	EDX 
 0000005B  E8 00000000 E		call	 Math_Exp
 00000060  50				push	EAX
 00000061  52				push	EDX 
 00000062  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000065  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000068  50				push	EAX
 00000069  52				push	EDX 
 0000006A  DD 04 24			fld	qword ptr [ESP]
 0000006D  D9 E0			fchs
 0000006F  DD 1C 24			fstp	qword ptr [ESP]
 00000072  E8 00000000 E		call	 Math_Exp
 00000077  50				push	EAX
 00000078  52				push	EDX 
 00000079  DD 04 24			fld	qword ptr [ESP]
 0000007C  59				pop	ECX
 0000007D  59				pop	ECX 
 0000007E  DC 04 24			fadd	qword ptr [ESP]
 00000081  DD 1C 24			fstp	qword ptr [ESP]
 00000084  B8 00000002			mov	EAX,000000002h
 00000089  9B DB E2			fclex
 0000008C  50				push	EAX
 0000008D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000092  50				push	EAX
 00000093  52				push	EDX 
 00000094  DD 04 24			fld	qword ptr [ESP]
 00000097  59				pop	ECX
 00000098  59				pop	ECX 
 00000099  DC 3C 24			fdivr	qword ptr [ESP]
 0000009C  DD 1C 24			fstp	qword ptr [ESP]
 0000009F  5A				pop	EDX
 000000A0  58				pop	EAX 
 000000A1  EB 00			jmp	OFFSET $L000486
				;}
 000000A3			$L000486:

 000000A3  5F				pop	EDI
 000000A4  5E				pop	ESI 
 000000A5  5B				pop	EBX 
 000000A6  8B E5			mov	ESP,EBP
 000000A8  5D				pop	EBP 
 000000A9  C2 0008			retn	000000008h
 000000AC			Math_Hyperbolic_HCos ENDP

 000000AC			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000AC  55				push	EBP
 000000AD  8B EC			mov	EBP,ESP
 000000AF  51				push	ECX 
 000000B0  53				push	EBX 
 000000B1  56				push	ESI 
 000000B2  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000B3  B8 00000002			mov	EAX,000000002h
 000000B8  50				push	EAX
 000000B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BF  50				push	EAX
 000000C0  52				push	EDX 
 000000C1  E8 00000000 E		call	 Math_Exp
 000000C6  50				push	EAX
 000000C7  52				push	EDX 
 000000C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CE  50				push	EAX
 000000CF  52				push	EDX 
 000000D0  DD 04 24			fld	qword ptr [ESP]
 000000D3  D9 E0			fchs
 000000D5  DD 1C 24			fstp	qword ptr [ESP]
 000000D8  E8 00000000 E		call	 Math_Exp
 000000DD  50				push	EAX
 000000DE  52				push	EDX 
 000000DF  DD 04 24			fld	qword ptr [ESP]
 000000E2  59				pop	ECX
 000000E3  59				pop	ECX 
 000000E4  DD 04 24			fld	qword ptr [ESP]
 000000E7  D8 E1			fsub	st,st(1)
 000000E9  DD 1C 24			fstp	qword ptr [ESP]
 000000EC  9B DB E2			fclex
 000000EF  DD 04 24			fld	qword ptr [ESP]
 000000F2  59				pop	ECX
 000000F3  59				pop	ECX 
 000000F4  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F9  50				push	EAX
 000000FA  52				push	EDX 
 000000FB  DC 3C 24			fdivr	qword ptr [ESP]
 000000FE  DD 1C 24			fstp	qword ptr [ESP]
 00000101  5A				pop	EDX
 00000102  58				pop	EAX 
 00000103  EB 00			jmp	OFFSET $L000492
				;}
 00000105			$L000492:

 00000105  5F				pop	EDI
 00000106  5E				pop	ESI 
 00000107  5B				pop	EBX 
 00000108  8B E5			mov	ESP,EBP
 0000010A  5D				pop	EBP 
 0000010B  C2 0008			retn	000000008h
 0000010E			Math_Hyperbolic_HCosec ENDP

 0000010E			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000010E  55				push	EBP
 0000010F  8B EC			mov	EBP,ESP
 00000111  51				push	ECX 
 00000112  53				push	EBX 
 00000113  56				push	ESI 
 00000114  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000115  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000118  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000011B  50				push	EAX
 0000011C  52				push	EDX 
 0000011D  E8 00000000 E		call	 Math_Exp
 00000122  50				push	EAX
 00000123  52				push	EDX 
 00000124  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000127  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000012A  50				push	EAX
 0000012B  52				push	EDX 
 0000012C  DD 04 24			fld	qword ptr [ESP]
 0000012F  D9 E0			fchs
 00000131  DD 1C 24			fstp	qword ptr [ESP]
 00000134  E8 00000000 E		call	 Math_Exp
 00000139  50				push	EAX
 0000013A  52				push	EDX 
 0000013B  DD 04 24			fld	qword ptr [ESP]
 0000013E  59				pop	ECX
 0000013F  59				pop	ECX 
 00000140  DC 04 24			fadd	qword ptr [ESP]
 00000143  DD 1C 24			fstp	qword ptr [ESP]
 00000146  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000149  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000014C  50				push	EAX
 0000014D  52				push	EDX 
 0000014E  E8 00000000 E		call	 Math_Exp
 00000153  50				push	EAX
 00000154  52				push	EDX 
 00000155  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000158  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000015B  50				push	EAX
 0000015C  52				push	EDX 
 0000015D  DD 04 24			fld	qword ptr [ESP]
 00000160  D9 E0			fchs
 00000162  DD 1C 24			fstp	qword ptr [ESP]
 00000165  E8 00000000 E		call	 Math_Exp
 0000016A  50				push	EAX
 0000016B  52				push	EDX 
 0000016C  DD 04 24			fld	qword ptr [ESP]
 0000016F  59				pop	ECX
 00000170  59				pop	ECX 
 00000171  DD 04 24			fld	qword ptr [ESP]
 00000174  D8 E1			fsub	st,st(1)
 00000176  DD 1C 24			fstp	qword ptr [ESP]
 00000179  9B DB E2			fclex
 0000017C  DD 04 24			fld	qword ptr [ESP]
 0000017F  59				pop	ECX
 00000180  59				pop	ECX 
 00000181  DC 3C 24			fdivr	qword ptr [ESP]
 00000184  DD 1C 24			fstp	qword ptr [ESP]
 00000187  5A				pop	EDX
 00000188  58				pop	EAX 
 00000189  EB 00			jmp	OFFSET $L000494
				;}
 0000018B			$L000494:

 0000018B  5F				pop	EDI
 0000018C  5E				pop	ESI 
 0000018D  5B				pop	EBX 
 0000018E  8B E5			mov	ESP,EBP
 00000190  5D				pop	EBP 
 00000191  C2 0008			retn	000000008h
 00000194			Math_Hyperbolic_HCotan ENDP

 00000194			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00000194  55				push	EBP
 00000195  8B EC			mov	EBP,ESP
 00000197  51				push	ECX 
 00000198  53				push	EBX 
 00000199  56				push	ESI 
 0000019A  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 0000019B  B8 00000002			mov	EAX,000000002h
 000001A0  50				push	EAX
 000001A1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001A4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001A7  50				push	EAX
 000001A8  52				push	EDX 
 000001A9  E8 00000000 E		call	 Math_Exp
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001B3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001B6  50				push	EAX
 000001B7  52				push	EDX 
 000001B8  DD 04 24			fld	qword ptr [ESP]
 000001BB  D9 E0			fchs
 000001BD  DD 1C 24			fstp	qword ptr [ESP]
 000001C0  E8 00000000 E		call	 Math_Exp
 000001C5  50				push	EAX
 000001C6  52				push	EDX 
 000001C7  DD 04 24			fld	qword ptr [ESP]
 000001CA  59				pop	ECX
 000001CB  59				pop	ECX 
 000001CC  DC 04 24			fadd	qword ptr [ESP]
 000001CF  DD 1C 24			fstp	qword ptr [ESP]
 000001D2  9B DB E2			fclex
 000001D5  DD 04 24			fld	qword ptr [ESP]
 000001D8  59				pop	ECX
 000001D9  59				pop	ECX 
 000001DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000001DF  50				push	EAX
 000001E0  52				push	EDX 
 000001E1  DC 3C 24			fdivr	qword ptr [ESP]
 000001E4  DD 1C 24			fstp	qword ptr [ESP]
 000001E7  5A				pop	EDX
 000001E8  58				pop	EAX 
 000001E9  EB 00			jmp	OFFSET $L000490
				;}
 000001EB			$L000490:

 000001EB  5F				pop	EDI
 000001EC  5E				pop	ESI 
 000001ED  5B				pop	EBX 
 000001EE  8B E5			mov	ESP,EBP
 000001F0  5D				pop	EBP 
 000001F1  C2 0008			retn	000000008h
 000001F4			Math_Hyperbolic_HSec ENDP

 000001F4			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001F4  55				push	EBP
 000001F5  8B EC			mov	EBP,ESP
 000001F7  51				push	ECX 
 000001F8  53				push	EBX 
 000001F9  56				push	ESI 
 000001FA  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000201  50				push	EAX
 00000202  52				push	EDX 
 00000203  E8 00000000 E		call	 Math_Exp
 00000208  50				push	EAX
 00000209  52				push	EDX 
 0000020A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000020D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000210  50				push	EAX
 00000211  52				push	EDX 
 00000212  DD 04 24			fld	qword ptr [ESP]
 00000215  D9 E0			fchs
 00000217  DD 1C 24			fstp	qword ptr [ESP]
 0000021A  E8 00000000 E		call	 Math_Exp
 0000021F  50				push	EAX
 00000220  52				push	EDX 
 00000221  DD 04 24			fld	qword ptr [ESP]
 00000224  59				pop	ECX
 00000225  59				pop	ECX 
 00000226  DD 04 24			fld	qword ptr [ESP]
 00000229  D8 E1			fsub	st,st(1)
 0000022B  DD 1C 24			fstp	qword ptr [ESP]
 0000022E  B8 00000002			mov	EAX,000000002h
 00000233  9B DB E2			fclex
 00000236  50				push	EAX
 00000237  E8 00000000 E		call	 FloatingPoint_FromInt
 0000023C  50				push	EAX
 0000023D  52				push	EDX 
 0000023E  DD 04 24			fld	qword ptr [ESP]
 00000241  59				pop	ECX
 00000242  59				pop	ECX 
 00000243  DC 3C 24			fdivr	qword ptr [ESP]
 00000246  DD 1C 24			fstp	qword ptr [ESP]
 00000249  5A				pop	EDX
 0000024A  58				pop	EAX 
 0000024B  EB 00			jmp	OFFSET $L000483
				;}
 0000024D			$L000483:

 0000024D  5F				pop	EDI
 0000024E  5E				pop	ESI 
 0000024F  5B				pop	EBX 
 00000250  8B E5			mov	ESP,EBP
 00000252  5D				pop	EBP 
 00000253  C2 0008			retn	000000008h
 00000256			Math_Hyperbolic_HSin ENDP

 00000256			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 00000256  55				push	EBP
 00000257  8B EC			mov	EBP,ESP
 00000259  51				push	ECX 
 0000025A  53				push	EBX 
 0000025B  56				push	ESI 
 0000025C  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 0000025D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000260  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000263  50				push	EAX
 00000264  52				push	EDX 
 00000265  E8 00000000 E		call	 Math_Exp
 0000026A  50				push	EAX
 0000026B  52				push	EDX 
 0000026C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000026F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000272  50				push	EAX
 00000273  52				push	EDX 
 00000274  DD 04 24			fld	qword ptr [ESP]
 00000277  D9 E0			fchs
 00000279  DD 1C 24			fstp	qword ptr [ESP]
 0000027C  E8 00000000 E		call	 Math_Exp
 00000281  50				push	EAX
 00000282  52				push	EDX 
 00000283  DD 04 24			fld	qword ptr [ESP]
 00000286  59				pop	ECX
 00000287  59				pop	ECX 
 00000288  DD 04 24			fld	qword ptr [ESP]
 0000028B  D8 E1			fsub	st,st(1)
 0000028D  DD 1C 24			fstp	qword ptr [ESP]
 00000290  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000293  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000296  50				push	EAX
 00000297  52				push	EDX 
 00000298  E8 00000000 E		call	 Math_Exp
 0000029D  50				push	EAX
 0000029E  52				push	EDX 
 0000029F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002A2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002A5  50				push	EAX
 000002A6  52				push	EDX 
 000002A7  DD 04 24			fld	qword ptr [ESP]
 000002AA  D9 E0			fchs
 000002AC  DD 1C 24			fstp	qword ptr [ESP]
 000002AF  E8 00000000 E		call	 Math_Exp
 000002B4  50				push	EAX
 000002B5  52				push	EDX 
 000002B6  DD 04 24			fld	qword ptr [ESP]
 000002B9  59				pop	ECX
 000002BA  59				pop	ECX 
 000002BB  DC 04 24			fadd	qword ptr [ESP]
 000002BE  DD 1C 24			fstp	qword ptr [ESP]
 000002C1  9B DB E2			fclex
 000002C4  DD 04 24			fld	qword ptr [ESP]
 000002C7  59				pop	ECX
 000002C8  59				pop	ECX 
 000002C9  DC 3C 24			fdivr	qword ptr [ESP]
 000002CC  DD 1C 24			fstp	qword ptr [ESP]
 000002CF  5A				pop	EDX
 000002D0  58				pop	EAX 
 000002D1  EB 00			jmp	OFFSET $L000488
				;}
 000002D3			$L000488:

 000002D3  5F				pop	EDI
 000002D4  5E				pop	ESI 
 000002D5  5B				pop	EBX 
 000002D6  8B E5			mov	ESP,EBP
 000002D8  5D				pop	EBP 
 000002D9  C2 0008			retn	000000008h
 000002DC			Math_Hyperbolic_HTan ENDP

 000002DC			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002DC  55				push	EBP
 000002DD  8B EC			mov	EBP,ESP
 000002DF  51				push	ECX 
 000002E0  53				push	EBX 
 000002E1  56				push	ESI 
 000002E2  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 000002E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E9  50				push	EAX
 000002EA  52				push	EDX 
 000002EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F1  50				push	EAX
 000002F2  52				push	EDX 
 000002F3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002F6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F9  9B DB E2			fclex
 000002FC  50				push	EAX
 000002FD  52				push	EDX 
 000002FE  DD 04 24			fld	qword ptr [ESP]
 00000301  59				pop	ECX
 00000302  59				pop	ECX 
 00000303  DC 0C 24			fmul	qword ptr [ESP]
 00000306  DD 1C 24			fstp	qword ptr [ESP]
 00000309  B8 00000001			mov	EAX,000000001h
 0000030E  50				push	EAX
 0000030F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000314  50				push	EAX
 00000315  52				push	EDX 
 00000316  DD 04 24			fld	qword ptr [ESP]
 00000319  59				pop	ECX
 0000031A  59				pop	ECX 
 0000031B  DD 04 24			fld	qword ptr [ESP]
 0000031E  D8 E1			fsub	st,st(1)
 00000320  DD 1C 24			fstp	qword ptr [ESP]
 00000323  E8 00000000 E		call	 Math_Sqrt
 00000328  50				push	EAX
 00000329  52				push	EDX 
 0000032A  DD 04 24			fld	qword ptr [ESP]
 0000032D  59				pop	ECX
 0000032E  59				pop	ECX 
 0000032F  DC 04 24			fadd	qword ptr [ESP]
 00000332  DD 1C 24			fstp	qword ptr [ESP]
 00000335  E8 00000000 E		call	 Math_Ln
 0000033A  EB 00			jmp	OFFSET $L000500
				;}
 0000033C			$L000500:

 0000033C  5F				pop	EDI
 0000033D  5E				pop	ESI 
 0000033E  5B				pop	EBX 
 0000033F  8B E5			mov	ESP,EBP
 00000341  5D				pop	EBP 
 00000342  C2 0008			retn	000000008h
 00000345			Math_Hyperbolic_Inverse_HArccos ENDP

 00000345			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000345  55				push	EBP
 00000346  8B EC			mov	EBP,ESP
 00000348  51				push	ECX 
 00000349  53				push	EBX 
 0000034A  56				push	ESI 
 0000034B  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000034C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000352  50				push	EAX
 00000353  52				push	EDX 
 00000354  E8 00000000 E		call	 Math_Sign
 00000359  50				push	EAX
 0000035A  52				push	EDX 
 0000035B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000035E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000361  50				push	EAX
 00000362  52				push	EDX 
 00000363  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000366  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000369  9B DB E2			fclex
 0000036C  50				push	EAX
 0000036D  52				push	EDX 
 0000036E  DD 04 24			fld	qword ptr [ESP]
 00000371  59				pop	ECX
 00000372  59				pop	ECX 
 00000373  DC 0C 24			fmul	qword ptr [ESP]
 00000376  DD 1C 24			fstp	qword ptr [ESP]
 00000379  B8 00000001			mov	EAX,000000001h
 0000037E  50				push	EAX
 0000037F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000384  50				push	EAX
 00000385  52				push	EDX 
 00000386  DD 04 24			fld	qword ptr [ESP]
 00000389  59				pop	ECX
 0000038A  59				pop	ECX 
 0000038B  DC 04 24			fadd	qword ptr [ESP]
 0000038E  DD 1C 24			fstp	qword ptr [ESP]
 00000391  E8 00000000 E		call	 Math_Sqrt
 00000396  9B DB E2			fclex
 00000399  50				push	EAX
 0000039A  52				push	EDX 
 0000039B  DD 04 24			fld	qword ptr [ESP]
 0000039E  59				pop	ECX
 0000039F  59				pop	ECX 
 000003A0  DC 0C 24			fmul	qword ptr [ESP]
 000003A3  DD 1C 24			fstp	qword ptr [ESP]
 000003A6  B8 00000001			mov	EAX,000000001h
 000003AB  50				push	EAX
 000003AC  E8 00000000 E		call	 FloatingPoint_FromInt
 000003B1  50				push	EAX
 000003B2  52				push	EDX 
 000003B3  DD 04 24			fld	qword ptr [ESP]
 000003B6  59				pop	ECX
 000003B7  59				pop	ECX 
 000003B8  DC 04 24			fadd	qword ptr [ESP]
 000003BB  DD 1C 24			fstp	qword ptr [ESP]
 000003BE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003C1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003C4  9B DB E2			fclex
 000003C7  50				push	EAX
 000003C8  52				push	EDX 
 000003C9  DD 04 24			fld	qword ptr [ESP]
 000003CC  59				pop	ECX
 000003CD  59				pop	ECX 
 000003CE  DC 3C 24			fdivr	qword ptr [ESP]
 000003D1  DD 1C 24			fstp	qword ptr [ESP]
 000003D4  E8 00000000 E		call	 Math_Ln
 000003D9  EB 00			jmp	OFFSET $L000506
				;}
 000003DB			$L000506:

 000003DB  5F				pop	EDI
 000003DC  5E				pop	ESI 
 000003DD  5B				pop	EBX 
 000003DE  8B E5			mov	ESP,EBP
 000003E0  5D				pop	EBP 
 000003E1  C2 0008			retn	000000008h
 000003E4			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003E4			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003E4  55				push	EBP
 000003E5  8B EC			mov	EBP,ESP
 000003E7  51				push	ECX 
 000003E8  53				push	EBX 
 000003E9  56				push	ESI 
 000003EA  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 000003EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003F1  50				push	EAX
 000003F2  52				push	EDX 
 000003F3  B8 00000001			mov	EAX,000000001h
 000003F8  50				push	EAX
 000003F9  E8 00000000 E		call	 FloatingPoint_FromInt
 000003FE  50				push	EAX
 000003FF  52				push	EDX 
 00000400  DD 04 24			fld	qword ptr [ESP]
 00000403  59				pop	ECX
 00000404  59				pop	ECX 
 00000405  DC 04 24			fadd	qword ptr [ESP]
 00000408  DD 1C 24			fstp	qword ptr [ESP]
 0000040B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000040E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000411  50				push	EAX
 00000412  52				push	EDX 
 00000413  B8 00000001			mov	EAX,000000001h
 00000418  50				push	EAX
 00000419  E8 00000000 E		call	 FloatingPoint_FromInt
 0000041E  50				push	EAX
 0000041F  52				push	EDX 
 00000420  DD 04 24			fld	qword ptr [ESP]
 00000423  59				pop	ECX
 00000424  59				pop	ECX 
 00000425  DD 04 24			fld	qword ptr [ESP]
 00000428  D8 E1			fsub	st,st(1)
 0000042A  DD 1C 24			fstp	qword ptr [ESP]
 0000042D  9B DB E2			fclex
 00000430  DD 04 24			fld	qword ptr [ESP]
 00000433  59				pop	ECX
 00000434  59				pop	ECX 
 00000435  DC 3C 24			fdivr	qword ptr [ESP]
 00000438  DD 1C 24			fstp	qword ptr [ESP]
 0000043B  E8 00000000 E		call	 Math_Ln
 00000440  50				push	EAX
 00000441  52				push	EDX 
 00000442  B8 00000002			mov	EAX,000000002h
 00000447  9B DB E2			fclex
 0000044A  50				push	EAX
 0000044B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000450  50				push	EAX
 00000451  52				push	EDX 
 00000452  DD 04 24			fld	qword ptr [ESP]
 00000455  59				pop	ECX
 00000456  59				pop	ECX 
 00000457  DC 3C 24			fdivr	qword ptr [ESP]
 0000045A  DD 1C 24			fstp	qword ptr [ESP]
 0000045D  5A				pop	EDX
 0000045E  58				pop	EAX 
 0000045F  EB 00			jmp	OFFSET $L000508
				;}
 00000461			$L000508:

 00000461  5F				pop	EDI
 00000462  5E				pop	ESI 
 00000463  5B				pop	EBX 
 00000464  8B E5			mov	ESP,EBP
 00000466  5D				pop	EBP 
 00000467  C2 0008			retn	000000008h
 0000046A			Math_Hyperbolic_Inverse_HArccotan ENDP

 0000046A			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 0000046A  55				push	EBP
 0000046B  8B EC			mov	EBP,ESP
 0000046D  51				push	ECX 
 0000046E  53				push	EBX 
 0000046F  56				push	ESI 
 00000470  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 00000471  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000474  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000477  50				push	EAX
 00000478  52				push	EDX 
 00000479  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000047C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000047F  9B DB E2			fclex
 00000482  50				push	EAX
 00000483  52				push	EDX 
 00000484  DD 04 24			fld	qword ptr [ESP]
 00000487  59				pop	ECX
 00000488  59				pop	ECX 
 00000489  DC 0C 24			fmul	qword ptr [ESP]
 0000048C  DD 1C 24			fstp	qword ptr [ESP]
 0000048F  DD 04 24			fld	qword ptr [ESP]
 00000492  D9 E0			fchs
 00000494  DD 1C 24			fstp	qword ptr [ESP]
 00000497  B8 00000001			mov	EAX,000000001h
 0000049C  50				push	EAX
 0000049D  E8 00000000 E		call	 FloatingPoint_FromInt
 000004A2  50				push	EAX
 000004A3  52				push	EDX 
 000004A4  DD 04 24			fld	qword ptr [ESP]
 000004A7  59				pop	ECX
 000004A8  59				pop	ECX 
 000004A9  DC 04 24			fadd	qword ptr [ESP]
 000004AC  DD 1C 24			fstp	qword ptr [ESP]
 000004AF  E8 00000000 E		call	 Math_Sqrt
 000004B4  50				push	EAX
 000004B5  52				push	EDX 
 000004B6  B8 00000001			mov	EAX,000000001h
 000004BB  50				push	EAX
 000004BC  E8 00000000 E		call	 FloatingPoint_FromInt
 000004C1  50				push	EAX
 000004C2  52				push	EDX 
 000004C3  DD 04 24			fld	qword ptr [ESP]
 000004C6  59				pop	ECX
 000004C7  59				pop	ECX 
 000004C8  DC 04 24			fadd	qword ptr [ESP]
 000004CB  DD 1C 24			fstp	qword ptr [ESP]
 000004CE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004D1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004D4  9B DB E2			fclex
 000004D7  50				push	EAX
 000004D8  52				push	EDX 
 000004D9  DD 04 24			fld	qword ptr [ESP]
 000004DC  59				pop	ECX
 000004DD  59				pop	ECX 
 000004DE  DC 3C 24			fdivr	qword ptr [ESP]
 000004E1  DD 1C 24			fstp	qword ptr [ESP]
 000004E4  E8 00000000 E		call	 Math_Ln
 000004E9  EB 00			jmp	OFFSET $L000504
				;}
 000004EB			$L000504:

 000004EB  5F				pop	EDI
 000004EC  5E				pop	ESI 
 000004ED  5B				pop	EBX 
 000004EE  8B E5			mov	ESP,EBP
 000004F0  5D				pop	EBP 
 000004F1  C2 0008			retn	000000008h
 000004F4			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004F4			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004F4  55				push	EBP
 000004F5  8B EC			mov	EBP,ESP
 000004F7  51				push	ECX 
 000004F8  53				push	EBX 
 000004F9  56				push	ESI 
 000004FA  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 000004FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000501  50				push	EAX
 00000502  52				push	EDX 
 00000503  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000506  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000509  50				push	EAX
 0000050A  52				push	EDX 
 0000050B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000050E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000511  9B DB E2			fclex
 00000514  50				push	EAX
 00000515  52				push	EDX 
 00000516  DD 04 24			fld	qword ptr [ESP]
 00000519  59				pop	ECX
 0000051A  59				pop	ECX 
 0000051B  DC 0C 24			fmul	qword ptr [ESP]
 0000051E  DD 1C 24			fstp	qword ptr [ESP]
 00000521  B8 00000001			mov	EAX,000000001h
 00000526  50				push	EAX
 00000527  E8 00000000 E		call	 FloatingPoint_FromInt
 0000052C  50				push	EAX
 0000052D  52				push	EDX 
 0000052E  DD 04 24			fld	qword ptr [ESP]
 00000531  59				pop	ECX
 00000532  59				pop	ECX 
 00000533  DC 04 24			fadd	qword ptr [ESP]
 00000536  DD 1C 24			fstp	qword ptr [ESP]
 00000539  E8 00000000 E		call	 Math_Sqrt
 0000053E  50				push	EAX
 0000053F  52				push	EDX 
 00000540  DD 04 24			fld	qword ptr [ESP]
 00000543  59				pop	ECX
 00000544  59				pop	ECX 
 00000545  DC 04 24			fadd	qword ptr [ESP]
 00000548  DD 1C 24			fstp	qword ptr [ESP]
 0000054B  E8 00000000 E		call	 Math_Ln
 00000550  EB 00			jmp	OFFSET $L000497
				;}
 00000552			$L000497:

 00000552  5F				pop	EDI
 00000553  5E				pop	ESI 
 00000554  5B				pop	EBX 
 00000555  8B E5			mov	ESP,EBP
 00000557  5D				pop	EBP 
 00000558  C2 0008			retn	000000008h
 0000055B			Math_Hyperbolic_Inverse_HArcsin ENDP

 0000055B			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 0000055B  55				push	EBP
 0000055C  8B EC			mov	EBP,ESP
 0000055E  51				push	ECX 
 0000055F  53				push	EBX 
 00000560  56				push	ESI 
 00000561  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 00000562  B8 00000001			mov	EAX,000000001h
 00000567  50				push	EAX
 00000568  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000056B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000056E  50				push	EAX
 0000056F  52				push	EDX 
 00000570  DD 04 24			fld	qword ptr [ESP]
 00000573  59				pop	ECX
 00000574  59				pop	ECX 
 00000575  E8 00000000 E		call	 FloatingPoint_FromInt
 0000057A  50				push	EAX
 0000057B  52				push	EDX 
 0000057C  DC 04 24			fadd	qword ptr [ESP]
 0000057F  DD 1C 24			fstp	qword ptr [ESP]
 00000582  B8 00000001			mov	EAX,000000001h
 00000587  50				push	EAX
 00000588  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000058B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000058E  50				push	EAX
 0000058F  52				push	EDX 
 00000590  DD 04 24			fld	qword ptr [ESP]
 00000593  59				pop	ECX
 00000594  59				pop	ECX 
 00000595  E8 00000000 E		call	 FloatingPoint_FromInt
 0000059A  50				push	EAX
 0000059B  52				push	EDX 
 0000059C  DD 04 24			fld	qword ptr [ESP]
 0000059F  D8 E1			fsub	st,st(1)
 000005A1  DD 1C 24			fstp	qword ptr [ESP]
 000005A4  9B DB E2			fclex
 000005A7  DD 04 24			fld	qword ptr [ESP]
 000005AA  59				pop	ECX
 000005AB  59				pop	ECX 
 000005AC  DC 3C 24			fdivr	qword ptr [ESP]
 000005AF  DD 1C 24			fstp	qword ptr [ESP]
 000005B2  E8 00000000 E		call	 Math_Ln
 000005B7  50				push	EAX
 000005B8  52				push	EDX 
 000005B9  B8 00000002			mov	EAX,000000002h
 000005BE  9B DB E2			fclex
 000005C1  50				push	EAX
 000005C2  E8 00000000 E		call	 FloatingPoint_FromInt
 000005C7  50				push	EAX
 000005C8  52				push	EDX 
 000005C9  DD 04 24			fld	qword ptr [ESP]
 000005CC  59				pop	ECX
 000005CD  59				pop	ECX 
 000005CE  DC 3C 24			fdivr	qword ptr [ESP]
 000005D1  DD 1C 24			fstp	qword ptr [ESP]
 000005D4  5A				pop	EDX
 000005D5  58				pop	EAX 
 000005D6  EB 00			jmp	OFFSET $L000502
				;}
 000005D8			$L000502:

 000005D8  5F				pop	EDI
 000005D9  5E				pop	ESI 
 000005DA  5B				pop	EBX 
 000005DB  8B E5			mov	ESP,EBP
 000005DD  5D				pop	EBP 
 000005DE  C2 0008			retn	000000008h
 000005E1			Math_Hyperbolic_Inverse_HArctan ENDP

 000005E1			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005E1  55				push	EBP
 000005E2  8B EC			mov	EBP,ESP
 000005E4  51				push	ECX 
 000005E5  53				push	EBX 
 000005E6  56				push	ESI 
 000005E7  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 000005E8  B8 000000B4			mov	EAX,0000000B4h
 000005ED  50				push	EAX
 000005EE  E8 00000000 E		call	 Math_pi
 000005F3  9B DB E2			fclex
 000005F6  50				push	EAX
 000005F7  52				push	EDX 
 000005F8  DD 04 24			fld	qword ptr [ESP]
 000005FB  59				pop	ECX
 000005FC  59				pop	ECX 
 000005FD  E8 00000000 E		call	 FloatingPoint_FromInt
 00000602  50				push	EAX
 00000603  52				push	EDX 
 00000604  DC 3C 24			fdivr	qword ptr [ESP]
 00000607  DD 1C 24			fstp	qword ptr [ESP]
 0000060A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000060D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000610  9B DB E2			fclex
 00000613  50				push	EAX
 00000614  52				push	EDX 
 00000615  DD 04 24			fld	qword ptr [ESP]
 00000618  59				pop	ECX
 00000619  59				pop	ECX 
 0000061A  DC 0C 24			fmul	qword ptr [ESP]
 0000061D  DD 1C 24			fstp	qword ptr [ESP]
 00000620  5A				pop	EDX
 00000621  58				pop	EAX 
 00000622  EB 00			jmp	OFFSET $L000466
				;}
 00000624			$L000466:

 00000624  5F				pop	EDI
 00000625  5E				pop	ESI 
 00000626  5B				pop	EBX 
 00000627  8B E5			mov	ESP,EBP
 00000629  5D				pop	EBP 
 0000062A  C2 0008			retn	000000008h
 0000062D			Math_RadiansToDegrees ENDP

 0000062D			Samples_Cotorra_Destructor PROC NEAR 
				;void Destructor(void);
 0000062D  55				push	EBP
 0000062E  8B EC			mov	EBP,ESP
 00000630  51				push	ECX 
 00000631  53				push	EBX 
 00000632  56				push	ESI 
 00000633  57				push	EDI 
				;{

				;{33}:Console::WriteLn("in the Destructor()...\n");
 00000634  8D 05 00000177 R		lea	EAX,OFFSET $S000532
 0000063A  6A 00			push	000000000h
 0000063C  50				push	EAX 
 0000063D  E8 00000000 E		call	 Console_WriteString
 00000642  E8 00000000 E		call	 Console_WriteCrLf 

				;{34}:if(what != null)
 00000647  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000064A  8B 01			mov	EAX,dword ptr [ECX]
 0000064C  8B C8			mov	ECX,EAX 
 0000064E  50				push	EAX
 0000064F  33 C0			xor	EAX,EAX
 00000651  5A				pop	EDX
 00000652  3B D0			cmp	EDX,EAX
 00000654  0F 95 C0			setnz	AL
 00000657  84 C0			test	AL,AL
 00000659  74 11			jz	OFFSET $L000623

				;{35}:destroy []what;
 0000065B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000065E  8B 01			mov	EAX,dword ptr [ECX]
 00000660  8B C8			mov	ECX,EAX 
 00000662  85 C0			test	EAX,EAX
 00000664  74 06			jz	OFFSET $L000625
 00000666  50				push	EAX
 00000667  E8 00000000 E		call	 System_Memory_Destroy
 0000066C			$L000625:
 0000066C			$L000623:
				;}
 0000066C			$L000531:

 0000066C  5F				pop	EDI
 0000066D  5E				pop	ESI 
 0000066E  5B				pop	EBX 
 0000066F  8B E5			mov	ESP,EBP
 00000671  5D				pop	EBP 
 00000672  C3				ret	
 00000673			Samples_Cotorra_Destructor ENDP

 00000673			Samples_Cotorra_Listen PROC NEAR 
				;void Listen(string phrase);
 00000673  55				push	EBP
 00000674  8B EC			mov	EBP,ESP
 00000676  83 EC 08			sub	ESP,000000008h
 00000679  53				push	EBX 
 0000067A  56				push	ESI 
 0000067B  57				push	EDI 
 0000067C  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{17}:n= StringHandling::StringLength(phrase);
 0000067F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000682  50				push	EAX
 00000683  E8 00000000 E		call	 StringHandling_StringLength
 00000688  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{18}:if(what != null)
 0000068B  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000068E  8B 01			mov	EAX,dword ptr [ECX]
 00000690  8B C8			mov	ECX,EAX 
 00000692  50				push	EAX
 00000693  33 C0			xor	EAX,EAX
 00000695  5A				pop	EDX
 00000696  3B D0			cmp	EDX,EAX
 00000698  0F 95 C0			setnz	AL
 0000069B  84 C0			test	AL,AL
 0000069D  74 11			jz	OFFSET $L000626

				;{19}:destroy []what;
 0000069F  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000006A2  8B 01			mov	EAX,dword ptr [ECX]
 000006A4  8B C8			mov	ECX,EAX 
 000006A6  85 C0			test	EAX,EAX
 000006A8  74 06			jz	OFFSET $L000628
 000006AA  50				push	EAX
 000006AB  E8 00000000 E		call	 System_Memory_Destroy
 000006B0			$L000628:
 000006B0			$L000626:

				;{21}:what= new char[n + 1];
 000006B0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006B3  50				push	EAX
 000006B4  B8 00000001			mov	EAX,000000001h
 000006B9  5A				pop	EDX
 000006BA  03 C2			add	EAX,EDX
 000006BC  6B C0 01			imul	EAX,000000001h
 000006BF  50				push	EAX
 000006C0  8B D8			mov	EBX,EAX
 000006C2  E8 00000000 E		call	 System_Memory_New
 000006C7  85 C0			test	EAX,EAX
 000006C9  74 04			jz	 $L000629
 000006CB  8B F0			mov	ESI,EAX 
 000006CD  EB 02			jmp	 $L000630
 000006CF			$L000629:
 000006CF  33 F6			xor	ESI,ESI
 000006D1			$L000630:
 000006D1  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000006D4  89 31			mov	dword ptr [ECX],ESI 

				;{22}:StringHandling::StringCopy(what, phrase, n);
 000006D6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006D9  50				push	EAX 
 000006DA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000006DD  50				push	EAX 
 000006DE  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000006E1  8B 01			mov	EAX,dword ptr [ECX]
 000006E3  8B C8			mov	ECX,EAX 
 000006E5  50				push	EAX
 000006E6  E8 00000000 E		call	 StringHandling_StringCopy

				;{23}:what[n]= ' ';
 000006EB  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000006EE  8B 01			mov	EAX,dword ptr [ECX]
 000006F0  8B C8			mov	ECX,EAX 
 000006F2  50				push	EAX
 000006F3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006F6  5E				pop	ESI
 000006F7  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000006FA  50				push	EAX
 000006FB  33 C0			xor	EAX,EAX
 000006FD  5B				pop	EBX
 000006FE  89 03			mov	dword ptr [EBX],EAX
				;}
 00000700			$L000526:

 00000700  5F				pop	EDI
 00000701  5E				pop	ESI 
 00000702  5B				pop	EBX 
 00000703  8B E5			mov	ESP,EBP
 00000705  5D				pop	EBP 
 00000706  C2 0004			retn	000000004h
 00000709			Samples_Cotorra_Listen ENDP

 00000709			Samples_Cotorra_Talk PROC NEAR 
				;void Talk(void);
 00000709  55				push	EBP
 0000070A  8B EC			mov	EBP,ESP
 0000070C  51				push	ECX 
 0000070D  53				push	EBX 
 0000070E  56				push	ESI 
 0000070F  57				push	EDI 
				;{

				;{28}:Console::WriteLn(what);
 00000710  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000713  8B 01			mov	EAX,dword ptr [ECX]
 00000715  8B C8			mov	ECX,EAX 
 00000717  6A 00			push	000000000h
 00000719  50				push	EAX 
 0000071A  E8 00000000 E		call	 Console_WriteString
 0000071F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000724			$L000530:

 00000724  5F				pop	EDI
 00000725  5E				pop	ESI 
 00000726  5B				pop	EBX 
 00000727  8B E5			mov	ESP,EBP
 00000729  5D				pop	EBP 
 0000072A  C3				ret	
 0000072B			Samples_Cotorra_Talk ENDP

 0000072B			Samples_Cotorra PROC NEAR 
				;void Samples::Cotorra(void);
 0000072B  55				push	EBP
 0000072C  8B EC			mov	EBP,ESP
 0000072E  51				push	ECX 
 0000072F  53				push	EBX 
 00000730  56				push	ESI 
 00000731  57				push	EDI 
 00000732  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000735  E8 00000789			call	 __member_Init@Samples_Cotorra

 0000073A  5F				pop	EDI
 0000073B  5E				pop	ESI 
 0000073C  5B				pop	EBX 
 0000073D  8B E5			mov	ESP,EBP
 0000073F  5D				pop	EBP 
 00000740  C3				ret	
 00000741			Samples_Cotorra ENDP

 00000741			Samples_SimpleProbability_CalcMedia PROC NEAR 
				;double CalcMedia(void);
 00000741  55				push	EBP
 00000742  8B EC			mov	EBP,ESP
 00000744  83 EC 14			sub	ESP,000000014h
 00000747  53				push	EBX 
 00000748  56				push	ESI 
 00000749  57				push	EDI 
 0000074A  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{68}:n= 12;
 0000074D  B8 0000000C			mov	EAX,00000000Ch
 00000752  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{69}:media= 0.0;
 00000755  D9 EE			fldz
 00000757  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{70}:for(i= 0; i <= n; i++ )
 0000075A  33 C0			xor	EAX,EAX
 0000075C  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 0000075F  EB 06			jmp	OFFSET $L000632
 00000761			$L000633:
 00000761  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000764  FF 45 F0			inc	dword ptr [EBP-16]
 00000767			$L000632:
 00000767  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000076A  50				push	EAX
 0000076B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000076E  5A				pop	EDX
 0000076F  3B D0			cmp	EDX,EAX
 00000771  0F 9E C0			setle	AL
 00000774  84 C0			test	AL,AL
 00000776  74 38			jz	OFFSET $L000634
				;{

				;{72}:media= media + array[i];
 00000778  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000077B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 0000077E  50				push	EAX
 0000077F  52				push	EDX 
 00000780  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000783  8B 01			mov	EAX,dword ptr [ECX]
 00000785  8B C8			mov	ECX,EAX 
 00000787  50				push	EAX
 00000788  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000078B  5E				pop	ESI
 0000078C  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 0000078F  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00000796  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00000799  50				push	EAX
 0000079A  52				push	EDX 
 0000079B  DD 04 24			fld	qword ptr [ESP]
 0000079E  59				pop	ECX
 0000079F  59				pop	ECX 
 000007A0  DC 04 24			fadd	qword ptr [ESP]
 000007A3  DD 1C 24			fstp	qword ptr [ESP]
 000007A6  DD C0			ffree	st
 000007A8  DD 04 24			fld	qword ptr [ESP]
 000007AB  DD 5D F4			fstp	qword ptr [EBP-000Ch]
				;}
 000007AE  EB B1			jmp	OFFSET $L000633 
 000007B0			$L000634:

				;{75}:media= media / n;
 000007B0  5A				pop	EDX
 000007B1  58				pop	EAX 
 000007B2  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000007B5  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000007B8  50				push	EAX
 000007B9  52				push	EDX 
 000007BA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000007BD  9B DB E2			fclex
 000007C0  50				push	EAX
 000007C1  E8 00000000 E		call	 FloatingPoint_FromInt
 000007C6  50				push	EAX
 000007C7  52	push	EDX 
 000007C8  DD 04 24			fld	qword ptr [ESP]
 000007CB  59				pop	ECX
 000007CC  59				pop	ECX 
 000007CD  DC 3C 24			fdivr	qword ptr [ESP]
 000007D0  DD 1C 24			fstp	qword ptr [ESP]
 000007D3  DD C0			ffree	st
 000007D5  DD 04 24			fld	qword ptr [ESP]
 000007D8  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{79}:return media
 000007DB  5A				pop	EDX
 000007DC  58				pop	EAX 
 000007DD  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000007E0  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000007E3  EB 00			jmp	OFFSET $L000562
				;}
 000007E5			$L000562:

 000007E5  5F				pop	EDI
 000007E6  5E				pop	ESI 
 000007E7  5B				pop	EBX 
 000007E8  8B E5			mov	ESP,EBP
 000007EA  5D				pop	EBP 
 000007EB  C3				ret	
 000007EC			Samples_SimpleProbability_CalcMedia ENDP

 000007EC			Samples_SimpleProbability_CalcStdDev PROC NEAR 
				;double CalcStdDev(double mean);
 000007EC  55				push	EBP
 000007ED  8B EC			mov	EBP,ESP
 000007EF  51				push	ECX 
 000007F0  53				push	EBX 
 000007F1  56				push	ESI 
 000007F2  57				push	EDI 
				;{

				;{100}:return Math::Sqrt(CalcVariance(mean))
 000007F3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000007F6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000007F9  50				push	EAX
 000007FA  52				push	EDX 
 000007FB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007FE  E8 00000012			call	 Samples_SimpleProbability_CalcVariance
 00000803  50				push	EAX
 00000804  52				push	EDX 
 00000805  E8 00000000 E		call	 Math_Sqrt
 0000080A  EB 00			jmp	OFFSET $L000573
				;}
 0000080C			$L000573:

 0000080C  5F				pop	EDI
 0000080D  5E				pop	ESI 
 0000080E  5B				pop	EBX 
 0000080F  8B E5			mov	ESP,EBP
 00000811  5D				pop	EBP 
 00000812  C2 0008			retn	000000008h
 00000815			Samples_SimpleProbability_CalcStdDev ENDP

 00000815			Samples_SimpleProbability_CalcVariance PROC NEAR 
				;double CalcVariance(double mean);
 00000815  55				push	EBP
 00000816  8B EC			mov	EBP,ESP
 00000818  83 EC 14			sub	ESP,000000014h
 0000081B  53				push	EBX 
 0000081C  56				push	ESI 
 0000081D  57				push	EDI 
 0000081E  89 4D EC			mov	dword ptr [EBP-0014h],ECX
				;{

				;{84}:n= 12;
 00000821  B8 0000000C			mov	EAX,00000000Ch
 00000826  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{85}:variance= 0.0;
 00000829  D9 EE			fldz
 0000082B  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{86}:for(i= 0; i <= n; i++ )
 0000082E  33 C0			xor	EAX,EAX
 00000830  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000833  EB 06			jmp	OFFSET $L000635
 00000835			$L000636:
 00000835  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000838  FF 45 F0			inc	dword ptr [EBP-16]
 0000083B			$L000635:
 0000083B  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000083E  50				push	EAX
 0000083F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000842  5A				pop	EDX
 00000843  3B D0			cmp	EDX,EAX
 00000845  0F 9E C0			setle	AL
 00000848  84 C0			test	AL,AL
 0000084A  74 64			jz	OFFSET $L000637
				;{

				;{90}:variance= variance + Math::Pow(Math::Abs(mean - array[i]), 2.0);
 0000084C  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000084F  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000852  50				push	EAX
 00000853  52				push	EDX 
 00000854  33 D2			xor	EDX,EDX
 00000856  B8 40000000			mov	EAX,040000000h
 0000085B  50				push	EAX 
 0000085C  52				push	EDX 
 0000085D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000860  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000863  50				push	EAX
 00000864  52				push	EDX 
 00000865  8B 4D EC			mov	ECX,dword ptr [EBP-0014h]
 00000868  8B 01			mov	EAX,dword ptr [ECX]
 0000086A  8B C8			mov	ECX,EAX 
 0000086C  50				push	EAX
 0000086D  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000870  5E				pop	ESI
 00000871  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00000874  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000087B  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 0000087E  50				push	EAX
 0000087F  52				push	EDX 
 00000880  DD 04 24			fld	qword ptr [ESP]
 00000883  59				pop	ECX
 00000884  59				pop	ECX 
 00000885  DD 04 24			fld	qword ptr [ESP]
 00000888  D8 E1			fsub	st,st(1)
 0000088A  DD 1C 24			fstp	qword ptr [ESP]
 0000088D  E8 00000000 E		call	 Math_Abs
 00000892  50				push	EAX
 00000893  52				push	EDX 
 00000894  E8 00000000 E		call	 Math_Pow
 00000899  50				push	EAX
 0000089A  52				push	EDX 
 0000089B  DD 04 24			fld	qword ptr [ESP]
 0000089E  59				pop	ECX
 0000089F  59				pop	ECX 
 000008A0  DC 04 24			fadd	qword ptr [ESP]
 000008A3  DD 1C 24			fstp	qword ptr [ESP]
 000008A6  DD C0			ffree	st
 000008A8  DD 04 24			fld	qword ptr [ESP]
 000008AB  DD 5D F4			fstp	qword ptr [EBP-000Ch]
				;}
 000008AE  EB 85			jmp	OFFSET $L000636 
 000008B0			$L000637:

				;{93}:variance= variance / (n - 1);
 000008B0  5A				pop	EDX
 000008B1  58				pop	EAX 
 000008B2  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000008B5  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000008B8  50				push	EAX
 000008B9  52				push	EDX 
 000008BA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000008BD  50				push	EAX
 000008BE  B8 00000001			mov	EAX,000000001h
 000008C3  5A				pop	EDX
 000008C4  2B D0			sub	EDX,EAX
 000008C6  8B C2			mov	EAX,EDX
 000008C8  9B DB E2			fclex
 000008CB  50				push	EAX
 000008CC  E8 00000000 E		call	 FloatingPoint_FromInt
 000008D1  50				push	EAX
 000008D2  52				push	EDX 
 000008D3  DD 04 24			fld	qword ptr [ESP]
 000008D6  59				pop	ECX
 000008D7  59				pop	ECX 
 000008D8  DC 3C 24			fdivr	qword ptr [ESP]
 000008DB  DD 1C 24			fstp	qword ptr [ESP]
 000008DE  DD C0			ffree	st
 000008E0  DD 04 24			fld	qword ptr [ESP]
 000008E3  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{95}:return variance
 000008E6  5A				pop	EDX
 000008E7  58				pop	EAX 
 000008E8  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000008EB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000008EE  EB 00			jmp	OFFSET $L000567
				;}
 000008F0			$L000567:

 000008F0  5F				pop	EDI
 000008F1  5E				pop	ESI 
 000008F2  5B				pop	EBX 
 000008F3  8B E5			mov	ESP,EBP
 000008F5  5D				pop	EBP 
 000008F6  C2 0008			retn	000000008h
 000008F9			Samples_SimpleProbability_CalcVariance ENDP

 000008F9			Samples_SimpleProbability_Destructor PROC NEAR 
				;void Destructor(void);
 000008F9  55				push	EBP
 000008FA  8B EC			mov	EBP,ESP
 000008FC  51				push	ECX 
 000008FD  53				push	EBX 
 000008FE  56				push	ESI 
 000008FF  57				push	EDI 
				;{

				;{105}:Console::WriteLn("In the Simple Destructor()...\n");
 00000900  8D 05 00000136 R		lea	EAX,OFFSET $S000576
 00000906  6A 00			push	000000000h
 00000908  50				push	EAX 
 00000909  E8 00000000 E		call	 Console_WriteString
 0000090E  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000913			$L000575:

 00000913  5F				pop	EDI
 00000914  5E				pop	ESI 
 00000915  5B				pop	EBX 
 00000916  8B E5			mov	ESP,EBP
 00000918  5D				pop	EBP 
 00000919  C3				ret	
 0000091A			Samples_SimpleProbability_Destructor ENDP

 0000091A			Samples_SimpleProbability_Fibonacci PROC NEAR 
				;unsigned Fibonacci(unsigned n);
 0000091A  55				push	EBP
 0000091B  8B EC			mov	EBP,ESP
 0000091D  83 EC 0C			sub	ESP,00000000Ch
 00000920  53				push	EBX 
 00000921  56				push	ESI 
 00000922  57				push	EDI 
 00000923  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{131}:if(n == 0 || n == 1)
 00000926  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000929  50				push	EAX
 0000092A  33 C0			xor	EAX,EAX
 0000092C  5A				pop	EDX
 0000092D  3B D0			cmp	EDX,EAX
 0000092F  0F 94 C0			setz	AL
 00000932  84 C0			test	AL,AL
 00000934  75 0F			jnz	OFFSET $L000640
 00000936  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000939  50				push	EAX
 0000093A  B8 00000001			mov	EAX,000000001h
 0000093F  5A				pop	EDX
 00000940  3B D0			cmp	EDX,EAX
 00000942  0F 94 C0			setz	AL
 00000945			$L000640:
 00000945  84 C0			test	AL,AL
 00000947  74 08			jz	OFFSET $L000638

				;{132}:return n
 00000949  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000094C  E9 000000B3			jmp	OFFSET $L000581
 00000951			$L000638:

				;{134}:a= Fibonacci((n + 1) div 2);
 00000951  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000954  50				push	EAX
 00000955  B8 00000001			mov	EAX,000000001h
 0000095A  5A				pop	EDX
 0000095B  03 C2			add	EAX,EDX
 0000095D  50				push	EAX
 0000095E  B8 00000002			mov	EAX,000000002h
 00000963  8B C8			mov	ECX,EAX
 00000965  58				pop	EAX
 00000966  33 D2			xor	EDX,EDX
 00000968  F7 F9			idiv	ECX
 0000096A  50				push	EAX
 0000096B  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 0000096E  E8 FFFFFFA7			call	 Samples_SimpleProbability_Fibonacci
 00000973  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{135}:b= Fibonacci(((n + 1) div 2) - 1);
 00000976  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000979  50				push	EAX
 0000097A  B8 00000001			mov	EAX,000000001h
 0000097F  5A				pop	EDX
 00000980  03 C2			add	EAX,EDX
 00000982  50				push	EAX
 00000983  B8 00000002			mov	EAX,000000002h
 00000988  8B C8			mov	ECX,EAX
 0000098A  58				pop	EAX
 0000098B  33 D2			xor	EDX,EDX
 0000098D  F7 F9			idiv	ECX
 0000098F  50				push	EAX
 00000990  B8 00000001			mov	EAX,000000001h
 00000995  5A				pop	EDX
 00000996  2B D0			sub	EDX,EAX
 00000998  8B C2			mov	EAX,EDX
 0000099A  50				push	EAX
 0000099B  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 0000099E  E8 FFFFFF77			call	 Samples_SimpleProbability_Fibonacci
 000009A3  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{137}:if(n % 2 == 0)
 000009A6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000009A9  50				push	EAX
 000009AA  B8 00000002			mov	EAX,000000002h
 000009AF  8B C8			mov	ECX,EAX
 000009B1  58				pop	EAX
 000009B2  33 D2			xor	EDX,EDX
 000009B4  F7 F9			idiv	ECX
 000009B6  8B C2			mov	EAX,EDX 
 000009B8  50				push	EAX
 000009B9  33 C0			xor	EAX,EAX
 000009BB  5A				pop	EDX
 000009BC  3B D0			cmp	EDX,EAX
 000009BE  0F 94 C0			setz	AL
 000009C1  84 C0			test	AL,AL
 000009C3  74 21			jz	OFFSET $L000641

				;{138}:return a * (a + 2 * b)
 000009C5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000009C8  50				push	EAX
 000009C9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000009CC  50				push	EAX
 000009CD  B8 00000002			mov	EAX,000000002h
 000009D2  50				push	EAX
 000009D3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000009D6  59				pop	ECX
 000009D7  33 D2			xor	EDX,EDX
 000009D9  0F AF C1			imul	EAX,ECX
 000009DC  5A				pop	EDX
 000009DD  03 C2			add	EAX,EDX
 000009DF  59				pop	ECX
 000009E0  99				cdq	
 000009E1  0F AF C1			imul	EAX,ECX
 000009E4  EB 1E			jmp	OFFSET $L000581

				; else {
 000009E6			$L000641:

				;{140}:return a * a + b * b
 000009E6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000009E9  50				push	EAX
 000009EA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000009ED  59				pop	ECX
 000009EE  99				cdq	
 000009EF  0F AF C1			imul	EAX,ECX
 000009F2  50				push	EAX
 000009F3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000009F6  50				push	EAX
 000009F7  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000009FA  59				pop	ECX
 000009FB  99				cdq	
 000009FC  0F AF C1			imul	EAX,ECX
 000009FF  5A				pop	EDX
 00000A00  03 C2			add	EAX,EDX
 00000A02  EB 00			jmp	OFFSET $L000581
 00000A04			$L000642:

				; }
				;}
 00000A04			$L000581:

 00000A04  5F				pop	EDI
 00000A05  5E				pop	ESI 
 00000A06  5B				pop	EBX 
 00000A07  8B E5			mov	ESP,EBP
 00000A09  5D				pop	EBP 
 00000A0A  C2 0004			retn	000000004h
 00000A0D			Samples_SimpleProbability_Fibonacci ENDP

 00000A0D			Samples_SimpleProbability_Init PROC NEAR 
				;void Init(void);
 00000A0D  55				push	EBP
 00000A0E  8B EC			mov	EBP,ESP
 00000A10  51				push	ECX 
 00000A11  53				push	EBX 
 00000A12  56				push	ESI 
 00000A13  57				push	EDI 
				;{

				;{45}:array[0]= 3.1414124545234;
 00000A14  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A17  8B 01			mov	EAX,dword ptr [ECX]
 00000A19  8B C8			mov	ECX,EAX 
 00000A1B  50				push	EAX
 00000A1C  33 C0			xor	EAX,EAX
 00000A1E  5E				pop	ESI
 00000A1F  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000A22  50				push	EAX
 00000A23  BA DA5B6696			mov	EDX,0DA5B6696h
 00000A28  B8 4009219C			mov	EAX,04009219Ch 
 00000A2D  5B				pop	EBX
 00000A2E  89 13			mov	dword ptr [EBX],EDX
 00000A30  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{46}:array[1]= 3.0023452345234;
 00000A33  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A36  8B 01			mov	EAX,dword ptr [ECX]
 00000A38  8B C8			mov	ECX,EAX 
 00000A3A  50				push	EAX
 00000A3B  B8 00000001			mov	EAX,000000001h
 00000A40  5E				pop	ESI
 00000A41  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000A44  50				push	EAX
 00000A45  BA 940CA2B9			mov	EDX,0940CA2B9h
 00000A4A  B8 400804CD			mov	EAX,0400804CDh 
 00000A4F  5B				pop	EBX
 00000A50  89 13			mov	dword ptr [EBX],EDX
 00000A52  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{47}:array[2]= 2.9234655634676;
 00000A55  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A58  8B 01			mov	EAX,dword ptr [ECX]
 00000A5A  8B C8			mov	ECX,EAX 
 00000A5C  50				push	EAX
 00000A5D  B8 00000002			mov	EAX,000000002h
 00000A62  5E				pop	ESI
 00000A63  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000A66  50				push	EAX
 00000A67  BA E9D09ABC			mov	EDX,0E9D09ABCh
 00000A6C  B8 40076341			mov	EAX,040076341h 
 00000A71  5B				pop	EBX
 00000A72  89 13			mov	dword ptr [EBX],EDX
 00000A74  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{48}:array[3]= 3.87345634673673;
 00000A77  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A7A  8B 01			mov	EAX,dword ptr [ECX]
 00000A7C  8B C8			mov	ECX,EAX 
 00000A7E  50				push	EAX
 00000A7F  B8 00000003			mov	EAX,000000003h
 00000A84  5E				pop	ESI
 00000A85  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000A88  50				push	EAX
 00000A89  BA AE5DBE3E			mov	EDX,0AE5DBE3Eh
 00000A8E  B8 400EFCD6			mov	EAX,0400EFCD6h 
 00000A93  5B				pop	EBX
 00000A94  89 13			mov	dword ptr [EBX],EDX
 00000A96  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{49}:array[4]= 3.99994523453452;
 00000A99  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000A9C  8B 01			mov	EAX,dword ptr [ECX]
 00000A9E  8B C8			mov	ECX,EAX 
 00000AA0  50				push	EAX
 00000AA1  B8 00000004			mov	EAX,000000004h
 00000AA6  5E				pop	ESI
 00000AA7  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000AAA  50				push	EAX
 00000AAB  BA 4980EF3C			mov	EDX,04980EF3Ch
 00000AB0  B8 400FFFE3			mov	EAX,0400FFFE3h 
 00000AB5  5B				pop	EBX
 00000AB6  89 13			mov	dword ptr [EBX],EDX
 00000AB8  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{50}:array[5]= 4.123452345345345;
 00000ABB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ABE  8B 01			mov	EAX,dword ptr [ECX]
 00000AC0  8B C8			mov	ECX,EAX 
 00000AC2  50				push	EAX
 00000AC3  B8 00000005			mov	EAX,000000005h
 00000AC8  5E				pop	ESI
 00000AC9  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000ACC  50				push	EAX
 00000ACD  BA 4AA77DB4			mov	EDX,04AA77DB4h
 00000AD2  B8 40107E6A			mov	EAX,040107E6Ah 
 00000AD7  5B				pop	EBX
 00000AD8  89 13			mov	dword ptr [EBX],EDX
 00000ADA  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{51}:array[6]= 4.0000223412342;
 00000ADD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000AE0  8B 01			mov	EAX,dword ptr [ECX]
 00000AE2  8B C8			mov	ECX,EAX 
 00000AE4  50				push	EAX
 00000AE5  B8 00000006			mov	EAX,000000006h
 00000AEA  5E				pop	ESI
 00000AEB  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000AEE  50				push	EAX
 00000AEF  BA DB4B7B21			mov	EDX,0DB4B7B21h
 00000AF4  B8 40100005			mov	EAX,040100005h 
 00000AF9  5B				pop	EBX
 00000AFA  89 13			mov	dword ptr [EBX],EDX
 00000AFC  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{52}:array[7]= 4.0;
 00000AFF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B02  8B 01			mov	EAX,dword ptr [ECX]
 00000B04  8B C8			mov	ECX,EAX 
 00000B06  50				push	EAX
 00000B07  B8 00000007			mov	EAX,000000007h
 00000B0C  5E				pop	ESI
 00000B0D  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000B10  50				push	EAX
 00000B11  33 D2			xor	EDX,EDX
 00000B13  B8 40100000			mov	EAX,040100000h
 00000B18  5B				pop	EBX
 00000B19  89 13			mov	dword ptr [EBX],EDX
 00000B1B  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{53}:array[8]= 4.0012341234124;
 00000B1E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B21  8B 01			mov	EAX,dword ptr [ECX]
 00000B23  8B C8			mov	ECX,EAX 
 00000B25  50				push	EAX
 00000B26  B8 00000008			mov	EAX,000000008h
 00000B2B  5E				pop	ESI
 00000B2C  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000B2F  50				push	EAX
 00000B30  BA 849EC82E			mov	EDX,0849EC82Eh
 00000B35  B8 40100143			mov	EAX,040100143h 
 00000B3A  5B				pop	EBX
 00000B3B  89 13			mov	dword ptr [EBX],EDX
 00000B3D  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{54}:array[9]= 2.7567845684758;
 00000B40  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B43  8B 01			mov	EAX,dword ptr [ECX]
 00000B45  8B C8			mov	ECX,EAX 
 00000B47  50				push	EAX
 00000B48  B8 00000009			mov	EAX,000000009h
 00000B4D  5E				pop	ESI
 00000B4E  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000B51  50				push	EAX
 00000B52  BA 115DC4AD			mov	EDX,0115DC4ADh
 00000B57  B8 40060DE5			mov	EAX,040060DE5h 
 00000B5C  5B				pop	EBX
 00000B5D  89 13			mov	dword ptr [EBX],EDX
 00000B5F  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{55}:array[10]= 3.9345634523;
 00000B62  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B65  8B 01			mov	EAX,dword ptr [ECX]
 00000B67  8B C8			mov	ECX,EAX 
 00000B69  50				push	EAX
 00000B6A  B8 0000000A			mov	EAX,00000000Ah
 00000B6F  5E				pop	ESI
 00000B70  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000B73  50				push	EAX
 00000B74  BA 673D52A6			mov	EDX,0673D52A6h
 00000B79  B8 400F79FC			mov	EAX,0400F79FCh 
 00000B7E  5B				pop	EBX
 00000B7F  89 13			mov	dword ptr [EBX],EDX
 00000B81  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{56}:array[11]= 2.64756745674;
 00000B84  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B87  8B 01			mov	EAX,dword ptr [ECX]
 00000B89  8B C8			mov	ECX,EAX 
 00000B8B  50				push	EAX
 00000B8C  B8 0000000B			mov	EAX,00000000Bh
 00000B91  5E				pop	ESI
 00000B92  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000B95  50				push	EAX
 00000B96  BA D8C537B2			mov	EDX,0D8C537B2h
 00000B9B  B8 40052E37			mov	EAX,040052E37h 
 00000BA0  5B				pop	EBX
 00000BA1  89 13			mov	dword ptr [EBX],EDX
 00000BA3  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{57}:array[12]= 3.905879567847563;
 00000BA6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000BA9  8B 01			mov	EAX,dword ptr [ECX]
 00000BAB  8B C8			mov	ECX,EAX 
 00000BAD  50				push	EAX
 00000BAE  B8 0000000C			mov	EAX,00000000Ch
 00000BB3  5E				pop	ESI
 00000BB4  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00000BB7  50				push	EAX
 00000BB8  BA C97028C0			mov	EDX,0C97028C0h
 00000BBD  B8 400F3F3D			mov	EAX,0400F3F3Dh 
 00000BC2  5B				pop	EBX
 00000BC3  89 13			mov	dword ptr [EBX],EDX
 00000BC5  89 43 04			mov	dword ptr [EBX+4],EAX 
				;}
 00000BC8			$L000536:

 00000BC8  5F				pop	EDI
 00000BC9  5E				pop	ESI 
 00000BCA  5B				pop	EBX 
 00000BCB  8B E5			mov	ESP,EBP
 00000BCD  5D				pop	EBP 
 00000BCE  C3				ret	
 00000BCF			Samples_SimpleProbability_Init ENDP

 00000BCF			Samples_SimpleProbability_Power PROC NEAR 
				;int Power(int x, int n);
 00000BCF  55				push	EBP
 00000BD0  8B EC			mov	EBP,ESP
 00000BD2  83 EC 08			sub	ESP,000000008h
 00000BD5  53				push	EBX 
 00000BD6  56				push	ESI 
 00000BD7  57				push	EDI 
 00000BD8  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{110}:if(n == 0)
 00000BDB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000BDE  50				push	EAX
 00000BDF  33 C0			xor	EAX,EAX
 00000BE1  5A				pop	EDX
 00000BE2  3B D0			cmp	EDX,EAX
 00000BE4  0F 94 C0			setz	AL
 00000BE7  84 C0			test	AL,AL
 00000BE9  74 0A			jz	OFFSET $L000643

				;{111}:return 1
 00000BEB  B8 00000001			mov	EAX,000000001h
 00000BF0  E9 0000009C			jmp	OFFSET $L000577

				; else {
 00000BF5			$L000643:

				;{112}:if(n == 1)
 00000BF5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000BF8  50				push	EAX
 00000BF9  B8 00000001			mov	EAX,000000001h
 00000BFE  5A				pop	EDX
 00000BFF  3B D0			cmp	EDX,EAX
 00000C01  0F 94 C0			setz	AL
 00000C04  84 C0			test	AL,AL
 00000C06  74 08			jz	OFFSET $L000645

				;{113}:return x
 00000C08  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C0B  E9 00000081			jmp	OFFSET $L000577
 00000C10			$L000645:
 00000C10			$L000644:

				; }

				;{114}:result= 1;
 00000C10  B8 00000001			mov	EAX,000000001h
 00000C15  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{115}:while(n > 0)
 00000C18			$L000647:
 00000C18  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C1B  50				push	EAX
 00000C1C  33 C0			xor	EAX,EAX
 00000C1E  5A				pop	EDX
 00000C1F  3B D0			cmp	EDX,EAX
 00000C21  0F 9F C0			setg	AL
 00000C24  84 C0			test	AL,AL
 00000C26  74 64			jz	OFFSET $L000648
				;{

				;{116}:if(n % 2 == 0)
 00000C28  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C2B  50				push	EAX
 00000C2C  B8 00000002			mov	EAX,000000002h
 00000C31  8B C8			mov	ECX,EAX
 00000C33  58				pop	EAX
 00000C34  33 D2			xor	EDX,EDX
 00000C36  F7 F9			idiv	ECX
 00000C38  8B C2			mov	EAX,EDX 
 00000C3A  50				push	EAX
 00000C3B  33 C0			xor	EAX,EAX
 00000C3D  5A				pop	EDX
 00000C3E  3B D0			cmp	EDX,EAX
 00000C40  0F 94 C0			setz	AL
 00000C43  84 C0			test	AL,AL
 00000C45  74 1E			jz	OFFSET $L000649
				;{

				;{118}:result*= (x * x);
 00000C47  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C4A  50				push	EAX
 00000C4B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C4E  59				pop	ECX
 00000C4F  99				cdq	
 00000C50  0F AF C1			imul	EAX,ECX
 00000C53  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000C56  F7 2B			imul	dword ptr [EBX]
 00000C58  89 03			mov	dword ptr [EBX],EAX

				;{119}:n-= 2;
 00000C5A  B8 00000002			mov	EAX,000000002h
 00000C5F  F8				clc	
 00000C60  29 45 0C			sub	dword ptr [EBP+000Ch],EAX
				;}
 00000C63  EB 25			jmp	OFFSET $L000650

				; else {
 00000C65			$L000649:
				;{

				;{122}:result*= (x * x * x);
 00000C65  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C68  50				push	EAX
 00000C69  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C6C  59				pop	ECX
 00000C6D  99				cdq	
 00000C6E  0F AF C1			imul	EAX,ECX
 00000C71  50				push	EAX
 00000C72  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C75  59				pop	ECX 
 00000C76  99				cdq	 
 00000C77  0F AF C1			imul	EAX,ECX 
 00000C7A  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000C7D  F7 2B			imul	dword ptr [EBX]
 00000C7F  89 03			mov	dword ptr [EBX],EAX

				;{123}:n-= 3;
 00000C81  B8 00000003			mov	EAX,000000003h
 00000C86  F8				clc	
 00000C87  29 45 0C			sub	dword ptr [EBP+000Ch],EAX
				;}
 00000C8A			$L000650:

				; }
				;}
 00000C8A  EB 8C			jmp	OFFSET $L000647
 00000C8C			$L000648:

				;{126}:return result
 00000C8C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000C8F  EB 00			jmp	OFFSET $L000577
				;}
 00000C91			$L000577:

 00000C91  5F				pop	EDI
 00000C92  5E				pop	ESI 
 00000C93  5B				pop	EBX 
 00000C94  8B E5			mov	ESP,EBP
 00000C96  5D				pop	EBP 
 00000C97  C2 0008			retn	000000008h
 00000C9A			Samples_SimpleProbability_Power ENDP

 00000C9A			Samples_SimpleProbability_PrintPrettySeq1 PROC NEAR 
				;void PrintPrettySeq1(int n);
 00000C9A  55				push	EBP
 00000C9B  8B EC			mov	EBP,ESP
 00000C9D  83 EC 10			sub	ESP,000000010h
 00000CA0  53				push	EBX 
 00000CA1  56				push	ESI 
 00000CA2  57				push	EDI 
 00000CA3  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{147}:i= Power(n - 1, 2) + 1;
 00000CA6  B8 00000002			mov	EAX,000000002h
 00000CAB  50				push	EAX 
 00000CAC  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000CAF  50				push	EAX
 00000CB0  B8 00000001			mov	EAX,000000001h
 00000CB5  5A				pop	EDX
 00000CB6  2B D0			sub	EDX,EAX
 00000CB8  8B C2			mov	EAX,EDX
 00000CBA  50				push	EAX
 00000CBB  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000CBE  E8 FFFFFF0C			call	 Samples_SimpleProbability_Power
 00000CC3  50				push	EAX
 00000CC4  B8 00000001			mov	EAX,000000001h
 00000CC9  5A				pop	EDX
 00000CCA  03 C2			add	EAX,EDX
 00000CCC  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{148}:m= Power(n, 2) + 1;
 00000CCF  B8 00000002			mov	EAX,000000002h
 00000CD4  50				push	EAX 
 00000CD5  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000CD8  50				push	EAX
 00000CD9  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000CDC  E8 FFFFFEEE			call	 Samples_SimpleProbability_Power
 00000CE1  50				push	EAX
 00000CE2  B8 00000001			mov	EAX,000000001h
 00000CE7  5A				pop	EDX
 00000CE8  03 C2			add	EAX,EDX
 00000CEA  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{149}:for(j= i; j < m; j++ )
 00000CED  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000CF0  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000CF3  EB 06			jmp	OFFSET $L000651
 00000CF5			$L000652:
 00000CF5  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000CF8  FF 45 F4			inc	dword ptr [EBP-12]
 00000CFB			$L000651:
 00000CFB  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000CFE  50				push	EAX
 00000CFF  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000D02  5A				pop	EDX
 00000D03  3B D0			cmp	EDX,EAX
 00000D05  0F 9C C0			setl	AL
 00000D08  84 C0			test	AL,AL
 00000D0A  74 32			jz	OFFSET $L000653
				;{

				;{150}:Console::Write(j);
 00000D0C  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000D0F  50				push	EAX
 00000D10  E8 00000000 E		call	 Console_WriteInteger

				;{151}:if(j < (m - 1))
 00000D15  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000D18  50				push	EAX
 00000D19  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000D1C  50				push	EAX
 00000D1D  B8 00000001			mov	EAX,000000001h
 00000D22  5A				pop	EDX
 00000D23  2B D0			sub	EDX,EAX
 00000D25  8B C2			mov	EAX,EDX
 00000D27  5A				pop	EDX
 00000D28  3B D0			cmp	EDX,EAX
 00000D2A  0F 9C C0			setl	AL
 00000D2D  84 C0			test	AL,AL
 00000D2F  74 0B			jz	OFFSET $L000654

				;{152}:Console::Write("+");
 00000D31  B8 0000002B			mov	EAX,00000002Bh
 00000D36  50				push	EAX
 00000D37  E8 00000000 E		call	 Console_WriteChar
 00000D3C			$L000654:
				;}
 00000D3C  EB B7			jmp	OFFSET $L000652 
 00000D3E			$L000653:

				;{154}:Console::WriteLn("\t= ", Power(n - 1, 3), " + ", Power(n, 3));
 00000D3E  8D 05 00000173 R		lea	EAX,OFFSET $S000591
 00000D44  6A 00			push	000000000h
 00000D46  50				push	EAX 
 00000D47  E8 00000000 E		call	 Console_WriteString
 00000D4C  B8 00000003			mov	EAX,000000003h
 00000D51  50				push	EAX 
 00000D52  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D55  50				push	EAX
 00000D56  B8 00000001			mov	EAX,000000001h
 00000D5B  5A				pop	EDX
 00000D5C  2B D0			sub	EDX,EAX
 00000D5E  8B C2			mov	EAX,EDX
 00000D60  50				push	EAX
 00000D61  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000D64  E8 FFFFFE66			call	 Samples_SimpleProbability_Power
 00000D69  50				push	EAX 
 00000D6A  E8 00000000 E		call	 Console_WriteInteger 
 00000D6F  8D 05 00000000 R		lea	EAX,OFFSET $S000592
 00000D75  6A 00			push	000000000h 
 00000D77  50				push	EAX 
 00000D78  E8 00000000 E		call	 Console_WriteString 
 00000D7D  B8 00000003			mov	EAX,000000003h
 00000D82  50				push	EAX 
 00000D83  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D86  50				push	EAX
 00000D87  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000D8A  E8 FFFFFE40			call	 Samples_SimpleProbability_Power
 00000D8F  50				push	EAX 
 00000D90  E8 00000000 E		call	 Console_WriteInteger 
 00000D95  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000D9A			$L000585:

 00000D9A  5F				pop	EDI
 00000D9B  5E				pop	ESI 
 00000D9C  5B				pop	EBX 
 00000D9D  8B E5			mov	ESP,EBP
 00000D9F  5D				pop	EBP 
 00000DA0  C2 0004			retn	000000004h
 00000DA3			Samples_SimpleProbability_PrintPrettySeq1 ENDP

 00000DA3			Samples_SimpleProbability_PrintPrettySeq2 PROC NEAR 
				;void PrintPrettySeq2(int n);
 00000DA3  55				push	EBP
 00000DA4  8B EC			mov	EBP,ESP
 00000DA6  83 EC 10			sub	ESP,000000010h
 00000DA9  53				push	EBX 
 00000DAA  56				push	ESI 
 00000DAB  57				push	EDI 
 00000DAC  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{159}:i= Power(n, 2) - n + 1;
 00000DAF  B8 00000002			mov	EAX,000000002h
 00000DB4  50				push	EAX 
 00000DB5  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DB8  50				push	EAX
 00000DB9  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000DBC  E8 FFFFFE0E			call	 Samples_SimpleProbability_Power
 00000DC1  50				push	EAX
 00000DC2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DC5  5A				pop	EDX
 00000DC6  2B D0			sub	EDX,EAX
 00000DC8  8B C2			mov	EAX,EDX
 00000DCA  50				push	EAX
 00000DCB  B8 00000001			mov	EAX,000000001h
 00000DD0  5A				pop	EDX 
 00000DD1  03 C2			add	EAX,EDX
 00000DD3  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{160}:m= Power(n, 2) + n - 1;
 00000DD6  B8 00000002			mov	EAX,000000002h
 00000DDB  50				push	EAX 
 00000DDC  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DDF  50				push	EAX
 00000DE0  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000DE3  E8 FFFFFDE7			call	 Samples_SimpleProbability_Power
 00000DE8  50				push	EAX
 00000DE9  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DEC  5A				pop	EDX
 00000DED  03 C2			add	EAX,EDX
 00000DEF  50				push	EAX
 00000DF0  B8 00000001			mov	EAX,000000001h
 00000DF5  5A				pop	EDX 
 00000DF6  2B D0			sub	EDX,EAX
 00000DF8  8B C2			mov	EAX,EDX
 00000DFA  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{161}:for(j= 0; j < n; j++ )
 00000DFD  33 C0			xor	EAX,EAX
 00000DFF  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000E02  EB 06			jmp	OFFSET $L000656
 00000E04			$L000657:
 00000E04  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000E07  FF 45 F4			inc	dword ptr [EBP-12]
 00000E0A			$L000656:
 00000E0A  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E0D  50				push	EAX
 00000E0E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E11  5A				pop	EDX
 00000E12  3B D0			cmp	EDX,EAX
 00000E14  0F 9C C0			setl	AL
 00000E17  84 C0			test	AL,AL
 00000E19  74 56			jz	OFFSET $L000658
				;{

				;{162}:Console::Write(i + 2 * j);
 00000E1B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000E1E  50				push	EAX
 00000E1F  B8 00000002			mov	EAX,000000002h
 00000E24  50				push	EAX
 00000E25  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E28  59				pop	ECX
 00000E29  33 D2			xor	EDX,EDX
 00000E2B  0F AF C1			imul	EAX,ECX
 00000E2E  5A				pop	EDX
 00000E2F  03 C2			add	EAX,EDX
 00000E31  50				push	EAX
 00000E32  E8 00000000 E		call	 Console_WriteInteger

				;{163}:if(j < (n - 1) && i < m)
 00000E37  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E3A  50				push	EAX
 00000E3B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E3E  50				push	EAX
 00000E3F  B8 00000001			mov	EAX,000000001h
 00000E44  5A				pop	EDX
 00000E45  2B D0			sub	EDX,EAX
 00000E47  8B C2			mov	EAX,EDX
 00000E49  5A				pop	EDX
 00000E4A  3B D0			cmp	EDX,EAX
 00000E4C  0F 9C C0			setl	AL
 00000E4F  84 C0			test	AL,AL
 00000E51  74 0D			jz	OFFSET $L000661
 00000E53  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000E56  50				push	EAX
 00000E57  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000E5A  5A				pop	EDX
 00000E5B  3B D0			cmp	EDX,EAX
 00000E5D  0F 9C C0			setl	AL
 00000E60			$L000661:
 00000E60  84 C0			test	AL,AL
 00000E62  74 0B			jz	OFFSET $L000659

				;{164}:Console::Write("+");
 00000E64  B8 0000002B			mov	EAX,00000002Bh
 00000E69  50				push	EAX
 00000E6A  E8 00000000 E		call	 Console_WriteChar
 00000E6F			$L000659:
				;}
 00000E6F  EB 93			jmp	OFFSET $L000657 
 00000E71			$L000658:

				;{167}:Console::WriteLn(" \t= ", Power(n, 3));
 00000E71  8D 05 00000004 R		lea	EAX,OFFSET $S000598
 00000E77  6A 00			push	000000000h
 00000E79  50				push	EAX 
 00000E7A  E8 00000000 E		call	 Console_WriteString
 00000E7F  B8 00000003			mov	EAX,000000003h
 00000E84  50				push	EAX 
 00000E85  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E88  50				push	EAX
 00000E89  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E8C  E8 FFFFFD3E			call	 Samples_SimpleProbability_Power
 00000E91  50				push	EAX 
 00000E92  E8 00000000 E		call	 Console_WriteInteger 
 00000E97  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000E9C			$L000593:

 00000E9C  5F				pop	EDI
 00000E9D  5E				pop	ESI 
 00000E9E  5B				pop	EBX 
 00000E9F  8B E5			mov	ESP,EBP
 00000EA1  5D				pop	EBP 
 00000EA2  C2 0004			retn	000000004h
 00000EA5			Samples_SimpleProbability_PrintPrettySeq2 ENDP

 00000EA5			Samples_SimpleProbability PROC NEAR 
				;void Samples::SimpleProbability(void);
 00000EA5  55				push	EBP
 00000EA6  8B EC			mov	EBP,ESP
 00000EA8  51				push	ECX 
 00000EA9  53				push	EBX 
 00000EAA  56				push	ESI 
 00000EAB  57				push	EDI 
 00000EAC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000EAF  E8 00000027			call	 __member_Init@Samples_SimpleProbability
				;{

				;{62}:Init();
 00000EB4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000EB7  E8 FFFFFB51			call	 Samples_SimpleProbability_Init
				;}

 00000EBC  5F				pop	EDI
 00000EBD  5E				pop	ESI 
 00000EBE  5B				pop	EBX 
 00000EBF  8B E5			mov	ESP,EBP
 00000EC1  5D				pop	EBP 
 00000EC2  C3				ret	
 00000EC3			Samples_SimpleProbability ENDP

 00000EC3			__member_Init@Samples_Cotorra PROC NEAR

 00000EC3  55				push	EBP
 00000EC4  8B EC			mov	EBP,ESP
 00000EC6  51				push	ECX 
 00000EC7  53				push	EBX 
 00000EC8  56				push	ESI 
 00000EC9  57				push	EDI 
 00000ECA  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:what= null;
 00000ECD  33 C0			xor	EAX,EAX
 00000ECF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ED2  89 01			mov	dword ptr [ECX],EAX

 00000ED4  5F				pop	EDI
 00000ED5  5E				pop	ESI 
 00000ED6  5B				pop	EBX 
 00000ED7  8B E5			mov	ESP,EBP
 00000ED9  5D				pop	EBP 
 00000EDA  C3				ret	
 00000EDB			__member_Init@Samples_Cotorra ENDP
 00000EDB			__member_Init@Samples_SimpleProbability PROC NEAR

 00000EDB  55				push	EBP
 00000EDC  8B EC			mov	EBP,ESP
 00000EDE  51				push	ECX 
 00000EDF  53				push	EBX 
 00000EE0  56				push	ESI 
 00000EE1  57				push	EDI 
 00000EE2  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:array= new double[20];
 00000EE5  B8 00000014			mov	EAX,000000014h
 00000EEA  6B C0 08			imul	EAX,000000008h
 00000EED  50				push	EAX
 00000EEE  8B D8			mov	EBX,EAX
 00000EF0  E8 00000000 E		call	 System_Memory_New
 00000EF5  85 C0			test	EAX,EAX
 00000EF7  74 04			jz	 $L000662
 00000EF9  8B F0			mov	ESI,EAX 
 00000EFB  EB 02			jmp	 $L000663
 00000EFD			$L000662:
 00000EFD  33 F6			xor	ESI,ESI
 00000EFF			$L000663:
 00000EFF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F02  89 31			mov	dword ptr [ECX],ESI 

 00000F04  5F				pop	EDI
 00000F05  5E				pop	ESI 
 00000F06  5B				pop	EBX 
 00000F07  8B E5			mov	ESP,EBP
 00000F09  5D				pop	EBP 
 00000F0A  C3				ret	
 00000F0B			__member_Init@Samples_SimpleProbability ENDP
 00000F0B			Samples_Application_main PROC NEAR 
				;void Samples::Application::main(int argc, string string [] argv);
 00000F0B  55				push	EBP
 00000F0C  8B EC			mov	EBP,ESP
 00000F0E  83 EC 24			sub	ESP,000000024h
 00000F11  53				push	EBX 
 00000F12  56				push	ESI 
 00000F13  57				push	EDI 
				;{

				;{189}:simple= new Samples::SimpleProbability();
 00000F14  6A 04			push	000000004h
 00000F16  E8 00000000 E		call	 System_Memory_New
 00000F1B  85 C0			test	EAX,EAX
 00000F1D  74 04			jz	 $L000664
 00000F1F  8B F0			mov	ESI,EAX
 00000F21  EB 02			jmp	 $L000665
 00000F23			$L000664:
 00000F23  33 F6			xor	ESI,ESI
 00000F25			$L000665:
 00000F25  89 75 FC			mov	dword ptr [EBP-0004h],ESI 
 00000F28  8B CE			mov	ECX,ESI
 00000F2A  E8 FFFFFF76			call	 Samples_SimpleProbability
 00000F2F  8B C6			mov	EAX,ESI 

				;{191}:media= simple.CalcMedia();
 00000F31  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000F34  E8 FFFFF808			call	 Samples_SimpleProbability_CalcMedia
 00000F39  50				push	EAX
 00000F3A  52				push	EDX 
 00000F3B  DD C0			ffree	st
 00000F3D  DD 04 24			fld	qword ptr [ESP]
 00000F40  DD 5D F4			fstp	qword ptr [EBP-000Ch]

				;{193}:Console::WriteLn("(2)And the mean is = ", media);
 00000F43  5A				pop	EDX
 00000F44  58				pop	EAX 
 00000F45  8D 05 0000001E R		lea	EAX,OFFSET $S000605
 00000F4B  6A 00			push	000000000h
 00000F4D  50				push	EAX 
 00000F4E  E8 00000000 E		call	 Console_WriteString
 00000F53  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 00000F56  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000F59  50				push	EAX 
 00000F5A  52				push	EDX 
 00000F5B  E8 00000000 E		call	 Console_WriteDouble 
 00000F60  E8 00000000 E		call	 Console_WriteCrLf 

				;{195}:Console::WriteLn("(*) (mean / 4.0)% = ", (media / 4.0) * 100.0);
 00000F65  8D 05 00000009 R		lea	EAX,OFFSET $S000606
 00000F6B  6A 00			push	000000000h
 00000F6D  50				push	EAX 
 00000F6E  E8 00000000 E		call	 Console_WriteString
 00000F73  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 00000F76  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000F79  50				push	EAX
 00000F7A  52				push	EDX 
 00000F7B  33 D2			xor	EDX,EDX
 00000F7D  B8 40100000			mov	EAX,040100000h
 00000F82  9B DB E2			fclex
 00000F85  50				push	EAX
 00000F86  52				push	EDX 
 00000F87  DD 04 24			fld	qword ptr [ESP]
 00000F8A  59				pop	ECX
 00000F8B  59				pop	ECX 
 00000F8C  DC 3C 24			fdivr	qword ptr [ESP]
 00000F8F  DD 1C 24			fstp	qword ptr [ESP]
 00000F92  33 D2			xor	EDX,EDX
 00000F94  B8 40590000			mov	EAX,040590000h
 00000F99  9B DB E2			fclex
 00000F9C  50				push	EAX
 00000F9D  52				push	EDX 
 00000F9E  DD 04 24			fld	qword ptr [ESP]
 00000FA1  59				pop	ECX
 00000FA2  59				pop	ECX 
 00000FA3  DC 0C 24			fmul	qword ptr [ESP]
 00000FA6  DD 1C 24			fstp	qword ptr [ESP]
 00000FA9  E8 00000000 E		call	 Console_WriteDouble 
 00000FAE  E8 00000000 E		call	 Console_WriteCrLf 

				;{197}:variance= simple.CalcVariance(media);
 00000FB3  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 00000FB6  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000FB9  50				push	EAX
 00000FBA  52				push	EDX 
 00000FBB  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000FBE  E8 FFFFF852			call	 Samples_SimpleProbability_CalcVariance
 00000FC3  50				push	EAX
 00000FC4  52				push	EDX 
 00000FC5  DD C0			ffree	st
 00000FC7  DD 04 24			fld	qword ptr [ESP]
 00000FCA  DD 5D EC			fstp	qword ptr [EBP-0014h]

				;{199}:Console::WriteLn("(3) the variance is = ", variance);
 00000FCD  5A				pop	EDX
 00000FCE  58				pop	EAX 
 00000FCF  8D 05 00000034 R		lea	EAX,OFFSET $S000609
 00000FD5  6A 00			push	000000000h
 00000FD7  50				push	EAX 
 00000FD8  E8 00000000 E		call	 Console_WriteString
 00000FDD  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 00000FE0  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 00000FE3  50				push	EAX 
 00000FE4  52				push	EDX 
 00000FE5  E8 00000000 E		call	 Console_WriteDouble 
 00000FEA  E8 00000000 E		call	 Console_WriteCrLf 

				;{201}:stddev= simple.CalcStdDev(media);
 00000FEF  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 00000FF2  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 00000FF5  50				push	EAX
 00000FF6  52				push	EDX 
 00000FF7  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000FFA  E8 FFFFF7ED			call	 Samples_SimpleProbability_CalcStdDev
 00000FFF  50				push	EAX
 00001000  52				push	EDX 
 00001001  DD C0			ffree	st
 00001003  DD 04 24			fld	qword ptr [ESP]
 00001006  DD 5D E4			fstp	qword ptr [EBP-001Ch]

				;{203}:Console::WriteLn("(4) the std dev is = ", stddev);
 00001009  5A				pop	EDX
 0000100A  58				pop	EAX 
 0000100B  8D 05 0000004B R		lea	EAX,OFFSET $S000611
 00001011  6A 00			push	000000000h
 00001013  50				push	EAX 
 00001014  E8 00000000 E		call	 Console_WriteString
 00001019  8B 55 E4			mov	EDX,dword ptr [EBP-001Ch]
 0000101C  8B 45 E8			mov	EAX,dword ptr [EBP-0018h] 
 0000101F  50				push	EAX 
 00001020  52				push	EDX 
 00001021  E8 00000000 E		call	 Console_WriteDouble 
 00001026  E8 00000000 E		call	 Console_WriteCrLf 

				;{205}:Console::WriteLn("(5) media + stdev = ", media + stddev);
 0000102B  8D 05 00000061 R		lea	EAX,OFFSET $S000612
 00001031  6A 00			push	000000000h
 00001033  50				push	EAX 
 00001034  E8 00000000 E		call	 Console_WriteString
 00001039  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000103C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 0000103F  50				push	EAX
 00001040  52				push	EDX 
 00001041  8B 55 E4			mov	EDX,dword ptr [EBP-001Ch]
 00001044  8B 45 E8			mov	EAX,dword ptr [EBP-0018h] 
 00001047  50				push	EAX
 00001048  52				push	EDX 
 00001049  DD 04 24			fld	qword ptr [ESP]
 0000104C  59				pop	ECX
 0000104D  59				pop	ECX 
 0000104E  DC 04 24			fadd	qword ptr [ESP]
 00001051  DD 1C 24			fstp	qword ptr [ESP]
 00001054  E8 00000000 E		call	 Console_WriteDouble 
 00001059  E8 00000000 E		call	 Console_WriteCrLf 

				;{208}:Console::Write("Please, enter the number n = ");
 0000105E  8D 05 00000155 R		lea	EAX,OFFSET $S000613
 00001064  6A 00			push	000000000h
 00001066  50				push	EAX 
 00001067  E8 00000000 E		call	 Console_WriteString

				;{209}:n= Console::ReadInteger();
 0000106C  E8 00000000 E		call	 Console_ReadInteger
 00001071  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{210}:Console::WriteLn("--------------------------------------------");
 00001074  8D 05 00000076 R		lea	EAX,OFFSET $S000615
 0000107A  6A 00			push	000000000h
 0000107C  50				push	EAX 
 0000107D  E8 00000000 E		call	 Console_WriteString
 00001082  E8 00000000 E		call	 Console_WriteCrLf 

				;{211}:Console::WriteLn("Calculate the Sum[i, {i,(n-1)^2 + 1},{m, 2n-1}]\t= \t(n-1)^3 + n^3.\n");
 00001087  8D 05 000000EC R		lea	EAX,OFFSET $S000616
 0000108D  6A 00			push	000000000h
 0000108F  50				push	EAX 
 00001090  E8 00000000 E		call	 Console_WriteString
 00001095  E8 00000000 E		call	 Console_WriteCrLf 

				;{212}:Console::WriteLn("--------------------------------------------");
 0000109A  8D 05 00000076 R		lea	EAX,OFFSET $S000615
 000010A0  6A 00			push	000000000h
 000010A2  50				push	EAX 
 000010A3  E8 00000000 E		call	 Console_WriteString
 000010A8  E8 00000000 E		call	 Console_WriteCrLf 

				;{213}:for(i= 1; i <= n; i++ )
 000010AD  B8 00000001			mov	EAX,000000001h
 000010B2  89 45 DC			mov	dword ptr [EBP-0024h],EAX
 000010B5  EB 06			jmp	OFFSET $L000666
 000010B7			$L000667:
 000010B7  8B 45 DC			mov	EAX,dword ptr [EBP-36]
 000010BA  FF 45 DC			inc	dword ptr [EBP-36]
 000010BD			$L000666:
 000010BD  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 000010C0  50				push	EAX
 000010C1  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000010C4  5A				pop	EDX
 000010C5  3B D0			cmp	EDX,EAX
 000010C7  0F 9E C0			setle	AL
 000010CA  84 C0			test	AL,AL
 000010CC  74 0E			jz	OFFSET $L000668

				;{214}:simple.PrintPrettySeq1(i);
 000010CE  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 000010D1  50				push	EAX
 000010D2  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000010D5  E8 FFFFFBC0			call	 Samples_SimpleProbability_PrintPrettySeq1
 000010DA  EB DB			jmp	OFFSET $L000667 
 000010DC			$L000668:

				;{215}:Console::WriteLn("--------------------------------------------");
 000010DC  8D 05 00000076 R		lea	EAX,OFFSET $S000615
 000010E2  6A 00			push	000000000h
 000010E4  50				push	EAX 
 000010E5  E8 00000000 E		call	 Console_WriteString
 000010EA  E8 00000000 E		call	 Console_WriteCrLf 

				;{216}:Console::WriteLn("Calculate the Sum[i+2*j, {j, 0}, {i,n^2-n+1},{m, n^2+n-1}, {n}]\t= \tn^3.\n");
 000010EF  8D 05 000000A3 R		lea	EAX,OFFSET $S000618
 000010F5  6A 00			push	000000000h
 000010F7  50				push	EAX 
 000010F8  E8 00000000 E		call	 Console_WriteString
 000010FD  E8 00000000 E		call	 Console_WriteCrLf 

				;{217}:Console::WriteLn("--------------------------------------------");
 00001102  8D 05 00000076 R		lea	EAX,OFFSET $S000615
 00001108  6A 00			push	000000000h
 0000110A  50				push	EAX 
 0000110B  E8 00000000 E		call	 Console_WriteString
 00001110  E8 00000000 E		call	 Console_WriteCrLf 

				;{218}:for(i= 1; i <= n; i++ )
 00001115  B8 00000001			mov	EAX,000000001h
 0000111A  89 45 DC			mov	dword ptr [EBP-0024h],EAX
 0000111D  EB 06			jmp	OFFSET $L000669
 0000111F			$L000670:
 0000111F  8B 45 DC			mov	EAX,dword ptr [EBP-36]
 00001122  FF 45 DC			inc	dword ptr [EBP-36]
 00001125			$L000669:
 00001125  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 00001128  50				push	EAX
 00001129  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000112C  5A				pop	EDX
 0000112D  3B D0			cmp	EDX,EAX
 0000112F  0F 9E C0			setle	AL
 00001132  84 C0			test	AL,AL
 00001134  74 0E			jz	OFFSET $L000671

				;{219}:simple.PrintPrettySeq2(i);
 00001136  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 00001139  50				push	EAX
 0000113A  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000113D  E8 FFFFFC61			call	 Samples_SimpleProbability_PrintPrettySeq2
 00001142  EB DB			jmp	OFFSET $L000670 
 00001144			$L000671:

				;{220}:Console::WriteLn("--------------------------------------------");
 00001144  8D 05 00000076 R		lea	EAX,OFFSET $S000615
 0000114A  6A 00			push	000000000h
 0000114C  50				push	EAX 
 0000114D  E8 00000000 E		call	 Console_WriteString
 00001152  E8 00000000 E		call	 Console_WriteCrLf 

				;{222}:for(i= 1; i <= n; i++ )
 00001157  B8 00000001			mov	EAX,000000001h
 0000115C  89 45 DC			mov	dword ptr [EBP-0024h],EAX
 0000115F  EB 06			jmp	OFFSET $L000672
 00001161			$L000673:
 00001161  8B 45 DC			mov	EAX,dword ptr [EBP-36]
 00001164  FF 45 DC			inc	dword ptr [EBP-36]
 00001167			$L000672:
 00001167  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 0000116A  50				push	EAX
 0000116B  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000116E  5A				pop	EDX
 0000116F  3B D0			cmp	EDX,EAX
 00001171  0F 9E C0			setle	AL
 00001174  84 C0			test	AL,AL
 00001176  74 19			jz	OFFSET $L000674

				;{223}:Console::WriteLn(simple.Fibonacci(i));
 00001178  8B 45 DC			mov	EAX,dword ptr [EBP-0024h]
 0000117B  50				push	EAX
 0000117C  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000117F  E8 FFFFF796			call	 Samples_SimpleProbability_Fibonacci
 00001184  50				push	EAX
 00001185  E8 00000000 E		call	 Console_WriteInteger
 0000118A  E8 00000000 E		call	 Console_WriteCrLf 
 0000118F  EB D0			jmp	OFFSET $L000673 
 00001191			$L000674:

				;{224}:destroy simple;
 00001191  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00001194  8B F1			mov	ESI,ECX
 00001196  85 C9			test	ECX,ECX
 00001198  74 05			jz	OFFSET $L000676
 0000119A  E8 FFFFF75A			call	 Samples_SimpleProbability_Destructor
 0000119F			$L000676:
 0000119F  56				push	ESI
 000011A0  E8 00000000 E		call	 System_Memory_Destroy

				;{226}:Console::WriteLn("Gcd = ", Math::Gcd(14, Math::Gcd(28, Math::Gcd(7, 56))));
 000011A5  8D 05 0000012F R		lea	EAX,OFFSET $S000619
 000011AB  6A 00			push	000000000h
 000011AD  50				push	EAX 
 000011AE  E8 00000000 E		call	 Console_WriteString
 000011B3  B8 00000038			mov	EAX,000000038h
 000011B8  50				push	EAX 
 000011B9  B8 00000007			mov	EAX,000000007h
 000011BE  50				push	EAX
 000011BF  E8 00000000 E		call	 Math_Gcd
 000011C4  50				push	EAX 
 000011C5  B8 0000001C			mov	EAX,00000001Ch
 000011CA  50				push	EAX
 000011CB  E8 00000000 E		call	 Math_Gcd
 000011D0  50				push	EAX 
 000011D1  B8 0000000E			mov	EAX,00000000Eh
 000011D6  50				push	EAX
 000011D7  E8 00000000 E		call	 Math_Gcd
 000011DC  50				push	EAX 
 000011DD  E8 00000000 E		call	 Console_WriteInteger 
 000011E2  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000011E7			$L000600:

 000011E7  5F				pop	EDI
 000011E8  5E				pop	ESI 
 000011E9  5B				pop	EBX 
 000011EA  8B E5			mov	ESP,EBP
 000011EC  5D				pop	EBP 
 000011ED  C2 0008			retn	000000008h
 000011F0			Samples_Application_main ENDP

 000011F0			__System_Hpp_Runtime_Init PROC

 000011F0  55				push	EBP
 000011F1  8B EC			mov	EBP,ESP
 000011F3  51				push	ECX 
 000011F4  53				push	EBX 
 000011F5  56				push	ESI 
 000011F6  57				push	EDI 
 000011F7  E8 00000000 E		call	 GetVersion
 000011FC  A3 0000018F R		mov	 __osver,EAX ;os version
 00001201  A1 0000018F R		mov	EAX, __osver 
 00001206  C1 E8 08			shr	EAX,000000008h
 00001209  25 000000FF			and	EAX,0000000FFh
 0000120E  A3 00000193 R		mov	 __winminor,EAX ;windows minor
 00001213  8B 0D 0000018F R		mov	ECX, __osver 
 00001219  81 E1 000000FF		and	ECX,0000000FFh 
 0000121F  89 0D 00000197 R		mov	 __winmajor,ECX ;windows major
 00001225  8B 15 00000197 R		mov	EDX,dword ptr __winmajor 
 0000122B  C1 E2 08			shl	EDX,000000008h
 0000122E  03 15 00000193 R		add	EDX,dword ptr __winminor
 00001234  89 15 0000019B R		mov	dword ptr __winver,EDX ;windows version
 0000123A  A1 0000018F R		mov	EAX, __osver 
 0000123F  C1 E8 10			shr	EAX,000000010h 
 00001242  25 0000FFFF			and	EAX,00000FFFFh 
 00001247  A3 0000018F R		mov	 __osver,EAX 
 0000124C  8D 1D 000001C3 R		lea	EBX,dword ptr ___argc
 00001252  53				push	EBX
 00001253  E8 00000000 E		call	 System_GetCommandLineArgv 
 00001258  A3 000001BF R		mov	dword ptr ___argv,EAX 
 0000125D  50				push	EAX 
 0000125E  8B 0D 000001C3 R		mov	ECX,dword ptr ___argc 
 00001264  51				push	ECX 
 00001265  E8 FFFFFCA1			call	 Samples_Application_main ;user entry point (stdcall calling convention)
 0000126A  50				push	EAX 
 0000126B  A1 000001BF R		mov	EAX,dword ptr ___argv 
 00001270  50				push	EAX 
 00001271  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00001276  50				push	EAX 
 00001277  E8 00000000 E		call	 System_Memory_Free 
 0000127C  E8 00000000 E		call	 System_Exit 

 00001281  5F				pop	EDI
 00001282  5E				pop	ESI 
 00001283  5B				pop	EBX 
 00001284  8B E5			mov	ESP,EBP
 00001286  5D				pop	EBP 
 00001287  C3				ret	
 00001288			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 00000000 20 2B 20 00		$S000592 		BYTE 	" + ",0
 00000004 20 09 3D 20 00	$S000598 		BYTE 	" ",09h,"= ",0
 00000009 28 2A 29 20 28	$S000606 		BYTE 	"(*) (mean / 4.0)% = ",0
	   6D 65 61 6E 20
	   2F 20 34 2E 30
	   29 25 20 3D 20
	   00
 0000001E 28 32 29 41 6E	$S000605 		BYTE 	"(2)And the mean is = ",0
	   64 20 74 68 65
	   20 6D 65 61 6E
	   20 69 73 20 3D
	   20 00
 00000034 28 33 29 20 74	$S000609 		BYTE 	"(3) the variance is = ",0
	   68 65 20 76 61
	   72 69 61 6E 63
	   65 20 69 73 20
	   3D 20 00
 0000004B 28 34 29 20 74	$S000611 		BYTE 	"(4) the std dev is = ",0
	   68 65 20 73 74
	   64 20 64 65 76
	   20 69 73 20 3D
	   20 00
 00000061 28 35 29 20 6D	$S000612 		BYTE 	"(5) media + stdev = ",0
	   65 64 69 61 20
	   2B 20 73 74 64
	   65 76 20 3D 20
	   00
 00000076 2D 2D 2D 2D 2D	$S000615 		BYTE 	"--------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 000000A3 43 61 6C 63 75	$S000618 		BYTE 	"Calculate the Sum[i+2*j, {j, 0}, {i,n^2-n+1},{m, n^2+n-1}, {n}]",09h,"= ",09h,"n^3.",0Ah,0
	   6C 61 74 65 20
	   74 68 65 20 53
	   75 6D 5B 69 2B
	   32 2A 6A 2C 20
	   7B 6A 2C 20 30
	   7D 2C 20 7B 69
	   2C 6E 5E 32 2D
	   6E 2B 31 7D 2C
	   7B 6D 2C 20 6E
	   5E 32 2B 6E 2D
	   31 7D 2C 20 7B
	   6E 7D 5D 09 3D
	   20 09 6E 5E 33
	   2E 0A 00
 000000EC 43 61 6C 63 75	$S000616 		BYTE 	"Calculate the Sum[i, {i,(n-1)^2 + 1},{m, 2n-1}]",09h,"= ",09h,"(n-1)^3 + n^3.",0Ah,0
	   6C 61 74 65 20
	   74 68 65 20 53
	   75 6D 5B 69 2C
	   20 7B 69 2C 28
	   6E 2D 31 29 5E
	   32 20 2B 20 31
	   7D 2C 7B 6D 2C
	   20 32 6E 2D 31
	   7D 5D 09 3D 20
	   09 28 6E 2D 31
	   29 5E 33 20 2B
	   20 6E 5E 33 2E
	   0A 00
 0000012F 47 63 64 20 3D	$S000619 		BYTE 	"Gcd = ",0
	   20 00
 00000136 49 6E 20 74 68	$S000576 		BYTE 	"In the Simple Destructor()...",0Ah,0
	   65 20 53 69 6D
	   70 6C 65 20 44
	   65 73 74 72 75
	   63 74 6F 72 28
	   29 2E 2E 2E 0A
	   00
 00000155 50 6C 65 61 73	$S000613 		BYTE 	"Please, enter the number n = ",0
	   65 2C 20 65 6E
	   74 65 72 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6E 20 3D 20 00
 00000173 09 3D 20 00		$S000591 		BYTE 	09h,"= ",0
 00000177 69 6E 20 74 68	$S000532 		BYTE 	"in the Destructor()...",0Ah,0
	   65 20 44 65 73
	   74 72 75 63 74
	   6F 72 28 29 2E
	   2E 2E 0A 00

 0000018F 00000000		__osver 		DWORD 	0;Windows OS version
 00000193 00000000		__winminor 		DWORD 	0;Windows minor version
 00000197 00000000		__winmajor 		DWORD 	0;Windows major version
 0000019B 00000000		__winver 		DWORD 	0;Windows version
 0000019F  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 000001BF 00000000		___argv 		DWORD 	0;Array of argument values
 000001C3 00000000		___argc 		DWORD 	0;Argument count

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:11:44
hello.hpp						     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001C7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001288 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000AC _TEXT	Length= 00000062 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00000105 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004C _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 000000A3 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000010E _TEXT	Length= 00000086 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 0000018B _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00000194 _TEXT	Length= 00000060 Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 000001EB _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001F4 _TEXT	Length= 00000062 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 0000024D _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 00000256 _TEXT	Length= 00000086 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 000002D3 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000345 _TEXT	Length= 0000009F Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 000003DB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002DC _TEXT	Length= 00000069 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 0000033C _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003E4 _TEXT	Length= 00000086 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 00000461 _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 0000046A _TEXT	Length= 0000008A Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 000004EB _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004F4 _TEXT	Length= 00000067 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 00000552 _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 0000055B _TEXT	Length= 00000086 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 000005D8 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005E1 _TEXT	Length= 0000004C Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00000624 _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Samples_Application_main . . . .	P Near	 00000F0B _TEXT	Length= 000002E5 Public STDCALL
  $L000664 . . . . . . . . . . .	L Near	 00000F23 _TEXT	
  $L000665 . . . . . . . . . . .	L Near	 00000F25 _TEXT	
  $L000667 . . . . . . . . . . .	L Near	 000010B7 _TEXT	
  $L000666 . . . . . . . . . . .	L Near	 000010BD _TEXT	
  $L000668 . . . . . . . . . . .	L Near	 000010DC _TEXT	
  $L000670 . . . . . . . . . . .	L Near	 0000111F _TEXT	
  $L000669 . . . . . . . . . . .	L Near	 00001125 _TEXT	
  $L000671 . . . . . . . . . . .	L Near	 00001144 _TEXT	
  $L000673 . . . . . . . . . . .	L Near	 00001161 _TEXT	
  $L000672 . . . . . . . . . . .	L Near	 00001167 _TEXT	
  $L000674 . . . . . . . . . . .	L Near	 00001191 _TEXT	
  $L000676 . . . . . . . . . . .	L Near	 0000119F _TEXT	
  $L000600 . . . . . . . . . . .	L Near	 000011E7 _TEXT	
Samples_Cotorra_Destructor . . .	P Near	 0000062D _TEXT	Length= 00000046 Public STDCALL
  $L000625 . . . . . . . . . . .	L Near	 0000066C _TEXT	
  $L000623 . . . . . . . . . . .	L Near	 0000066C _TEXT	
  $L000531 . . . . . . . . . . .	L Near	 0000066C _TEXT	
Samples_Cotorra_Listen . . . . .	P Near	 00000673 _TEXT	Length= 00000096 Public STDCALL
  $L000628 . . . . . . . . . . .	L Near	 000006B0 _TEXT	
  $L000626 . . . . . . . . . . .	L Near	 000006B0 _TEXT	
  $L000629 . . . . . . . . . . .	L Near	 000006CF _TEXT	
  $L000630 . . . . . . . . . . .	L Near	 000006D1 _TEXT	
  $L000526 . . . . . . . . . . .	L Near	 00000700 _TEXT	
Samples_Cotorra_Talk . . . . . .	P Near	 00000709 _TEXT	Length= 00000022 Public STDCALL
  $L000530 . . . . . . . . . . .	L Near	 00000724 _TEXT	
Samples_Cotorra  . . . . . . . .	P Near	 0000072B _TEXT	Length= 00000016 Public STDCALL
Samples_SimpleProbability_CalcMedia 	P Near	 00000741 _TEXT	Length= 000000AB Public STDCALL
  $L000633 . . . . . . . . . . .	L Near	 00000761 _TEXT	
  $L000632 . . . . . . . . . . .	L Near	 00000767 _TEXT	
  $L000634 . . . . . . . . . . .	L Near	 000007B0 _TEXT	
  $L000562 . . . . . . . . . . .	L Near	 000007E5 _TEXT	
Samples_SimpleProbability_CalcStdDev .	P Near	 000007EC _TEXT	Length= 00000029 Public STDCALL
  $L000573 . . . . . . . . . . .	L Near	 0000080C _TEXT	
Samples_SimpleProbability_CalcVariance . P Near	  00000815 _TEXT	Length= 000000E4 Public STDCALL
  $L000636 . . . . . . . . . . .	L Near	 00000835 _TEXT	
  $L000635 . . . . . . . . . . .	L Near	 0000083B _TEXT	
  $L000637 . . . . . . . . . . .	L Near	 000008B0 _TEXT	
  $L000567 . . . . . . . . . . .	L Near	 000008F0 _TEXT	
Samples_SimpleProbability_Destructor .	P Near	 000008F9 _TEXT	Length= 00000021 Public STDCALL
  $L000575 . . . . . . . . . . .	L Near	 00000913 _TEXT	
Samples_SimpleProbability_Fibonacci 	P Near	 0000091A _TEXT	Length= 000000F3 Public STDCALL
  $L000640 . . . . . . . . . . .	L Near	 00000945 _TEXT	
  $L000638 . . . . . . . . . . .	L Near	 00000951 _TEXT	
  $L000641 . . . . . . . . . . .	L Near	 000009E6 _TEXT	
  $L000642 . . . . . . . . . . .	L Near	 00000A04 _TEXT	
  $L000581 . . . . . . . . . . .	L Near	 00000A04 _TEXT	
Samples_SimpleProbability_Init .	P Near	 00000A0D _TEXT	Length= 000001C2 Public STDCALL
  $L000536 . . . . . . . . . . .	L Near	 00000BC8 _TEXT	
Samples_SimpleProbability_Power 	P Near	 00000BCF _TEXT	Length= 000000CB Public STDCALL
  $L000643 . . . . . . . . . . .	L Near	 00000BF5 _TEXT	
  $L000645 . . . . . . . . . . .	L Near	 00000C10 _TEXT	
  $L000644 . . . . . . . . . . .	L Near	 00000C10 _TEXT	
  $L000647 . . . . . . . . . . .	L Near	 00000C18 _TEXT	
  $L000649 . . . . . . . . . . .	L Near	 00000C65 _TEXT	
  $L000650 . . . . . . . . . . .	L Near	 00000C8A _TEXT	
  $L000648 . . . . . . . . . . .	L Near	 00000C8C _TEXT	
  $L000577 . . . . . . . . . . .	L Near	 00000C91 _TEXT	
Samples_SimpleProbability_PrintPrettySeq1  P Near   00000C9A _TEXT	Length= 00000109 Public STDCALL
  $L000652 . . . . . . . . . . .	L Near	 00000CF5 _TEXT	
  $L000651 . . . . . . . . . . .	L Near	 00000CFB _TEXT	
  $L000654 . . . . . . . . . . .	L Near	 00000D3C _TEXT	
  $L000653 . . . . . . . . . . .	L Near	 00000D3E _TEXT	
  $L000585 . . . . . . . . . . .	L Near	 00000D9A _TEXT	
Samples_SimpleProbability_PrintPrettySeq2  P Near   00000DA3 _TEXT	Length= 00000102 Public STDCALL
  $L000657 . . . . . . . . . . .	L Near	 00000E04 _TEXT	
  $L000656 . . . . . . . . . . .	L Near	 00000E0A _TEXT	
  $L000661 . . . . . . . . . . .	L Near	 00000E60 _TEXT	
  $L000659 . . . . . . . . . . .	L Near	 00000E6F _TEXT	
  $L000658 . . . . . . . . . . .	L Near	 00000E71 _TEXT	
  $L000593 . . . . . . . . . . .	L Near	 00000E9C _TEXT	
Samples_SimpleProbability  . . .	P Near	 00000EA5 _TEXT	Length= 0000001E Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 000011F0 _TEXT	Length= 00000098 Public STDCALL
__member_Init@Samples_Cotorra  .	P Near	 00000EC3 _TEXT	Length= 00000018 Public STDCALL
__member_Init@Samples_SimpleProbability  P Near	  00000EDB _TEXT	Length= 00000030 Public STDCALL
  $L000662 . . . . . . . . . . .	L Near	 00000EFD _TEXT	
  $L000663 . . . . . . . . . . .	L Near	 00000EFF _TEXT	
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000532 . . . . . . . . . . . .	Byte	 00000177 _DATA	
$S000576 . . . . . . . . . . . .	Byte	 00000136 _DATA	
$S000591 . . . . . . . . . . . .	Byte	 00000173 _DATA	
$S000592 . . . . . . . . . . . .	Byte	 00000000 _DATA	
$S000598 . . . . . . . . . . . .	Byte	 00000004 _DATA	
$S000605 . . . . . . . . . . . .	Byte	 0000001E _DATA	
$S000606 . . . . . . . . . . . .	Byte	 00000009 _DATA	
$S000609 . . . . . . . . . . . .	Byte	 00000034 _DATA	
$S000611 . . . . . . . . . . . .	Byte	 0000004B _DATA	
$S000612 . . . . . . . . . . . .	Byte	 00000061 _DATA	
$S000613 . . . . . . . . . . . .	Byte	 00000155 _DATA	
$S000615 . . . . . . . . . . . .	Byte	 00000076 _DATA	
$S000616 . . . . . . . . . . . .	Byte	 000000EC _DATA	
$S000618 . . . . . . . . . . . .	Byte	 000000A3 _DATA	
$S000619 . . . . . . . . . . . .	Byte	 0000012F _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 000001C3 _DATA	
___argv  . . . . . . . . . . . .	DWord	 000001BF _DATA	
__computer . . . . . . . . . . .	Byte	 0000019F _DATA	
__osver  . . . . . . . . . . . .	DWord	 0000018F _DATA	
__winmajor . . . . . . . . . . .	DWord	 00000197 _DATA	
__winminor . . . . . . . . . . .	DWord	 00000193 _DATA	
__winver . . . . . . . . . . . .	DWord	 0000019B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
