Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:13:01
StanfordAlgs.hpp					     Page 1 - 1


				TITLE	 StanfordAlgs.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000469
				;}
 00000043			$L000469:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  8B E5			mov	ESP,EBP
 00000048  5D				pop	EBP 
 00000049  C2 0008			retn	000000008h
 0000004C			Math_DegreesToRadians ENDP

 0000004C			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004C  55				push	EBP
 0000004D  8B EC			mov	EBP,ESP
 0000004F  51				push	ECX 
 00000050  53				push	EBX 
 00000051  56				push	ESI 
 00000052  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000053  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000056  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000059  50				push	EAX
 0000005A  52				push	EDX 
 0000005B  E8 00000000 E		call	 Math_Exp
 00000060  50				push	EAX
 00000061  52				push	EDX 
 00000062  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000065  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000068  50				push	EAX
 00000069  52				push	EDX 
 0000006A  DD 04 24			fld	qword ptr [ESP]
 0000006D  D9 E0			fchs
 0000006F  DD 1C 24			fstp	qword ptr [ESP]
 00000072  E8 00000000 E		call	 Math_Exp
 00000077  50				push	EAX
 00000078  52				push	EDX 
 00000079  DD 04 24			fld	qword ptr [ESP]
 0000007C  59				pop	ECX
 0000007D  59				pop	ECX 
 0000007E  DC 04 24			fadd	qword ptr [ESP]
 00000081  DD 1C 24			fstp	qword ptr [ESP]
 00000084  B8 00000002			mov	EAX,000000002h
 00000089  9B DB E2			fclex
 0000008C  50				push	EAX
 0000008D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000092  50				push	EAX
 00000093  52				push	EDX 
 00000094  DD 04 24			fld	qword ptr [ESP]
 00000097  59				pop	ECX
 00000098  59				pop	ECX 
 00000099  DC 3C 24			fdivr	qword ptr [ESP]
 0000009C  DD 1C 24			fstp	qword ptr [ESP]
 0000009F  5A				pop	EDX
 000000A0  58				pop	EAX 
 000000A1  EB 00			jmp	OFFSET $L000486
				;}
 000000A3			$L000486:

 000000A3  5F				pop	EDI
 000000A4  5E				pop	ESI 
 000000A5  5B				pop	EBX 
 000000A6  8B E5			mov	ESP,EBP
 000000A8  5D				pop	EBP 
 000000A9  C2 0008			retn	000000008h
 000000AC			Math_Hyperbolic_HCos ENDP

 000000AC			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000AC  55				push	EBP
 000000AD  8B EC			mov	EBP,ESP
 000000AF  51				push	ECX 
 000000B0  53				push	EBX 
 000000B1  56				push	ESI 
 000000B2  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000B3  B8 00000002			mov	EAX,000000002h
 000000B8  50				push	EAX
 000000B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BF  50				push	EAX
 000000C0  52				push	EDX 
 000000C1  E8 00000000 E		call	 Math_Exp
 000000C6  50				push	EAX
 000000C7  52				push	EDX 
 000000C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CE  50				push	EAX
 000000CF  52				push	EDX 
 000000D0  DD 04 24			fld	qword ptr [ESP]
 000000D3  D9 E0			fchs
 000000D5  DD 1C 24			fstp	qword ptr [ESP]
 000000D8  E8 00000000 E		call	 Math_Exp
 000000DD  50				push	EAX
 000000DE  52				push	EDX 
 000000DF  DD 04 24			fld	qword ptr [ESP]
 000000E2  59				pop	ECX
 000000E3  59				pop	ECX 
 000000E4  DD 04 24			fld	qword ptr [ESP]
 000000E7  D8 E1			fsub	st,st(1)
 000000E9  DD 1C 24			fstp	qword ptr [ESP]
 000000EC  9B DB E2			fclex
 000000EF  DD 04 24			fld	qword ptr [ESP]
 000000F2  59				pop	ECX
 000000F3  59				pop	ECX 
 000000F4  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F9  50				push	EAX
 000000FA  52				push	EDX 
 000000FB  DC 3C 24			fdivr	qword ptr [ESP]
 000000FE  DD 1C 24			fstp	qword ptr [ESP]
 00000101  5A				pop	EDX
 00000102  58				pop	EAX 
 00000103  EB 00			jmp	OFFSET $L000492
				;}
 00000105			$L000492:

 00000105  5F				pop	EDI
 00000106  5E				pop	ESI 
 00000107  5B				pop	EBX 
 00000108  8B E5			mov	ESP,EBP
 0000010A  5D				pop	EBP 
 0000010B  C2 0008			retn	000000008h
 0000010E			Math_Hyperbolic_HCosec ENDP

 0000010E			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000010E  55				push	EBP
 0000010F  8B EC			mov	EBP,ESP
 00000111  51				push	ECX 
 00000112  53				push	EBX 
 00000113  56				push	ESI 
 00000114  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000115  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000118  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000011B  50				push	EAX
 0000011C  52				push	EDX 
 0000011D  E8 00000000 E		call	 Math_Exp
 00000122  50				push	EAX
 00000123  52				push	EDX 
 00000124  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000127  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000012A  50				push	EAX
 0000012B  52				push	EDX 
 0000012C  DD 04 24			fld	qword ptr [ESP]
 0000012F  D9 E0			fchs
 00000131  DD 1C 24			fstp	qword ptr [ESP]
 00000134  E8 00000000 E		call	 Math_Exp
 00000139  50				push	EAX
 0000013A  52				push	EDX 
 0000013B  DD 04 24			fld	qword ptr [ESP]
 0000013E  59				pop	ECX
 0000013F  59				pop	ECX 
 00000140  DC 04 24			fadd	qword ptr [ESP]
 00000143  DD 1C 24			fstp	qword ptr [ESP]
 00000146  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000149  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000014C  50				push	EAX
 0000014D  52				push	EDX 
 0000014E  E8 00000000 E		call	 Math_Exp
 00000153  50				push	EAX
 00000154  52				push	EDX 
 00000155  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000158  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000015B  50				push	EAX
 0000015C  52				push	EDX 
 0000015D  DD 04 24			fld	qword ptr [ESP]
 00000160  D9 E0			fchs
 00000162  DD 1C 24			fstp	qword ptr [ESP]
 00000165  E8 00000000 E		call	 Math_Exp
 0000016A  50				push	EAX
 0000016B  52				push	EDX 
 0000016C  DD 04 24			fld	qword ptr [ESP]
 0000016F  59				pop	ECX
 00000170  59				pop	ECX 
 00000171  DD 04 24			fld	qword ptr [ESP]
 00000174  D8 E1			fsub	st,st(1)
 00000176  DD 1C 24			fstp	qword ptr [ESP]
 00000179  9B DB E2			fclex
 0000017C  DD 04 24			fld	qword ptr [ESP]
 0000017F  59				pop	ECX
 00000180  59				pop	ECX 
 00000181  DC 3C 24			fdivr	qword ptr [ESP]
 00000184  DD 1C 24			fstp	qword ptr [ESP]
 00000187  5A				pop	EDX
 00000188  58				pop	EAX 
 00000189  EB 00			jmp	OFFSET $L000494
				;}
 0000018B			$L000494:

 0000018B  5F				pop	EDI
 0000018C  5E				pop	ESI 
 0000018D  5B				pop	EBX 
 0000018E  8B E5			mov	ESP,EBP
 00000190  5D				pop	EBP 
 00000191  C2 0008			retn	000000008h
 00000194			Math_Hyperbolic_HCotan ENDP

 00000194			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00000194  55				push	EBP
 00000195  8B EC			mov	EBP,ESP
 00000197  51				push	ECX 
 00000198  53				push	EBX 
 00000199  56				push	ESI 
 0000019A  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 0000019B  B8 00000002			mov	EAX,000000002h
 000001A0  50				push	EAX
 000001A1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001A4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001A7  50				push	EAX
 000001A8  52				push	EDX 
 000001A9  E8 00000000 E		call	 Math_Exp
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001B3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001B6  50				push	EAX
 000001B7  52				push	EDX 
 000001B8  DD 04 24			fld	qword ptr [ESP]
 000001BB  D9 E0			fchs
 000001BD  DD 1C 24			fstp	qword ptr [ESP]
 000001C0  E8 00000000 E		call	 Math_Exp
 000001C5  50				push	EAX
 000001C6  52				push	EDX 
 000001C7  DD 04 24			fld	qword ptr [ESP]
 000001CA  59				pop	ECX
 000001CB  59				pop	ECX 
 000001CC  DC 04 24			fadd	qword ptr [ESP]
 000001CF  DD 1C 24			fstp	qword ptr [ESP]
 000001D2  9B DB E2			fclex
 000001D5  DD 04 24			fld	qword ptr [ESP]
 000001D8  59				pop	ECX
 000001D9  59				pop	ECX 
 000001DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000001DF  50				push	EAX
 000001E0  52				push	EDX 
 000001E1  DC 3C 24			fdivr	qword ptr [ESP]
 000001E4  DD 1C 24			fstp	qword ptr [ESP]
 000001E7  5A				pop	EDX
 000001E8  58				pop	EAX 
 000001E9  EB 00			jmp	OFFSET $L000490
				;}
 000001EB			$L000490:

 000001EB  5F				pop	EDI
 000001EC  5E				pop	ESI 
 000001ED  5B				pop	EBX 
 000001EE  8B E5			mov	ESP,EBP
 000001F0  5D				pop	EBP 
 000001F1  C2 0008			retn	000000008h
 000001F4			Math_Hyperbolic_HSec ENDP

 000001F4			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001F4  55				push	EBP
 000001F5  8B EC			mov	EBP,ESP
 000001F7  51				push	ECX 
 000001F8  53				push	EBX 
 000001F9  56				push	ESI 
 000001FA  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000201  50				push	EAX
 00000202  52				push	EDX 
 00000203  E8 00000000 E		call	 Math_Exp
 00000208  50				push	EAX
 00000209  52				push	EDX 
 0000020A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000020D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000210  50				push	EAX
 00000211  52				push	EDX 
 00000212  DD 04 24			fld	qword ptr [ESP]
 00000215  D9 E0			fchs
 00000217  DD 1C 24			fstp	qword ptr [ESP]
 0000021A  E8 00000000 E		call	 Math_Exp
 0000021F  50				push	EAX
 00000220  52				push	EDX 
 00000221  DD 04 24			fld	qword ptr [ESP]
 00000224  59				pop	ECX
 00000225  59				pop	ECX 
 00000226  DD 04 24			fld	qword ptr [ESP]
 00000229  D8 E1			fsub	st,st(1)
 0000022B  DD 1C 24			fstp	qword ptr [ESP]
 0000022E  B8 00000002			mov	EAX,000000002h
 00000233  9B DB E2			fclex
 00000236  50				push	EAX
 00000237  E8 00000000 E		call	 FloatingPoint_FromInt
 0000023C  50				push	EAX
 0000023D  52				push	EDX 
 0000023E  DD 04 24			fld	qword ptr [ESP]
 00000241  59				pop	ECX
 00000242  59				pop	ECX 
 00000243  DC 3C 24			fdivr	qword ptr [ESP]
 00000246  DD 1C 24			fstp	qword ptr [ESP]
 00000249  5A				pop	EDX
 0000024A  58				pop	EAX 
 0000024B  EB 00			jmp	OFFSET $L000483
				;}
 0000024D			$L000483:

 0000024D  5F				pop	EDI
 0000024E  5E				pop	ESI 
 0000024F  5B				pop	EBX 
 00000250  8B E5			mov	ESP,EBP
 00000252  5D				pop	EBP 
 00000253  C2 0008			retn	000000008h
 00000256			Math_Hyperbolic_HSin ENDP

 00000256			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 00000256  55				push	EBP
 00000257  8B EC			mov	EBP,ESP
 00000259  51				push	ECX 
 0000025A  53				push	EBX 
 0000025B  56				push	ESI 
 0000025C  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 0000025D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000260  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000263  50				push	EAX
 00000264  52				push	EDX 
 00000265  E8 00000000 E		call	 Math_Exp
 0000026A  50				push	EAX
 0000026B  52				push	EDX 
 0000026C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000026F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000272  50				push	EAX
 00000273  52				push	EDX 
 00000274  DD 04 24			fld	qword ptr [ESP]
 00000277  D9 E0			fchs
 00000279  DD 1C 24			fstp	qword ptr [ESP]
 0000027C  E8 00000000 E		call	 Math_Exp
 00000281  50				push	EAX
 00000282  52				push	EDX 
 00000283  DD 04 24			fld	qword ptr [ESP]
 00000286  59				pop	ECX
 00000287  59				pop	ECX 
 00000288  DD 04 24			fld	qword ptr [ESP]
 0000028B  D8 E1			fsub	st,st(1)
 0000028D  DD 1C 24			fstp	qword ptr [ESP]
 00000290  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000293  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000296  50				push	EAX
 00000297  52				push	EDX 
 00000298  E8 00000000 E		call	 Math_Exp
 0000029D  50				push	EAX
 0000029E  52				push	EDX 
 0000029F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002A2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002A5  50				push	EAX
 000002A6  52				push	EDX 
 000002A7  DD 04 24			fld	qword ptr [ESP]
 000002AA  D9 E0			fchs
 000002AC  DD 1C 24			fstp	qword ptr [ESP]
 000002AF  E8 00000000 E		call	 Math_Exp
 000002B4  50				push	EAX
 000002B5  52				push	EDX 
 000002B6  DD 04 24			fld	qword ptr [ESP]
 000002B9  59				pop	ECX
 000002BA  59				pop	ECX 
 000002BB  DC 04 24			fadd	qword ptr [ESP]
 000002BE  DD 1C 24			fstp	qword ptr [ESP]
 000002C1  9B DB E2			fclex
 000002C4  DD 04 24			fld	qword ptr [ESP]
 000002C7  59				pop	ECX
 000002C8  59				pop	ECX 
 000002C9  DC 3C 24			fdivr	qword ptr [ESP]
 000002CC  DD 1C 24			fstp	qword ptr [ESP]
 000002CF  5A				pop	EDX
 000002D0  58				pop	EAX 
 000002D1  EB 00			jmp	OFFSET $L000488
				;}
 000002D3			$L000488:

 000002D3  5F				pop	EDI
 000002D4  5E				pop	ESI 
 000002D5  5B				pop	EBX 
 000002D6  8B E5			mov	ESP,EBP
 000002D8  5D				pop	EBP 
 000002D9  C2 0008			retn	000000008h
 000002DC			Math_Hyperbolic_HTan ENDP

 000002DC			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002DC  55				push	EBP
 000002DD  8B EC			mov	EBP,ESP
 000002DF  51				push	ECX 
 000002E0  53				push	EBX 
 000002E1  56				push	ESI 
 000002E2  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 000002E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E9  50				push	EAX
 000002EA  52				push	EDX 
 000002EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F1  50				push	EAX
 000002F2  52				push	EDX 
 000002F3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002F6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F9  9B DB E2			fclex
 000002FC  50				push	EAX
 000002FD  52				push	EDX 
 000002FE  DD 04 24			fld	qword ptr [ESP]
 00000301  59				pop	ECX
 00000302  59				pop	ECX 
 00000303  DC 0C 24			fmul	qword ptr [ESP]
 00000306  DD 1C 24			fstp	qword ptr [ESP]
 00000309  B8 00000001			mov	EAX,000000001h
 0000030E  50				push	EAX
 0000030F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000314  50				push	EAX
 00000315  52				push	EDX 
 00000316  DD 04 24			fld	qword ptr [ESP]
 00000319  59				pop	ECX
 0000031A  59				pop	ECX 
 0000031B  DD 04 24			fld	qword ptr [ESP]
 0000031E  D8 E1			fsub	st,st(1)
 00000320  DD 1C 24			fstp	qword ptr [ESP]
 00000323  E8 00000000 E		call	 Math_Sqrt
 00000328  50				push	EAX
 00000329  52				push	EDX 
 0000032A  DD 04 24			fld	qword ptr [ESP]
 0000032D  59				pop	ECX
 0000032E  59				pop	ECX 
 0000032F  DC 04 24			fadd	qword ptr [ESP]
 00000332  DD 1C 24			fstp	qword ptr [ESP]
 00000335  E8 00000000 E		call	 Math_Ln
 0000033A  EB 00			jmp	OFFSET $L000500
				;}
 0000033C			$L000500:

 0000033C  5F				pop	EDI
 0000033D  5E				pop	ESI 
 0000033E  5B				pop	EBX 
 0000033F  8B E5			mov	ESP,EBP
 00000341  5D				pop	EBP 
 00000342  C2 0008			retn	000000008h
 00000345			Math_Hyperbolic_Inverse_HArccos ENDP

 00000345			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000345  55				push	EBP
 00000346  8B EC			mov	EBP,ESP
 00000348  51				push	ECX 
 00000349  53				push	EBX 
 0000034A  56				push	ESI 
 0000034B  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000034C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000352  50				push	EAX
 00000353  52				push	EDX 
 00000354  E8 00000000 E		call	 Math_Sign
 00000359  50				push	EAX
 0000035A  52				push	EDX 
 0000035B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000035E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000361  50				push	EAX
 00000362  52				push	EDX 
 00000363  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000366  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000369  9B DB E2			fclex
 0000036C  50				push	EAX
 0000036D  52				push	EDX 
 0000036E  DD 04 24			fld	qword ptr [ESP]
 00000371  59				pop	ECX
 00000372  59				pop	ECX 
 00000373  DC 0C 24			fmul	qword ptr [ESP]
 00000376  DD 1C 24			fstp	qword ptr [ESP]
 00000379  B8 00000001			mov	EAX,000000001h
 0000037E  50				push	EAX
 0000037F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000384  50				push	EAX
 00000385  52				push	EDX 
 00000386  DD 04 24			fld	qword ptr [ESP]
 00000389  59				pop	ECX
 0000038A  59				pop	ECX 
 0000038B  DC 04 24			fadd	qword ptr [ESP]
 0000038E  DD 1C 24			fstp	qword ptr [ESP]
 00000391  E8 00000000 E		call	 Math_Sqrt
 00000396  9B DB E2			fclex
 00000399  50				push	EAX
 0000039A  52				push	EDX 
 0000039B  DD 04 24			fld	qword ptr [ESP]
 0000039E  59				pop	ECX
 0000039F  59				pop	ECX 
 000003A0  DC 0C 24			fmul	qword ptr [ESP]
 000003A3  DD 1C 24			fstp	qword ptr [ESP]
 000003A6  B8 00000001			mov	EAX,000000001h
 000003AB  50				push	EAX
 000003AC  E8 00000000 E		call	 FloatingPoint_FromInt
 000003B1  50				push	EAX
 000003B2  52				push	EDX 
 000003B3  DD 04 24			fld	qword ptr [ESP]
 000003B6  59				pop	ECX
 000003B7  59				pop	ECX 
 000003B8  DC 04 24			fadd	qword ptr [ESP]
 000003BB  DD 1C 24			fstp	qword ptr [ESP]
 000003BE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003C1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003C4  9B DB E2			fclex
 000003C7  50				push	EAX
 000003C8  52				push	EDX 
 000003C9  DD 04 24			fld	qword ptr [ESP]
 000003CC  59				pop	ECX
 000003CD  59				pop	ECX 
 000003CE  DC 3C 24			fdivr	qword ptr [ESP]
 000003D1  DD 1C 24			fstp	qword ptr [ESP]
 000003D4  E8 00000000 E		call	 Math_Ln
 000003D9  EB 00			jmp	OFFSET $L000506
				;}
 000003DB			$L000506:

 000003DB  5F				pop	EDI
 000003DC  5E				pop	ESI 
 000003DD  5B				pop	EBX 
 000003DE  8B E5			mov	ESP,EBP
 000003E0  5D				pop	EBP 
 000003E1  C2 0008			retn	000000008h
 000003E4			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003E4			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003E4  55				push	EBP
 000003E5  8B EC			mov	EBP,ESP
 000003E7  51				push	ECX 
 000003E8  53				push	EBX 
 000003E9  56				push	ESI 
 000003EA  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 000003EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003F1  50				push	EAX
 000003F2  52				push	EDX 
 000003F3  B8 00000001			mov	EAX,000000001h
 000003F8  50				push	EAX
 000003F9  E8 00000000 E		call	 FloatingPoint_FromInt
 000003FE  50				push	EAX
 000003FF  52				push	EDX 
 00000400  DD 04 24			fld	qword ptr [ESP]
 00000403  59				pop	ECX
 00000404  59				pop	ECX 
 00000405  DC 04 24			fadd	qword ptr [ESP]
 00000408  DD 1C 24			fstp	qword ptr [ESP]
 0000040B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000040E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000411  50				push	EAX
 00000412  52				push	EDX 
 00000413  B8 00000001			mov	EAX,000000001h
 00000418  50				push	EAX
 00000419  E8 00000000 E		call	 FloatingPoint_FromInt
 0000041E  50				push	EAX
 0000041F  52				push	EDX 
 00000420  DD 04 24			fld	qword ptr [ESP]
 00000423  59				pop	ECX
 00000424  59				pop	ECX 
 00000425  DD 04 24			fld	qword ptr [ESP]
 00000428  D8 E1			fsub	st,st(1)
 0000042A  DD 1C 24			fstp	qword ptr [ESP]
 0000042D  9B DB E2			fclex
 00000430  DD 04 24			fld	qword ptr [ESP]
 00000433  59				pop	ECX
 00000434  59				pop	ECX 
 00000435  DC 3C 24			fdivr	qword ptr [ESP]
 00000438  DD 1C 24			fstp	qword ptr [ESP]
 0000043B  E8 00000000 E		call	 Math_Ln
 00000440  50				push	EAX
 00000441  52				push	EDX 
 00000442  B8 00000002			mov	EAX,000000002h
 00000447  9B DB E2			fclex
 0000044A  50				push	EAX
 0000044B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000450  50				push	EAX
 00000451  52				push	EDX 
 00000452  DD 04 24			fld	qword ptr [ESP]
 00000455  59				pop	ECX
 00000456  59				pop	ECX 
 00000457  DC 3C 24			fdivr	qword ptr [ESP]
 0000045A  DD 1C 24			fstp	qword ptr [ESP]
 0000045D  5A				pop	EDX
 0000045E  58				pop	EAX 
 0000045F  EB 00			jmp	OFFSET $L000508
				;}
 00000461			$L000508:

 00000461  5F				pop	EDI
 00000462  5E				pop	ESI 
 00000463  5B				pop	EBX 
 00000464  8B E5			mov	ESP,EBP
 00000466  5D				pop	EBP 
 00000467  C2 0008			retn	000000008h
 0000046A			Math_Hyperbolic_Inverse_HArccotan ENDP

 0000046A			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 0000046A  55				push	EBP
 0000046B  8B EC			mov	EBP,ESP
 0000046D  51				push	ECX 
 0000046E  53				push	EBX 
 0000046F  56				push	ESI 
 00000470  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 00000471  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000474  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000477  50				push	EAX
 00000478  52				push	EDX 
 00000479  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000047C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000047F  9B DB E2			fclex
 00000482  50				push	EAX
 00000483  52				push	EDX 
 00000484  DD 04 24			fld	qword ptr [ESP]
 00000487  59				pop	ECX
 00000488  59				pop	ECX 
 00000489  DC 0C 24			fmul	qword ptr [ESP]
 0000048C  DD 1C 24			fstp	qword ptr [ESP]
 0000048F  DD 04 24			fld	qword ptr [ESP]
 00000492  D9 E0			fchs
 00000494  DD 1C 24			fstp	qword ptr [ESP]
 00000497  B8 00000001			mov	EAX,000000001h
 0000049C  50				push	EAX
 0000049D  E8 00000000 E		call	 FloatingPoint_FromInt
 000004A2  50				push	EAX
 000004A3  52				push	EDX 
 000004A4  DD 04 24			fld	qword ptr [ESP]
 000004A7  59				pop	ECX
 000004A8  59				pop	ECX 
 000004A9  DC 04 24			fadd	qword ptr [ESP]
 000004AC  DD 1C 24			fstp	qword ptr [ESP]
 000004AF  E8 00000000 E		call	 Math_Sqrt
 000004B4  50				push	EAX
 000004B5  52				push	EDX 
 000004B6  B8 00000001			mov	EAX,000000001h
 000004BB  50				push	EAX
 000004BC  E8 00000000 E		call	 FloatingPoint_FromInt
 000004C1  50				push	EAX
 000004C2  52				push	EDX 
 000004C3  DD 04 24			fld	qword ptr [ESP]
 000004C6  59				pop	ECX
 000004C7  59				pop	ECX 
 000004C8  DC 04 24			fadd	qword ptr [ESP]
 000004CB  DD 1C 24			fstp	qword ptr [ESP]
 000004CE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004D1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004D4  9B DB E2			fclex
 000004D7  50				push	EAX
 000004D8  52				push	EDX 
 000004D9  DD 04 24			fld	qword ptr [ESP]
 000004DC  59				pop	ECX
 000004DD  59				pop	ECX 
 000004DE  DC 3C 24			fdivr	qword ptr [ESP]
 000004E1  DD 1C 24			fstp	qword ptr [ESP]
 000004E4  E8 00000000 E		call	 Math_Ln
 000004E9  EB 00			jmp	OFFSET $L000504
				;}
 000004EB			$L000504:

 000004EB  5F				pop	EDI
 000004EC  5E				pop	ESI 
 000004ED  5B				pop	EBX 
 000004EE  8B E5			mov	ESP,EBP
 000004F0  5D				pop	EBP 
 000004F1  C2 0008			retn	000000008h
 000004F4			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004F4			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004F4  55				push	EBP
 000004F5  8B EC			mov	EBP,ESP
 000004F7  51				push	ECX 
 000004F8  53				push	EBX 
 000004F9  56				push	ESI 
 000004FA  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 000004FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000501  50				push	EAX
 00000502  52				push	EDX 
 00000503  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000506  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000509  50				push	EAX
 0000050A  52				push	EDX 
 0000050B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000050E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000511  9B DB E2			fclex
 00000514  50				push	EAX
 00000515  52				push	EDX 
 00000516  DD 04 24			fld	qword ptr [ESP]
 00000519  59				pop	ECX
 0000051A  59				pop	ECX 
 0000051B  DC 0C 24			fmul	qword ptr [ESP]
 0000051E  DD 1C 24			fstp	qword ptr [ESP]
 00000521  B8 00000001			mov	EAX,000000001h
 00000526  50				push	EAX
 00000527  E8 00000000 E		call	 FloatingPoint_FromInt
 0000052C  50				push	EAX
 0000052D  52				push	EDX 
 0000052E  DD 04 24			fld	qword ptr [ESP]
 00000531  59				pop	ECX
 00000532  59				pop	ECX 
 00000533  DC 04 24			fadd	qword ptr [ESP]
 00000536  DD 1C 24			fstp	qword ptr [ESP]
 00000539  E8 00000000 E		call	 Math_Sqrt
 0000053E  50				push	EAX
 0000053F  52				push	EDX 
 00000540  DD 04 24			fld	qword ptr [ESP]
 00000543  59				pop	ECX
 00000544  59				pop	ECX 
 00000545  DC 04 24			fadd	qword ptr [ESP]
 00000548  DD 1C 24			fstp	qword ptr [ESP]
 0000054B  E8 00000000 E		call	 Math_Ln
 00000550  EB 00			jmp	OFFSET $L000497
				;}
 00000552			$L000497:

 00000552  5F				pop	EDI
 00000553  5E				pop	ESI 
 00000554  5B				pop	EBX 
 00000555  8B E5			mov	ESP,EBP
 00000557  5D				pop	EBP 
 00000558  C2 0008			retn	000000008h
 0000055B			Math_Hyperbolic_Inverse_HArcsin ENDP

 0000055B			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 0000055B  55				push	EBP
 0000055C  8B EC			mov	EBP,ESP
 0000055E  51				push	ECX 
 0000055F  53				push	EBX 
 00000560  56				push	ESI 
 00000561  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 00000562  B8 00000001			mov	EAX,000000001h
 00000567  50				push	EAX
 00000568  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000056B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000056E  50				push	EAX
 0000056F  52				push	EDX 
 00000570  DD 04 24			fld	qword ptr [ESP]
 00000573  59				pop	ECX
 00000574  59				pop	ECX 
 00000575  E8 00000000 E		call	 FloatingPoint_FromInt
 0000057A  50				push	EAX
 0000057B  52				push	EDX 
 0000057C  DC 04 24			fadd	qword ptr [ESP]
 0000057F  DD 1C 24			fstp	qword ptr [ESP]
 00000582  B8 00000001			mov	EAX,000000001h
 00000587  50				push	EAX
 00000588  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000058B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000058E  50				push	EAX
 0000058F  52				push	EDX 
 00000590  DD 04 24			fld	qword ptr [ESP]
 00000593  59				pop	ECX
 00000594  59				pop	ECX 
 00000595  E8 00000000 E		call	 FloatingPoint_FromInt
 0000059A  50				push	EAX
 0000059B  52				push	EDX 
 0000059C  DD 04 24			fld	qword ptr [ESP]
 0000059F  D8 E1			fsub	st,st(1)
 000005A1  DD 1C 24			fstp	qword ptr [ESP]
 000005A4  9B DB E2			fclex
 000005A7  DD 04 24			fld	qword ptr [ESP]
 000005AA  59				pop	ECX
 000005AB  59				pop	ECX 
 000005AC  DC 3C 24			fdivr	qword ptr [ESP]
 000005AF  DD 1C 24			fstp	qword ptr [ESP]
 000005B2  E8 00000000 E		call	 Math_Ln
 000005B7  50				push	EAX
 000005B8  52				push	EDX 
 000005B9  B8 00000002			mov	EAX,000000002h
 000005BE  9B DB E2			fclex
 000005C1  50				push	EAX
 000005C2  E8 00000000 E		call	 FloatingPoint_FromInt
 000005C7  50				push	EAX
 000005C8  52				push	EDX 
 000005C9  DD 04 24			fld	qword ptr [ESP]
 000005CC  59				pop	ECX
 000005CD  59				pop	ECX 
 000005CE  DC 3C 24			fdivr	qword ptr [ESP]
 000005D1  DD 1C 24			fstp	qword ptr [ESP]
 000005D4  5A				pop	EDX
 000005D5  58				pop	EAX 
 000005D6  EB 00			jmp	OFFSET $L000502
				;}
 000005D8			$L000502:

 000005D8  5F				pop	EDI
 000005D9  5E				pop	ESI 
 000005DA  5B				pop	EBX 
 000005DB  8B E5			mov	ESP,EBP
 000005DD  5D				pop	EBP 
 000005DE  C2 0008			retn	000000008h
 000005E1			Math_Hyperbolic_Inverse_HArctan ENDP

 000005E1			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005E1  55				push	EBP
 000005E2  8B EC			mov	EBP,ESP
 000005E4  51				push	ECX 
 000005E5  53				push	EBX 
 000005E6  56				push	ESI 
 000005E7  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 000005E8  B8 000000B4			mov	EAX,0000000B4h
 000005ED  50				push	EAX
 000005EE  E8 00000000 E		call	 Math_pi
 000005F3  9B DB E2			fclex
 000005F6  50				push	EAX
 000005F7  52				push	EDX 
 000005F8  DD 04 24			fld	qword ptr [ESP]
 000005FB  59				pop	ECX
 000005FC  59				pop	ECX 
 000005FD  E8 00000000 E		call	 FloatingPoint_FromInt
 00000602  50				push	EAX
 00000603  52				push	EDX 
 00000604  DC 3C 24			fdivr	qword ptr [ESP]
 00000607  DD 1C 24			fstp	qword ptr [ESP]
 0000060A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000060D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000610  9B DB E2			fclex
 00000613  50				push	EAX
 00000614  52				push	EDX 
 00000615  DD 04 24			fld	qword ptr [ESP]
 00000618  59				pop	ECX
 00000619  59				pop	ECX 
 0000061A  DC 0C 24			fmul	qword ptr [ESP]
 0000061D  DD 1C 24			fstp	qword ptr [ESP]
 00000620  5A				pop	EDX
 00000621  58				pop	EAX 
 00000622  EB 00			jmp	OFFSET $L000466
				;}
 00000624			$L000466:

 00000624  5F				pop	EDI
 00000625  5E				pop	ESI 
 00000626  5B				pop	EBX 
 00000627  8B E5			mov	ESP,EBP
 00000629  5D				pop	EBP 
 0000062A  C2 0008			retn	000000008h
 0000062D			Math_RadiansToDegrees ENDP

 0000062D			Stanford_StanfordAlgorithms_Fibonacci PROC NEAR 
				;unsigned Fibonacci(unsigned n);
 0000062D  55				push	EBP
 0000062E  8B EC			mov	EBP,ESP
 00000630  83 EC 0C			sub	ESP,00000000Ch
 00000633  53				push	EBX 
 00000634  56				push	ESI 
 00000635  57				push	EDI 
 00000636  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
				;{

				;{34}:if(n == 0 || n == 1)
 00000639  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000063C  50				push	EAX
 0000063D  33 C0			xor	EAX,EAX
 0000063F  5A				pop	EDX
 00000640  3B D0			cmp	EDX,EAX
 00000642  0F 94 C0			setz	AL
 00000645  84 C0			test	AL,AL
 00000647  75 0F			jnz	OFFSET $L000565
 00000649  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000064C  50				push	EAX
 0000064D  B8 00000001			mov	EAX,000000001h
 00000652  5A				pop	EDX
 00000653  3B D0			cmp	EDX,EAX
 00000655  0F 94 C0			setz	AL
 00000658			$L000565:
 00000658  84 C0			test	AL,AL
 0000065A  74 08			jz	OFFSET $L000563

				;{35}:return n
 0000065C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000065F  E9 000000B3			jmp	OFFSET $L000531
 00000664			$L000563:

;{37}:a= Fibonacci((n + 1) div 2);
 00000664  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000667  50				push	EAX
 00000668  B8 00000001			mov	EAX,000000001h
 0000066D  5A				pop	EDX
 0000066E  03 C2			add	EAX,EDX
 00000670  50				push	EAX
 00000671  B8 00000002			mov	EAX,000000002h
 00000676  8B C8			mov	ECX,EAX
 00000678  58				pop	EAX
 00000679  33 D2			xor	EDX,EDX
 0000067B  F7 F9			idiv	ECX
 0000067D  50				push	EAX
 0000067E  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00000681  E8 FFFFFFA7			call	 Stanford_StanfordAlgorithms_Fibonacci
 00000686  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{38}:b= Fibonacci(((n + 1) div 2) - 1);
 00000689  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000068C  50				push	EAX
 0000068D  B8 00000001			mov	EAX,000000001h
 00000692  5A				pop	EDX
 00000693  03 C2			add	EAX,EDX
 00000695  50				push	EAX
 00000696  B8 00000002			mov	EAX,000000002h
 0000069B  8B C8			mov	ECX,EAX
 0000069D  58				pop	EAX
 0000069E  33 D2			xor	EDX,EDX
 000006A0  F7 F9			idiv	ECX
 000006A2  50				push	EAX
 000006A3  B8 00000001			mov	EAX,000000001h
 000006A8  5A				pop	EDX
 000006A9  2B D0			sub	EDX,EAX
 000006AB  8B C2			mov	EAX,EDX
 000006AD  50				push	EAX
 000006AE  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 000006B1  E8 FFFFFF77			call	 Stanford_StanfordAlgorithms_Fibonacci
 000006B6  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{40}:if(n % 2 == 0)
 000006B9  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000006BC  50				push	EAX
 000006BD  B8 00000002			mov	EAX,000000002h
 000006C2  8B C8			mov	ECX,EAX
 000006C4  58				pop	EAX
 000006C5  33 D2			xor	EDX,EDX
 000006C7  F7 F9			idiv	ECX
 000006C9  8B C2			mov	EAX,EDX 
 000006CB  50				push	EAX
 000006CC  33 C0			xor	EAX,EAX
 000006CE  5A				pop	EDX
 000006CF  3B D0			cmp	EDX,EAX
 000006D1  0F 94 C0			setz	AL
 000006D4  84 C0			test	AL,AL
 000006D6  74 21			jz	OFFSET $L000566

				;{41}:return a * (a + 2 * b)
 000006D8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006DB  50				push	EAX
 000006DC  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006DF  50				push	EAX
 000006E0  B8 00000002			mov	EAX,000000002h
 000006E5  50				push	EAX
 000006E6  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000006E9  59				pop	ECX
 000006EA  33 D2			xor	EDX,EDX
 000006EC  0F AF C1			imul	EAX,ECX
 000006EF  5A				pop	EDX
 000006F0  03 C2			add	EAX,EDX
 000006F2  59				pop	ECX
 000006F3  99				cdq	
 000006F4  0F AF C1			imul	EAX,ECX
 000006F7  EB 1E			jmp	OFFSET $L000531

				; else {
 000006F9			$L000566:

				;{43}:return a * a + b * b
 000006F9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006FC  50				push	EAX
 000006FD  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000700  59				pop	ECX
 00000701  99				cdq	
 00000702  0F AF C1			imul	EAX,ECX
 00000705  50				push	EAX
 00000706  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000709  50				push	EAX
 0000070A  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000070D  59				pop	ECX
 0000070E  99				cdq	
 0000070F  0F AF C1			imul	EAX,ECX
 00000712  5A				pop	EDX
 00000713  03 C2			add	EAX,EDX
 00000715  EB 00			jmp	OFFSET $L000531
 00000717			$L000567:

				; }
				;}
 00000717			$L000531:

 00000717  5F				pop	EDI
 00000718  5E				pop	ESI 
 00000719  5B				pop	EBX 
 0000071A  8B E5			mov	ESP,EBP
 0000071C  5D				pop	EBP 
 0000071D  C2 0004			retn	000000004h
 00000720			Stanford_StanfordAlgorithms_Fibonacci ENDP

 00000720			Stanford_StanfordAlgorithms_Power PROC NEAR 
				;int Power(int x, int n);
 00000720  55				push	EBP
 00000721  8B EC			mov	EBP,ESP
 00000723  83 EC 08			sub	ESP,000000008h
 00000726  53				push	EBX 
 00000727  56				push	ESI 
 00000728  57				push	EDI 
 00000729  89 4D F8			mov	dword ptr [EBP-0008h],ECX
				;{

				;{13}:if(n == 0)
 0000072C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000072F  50				push	EAX
 00000730  33 C0			xor	EAX,EAX
 00000732  5A				pop	EDX
 00000733  3B D0			cmp	EDX,EAX
 00000735  0F 94 C0			setz	AL
 00000738  84 C0			test	AL,AL
 0000073A  74 0A			jz	OFFSET $L000568

				;{14}:return 1
 0000073C  B8 00000001			mov	EAX,000000001h
 00000741  E9 0000009C			jmp	OFFSET $L000525

				; else {
 00000746			$L000568:

				;{15}:if(n == 1)
 00000746  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000749  50				push	EAX
 0000074A  B8 00000001			mov	EAX,000000001h
 0000074F  5A				pop	EDX
 00000750  3B D0			cmp	EDX,EAX
 00000752  0F 94 C0			setz	AL
 00000755  84 C0			test	AL,AL
 00000757  74 08			jz	OFFSET $L000570

				;{16}:return x
 00000759  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000075C  E9 00000081			jmp	OFFSET $L000525
 00000761			$L000570:
 00000761			$L000569:

				; }

				;{17}:result= 1;
 00000761  B8 00000001			mov	EAX,000000001h
 00000766  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{18}:while(n > 0)
 00000769			$L000572:
 00000769  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000076C  50				push	EAX
 0000076D  33 C0			xor	EAX,EAX
 0000076F  5A				pop	EDX
 00000770  3B D0			cmp	EDX,EAX
 00000772  0F 9F C0			setg	AL
 00000775  84 C0			test	AL,AL
 00000777  74 64			jz	OFFSET $L000573
				;{

				;{19}:if(n % 2 == 0)
 00000779  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000077C  50				push	EAX
 0000077D  B8 00000002			mov	EAX,000000002h
 00000782  8B C8			mov	ECX,EAX
 00000784  58				pop	EAX
 00000785  33 D2			xor	EDX,EDX
 00000787  F7 F9			idiv	ECX
 00000789  8B C2			mov	EAX,EDX 
 0000078B  50				push	EAX
 0000078C  33 C0			xor	EAX,EAX
 0000078E  5A				pop	EDX
 0000078F  3B D0			cmp	EDX,EAX
 00000791  0F 94 C0			setz	AL
 00000794  84 C0			test	AL,AL
 00000796  74 1E			jz	OFFSET $L000574
				;{

				;{21}:result*= (x * x);
 00000798  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000079B  50				push	EAX
 0000079C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000079F  59				pop	ECX
 000007A0  99				cdq	
 000007A1  0F AF C1			imul	EAX,ECX
 000007A4  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000007A7  F7 2B			imul	dword ptr [EBX]
 000007A9  89 03			mov	dword ptr [EBX],EAX

				;{22}:n-= 2;
 000007AB  B8 00000002			mov	EAX,000000002h
 000007B0  F8				clc	
 000007B1  29 45 0C			sub	dword ptr [EBP+000Ch],EAX
				;}
 000007B4  EB 25			jmp	OFFSET $L000575

				; else {
 000007B6			$L000574:
				;{

				;{25}:result*= (x * x * x);
 000007B6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000007B9  50				push	EAX
 000007BA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000007BD  59				pop	ECX
 000007BE  99				cdq	
 000007BF  0F AF C1			imul	EAX,ECX
 000007C2  50				push	EAX
 000007C3  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000007C6  59				pop	ECX 
 000007C7  99				cdq	 
 000007C8  0F AF C1			imul	EAX,ECX 
 000007CB  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000007CE  F7 2B			imul	dword ptr [EBX]
 000007D0  89 03			mov	dword ptr [EBX],EAX

				;{26}:n-= 3;
 000007D2  B8 00000003			mov	EAX,000000003h
 000007D7  F8				clc	
 000007D8  29 45 0C			sub	dword ptr [EBP+000Ch],EAX
				;}
 000007DB			$L000575:

				; }
				;}
 000007DB  EB 8C			jmp	OFFSET $L000572
 000007DD			$L000573:

				;{29}:return result
 000007DD  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000007E0  EB 00			jmp	OFFSET $L000525
				;}
 000007E2			$L000525:

 000007E2  5F				pop	EDI
 000007E3  5E				pop	ESI 
 000007E4  5B				pop	EBX 
 000007E5  8B E5			mov	ESP,EBP
 000007E7  5D				pop	EBP 
 000007E8  C2 0008			retn	000000008h
 000007EB			Stanford_StanfordAlgorithms_Power ENDP

 000007EB			Stanford_StanfordAlgorithms_PrintPrettySeq1 PROC NEAR 
				;void PrintPrettySeq1(int n);
 000007EB  55				push	EBP
 000007EC  8B EC			mov	EBP,ESP
 000007EE  83 EC 10			sub	ESP,000000010h
 000007F1  53				push	EBX 
 000007F2  56				push	ESI 
 000007F3  57				push	EDI 
 000007F4  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{50}:i= Power(n - 1, 2) + 1;
 000007F7  B8 00000002			mov	EAX,000000002h
 000007FC  50				push	EAX 
 000007FD  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000800  50				push	EAX
 00000801  B8 00000001			mov	EAX,000000001h
 00000806  5A				pop	EDX
 00000807  2B D0			sub	EDX,EAX
 00000809  8B C2			mov	EAX,EDX
 0000080B  50				push	EAX
 0000080C  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 0000080F  E8 FFFFFF0C			call	 Stanford_StanfordAlgorithms_Power
 00000814  50				push	EAX
 00000815  B8 00000001			mov	EAX,000000001h
 0000081A  5A				pop	EDX
 0000081B  03 C2			add	EAX,EDX
 0000081D  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{51}:m= Power(n, 2) + 1;
 00000820  B8 00000002			mov	EAX,000000002h
 00000825  50				push	EAX 
 00000826  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000829  50				push	EAX
 0000082A  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 0000082D  E8 FFFFFEEE			call	 Stanford_StanfordAlgorithms_Power
 00000832  50				push	EAX
 00000833  B8 00000001			mov	EAX,000000001h
 00000838  5A				pop	EDX
 00000839  03 C2			add	EAX,EDX
 0000083B  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{52}:for(j= i; j < m; j++ )
 0000083E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000841  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000844  EB 06			jmp	OFFSET $L000576
 00000846			$L000577:
 00000846  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000849  FF 45 F4			inc	dword ptr [EBP-12]
 0000084C			$L000576:
 0000084C  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000084F  50				push	EAX
 00000850  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000853  5A				pop	EDX
 00000854  3B D0			cmp	EDX,EAX
 00000856  0F 9C C0			setl	AL
 00000859  84 C0			test	AL,AL
 0000085B  74 32			jz	OFFSET $L000578
				;{

				;{53}:Console::Write(j);
 0000085D  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000860  50				push	EAX
 00000861  E8 00000000 E		call	 Console_WriteInteger

				;{54}:if(j < (m - 1))
 00000866  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000869  50				push	EAX
 0000086A  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000086D  50				push	EAX
 0000086E  B8 00000001			mov	EAX,000000001h
 00000873  5A				pop	EDX
 00000874  2B D0			sub	EDX,EAX
 00000876  8B C2			mov	EAX,EDX
 00000878  5A				pop	EDX
 00000879  3B D0			cmp	EDX,EAX
 0000087B  0F 9C C0			setl	AL
 0000087E  84 C0			test	AL,AL
 00000880  74 0B			jz	OFFSET $L000579

				;{55}:Console::Write("+");
 00000882  B8 0000002B			mov	EAX,00000002Bh
 00000887  50				push	EAX
 00000888  E8 00000000 E		call	 Console_WriteChar
 0000088D			$L000579:
				;}
 0000088D  EB B7			jmp	OFFSET $L000577 
 0000088F			$L000578:

				;{57}:Console::WriteLn("\t= ", Power(n - 1, 3), " + ", Power(n, 3));
 0000088F  8D 05 0000012D R		lea	EAX,OFFSET $S000541
 00000895  6A 00			push	000000000h
 00000897  50				push	EAX 
 00000898  E8 00000000 E		call	 Console_WriteString
 0000089D  B8 00000003			mov	EAX,000000003h
 000008A2  50				push	EAX 
 000008A3  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008A6  50				push	EAX
 000008A7  B8 00000001			mov	EAX,000000001h
 000008AC  5A				pop	EDX
 000008AD  2B D0			sub	EDX,EAX
 000008AF  8B C2			mov	EAX,EDX
 000008B1  50				push	EAX
 000008B2  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000008B5  E8 FFFFFE66			call	 Stanford_StanfordAlgorithms_Power
 000008BA  50				push	EAX 
 000008BB  E8 00000000 E		call	 Console_WriteInteger 
 000008C0  8D 05 00000000 R		lea	EAX,OFFSET $S000542
 000008C6  6A 00			push	000000000h 
 000008C8  50				push	EAX 
 000008C9  E8 00000000 E		call	 Console_WriteString 
 000008CE  B8 00000003			mov	EAX,000000003h
 000008D3  50				push	EAX 
 000008D4  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008D7  50				push	EAX
 000008D8  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000008DB  E8 FFFFFE40			call	 Stanford_StanfordAlgorithms_Power
 000008E0  50				push	EAX 
 000008E1  E8 00000000 E		call	 Console_WriteInteger 
 000008E6  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000008EB			$L000535:

 000008EB  5F				pop	EDI
 000008EC  5E				pop	ESI 
 000008ED  5B				pop	EBX 
 000008EE  8B E5			mov	ESP,EBP
 000008F0  5D				pop	EBP 
 000008F1  C2 0004			retn	000000004h
 000008F4			Stanford_StanfordAlgorithms_PrintPrettySeq1 ENDP

 000008F4			Stanford_StanfordAlgorithms_PrintPrettySeq2 PROC NEAR 
				;void PrintPrettySeq2(int n);
 000008F4  55				push	EBP
 000008F5  8B EC			mov	EBP,ESP
 000008F7  83 EC 10			sub	ESP,000000010h
 000008FA  53				push	EBX 
 000008FB  56				push	ESI 
 000008FC  57				push	EDI 
 000008FD  89 4D F0			mov	dword ptr [EBP-0010h],ECX
				;{

				;{62}:i= Power(n, 2) - n + 1;
 00000900  B8 00000002			mov	EAX,000000002h
 00000905  50				push	EAX 
 00000906  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000909  50				push	EAX
 0000090A  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 0000090D  E8 FFFFFE0E			call	 Stanford_StanfordAlgorithms_Power
 00000912  50				push	EAX
 00000913  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000916  5A				pop	EDX
 00000917  2B D0			sub	EDX,EAX
 00000919  8B C2			mov	EAX,EDX
 0000091B  50				push	EAX
 0000091C  B8 00000001			mov	EAX,000000001h
 00000921  5A				pop	EDX 
 00000922  03 C2			add	EAX,EDX
 00000924  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{63}:m= Power(n, 2) + n - 1;
 00000927  B8 00000002			mov	EAX,000000002h
 0000092C  50				push	EAX 
 0000092D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000930  50				push	EAX
 00000931  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000934  E8 FFFFFDE7			call	 Stanford_StanfordAlgorithms_Power
 00000939  50				push	EAX
 0000093A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000093D  5A				pop	EDX
 0000093E  03 C2			add	EAX,EDX
 00000940  50				push	EAX
 00000941  B8 00000001			mov	EAX,000000001h
 00000946  5A				pop	EDX 
 00000947  2B D0			sub	EDX,EAX
 00000949  8B C2			mov	EAX,EDX
 0000094B  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{64}:for(j= 1; j <= n; j++ )
 0000094E  B8 00000001			mov	EAX,000000001h
 00000953  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000956  EB 06			jmp	OFFSET $L000581
 00000958			$L000582:
 00000958  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 0000095B  FF 45 F4			inc	dword ptr [EBP-12]
 0000095E			$L000581:
 0000095E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000961  50				push	EAX
 00000962  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000965  5A				pop	EDX
 00000966  3B D0			cmp	EDX,EAX
 00000968  0F 9E C0			setle	AL
 0000096B  84 C0			test	AL,AL
 0000096D  74 41			jz	OFFSET $L000583
				;{

				;{65}:Console::Write(i);
 0000096F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000972  50				push	EAX
 00000973  E8 00000000 E		call	 Console_WriteInteger

				;{66}:if(j < n && i < m)
 00000978  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000097B  50				push	EAX
 0000097C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000097F  5A				pop	EDX
 00000980  3B D0			cmp	EDX,EAX
 00000982  0F 9C C0			setl	AL
 00000985  84 C0			test	AL,AL
 00000987  74 0D			jz	OFFSET $L000586
 00000989  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000098C  50				push	EAX
 0000098D  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000990  5A				pop	EDX
 00000991  3B D0			cmp	EDX,EAX
 00000993  0F 9C C0			setl	AL
 00000996			$L000586:
 00000996  84 C0			test	AL,AL
 00000998  74 0B			jz	OFFSET $L000584

				;{67}:Console::Write("+");
 0000099A  B8 0000002B			mov	EAX,00000002Bh
 0000099F  50				push	EAX
 000009A0  E8 00000000 E		call	 Console_WriteChar
 000009A5			$L000584:

				;{68}:i+= 2;
 000009A5  B8 00000002			mov	EAX,000000002h
 000009AA  F8				clc	
 000009AB  01 45 FC			add	dword ptr [EBP-0004h],EAX
				;}
 000009AE  EB A8			jmp	OFFSET $L000582 
 000009B0			$L000583:

				;{70}:Console::WriteLn(" \t= ", Power(n, 3));
 000009B0  8D 05 00000004 R		lea	EAX,OFFSET $S000548
 000009B6  6A 00			push	000000000h
 000009B8  50				push	EAX 
 000009B9  E8 00000000 E		call	 Console_WriteString
 000009BE  B8 00000003			mov	EAX,000000003h
 000009C3  50				push	EAX 
 000009C4  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000009C7  50				push	EAX
 000009C8  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000009CB  E8 FFFFFD50			call	 Stanford_StanfordAlgorithms_Power
 000009D0  50				push	EAX 
 000009D1  E8 00000000 E		call	 Console_WriteInteger 
 000009D6  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000009DB			$L000543:

 000009DB  5F				pop	EDI
 000009DC  5E				pop	ESI 
 000009DD  5B				pop	EBX 
 000009DE  8B E5			mov	ESP,EBP
 000009E0  5D				pop	EBP 
 000009E1  C2 0004			retn	000000004h
 000009E4			Stanford_StanfordAlgorithms_PrintPrettySeq2 ENDP

 000009E4			Stanford_StanfordAlgorithms PROC NEAR 
				;void Stanford::StanfordAlgorithms(void);
 000009E4  55				push	EBP
 000009E5  8B EC			mov	EBP,ESP
 000009E7  51				push	ECX 
 000009E8  53				push	EBX 
 000009E9  56				push	ESI 
 000009EA  57				push	EDI 
				;{
				;}

 000009EB  5F				pop	EDI
 000009EC  5E				pop	ESI 
 000009ED  5B				pop	EBX 
 000009EE  8B E5			mov	ESP,EBP
 000009F0  5D				pop	EBP 
 000009F1  C3				ret	
 000009F2			Stanford_StanfordAlgorithms ENDP

 000009F2			Stanford_Application_main PROC NEAR 
				;void Stanford::Application::main(int argc, string string [] argv);
 000009F2  55				push	EBP
 000009F3  8B EC			mov	EBP,ESP
 000009F5  83 EC 0C			sub	ESP,00000000Ch
 000009F8  53				push	EBX 
 000009F9  56				push	ESI 
 000009FA  57				push	EDI 
				;{

				;{79}:simple= new Stanford::StanfordAlgorithms();
 000009FB  6A 01			push	000000001h
 000009FD  E8 00000000 E		call	 System_Memory_New
 00000A02  85 C0			test	EAX,EAX
 00000A04  74 04			jz	 $L000587
 00000A06  8B F0			mov	ESI,EAX
 00000A08  EB 02			jmp	 $L000588
 00000A0A			$L000587:
 00000A0A  33 F6			xor	ESI,ESI
 00000A0C			$L000588:
 00000A0C  89 75 FC			mov	dword ptr [EBP-0004h],ESI 
 00000A0F  8B CE			mov	ECX,ESI
 00000A11  E8 FFFFFFCE			call	 Stanford_StanfordAlgorithms
 00000A16  8B C6			mov	EAX,ESI 

				;{81}:Console::Write("Please, enter the number n = ");
 00000A18  8D 05 000000E1 R		lea	EAX,OFFSET $S000554
 00000A1E  6A 00			push	000000000h
 00000A20  50				push	EAX 
 00000A21  E8 00000000 E		call	 Console_WriteString

				;{82}:n= Console::ReadInteger();
 00000A26  E8 00000000 E		call	 Console_ReadInteger
 00000A2B  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{83}:Console::WriteLn("--------------------------------------------");
 00000A2E  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000A34  6A 00			push	000000000h
 00000A36  50				push	EAX 
 00000A37  E8 00000000 E		call	 Console_WriteString
 00000A3C  E8 00000000 E		call	 Console_WriteCrLf 

				;{84}:Console::WriteLn("Calculate the Sum[i, {i,(n-1)^2 + 1},{m, 2n-1}]\t= \t(n-1)^3 + n^3.\n");
 00000A41  8D 05 00000082 R		lea	EAX,OFFSET $S000557
 00000A47  6A 00			push	000000000h
 00000A49  50				push	EAX 
 00000A4A  E8 00000000 E		call	 Console_WriteString
 00000A4F  E8 00000000 E		call	 Console_WriteCrLf 

				;{85}:Console::WriteLn("--------------------------------------------");
 00000A54  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000A5A  6A 00			push	000000000h
 00000A5C  50				push	EAX 
 00000A5D  E8 00000000 E		call	 Console_WriteString
 00000A62  E8 00000000 E		call	 Console_WriteCrLf 

				;{86}:for(i= 1; i <= n; i++ )
 00000A67  B8 00000001			mov	EAX,000000001h
 00000A6C  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000A6F  EB 06			jmp	OFFSET $L000589
 00000A71			$L000590:
 00000A71  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000A74  FF 45 F4			inc	dword ptr [EBP-12]
 00000A77			$L000589:
 00000A77  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000A7A  50				push	EAX
 00000A7B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000A7E  5A				pop	EDX
 00000A7F  3B D0			cmp	EDX,EAX
 00000A81  0F 9E C0			setle	AL
 00000A84  84 C0			test	AL,AL
 00000A86  74 0E			jz	OFFSET $L000591

				;{87}:simple.PrintPrettySeq1(i);
 00000A88  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000A8B  50				push	EAX
 00000A8C  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000A8F  E8 FFFFFD57			call	 Stanford_StanfordAlgorithms_PrintPrettySeq1
 00000A94  EB DB			jmp	OFFSET $L000590 
 00000A96			$L000591:

				;{88}:Console::WriteLn("--------------------------------------------");
 00000A96  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000A9C  6A 00			push	000000000h
 00000A9E  50				push	EAX 
 00000A9F  E8 00000000 E		call	 Console_WriteString
 00000AA4  E8 00000000 E		call	 Console_WriteCrLf 

				;{89}:Console::WriteLn("Calculate the Sum[i+2*j, {j, 0}, {i,n^2-n+1},{m, n^2+n-1}, {n}]\t= \tn^3.\n");
 00000AA9  8D 05 00000039 R		lea	EAX,OFFSET $S000559
 00000AAF  6A 00			push	000000000h
 00000AB1  50				push	EAX 
 00000AB2  E8 00000000 E		call	 Console_WriteString
 00000AB7  E8 00000000 E		call	 Console_WriteCrLf 

				;{90}:Console::WriteLn("--------------------------------------------");
 00000ABC  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000AC2  6A 00			push	000000000h
 00000AC4  50				push	EAX 
 00000AC5  E8 00000000 E		call	 Console_WriteString
 00000ACA  E8 00000000 E		call	 Console_WriteCrLf 

				;{91}:for(i= 1; i <= n; i++ )
 00000ACF  B8 00000001			mov	EAX,000000001h
 00000AD4  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000AD7  EB 06			jmp	OFFSET $L000592
 00000AD9			$L000593:
 00000AD9  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000ADC  FF 45 F4			inc	dword ptr [EBP-12]
 00000ADF			$L000592:
 00000ADF  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000AE2  50				push	EAX
 00000AE3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000AE6  5A				pop	EDX
 00000AE7  3B D0			cmp	EDX,EAX
 00000AE9  0F 9E C0			setle	AL
 00000AEC  84 C0			test	AL,AL
 00000AEE  74 0E			jz	OFFSET $L000594

				;{92}:simple.PrintPrettySeq2(i);
 00000AF0  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000AF3  50				push	EAX
 00000AF4  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000AF7  E8 FFFFFDF8			call	 Stanford_StanfordAlgorithms_PrintPrettySeq2
 00000AFC  EB DB			jmp	OFFSET $L000593 
 00000AFE			$L000594:

				;{93}:Console::WriteLn("--------------------------------------------");
 00000AFE  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000B04  6A 00			push	000000000h
 00000B06  50				push	EAX 
 00000B07  E8 00000000 E		call	 Console_WriteString
 00000B0C  E8 00000000 E		call	 Console_WriteCrLf 

				;{94}:Console::WriteLn("Fibonacci Sequence, up to: ", n);
 00000B11  8D 05 000000C5 R		lea	EAX,OFFSET $S000560
 00000B17  6A 00			push	000000000h
 00000B19  50				push	EAX 
 00000B1A  E8 00000000 E		call	 Console_WriteString
 00000B1F  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000B22  50				push	EAX 
 00000B23  E8 00000000 E		call	 Console_WriteInteger 
 00000B28  E8 00000000 E		call	 Console_WriteCrLf 

				;{95}:Console::WriteLn("--------------------------------------------");
 00000B2D  8D 05 0000000C R		lea	EAX,OFFSET $S000556
 00000B33  6A 00			push	000000000h
 00000B35  50				push	EAX 
 00000B36  E8 00000000 E		call	 Console_WriteString
 00000B3B  E8 00000000 E		call	 Console_WriteCrLf 

				;{96}:for(i= 1; i <= n; i++ )
 00000B40  B8 00000001			mov	EAX,000000001h
 00000B45  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000B48  EB 06			jmp	OFFSET $L000595
 00000B4A			$L000596:
 00000B4A  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000B4D  FF 45 F4			inc	dword ptr [EBP-12]
 00000B50			$L000595:
 00000B50  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000B53  50				push	EAX
 00000B54  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000B57  5A				pop	EDX
 00000B58  3B D0			cmp	EDX,EAX
 00000B5A  0F 9E C0			setle	AL
 00000B5D  84 C0			test	AL,AL
 00000B5F  74 22			jz	OFFSET $L000597

				;{97}:Console::Write(simple.Fibonacci(i), ", ");
 00000B61  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000B64  50				push	EAX
 00000B65  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000B68  E8 FFFFFAC0			call	 Stanford_StanfordAlgorithms_Fibonacci
 00000B6D  50				push	EAX
 00000B6E  E8 00000000 E		call	 Console_WriteInteger
 00000B73  8D 05 00000009 R		lea	EAX,OFFSET $S000561
 00000B79  6A 00			push	000000000h 
 00000B7B  50				push	EAX 
 00000B7C  E8 00000000 E		call	 Console_WriteString 
 00000B81  EB C7			jmp	OFFSET $L000596 
 00000B83			$L000597:

				;{98}:Console::WriteLn("\n--------------------------------------------");
 00000B83  8D 05 000000FF R		lea	EAX,OFFSET $S000562
 00000B89  6A 00			push	000000000h
 00000B8B  50				push	EAX 
 00000B8C  E8 00000000 E		call	 Console_WriteString
 00000B91  E8 00000000 E		call	 Console_WriteCrLf 

				;{99}:destroy simple;
 00000B96  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000B99  50				push	EAX
 00000B9A  E8 00000000 E		call	 System_Memory_Destroy
				;}
 00000B9F			$L000550:

 00000B9F  5F				pop	EDI
 00000BA0  5E				pop	ESI 
 00000BA1  5B				pop	EBX 
 00000BA2  8B E5			mov	ESP,EBP
 00000BA4  5D				pop	EBP 
 00000BA5  C2 0008			retn	000000008h
 00000BA8			Stanford_Application_main ENDP

 00000BA8			__System_Hpp_Runtime_Init PROC

 00000BA8  55				push	EBP
 00000BA9  8B EC			mov	EBP,ESP
 00000BAB  51				push	ECX 
 00000BAC  53				push	EBX 
 00000BAD  56				push	ESI 
 00000BAE  57				push	EDI 
 00000BAF  E8 00000000 E		call	 GetVersion
 00000BB4  A3 00000131 R		mov	 __osver,EAX ;os version
 00000BB9  A1 00000131 R		mov	EAX, __osver 
 00000BBE  C1 E8 08			shr	EAX,000000008h
 00000BC1  25 000000FF			and	EAX,0000000FFh
 00000BC6  A3 00000135 R		mov	 __winminor,EAX ;windows minor
 00000BCB  8B 0D 00000131 R		mov	ECX, __osver 
 00000BD1  81 E1 000000FF		and	ECX,0000000FFh 
 00000BD7  89 0D 00000139 R		mov	 __winmajor,ECX ;windows major
 00000BDD  8B 15 00000139 R		mov	EDX,dword ptr __winmajor 
 00000BE3  C1 E2 08			shl	EDX,000000008h
 00000BE6  03 15 00000135 R		add	EDX,dword ptr __winminor
 00000BEC  89 15 0000013D R		mov	dword ptr __winver,EDX ;windows version
 00000BF2  A1 00000131 R		mov	EAX, __osver 
 00000BF7  C1 E8 10			shr	EAX,000000010h 
 00000BFA  25 0000FFFF			and	EAX,00000FFFFh 
 00000BFF  A3 00000131 R		mov	 __osver,EAX 
 00000C04  8D 1D 00000165 R		lea	EBX,dword ptr ___argc
 00000C0A  53				push	EBX
 00000C0B  E8 00000000 E		call	 System_GetCommandLineArgv 
 00000C10  A3 00000161 R		mov	dword ptr ___argv,EAX 
 00000C15  50				push	EAX 
 00000C16  8B 0D 00000165 R		mov	ECX,dword ptr ___argc 
 00000C1C  51				push	ECX 
 00000C1D  E8 FFFFFDD0			call	 Stanford_Application_main ;user entry point (stdcall calling convention)
 00000C22  50				push	EAX 
 00000C23  A1 00000161 R		mov	EAX,dword ptr ___argv 
 00000C28  50				push	EAX 
 00000C29  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00000C2E  50				push	EAX 
 00000C2F  E8 00000000 E		call	 System_Memory_Free 
 00000C34  E8 00000000 E		call	 System_Exit 

 00000C39  5F				pop	EDI
 00000C3A  5E				pop	ESI 
 00000C3B  5B				pop	EBX 
 00000C3C  8B E5			mov	ESP,EBP
 00000C3E  5D				pop	EBP 
 00000C3F  C3				ret	
 00000C40			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 00000000 20 2B 20 00		$S000542 		BYTE 	" + ",0
 00000004 20 09 3D 20 00	$S000548 		BYTE 	" ",09h,"= ",0
 00000009 2C 20 00		$S000561 		BYTE 	", ",0
 0000000C 2D 2D 2D 2D 2D	$S000556 		BYTE 	"--------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 00
 00000039 43 61 6C 63 75	$S000559 		BYTE 	"Calculate the Sum[i+2*j, {j, 0}, {i,n^2-n+1},{m, n^2+n-1}, {n}]",09h,"= ",09h,"n^3.",0Ah,0
	   6C 61 74 65 20
	   74 68 65 20 53
	   75 6D 5B 69 2B
	   32 2A 6A 2C 20
	   7B 6A 2C 20 30
	   7D 2C 20 7B 69
	   2C 6E 5E 32 2D
	   6E 2B 31 7D 2C
	   7B 6D 2C 20 6E
	   5E 32 2B 6E 2D
	   31 7D 2C 20 7B
	   6E 7D 5D 09 3D
	   20 09 6E 5E 33
	   2E 0A 00
 00000082 43 61 6C 63 75	$S000557 		BYTE 	"Calculate the Sum[i, {i,(n-1)^2 + 1},{m, 2n-1}]",09h,"= ",09h,"(n-1)^3 + n^3.",0Ah,0
	   6C 61 74 65 20
	   74 68 65 20 53
	   75 6D 5B 69 2C
	   20 7B 69 2C 28
	   6E 2D 31 29 5E
	   32 20 2B 20 31
	   7D 2C 7B 6D 2C
	   20 32 6E 2D 31
	   7D 5D 09 3D 20
	   09 28 6E 2D 31
	   29 5E 33 20 2B
	   20 6E 5E 33 2E
	   0A 00
 000000C5 46 69 62 6F 6E	$S000560 		BYTE 	"Fibonacci Sequence, up to: ",0
	   61 63 63 69 20
	   53 65 71 75 65
	   6E 63 65 2C 20
	   75 70 20 74 6F
	   3A 20 00
 000000E1 50 6C 65 61 73	$S000554 		BYTE 	"Please, enter the number n = ",0
	   65 2C 20 65 6E
	   74 65 72 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6E 20 3D 20 00
 000000FF 0A 2D 2D 2D 2D	$S000562 		BYTE 	0Ah,"--------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 0000012D 09 3D 20 00		$S000541 		BYTE 	09h,"= ",0

 00000131 00000000		__osver 		DWORD 	0;Windows OS version
 00000135 00000000		__winminor 		DWORD 	0;Windows minor version
 00000139 00000000		__winmajor 		DWORD 	0;Windows major version
 0000013D 00000000		__winver 		DWORD 	0;Windows version
 00000141  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00000161 00000000		___argv 		DWORD 	0;Array of argument values
 00000165 00000000		___argc 		DWORD 	0;Argument count

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:13:01
StanfordAlgs.hpp					     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000169 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000C40 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000AC _TEXT	Length= 00000062 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00000105 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004C _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 000000A3 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000010E _TEXT	Length= 00000086 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 0000018B _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00000194 _TEXT	Length= 00000060 Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 000001EB _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001F4 _TEXT	Length= 00000062 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 0000024D _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 00000256 _TEXT	Length= 00000086 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 000002D3 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000345 _TEXT	Length= 0000009F Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 000003DB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002DC _TEXT	Length= 00000069 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 0000033C _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003E4 _TEXT	Length= 00000086 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 00000461 _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 0000046A _TEXT	Length= 0000008A Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 000004EB _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004F4 _TEXT	Length= 00000067 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 00000552 _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 0000055B _TEXT	Length= 00000086 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 000005D8 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005E1 _TEXT	Length= 0000004C Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00000624 _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Stanford_Application_main  . . .	P Near	 000009F2 _TEXT	Length= 000001B6 Public STDCALL
  $L000587 . . . . . . . . . . .	L Near	 00000A0A _TEXT	
  $L000588 . . . . . . . . . . .	L Near	 00000A0C _TEXT	
  $L000590 . . . . . . . . . . .	L Near	 00000A71 _TEXT	
  $L000589 . . . . . . . . . . .	L Near	 00000A77 _TEXT	
  $L000591 . . . . . . . . . . .	L Near	 00000A96 _TEXT	
  $L000593 . . . . . . . . . . .	L Near	 00000AD9 _TEXT	
  $L000592 . . . . . . . . . . .	L Near	 00000ADF _TEXT	
  $L000594 . . . . . . . . . . .	L Near	 00000AFE _TEXT	
  $L000596 . . . . . . . . . . .	L Near	 00000B4A _TEXT	
  $L000595 . . . . . . . . . . .	L Near	 00000B50 _TEXT	
  $L000597 . . . . . . . . . . .	L Near	 00000B83 _TEXT	
  $L000550 . . . . . . . . . . .	L Near	 00000B9F _TEXT	
Stanford_StanfordAlgorithms_Fibonacci 	P Near	 0000062D _TEXT	Length= 000000F3 Public STDCALL
  $L000565 . . . . . . . . . . .	L Near	 00000658 _TEXT	
  $L000563 . . . . . . . . . . .	L Near	 00000664 _TEXT	
  $L000566 . . . . . . . . . . .	L Near	 000006F9 _TEXT	
  $L000567 . . . . . . . . . . .	L Near	 00000717 _TEXT	
  $L000531 . . . . . . . . . . .	L Near	 00000717 _TEXT	
Stanford_StanfordAlgorithms_Power 	P Near	 00000720 _TEXT	Length= 000000CB Public STDCALL
  $L000568 . . . . . . . . . . .	L Near	 00000746 _TEXT	
  $L000570 . . . . . . . . . . .	L Near	 00000761 _TEXT	
  $L000569 . . . . . . . . . . .	L Near	 00000761 _TEXT	
  $L000572 . . . . . . . . . . .	L Near	 00000769 _TEXT	
  $L000574 . . . . . . . . . . .	L Near	 000007B6 _TEXT	
  $L000575 . . . . . . . . . . .	L Near	 000007DB _TEXT	
  $L000573 . . . . . . . . . . .	L Near	 000007DD _TEXT	
  $L000525 . . . . . . . . . . .	L Near	 000007E2 _TEXT	
Stanford_StanfordAlgorithms_PrintPrettySeq1  P Near   000007EB _TEXT	Length= 00000109 Public STDCALL
  $L000577 . . . . . . . . . . .	L Near	 00000846 _TEXT	
  $L000576 . . . . . . . . . . .	L Near	 0000084C _TEXT	
  $L000579 . . . . . . . . . . .	L Near	 0000088D _TEXT	
  $L000578 . . . . . . . . . . .	L Near	 0000088F _TEXT	
  $L000535 . . . . . . . . . . .	L Near	 000008EB _TEXT	
Stanford_StanfordAlgorithms_PrintPrettySeq2  P Near   000008F4 _TEXT	Length= 000000F0 Public STDCALL
  $L000582 . . . . . . . . . . .	L Near	 00000958 _TEXT	
  $L000581 . . . . . . . . . . .	L Near	 0000095E _TEXT	
  $L000586 . . . . . . . . . . .	L Near	 00000996 _TEXT	
  $L000584 . . . . . . . . . . .	L Near	 000009A5 _TEXT	
  $L000583 . . . . . . . . . . .	L Near	 000009B0 _TEXT	
  $L000543 . . . . . . . . . . .	L Near	 000009DB _TEXT	
Stanford_StanfordAlgorithms  . .	P Near	 000009E4 _TEXT	Length= 0000000E Public STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00000BA8 _TEXT	Length= 00000098 Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000541 . . . . . . . . . . . .	Byte	 0000012D _DATA	
$S000542 . . . . . . . . . . . .	Byte	 00000000 _DATA	
$S000548 . . . . . . . . . . . .	Byte	 00000004 _DATA	
$S000554 . . . . . . . . . . . .	Byte	 000000E1 _DATA	
$S000556 . . . . . . . . . . . .	Byte	 0000000C _DATA	
$S000557 . . . . . . . . . . . .	Byte	 00000082 _DATA	
$S000559 . . . . . . . . . . . .	Byte	 00000039 _DATA	
$S000560 . . . . . . . . . . . .	Byte	 000000C5 _DATA	
$S000561 . . . . . . . . . . . .	Byte	 00000009 _DATA	
$S000562 . . . . . . . . . . . .	Byte	 000000FF _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 00000165 _DATA	
___argv  . . . . . . . . . . . .	DWord	 00000161 _DATA	
__computer . . . . . . . . . . .	Byte	 00000141 _DATA	
__osver  . . . . . . . . . . . .	DWord	 00000131 _DATA	
__winmajor . . . . . . . . . . .	DWord	 00000139 _DATA	
__winminor . . . . . . . . . . .	DWord	 00000135 _DATA	
__winver . . . . . . . . . . . .	DWord	 0000013D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
