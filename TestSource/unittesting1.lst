Microsoft (R) Macro Assembler Version 6.15.8803		    03/28/13 13:50:53
unittesting1.hpp					     Page 1 - 1


				TITLE	 unittesting1.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000469
				;}
 00000043			$L000469:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  C9				leave	
 00000047  C2 0008			retn	000000008h
 0000004A			Math_DegreesToRadians ENDP

 0000004A			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004A  55				push	EBP
 0000004B  8B EC			mov	EBP,ESP
 0000004D  51				push	ECX 
 0000004E  53				push	EBX 
 0000004F  56				push	ESI 
 00000050  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000051  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000054  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000057  50				push	EAX
 00000058  52				push	EDX 
 00000059  E8 00000000 E		call	 Math_Exp
 0000005E  50				push	EAX
 0000005F  52				push	EDX 
 00000060  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000063  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000066  50				push	EAX
 00000067  52				push	EDX 
 00000068  DD 04 24			fld	qword ptr [ESP]
 0000006B  D9 E0			fchs
 0000006D  DD 1C 24			fstp	qword ptr [ESP]
 00000070  E8 00000000 E		call	 Math_Exp
 00000075  50				push	EAX
 00000076  52				push	EDX 
 00000077  DD 04 24			fld	qword ptr [ESP]
 0000007A  59				pop	ECX
 0000007B  59				pop	ECX 
 0000007C  DC 04 24			fadd	qword ptr [ESP]
 0000007F  DD 1C 24			fstp	qword ptr [ESP]
 00000082  B8 00000002			mov	EAX,000000002h
 00000087  9B DB E2			fclex
 0000008A  50				push	EAX
 0000008B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000090  50				push	EAX
 00000091  52				push	EDX 
 00000092  DD 04 24			fld	qword ptr [ESP]
 00000095  59				pop	ECX
 00000096  59				pop	ECX 
 00000097  DC 3C 24			fdivr	qword ptr [ESP]
 0000009A  DD 1C 24			fstp	qword ptr [ESP]
 0000009D  5A				pop	EDX
 0000009E  58				pop	EAX 
 0000009F  EB 00			jmp	OFFSET $L000486
				;}
 000000A1			$L000486:

 000000A1  5F				pop	EDI
 000000A2  5E				pop	ESI 
 000000A3  5B				pop	EBX 
 000000A4  C9				leave	
 000000A5  C2 0008			retn	000000008h
 000000A8			Math_Hyperbolic_HCos ENDP

 000000A8			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000A8  55				push	EBP
 000000A9  8B EC			mov	EBP,ESP
 000000AB  51				push	ECX 
 000000AC  53				push	EBX 
 000000AD  56				push	ESI 
 000000AE  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000AF  B8 00000002			mov	EAX,000000002h
 000000B4  50				push	EAX
 000000B5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000B8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BB  50				push	EAX
 000000BC  52				push	EDX 
 000000BD  E8 00000000 E		call	 Math_Exp
 000000C2  50				push	EAX
 000000C3  52				push	EDX 
 000000C4  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000C7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CA  50				push	EAX
 000000CB  52				push	EDX 
 000000CC  DD 04 24			fld	qword ptr [ESP]
 000000CF  D9 E0			fchs
 000000D1  DD 1C 24			fstp	qword ptr [ESP]
 000000D4  E8 00000000 E		call	 Math_Exp
 000000D9  50				push	EAX
 000000DA  52				push	EDX 
 000000DB  DD 04 24			fld	qword ptr [ESP]
 000000DE  59				pop	ECX
 000000DF  59				pop	ECX 
 000000E0  DD 04 24			fld	qword ptr [ESP]
 000000E3  D8 E1			fsub	st,st(1)
 000000E5  DD 1C 24			fstp	qword ptr [ESP]
 000000E8  9B DB E2			fclex
 000000EB  DD 04 24			fld	qword ptr [ESP]
 000000EE  59				pop	ECX
 000000EF  59				pop	ECX 
 000000F0  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F5  50				push	EAX
 000000F6  52				push	EDX 
 000000F7  DC 3C 24			fdivr	qword ptr [ESP]
 000000FA  DD 1C 24			fstp	qword ptr [ESP]
 000000FD  5A				pop	EDX
 000000FE  58				pop	EAX 
 000000FF  EB 00			jmp	OFFSET $L000492
				;}
 00000101			$L000492:

 00000101  5F				pop	EDI
 00000102  5E				pop	ESI 
 00000103  5B				pop	EBX 
 00000104  C9				leave	
 00000105  C2 0008			retn	000000008h
 00000108			Math_Hyperbolic_HCosec ENDP

 00000108			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 00000108  55				push	EBP
 00000109  8B EC			mov	EBP,ESP
 0000010B  51				push	ECX 
 0000010C  53				push	EBX 
 0000010D  56				push	ESI 
 0000010E  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 0000010F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000112  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000115  50				push	EAX
 00000116  52				push	EDX 
 00000117  E8 00000000 E		call	 Math_Exp
 0000011C  50				push	EAX
 0000011D  52				push	EDX 
 0000011E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000121  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000124  50				push	EAX
 00000125  52				push	EDX 
 00000126  DD 04 24			fld	qword ptr [ESP]
 00000129  D9 E0			fchs
 0000012B  DD 1C 24			fstp	qword ptr [ESP]
 0000012E  E8 00000000 E		call	 Math_Exp
 00000133  50				push	EAX
 00000134  52				push	EDX 
 00000135  DD 04 24			fld	qword ptr [ESP]
 00000138  59				pop	ECX
 00000139  59				pop	ECX 
 0000013A  DC 04 24			fadd	qword ptr [ESP]
 0000013D  DD 1C 24			fstp	qword ptr [ESP]
 00000140  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000143  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000146  50				push	EAX
 00000147  52				push	EDX 
 00000148  E8 00000000 E		call	 Math_Exp
 0000014D  50				push	EAX
 0000014E  52				push	EDX 
 0000014F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000152  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000155  50				push	EAX
 00000156  52				push	EDX 
 00000157  DD 04 24			fld	qword ptr [ESP]
 0000015A  D9 E0			fchs
 0000015C  DD 1C 24			fstp	qword ptr [ESP]
 0000015F  E8 00000000 E		call	 Math_Exp
 00000164  50				push	EAX
 00000165  52				push	EDX 
 00000166  DD 04 24			fld	qword ptr [ESP]
 00000169  59				pop	ECX
 0000016A  59				pop	ECX 
 0000016B  DD 04 24			fld	qword ptr [ESP]
 0000016E  D8 E1			fsub	st,st(1)
 00000170  DD 1C 24			fstp	qword ptr [ESP]
 00000173  9B DB E2			fclex
 00000176  DD 04 24			fld	qword ptr [ESP]
 00000179  59				pop	ECX
 0000017A  59				pop	ECX 
 0000017B  DC 3C 24			fdivr	qword ptr [ESP]
 0000017E  DD 1C 24			fstp	qword ptr [ESP]
 00000181  5A				pop	EDX
 00000182  58				pop	EAX 
 00000183  EB 00			jmp	OFFSET $L000494
				;}
 00000185			$L000494:

 00000185  5F				pop	EDI
 00000186  5E				pop	ESI 
 00000187  5B				pop	EBX 
 00000188  C9				leave	
 00000189  C2 0008			retn	000000008h
 0000018C			Math_Hyperbolic_HCotan ENDP

 0000018C			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 0000018C  55				push	EBP
 0000018D  8B EC			mov	EBP,ESP
 0000018F  51				push	ECX 
 00000190  53				push	EBX 
 00000191  56				push	ESI 
 00000192  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00000193  B8 00000002			mov	EAX,000000002h
 00000198  50				push	EAX
 00000199  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000019C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000019F  50				push	EAX
 000001A0  52				push	EDX 
 000001A1  E8 00000000 E		call	 Math_Exp
 000001A6  50				push	EAX
 000001A7  52				push	EDX 
 000001A8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001AB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  DD 04 24			fld	qword ptr [ESP]
 000001B3  D9 E0			fchs
 000001B5  DD 1C 24			fstp	qword ptr [ESP]
 000001B8  E8 00000000 E		call	 Math_Exp
 000001BD  50				push	EAX
 000001BE  52				push	EDX 
 000001BF  DD 04 24			fld	qword ptr [ESP]
 000001C2  59				pop	ECX
 000001C3  59				pop	ECX 
 000001C4  DC 04 24			fadd	qword ptr [ESP]
 000001C7  DD 1C 24			fstp	qword ptr [ESP]
 000001CA  9B DB E2			fclex
 000001CD  DD 04 24			fld	qword ptr [ESP]
 000001D0  59				pop	ECX
 000001D1  59				pop	ECX 
 000001D2  E8 00000000 E		call	 FloatingPoint_FromInt
 000001D7  50				push	EAX
 000001D8  52				push	EDX 
 000001D9  DC 3C 24			fdivr	qword ptr [ESP]
 000001DC  DD 1C 24			fstp	qword ptr [ESP]
 000001DF  5A				pop	EDX
 000001E0  58				pop	EAX 
 000001E1  EB 00			jmp	OFFSET $L000490
				;}
 000001E3			$L000490:

 000001E3  5F				pop	EDI
 000001E4  5E				pop	ESI 
 000001E5  5B				pop	EBX 
 000001E6  C9				leave	
 000001E7  C2 0008			retn	000000008h
 000001EA			Math_Hyperbolic_HSec ENDP

 000001EA			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001EA  55				push	EBP
 000001EB  8B EC			mov	EBP,ESP
 000001ED  51				push	ECX 
 000001EE  53				push	EBX 
 000001EF  56				push	ESI 
 000001F0  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001F1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001F4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001F7  50				push	EAX
 000001F8  52				push	EDX 
 000001F9  E8 00000000 E		call	 Math_Exp
 000001FE  50				push	EAX
 000001FF  52				push	EDX 
 00000200  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000203  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000206  50				push	EAX
 00000207  52				push	EDX 
 00000208  DD 04 24			fld	qword ptr [ESP]
 0000020B  D9 E0			fchs
 0000020D  DD 1C 24			fstp	qword ptr [ESP]
 00000210  E8 00000000 E		call	 Math_Exp
 00000215  50				push	EAX
 00000216  52				push	EDX 
 00000217  DD 04 24			fld	qword ptr [ESP]
 0000021A  59				pop	ECX
 0000021B  59				pop	ECX 
 0000021C  DD 04 24			fld	qword ptr [ESP]
 0000021F  D8 E1			fsub	st,st(1)
 00000221  DD 1C 24			fstp	qword ptr [ESP]
 00000224  B8 00000002			mov	EAX,000000002h
 00000229  9B DB E2			fclex
 0000022C  50				push	EAX
 0000022D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000232  50				push	EAX
 00000233  52				push	EDX 
 00000234  DD 04 24			fld	qword ptr [ESP]
 00000237  59				pop	ECX
 00000238  59				pop	ECX 
 00000239  DC 3C 24			fdivr	qword ptr [ESP]
 0000023C  DD 1C 24			fstp	qword ptr [ESP]
 0000023F  5A				pop	EDX
 00000240  58				pop	EAX 
 00000241  EB 00			jmp	OFFSET $L000483
				;}
 00000243			$L000483:

 00000243  5F				pop	EDI
 00000244  5E				pop	ESI 
 00000245  5B				pop	EBX 
 00000246  C9				leave	
 00000247  C2 0008			retn	000000008h
 0000024A			Math_Hyperbolic_HSin ENDP

 0000024A			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 0000024A  55				push	EBP
 0000024B  8B EC			mov	EBP,ESP
 0000024D  51				push	ECX 
 0000024E  53				push	EBX 
 0000024F  56				push	ESI 
 00000250  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 00000251  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000254  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000257  50				push	EAX
 00000258  52				push	EDX 
 00000259  E8 00000000 E		call	 Math_Exp
 0000025E  50				push	EAX
 0000025F  52				push	EDX 
 00000260  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000263  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000266  50				push	EAX
 00000267  52				push	EDX 
 00000268  DD 04 24			fld	qword ptr [ESP]
 0000026B  D9 E0			fchs
 0000026D  DD 1C 24			fstp	qword ptr [ESP]
 00000270  E8 00000000 E		call	 Math_Exp
 00000275  50				push	EAX
 00000276  52				push	EDX 
 00000277  DD 04 24			fld	qword ptr [ESP]
 0000027A  59				pop	ECX
 0000027B  59				pop	ECX 
 0000027C  DD 04 24			fld	qword ptr [ESP]
 0000027F  D8 E1			fsub	st,st(1)
 00000281  DD 1C 24			fstp	qword ptr [ESP]
 00000284  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000287  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000028A  50				push	EAX
 0000028B  52				push	EDX 
 0000028C  E8 00000000 E		call	 Math_Exp
 00000291  50				push	EAX
 00000292  52				push	EDX 
 00000293  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000296  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000299  50				push	EAX
 0000029A  52				push	EDX 
 0000029B  DD 04 24			fld	qword ptr [ESP]
 0000029E  D9 E0			fchs
 000002A0  DD 1C 24			fstp	qword ptr [ESP]
 000002A3  E8 00000000 E		call	 Math_Exp
 000002A8  50				push	EAX
 000002A9  52				push	EDX 
 000002AA  DD 04 24			fld	qword ptr [ESP]
 000002AD  59				pop	ECX
 000002AE  59				pop	ECX 
 000002AF  DC 04 24			fadd	qword ptr [ESP]
 000002B2  DD 1C 24			fstp	qword ptr [ESP]
 000002B5  9B DB E2			fclex
 000002B8  DD 04 24			fld	qword ptr [ESP]
 000002BB  59				pop	ECX
 000002BC  59				pop	ECX 
 000002BD  DC 3C 24			fdivr	qword ptr [ESP]
 000002C0  DD 1C 24			fstp	qword ptr [ESP]
 000002C3  5A				pop	EDX
 000002C4  58				pop	EAX 
 000002C5  EB 00			jmp	OFFSET $L000488
				;}
 000002C7			$L000488:

 000002C7  5F				pop	EDI
 000002C8  5E				pop	ESI 
 000002C9  5B				pop	EBX 
 000002CA  C9				leave	
 000002CB  C2 0008			retn	000000008h
 000002CE			Math_Hyperbolic_HTan ENDP

 000002CE			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002CE  55				push	EBP
 000002CF  8B EC			mov	EBP,ESP
 000002D1  51				push	ECX 
 000002D2  53				push	EBX 
 000002D3  56				push	ESI 
 000002D4  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 000002D5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002D8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002DB  50				push	EAX
 000002DC  52				push	EDX 
 000002DD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E3  50				push	EAX
 000002E4  52				push	EDX 
 000002E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002EB  9B DB E2			fclex
 000002EE  50				push	EAX
 000002EF  52				push	EDX 
 000002F0  DD 04 24			fld	qword ptr [ESP]
 000002F3  59				pop	ECX
 000002F4  59				pop	ECX 
 000002F5  DC 0C 24			fmul	qword ptr [ESP]
 000002F8  DD 1C 24			fstp	qword ptr [ESP]
 000002FB  B8 00000001			mov	EAX,000000001h
 00000300  50				push	EAX
 00000301  E8 00000000 E		call	 FloatingPoint_FromInt
 00000306  50				push	EAX
 00000307  52				push	EDX 
 00000308  DD 04 24			fld	qword ptr [ESP]
 0000030B  59				pop	ECX
 0000030C  59				pop	ECX 
 0000030D  DD 04 24			fld	qword ptr [ESP]
 00000310  D8 E1			fsub	st,st(1)
 00000312  DD 1C 24			fstp	qword ptr [ESP]
 00000315  E8 00000000 E		call	 Math_Sqrt
 0000031A  50				push	EAX
 0000031B  52				push	EDX 
 0000031C  DD 04 24			fld	qword ptr [ESP]
 0000031F  59				pop	ECX
 00000320  59				pop	ECX 
 00000321  DC 04 24			fadd	qword ptr [ESP]
 00000324  DD 1C 24			fstp	qword ptr [ESP]
 00000327  E8 00000000 E		call	 Math_Ln
 0000032C  EB 00			jmp	OFFSET $L000500
				;}
 0000032E			$L000500:

 0000032E  5F				pop	EDI
 0000032F  5E				pop	ESI 
 00000330  5B				pop	EBX 
 00000331  C9				leave	
 00000332  C2 0008			retn	000000008h
 00000335			Math_Hyperbolic_Inverse_HArccos ENDP

 00000335			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000335  55				push	EBP
 00000336  8B EC			mov	EBP,ESP
 00000338  51				push	ECX 
 00000339  53				push	EBX 
 0000033A  56				push	ESI 
 0000033B  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000033C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000033F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000342  50				push	EAX
 00000343  52				push	EDX 
 00000344  E8 00000000 E		call	 Math_Sign
 00000349  50				push	EAX
 0000034A  52				push	EDX 
 0000034B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000351  50				push	EAX
 00000352  52				push	EDX 
 00000353  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000356  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000359  9B DB E2			fclex
 0000035C  50				push	EAX
 0000035D  52				push	EDX 
 0000035E  DD 04 24			fld	qword ptr [ESP]
 00000361  59				pop	ECX
 00000362  59				pop	ECX 
 00000363  DC 0C 24			fmul	qword ptr [ESP]
 00000366  DD 1C 24			fstp	qword ptr [ESP]
 00000369  B8 00000001			mov	EAX,000000001h
 0000036E  50				push	EAX
 0000036F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000374  50				push	EAX
 00000375  52				push	EDX 
 00000376  DD 04 24			fld	qword ptr [ESP]
 00000379  59				pop	ECX
 0000037A  59				pop	ECX 
 0000037B  DC 04 24			fadd	qword ptr [ESP]
 0000037E  DD 1C 24			fstp	qword ptr [ESP]
 00000381  E8 00000000 E		call	 Math_Sqrt
 00000386  9B DB E2			fclex
 00000389  50				push	EAX
 0000038A  52				push	EDX 
 0000038B  DD 04 24			fld	qword ptr [ESP]
 0000038E  59				pop	ECX
 0000038F  59				pop	ECX 
 00000390  DC 0C 24			fmul	qword ptr [ESP]
 00000393  DD 1C 24			fstp	qword ptr [ESP]
 00000396  B8 00000001			mov	EAX,000000001h
 0000039B  50				push	EAX
 0000039C  E8 00000000 E		call	 FloatingPoint_FromInt
 000003A1  50				push	EAX
 000003A2  52				push	EDX 
 000003A3  DD 04 24			fld	qword ptr [ESP]
 000003A6  59				pop	ECX
 000003A7  59				pop	ECX 
 000003A8  DC 04 24			fadd	qword ptr [ESP]
 000003AB  DD 1C 24			fstp	qword ptr [ESP]
 000003AE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003B1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003B4  9B DB E2			fclex
 000003B7  50				push	EAX
 000003B8  52				push	EDX 
 000003B9  DD 04 24			fld	qword ptr [ESP]
 000003BC  59				pop	ECX
 000003BD  59				pop	ECX 
 000003BE  DC 3C 24			fdivr	qword ptr [ESP]
 000003C1  DD 1C 24			fstp	qword ptr [ESP]
 000003C4  E8 00000000 E		call	 Math_Ln
 000003C9  EB 00			jmp	OFFSET $L000506
				;}
 000003CB			$L000506:

 000003CB  5F				pop	EDI
 000003CC  5E				pop	ESI 
 000003CD  5B				pop	EBX 
 000003CE  C9				leave	
 000003CF  C2 0008			retn	000000008h
 000003D2			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003D2			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003D2  55				push	EBP
 000003D3  8B EC			mov	EBP,ESP
 000003D5  51				push	ECX 
 000003D6  53				push	EBX 
 000003D7  56				push	ESI 
 000003D8  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 000003D9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003DC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003DF  50				push	EAX
 000003E0  52				push	EDX 
 000003E1  B8 00000001			mov	EAX,000000001h
 000003E6  50				push	EAX
 000003E7  E8 00000000 E		call	 FloatingPoint_FromInt
 000003EC  50				push	EAX
 000003ED  52				push	EDX 
 000003EE  DD 04 24			fld	qword ptr [ESP]
 000003F1  59				pop	ECX
 000003F2  59				pop	ECX 
 000003F3  DC 04 24			fadd	qword ptr [ESP]
 000003F6  DD 1C 24			fstp	qword ptr [ESP]
 000003F9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003FC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003FF  50				push	EAX
 00000400  52				push	EDX 
 00000401  B8 00000001			mov	EAX,000000001h
 00000406  50				push	EAX
 00000407  E8 00000000 E		call	 FloatingPoint_FromInt
 0000040C  50				push	EAX
 0000040D  52				push	EDX 
 0000040E  DD 04 24			fld	qword ptr [ESP]
 00000411  59				pop	ECX
 00000412  59				pop	ECX 
 00000413  DD 04 24			fld	qword ptr [ESP]
 00000416  D8 E1			fsub	st,st(1)
 00000418  DD 1C 24			fstp	qword ptr [ESP]
 0000041B  9B DB E2			fclex
 0000041E  DD 04 24			fld	qword ptr [ESP]
 00000421  59				pop	ECX
 00000422  59				pop	ECX 
 00000423  DC 3C 24			fdivr	qword ptr [ESP]
 00000426  DD 1C 24			fstp	qword ptr [ESP]
 00000429  E8 00000000 E		call	 Math_Ln
 0000042E  50				push	EAX
 0000042F  52				push	EDX 
 00000430  B8 00000002			mov	EAX,000000002h
 00000435  9B DB E2			fclex
 00000438  50				push	EAX
 00000439  E8 00000000 E		call	 FloatingPoint_FromInt
 0000043E  50				push	EAX
 0000043F  52				push	EDX 
 00000440  DD 04 24			fld	qword ptr [ESP]
 00000443  59				pop	ECX
 00000444  59				pop	ECX 
 00000445  DC 3C 24			fdivr	qword ptr [ESP]
 00000448  DD 1C 24			fstp	qword ptr [ESP]
 0000044B  5A				pop	EDX
 0000044C  58				pop	EAX 
 0000044D  EB 00			jmp	OFFSET $L000508
				;}
 0000044F			$L000508:

 0000044F  5F				pop	EDI
 00000450  5E				pop	ESI 
 00000451  5B				pop	EBX 
 00000452  C9				leave	
 00000453  C2 0008			retn	000000008h
 00000456			Math_Hyperbolic_Inverse_HArccotan ENDP

 00000456			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 00000456  55				push	EBP
 00000457  8B EC			mov	EBP,ESP
 00000459  51				push	ECX 
 0000045A  53				push	EBX 
 0000045B  56				push	ESI 
 0000045C  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 0000045D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000460  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000463  50				push	EAX
 00000464  52				push	EDX 
 00000465  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000468  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000046B  9B DB E2			fclex
 0000046E  50				push	EAX
 0000046F  52				push	EDX 
 00000470  DD 04 24			fld	qword ptr [ESP]
 00000473  59				pop	ECX
 00000474  59				pop	ECX 
 00000475  DC 0C 24			fmul	qword ptr [ESP]
 00000478  DD 1C 24			fstp	qword ptr [ESP]
 0000047B  DD 04 24			fld	qword ptr [ESP]
 0000047E  D9 E0			fchs
 00000480  DD 1C 24			fstp	qword ptr [ESP]
 00000483  B8 00000001			mov	EAX,000000001h
 00000488  50				push	EAX
 00000489  E8 00000000 E		call	 FloatingPoint_FromInt
 0000048E  50				push	EAX
 0000048F  52				push	EDX 
 00000490  DD 04 24			fld	qword ptr [ESP]
 00000493  59				pop	ECX
 00000494  59				pop	ECX 
 00000495  DC 04 24			fadd	qword ptr [ESP]
 00000498  DD 1C 24			fstp	qword ptr [ESP]
 0000049B  E8 00000000 E		call	 Math_Sqrt
 000004A0  50				push	EAX
 000004A1  52				push	EDX 
 000004A2  B8 00000001			mov	EAX,000000001h
 000004A7  50				push	EAX
 000004A8  E8 00000000 E		call	 FloatingPoint_FromInt
 000004AD  50				push	EAX
 000004AE  52				push	EDX 
 000004AF  DD 04 24			fld	qword ptr [ESP]
 000004B2  59				pop	ECX
 000004B3  59				pop	ECX 
 000004B4  DC 04 24			fadd	qword ptr [ESP]
 000004B7  DD 1C 24			fstp	qword ptr [ESP]
 000004BA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004BD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004C0  9B DB E2			fclex
 000004C3  50				push	EAX
 000004C4  52				push	EDX 
 000004C5  DD 04 24			fld	qword ptr [ESP]
 000004C8  59				pop	ECX
 000004C9  59				pop	ECX 
 000004CA  DC 3C 24			fdivr	qword ptr [ESP]
 000004CD  DD 1C 24			fstp	qword ptr [ESP]
 000004D0  E8 00000000 E		call	 Math_Ln
 000004D5  EB 00			jmp	OFFSET $L000504
				;}
 000004D7			$L000504:

 000004D7  5F				pop	EDI
 000004D8  5E				pop	ESI 
 000004D9  5B				pop	EBX 
 000004DA  C9				leave	
 000004DB  C2 0008			retn	000000008h
 000004DE			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004DE			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004DE  55				push	EBP
 000004DF  8B EC			mov	EBP,ESP
 000004E1  51				push	ECX 
 000004E2  53				push	EBX 
 000004E3  56				push	ESI 
 000004E4  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 000004E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004EB  50				push	EAX
 000004EC  52				push	EDX 
 000004ED  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004F3  50				push	EAX
 000004F4  52				push	EDX 
 000004F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004FB  9B DB E2			fclex
 000004FE  50				push	EAX
 000004FF  52				push	EDX 
 00000500  DD 04 24			fld	qword ptr [ESP]
 00000503  59				pop	ECX
 00000504  59				pop	ECX 
 00000505  DC 0C 24			fmul	qword ptr [ESP]
 00000508  DD 1C 24			fstp	qword ptr [ESP]
 0000050B  B8 00000001			mov	EAX,000000001h
 00000510  50				push	EAX
 00000511  E8 00000000 E		call	 FloatingPoint_FromInt
 00000516  50				push	EAX
 00000517  52				push	EDX 
 00000518  DD 04 24			fld	qword ptr [ESP]
 0000051B  59				pop	ECX
 0000051C  59				pop	ECX 
 0000051D  DC 04 24			fadd	qword ptr [ESP]
 00000520  DD 1C 24			fstp	qword ptr [ESP]
 00000523  E8 00000000 E		call	 Math_Sqrt
 00000528  50				push	EAX
 00000529  52				push	EDX 
 0000052A  DD 04 24			fld	qword ptr [ESP]
 0000052D  59				pop	ECX
 0000052E  59				pop	ECX 
 0000052F  DC 04 24			fadd	qword ptr [ESP]
 00000532  DD 1C 24			fstp	qword ptr [ESP]
 00000535  E8 00000000 E		call	 Math_Ln
 0000053A  EB 00			jmp	OFFSET $L000497
				;}
 0000053C			$L000497:

 0000053C  5F				pop	EDI
 0000053D  5E				pop	ESI 
 0000053E  5B				pop	EBX 
 0000053F  C9				leave	
 00000540  C2 0008			retn	000000008h
 00000543			Math_Hyperbolic_Inverse_HArcsin ENDP

 00000543			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 00000543  55				push	EBP
 00000544  8B EC			mov	EBP,ESP
 00000546  51				push	ECX 
 00000547  53				push	EBX 
 00000548  56				push	ESI 
 00000549  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 0000054A  B8 00000001			mov	EAX,000000001h
 0000054F  50				push	EAX
 00000550  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000553  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000556  50				push	EAX
 00000557  52				push	EDX 
 00000558  DD 04 24			fld	qword ptr [ESP]
 0000055B  59				pop	ECX
 0000055C  59				pop	ECX 
 0000055D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000562  50				push	EAX
 00000563  52				push	EDX 
 00000564  DC 04 24			fadd	qword ptr [ESP]
 00000567  DD 1C 24			fstp	qword ptr [ESP]
 0000056A  B8 00000001			mov	EAX,000000001h
 0000056F  50				push	EAX
 00000570  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000573  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000576  50				push	EAX
 00000577  52				push	EDX 
 00000578  DD 04 24			fld	qword ptr [ESP]
 0000057B  59				pop	ECX
 0000057C  59				pop	ECX 
 0000057D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000582  50				push	EAX
 00000583  52				push	EDX 
 00000584  DD 04 24			fld	qword ptr [ESP]
 00000587  D8 E1			fsub	st,st(1)
 00000589  DD 1C 24			fstp	qword ptr [ESP]
 0000058C  9B DB E2			fclex
 0000058F  DD 04 24			fld	qword ptr [ESP]
 00000592  59				pop	ECX
 00000593  59				pop	ECX 
 00000594  DC 3C 24			fdivr	qword ptr [ESP]
 00000597  DD 1C 24			fstp	qword ptr [ESP]
 0000059A  E8 00000000 E		call	 Math_Ln
 0000059F  50				push	EAX
 000005A0  52				push	EDX 
 000005A1  B8 00000002			mov	EAX,000000002h
 000005A6  9B DB E2			fclex
 000005A9  50				push	EAX
 000005AA  E8 00000000 E		call	 FloatingPoint_FromInt
 000005AF  50				push	EAX
 000005B0  52				push	EDX 
 000005B1  DD 04 24			fld	qword ptr [ESP]
 000005B4  59				pop	ECX
 000005B5  59				pop	ECX 
 000005B6  DC 3C 24			fdivr	qword ptr [ESP]
 000005B9  DD 1C 24			fstp	qword ptr [ESP]
 000005BC  5A				pop	EDX
 000005BD  58				pop	EAX 
 000005BE  EB 00			jmp	OFFSET $L000502
				;}
 000005C0			$L000502:

 000005C0  5F				pop	EDI
 000005C1  5E				pop	ESI 
 000005C2  5B				pop	EBX 
 000005C3  C9				leave	
 000005C4  C2 0008			retn	000000008h
 000005C7			Math_Hyperbolic_Inverse_HArctan ENDP

 000005C7			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005C7  55				push	EBP
 000005C8  8B EC			mov	EBP,ESP
 000005CA  51				push	ECX 
 000005CB  53				push	EBX 
 000005CC  56				push	ESI 
 000005CD  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 000005CE  B8 000000B4			mov	EAX,0000000B4h
 000005D3  50				push	EAX
 000005D4  E8 00000000 E		call	 Math_pi
 000005D9  9B DB E2			fclex
 000005DC  50				push	EAX
 000005DD  52				push	EDX 
 000005DE  DD 04 24			fld	qword ptr [ESP]
 000005E1  59				pop	ECX
 000005E2  59				pop	ECX 
 000005E3  E8 00000000 E		call	 FloatingPoint_FromInt
 000005E8  50				push	EAX
 000005E9  52				push	EDX 
 000005EA  DC 3C 24			fdivr	qword ptr [ESP]
 000005ED  DD 1C 24			fstp	qword ptr [ESP]
 000005F0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000005F3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000005F6  9B DB E2			fclex
 000005F9  50				push	EAX
 000005FA  52				push	EDX 
 000005FB  DD 04 24			fld	qword ptr [ESP]
 000005FE  59				pop	ECX
 000005FF  59				pop	ECX 
 00000600  DC 0C 24			fmul	qword ptr [ESP]
 00000603  DD 1C 24			fstp	qword ptr [ESP]
 00000606  5A				pop	EDX
 00000607  58				pop	EAX 
 00000608  EB 00			jmp	OFFSET $L000466
				;}
 0000060A			$L000466:

 0000060A  5F				pop	EDI
 0000060B  5E				pop	ESI 
 0000060C  5B				pop	EBX 
 0000060D  C9				leave	
 0000060E  C2 0008			retn	000000008h
 00000611			Math_RadiansToDegrees ENDP

 00000611			UnitTesting_Circle_Circumference PROC NEAR 
				;double Circumference(void);
 00000611  55				push	EBP
 00000612  8B EC			mov	EBP,ESP
 00000614  51				push	ECX 
 00000615  53				push	EBX 
 00000616  56				push	ESI 
 00000617  57				push	EDI 
				;{

				;{78}:return Math::pi() * Radius
 00000618  E8 00000000 E		call	 Math_pi
 0000061D  50				push	EAX
 0000061E  52				push	EDX 
 0000061F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000622  E8 000000CB			call	 UnitTesting_Circle_get_Radius
 00000627  9B DB E2			fclex
 0000062A  50				push	EAX
 0000062B  52				push	EDX 
 0000062C  DD 04 24			fld	qword ptr [ESP]
 0000062F  59				pop	ECX
 00000630  59				pop	ECX 
 00000631  DC 0C 24			fmul	qword ptr [ESP]
 00000634  DD 1C 24			fstp	qword ptr [ESP]
 00000637  5A				pop	EDX
 00000638  58				pop	EAX 
 00000639  EB 00			jmp	OFFSET $L000667
				;}
 0000063B			$L000667:

 0000063B  5F				pop	EDI
 0000063C  5E				pop	ESI 
 0000063D  5B				pop	EBX 
 0000063E  C9				leave	
 0000063F  C3				ret	
 00000640			UnitTesting_Circle_Circumference ENDP

 00000640			UnitTesting_Circle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00000640  55				push	EBP
 00000641  8B EC			mov	EBP,ESP
 00000643  51				push	ECX 
 00000644  53				push	EBX 
 00000645  56				push	ESI 
 00000646  57				push	EDI 
				;{

				;{97}:return 2 * Circumference()
 00000647  B8 00000002			mov	EAX,000000002h
 0000064C  50				push	EAX
 0000064D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000650  E8 FFFFFFBC			call	 UnitTesting_Circle_Circumference
 00000655  9B DB E2			fclex
 00000658  50				push	EAX
 00000659  52				push	EDX 
 0000065A  DD 04 24			fld	qword ptr [ESP]
 0000065D  59				pop	ECX
 0000065E  59				pop	ECX 
 0000065F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000664  50				push	EAX
 00000665  52				push	EDX 
 00000666  DC 0C 24			fmul	qword ptr [ESP]
 00000669  DD 1C 24			fstp	qword ptr [ESP]
 0000066C  5A				pop	EDX
 0000066D  58				pop	EAX 
 0000066E  EB 00			jmp	OFFSET $L000673
				;}
 00000670			$L000673:

 00000670  5F				pop	EDI
 00000671  5E				pop	ESI 
 00000672  5B				pop	EBX 
 00000673  C9				leave	
 00000674  C3				ret	
 00000675			UnitTesting_Circle_ComputeArea ENDP

 00000675			UnitTesting_Circle_Destructor PROC NEAR 
				;void Destructor(void);
 00000675  55				push	EBP
 00000676  8B EC			mov	EBP,ESP
 00000678  51				push	ECX 
 00000679  53				push	EBX 
 0000067A  56				push	ESI 
 0000067B  57				push	EDI 
				;{

				;{102}:System::Debug::OutputString("destroying a Circle object...");
 0000067C  8D 05 00000EB5 R		lea	EAX,OFFSET $S000675
 00000682  50				push	EAX
 00000683  E8 00000000 E		call	 System_Debug_OutputString

				;{103}:Console::WriteLn("destroying a Circle object...");
 00000688  8D 05 00000EB5 R		lea	EAX,OFFSET $S000675
 0000068E  6A 00			push	000000000h
 00000690  50				push	EAX 
 00000691  E8 00000000 E		call	 Console_WriteString
 00000696  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000069B			$L000674:

 0000069B  5F				pop	EDI
 0000069C  5E				pop	ESI 
 0000069D  5B				pop	EBX 
 0000069E  C9				leave	
 0000069F  C3				ret	
 000006A0			UnitTesting_Circle_Destructor ENDP

 000006A0			UnitTesting_Circle_Draw PROC NEAR 
				;void Draw(void);
 000006A0  55				push	EBP
 000006A1  8B EC			mov	EBP,ESP
 000006A3  51				push	ECX 
 000006A4  53				push	EBX 
 000006A5  56				push	ESI 
 000006A6  57				push	EDI 
				;{

				;{92}:Console::WriteLn("Drawing a Circle!");
 000006A7  8D 05 00000957 R		lea	EAX,OFFSET $S000672
 000006AD  6A 00			push	000000000h
 000006AF  50				push	EAX 
 000006B0  E8 00000000 E		call	 Console_WriteString
 000006B5  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006BA			$L000671:

 000006BA  5F				pop	EDI
 000006BB  5E				pop	ESI 
 000006BC  5B				pop	EBX 
 000006BD  C9				leave	
 000006BE  C3				ret	
 000006BF			UnitTesting_Circle_Draw ENDP

 000006BF			UnitTesting_Circle_DrawSphere PROC NEAR 
				;void DrawSphere(void);
 000006BF  55				push	EBP
 000006C0  8B EC			mov	EBP,ESP
 000006C2  51				push	ECX 
 000006C3  53				push	EBX 
 000006C4  56				push	ESI 
 000006C5  57				push	EDI 
				;{

				;{108}:Console::WriteLn("Drawing a Sphere!");
 000006C6  8D 05 0000098C R		lea	EAX,OFFSET $S000677
 000006CC  6A 00			push	000000000h
 000006CE  50				push	EAX 
 000006CF  E8 00000000 E		call	 Console_WriteString
 000006D4  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006D9			$L000676:

 000006D9  5F				pop	EDI
 000006DA  5E				pop	ESI 
 000006DB  5B				pop	EBX 
 000006DC  C9				leave	
 000006DD  C3				ret	
 000006DE			UnitTesting_Circle_DrawSphere ENDP

 000006DE			UnitTesting_Circle_Name PROC NEAR 
				;string Name(void);
 000006DE  55				push	EBP
 000006DF  8B EC			mov	EBP,ESP
 000006E1  51				push	ECX 
 000006E2  53				push	EBX 
 000006E3  56				push	ESI 
 000006E4  57				push	EDI 
				;{

				;{87}:return "Circle"
 000006E5  8D 05 000007DB R		lea	EAX,OFFSET $S000670
 000006EB  EB 00			jmp	OFFSET $L000669
				;}
 000006ED			$L000669:

 000006ED  5F				pop	EDI
 000006EE  5E				pop	ESI 
 000006EF  5B				pop	EBX 
 000006F0  C9				leave	
 000006F1  C3				ret	
 000006F2			UnitTesting_Circle_Name ENDP

 000006F2			UnitTesting_Circle_get_Radius PROC NEAR 
				;double get::Radius(void);
 000006F2  55				push	EBP
 000006F3  8B EC			mov	EBP,ESP
 000006F5  51				push	ECX 
 000006F6  53				push	EBX 
 000006F7  56				push	ESI 
 000006F8  57				push	EDI 
				;{

				;{68}:return radius
 000006F9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006FC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000006FF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000702  EB 00			jmp	OFFSET $L000664
				;}
 00000704			$L000664:

 00000704  5F				pop	EDI
 00000705  5E				pop	ESI 
 00000706  5B				pop	EBX 
 00000707  C9				leave	
 00000708  C3				ret	
 00000709			UnitTesting_Circle_get_Radius ENDP

 00000709			UnitTesting_Circle_put_Radius PROC NEAR 
				;void put::Radius(double value);
 00000709  55				push	EBP
 0000070A  8B EC			mov	EBP,ESP
 0000070C  51				push	ECX 
 0000070D  53				push	EBX 
 0000070E  56				push	ESI 
 0000070F  57				push	EDI 
				;{

				;{73}:radius= value;
 00000710  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000713  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000716  50				push	EAX
 00000717  52				push	EDX 
 00000718  DD C0			ffree	st
 0000071A  DD 04 24			fld	qword ptr [ESP]
 0000071D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000720  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000723			$L000665:
 00000723  5A				pop	EDX
 00000724  58				pop	EAX 

 00000725  5F				pop	EDI
 00000726  5E				pop	ESI 
 00000727  5B				pop	EBX 
 00000728  C9				leave	
 00000729  C2 0008			retn	000000008h
 0000072C			UnitTesting_Circle_put_Radius ENDP

 0000072C			UnitTesting_Circle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 0000072C  55				push	EBP
 0000072D  8B EC			mov	EBP,ESP
 0000072F  51				push	ECX 
 00000730  53				push	EBX 
 00000731  56				push	ESI 
 00000732  57				push	EDI 
				;{

				;{83}:return UnitTesting::stCircle
 00000733  B8 00000001			mov	EAX,000000001h
 00000738  EB 00			jmp	OFFSET $L000668
				;}
 0000073A			$L000668:

 0000073A  5F				pop	EDI
 0000073B  5E				pop	ESI 
 0000073C  5B				pop	EBX 
 0000073D  C9				leave	
 0000073E  C3				ret	
 0000073F			UnitTesting_Circle_Type ENDP

 0000073F			UnitTesting_Circle PROC NEAR 
				;void UnitTesting::Circle(void);
 0000073F  55				push	EBP
 00000740  8B EC			mov	EBP,ESP
 00000742  51				push	ECX 
 00000743  53				push	EBX 
 00000744  56				push	ESI 
 00000745  57				push	EDI 
 00000746  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000749  E8 00000AA9			call	 UnitTesting_Shape ;base constructor call
 0000074E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000751  C7 01 00000000 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Circle 
 00000757  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000075A  E8 00003F1A			call	 __member_Init@UnitTesting_Circle 
				;{
				;}

 0000075F  5F				pop	EDI
 00000760  5E				pop	ESI 
 00000761  5B				pop	EBX 
 00000762  C9				leave	
 00000763  C3				ret	
 00000764			UnitTesting_Circle ENDP

 00000764			UnitTesting_DoubleProxy_Destructor PROC NEAR 
				;void Destructor(void);
 00000764  55				push	EBP
 00000765  8B EC			mov	EBP,ESP
 00000767  51				push	ECX 
 00000768  53				push	EBX 
 00000769  56				push	ESI 
 0000076A  57				push	EDI 
				;{

				;{138}:Console::WriteLn("Destroying a Double Proxy object...");
 0000076B  8D 05 000008C1 R		lea	EAX,OFFSET $S000806
 00000771  6A 00			push	000000000h
 00000773  50				push	EAX 
 00000774  E8 00000000 E		call	 Console_WriteString
 00000779  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000077E			$L000805:

 0000077E  5F				pop	EDI
 0000077F  5E				pop	ESI 
 00000780  5B				pop	EBX 
 00000781  C9				leave	
 00000782  C3				ret	
 00000783			UnitTesting_DoubleProxy_Destructor ENDP

 00000783			UnitTesting_DoubleProxy_Swap PROC NEAR 
				;void Swap(UnitTesting::SimpleObject ref obj);
 00000783  55				push	EBP
 00000784  8B EC			mov	EBP,ESP
 00000786  83 EC 10			sub	ESP,000000010h
 00000789  53				push	EBX 
 0000078A  56				push	ESI 
 0000078B  57				push	EDI 
 0000078C  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 0000078F  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000792  B9 00000003			mov	ECX,000000003h 
 00000797  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000079C  F3/ AB			rep stos	dword ptr [EDI]
 0000079E  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{129}:tmp= val;
 000007A1  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000007A4  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007A7  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000007AA  50				push	EAX
 000007AB  52				push	EDX 
 000007AC  DD C0			ffree	st
 000007AE  DD 04 24			fld	qword ptr [ESP]
 000007B1  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{131}:ptr= dynamic_cast(&obj);
 000007B4  5A				pop	EDX
 000007B5  58				pop	EAX 
 000007B6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000007B9  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000007BC  89 03			mov	dword ptr [EBX],EAX

				;{132}:val= ptr.val;
 000007BE  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000007C1  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007C4  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000007C7  50				push	EAX
 000007C8  52				push	EDX 
 000007C9  DD C0			ffree	st
 000007CB  DD 04 24			fld	qword ptr [ESP]
 000007CE  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000007D1  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{133}:ptr.val= tmp;
 000007D4  5A				pop	EDX
 000007D5  58				pop	EAX 
 000007D6  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000007D9  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000007DC  50				push	EAX
 000007DD  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000007E0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000007E3  50				push	EAX
 000007E4  52				push	EDX 
 000007E5  DD C0			ffree	st
 000007E7  DD 04 24			fld	qword ptr [ESP]
 000007EA  5A				pop	EDX
 000007EB  58				pop	EAX 
 000007EC  5B				pop	EBX
 000007ED  DD 1B			fstp	qword ptr [EBX]
				;}
 000007EF			$L000801:

 000007EF  5F				pop	EDI
 000007F0  5E				pop	ESI 
 000007F1  5B				pop	EBX 
 000007F2  C9				leave	
 000007F3  C2 0004			retn	000000004h
 000007F6			UnitTesting_DoubleProxy_Swap ENDP

 000007F6			UnitTesting_DoubleProxy PROC NEAR 
				;void UnitTesting::DoubleProxy(void);
 000007F6  55				push	EBP
 000007F7  8B EC			mov	EBP,ESP
 000007F9  51				push	ECX 
 000007FA  53				push	EBX 
 000007FB  56				push	ESI 
 000007FC  57				push	EDI 
 000007FD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000800  E8 00000BF7			call	 UnitTesting_SimpleObject ;base constructor call
 00000805  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000808  C7 01 0000002C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_DoubleProxy 
 0000080E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000811  E8 00003E7A			call	 __member_Init@UnitTesting_DoubleProxy 
				;{

				;{111}:Console::WriteLn("Constructing a Double Proxy...");
 00000816  8D 05 0000087B R		lea	EAX,OFFSET $S000794
 0000081C  6A 00			push	000000000h
 0000081E  50				push	EAX 
 0000081F  E8 00000000 E		call	 Console_WriteString
 00000824  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 00000829  5F				pop	EDI
 0000082A  5E				pop	ESI 
 0000082B  5B				pop	EBX 
 0000082C  C9				leave	
 0000082D  C3				ret	
 0000082E			UnitTesting_DoubleProxy ENDP

 0000082E			UnitTesting_DoubleProxy_isEqual PROC NEAR 
				;bool isEqual(UnitTesting::SimpleObject ref obj);
 0000082E  55				push	EBP
 0000082F  8B EC			mov	EBP,ESP
 00000831  83 EC 08			sub	ESP,000000008h
 00000834  53				push	EBX 
 00000835  56				push	ESI 
 00000836  57				push	EDI 
 00000837  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 0000083A  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000083D  B9 00000001			mov	ECX,000000001h 
 00000842  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000847  F3/ AB			rep stos	dword ptr [EDI]
 00000849  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{122}:ptr= dynamic_cast(UnitTesting::DoubleProxy, &obj);
 0000084C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000084F  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000852  89 03			mov	dword ptr [EBX],EAX

				;{124}:return val < ptr.val
 00000854  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000857  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000085A  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000085D  50				push	EAX
 0000085E  52				push	EDX 
 0000085F  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000862  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000865  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000868  50				push	EAX
 00000869  52				push	EDX 
 0000086A  E8 00000000 E		call	 FloatingPoint_Compare
 0000086F  83 F8 00			cmp	EAX,000000000h
 00000872  F7 D8			neg	EAX
 00000874  0F 9C C0			setl	AL
 00000877  EB 00			jmp	OFFSET $L000798
				;}
 00000879			$L000798:

 00000879  5F				pop	EDI
 0000087A  5E				pop	ESI 
 0000087B  5B				pop	EBX 
 0000087C  C9				leave	
 0000087D  C2 0004			retn	000000004h
 00000880			UnitTesting_DoubleProxy_isEqual ENDP

 00000880			UnitTesting_DoubleProxy_lessThan PROC NEAR 
				;bool lessThan(UnitTesting::SimpleObject ref obj);
 00000880  55				push	EBP
 00000881  8B EC			mov	EBP,ESP
 00000883  83 EC 08			sub	ESP,000000008h
 00000886  53				push	EBX 
 00000887  56				push	ESI 
 00000888  57				push	EDI 
 00000889  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 0000088C  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000088F  B9 00000001			mov	ECX,000000001h 
 00000894  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000899  F3/ AB			rep stos	dword ptr [EDI]
 0000089B  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{115}:ptr= dynamic_cast(&obj);
 0000089E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008A1  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000008A4  89 03			mov	dword ptr [EBX],EAX

				;{117}:return val < ptr.val
 000008A6  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000008A9  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000008AC  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000008AF  50				push	EAX
 000008B0  52				push	EDX 
 000008B1  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000008B4  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000008B7  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000008BA  50				push	EAX
 000008BB  52				push	EDX 
 000008BC  E8 00000000 E		call	 FloatingPoint_Compare
 000008C1  83 F8 00			cmp	EAX,000000000h
 000008C4  F7 D8			neg	EAX
 000008C6  0F 9C C0			setl	AL
 000008C9  EB 00			jmp	OFFSET $L000795
				;}
 000008CB			$L000795:

 000008CB  5F				pop	EDI
 000008CC  5E				pop	ESI 
 000008CD  5B				pop	EBX 
 000008CE  C9				leave	
 000008CF  C2 0004			retn	000000004h
 000008D2			UnitTesting_DoubleProxy_lessThan ENDP

 000008D2			UnitTesting_DoubleSwapper_Swap PROC NEAR 
				;void Swap(UnitTesting::SimpleObject ref obj1, UnitTesting::SimpleObject ref obj2);
 000008D2  55				push	EBP
 000008D3  8B EC			mov	EBP,ESP
 000008D5  83 EC 14			sub	ESP,000000014h
 000008D8  53				push	EBX 
 000008D9  56				push	ESI 
 000008DA  57				push	EDI 
 000008DB  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 000008DE  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 000008E1  B9 00000004			mov	ECX,000000004h 
 000008E6  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000008EB  F3/ AB			rep stos	dword ptr [EDI]
 000008ED  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{163}:ptr1= dynamic_cast(&obj1);
 000008F0  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008F3  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000008F6  89 03			mov	dword ptr [EBX],EAX

				;{164}:ptr2= dynamic_cast(&obj2);
 000008F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000008FB  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 000008FE  89 03			mov	dword ptr [EBX],EAX

				;{166}:tmp= ptr1.val;
 00000900  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000903  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000906  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000909  50				push	EAX
 0000090A  52				push	EDX 
 0000090B  DD C0			ffree	st
 0000090D  DD 04 24			fld	qword ptr [ESP]
 00000910  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{167}:ptr1.val= ptr2.val;
 00000913  5A				pop	EDX
 00000914  58				pop	EAX 
 00000915  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000918  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 0000091B  50				push	EAX
 0000091C  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 0000091F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000922  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000925  50				push	EAX
 00000926  52				push	EDX 
 00000927  DD C0			ffree	st
 00000929  DD 04 24			fld	qword ptr [ESP]
 0000092C  5A				pop	EDX
 0000092D  58				pop	EAX 
 0000092E  5B				pop	EBX
 0000092F  DD 1B			fstp	qword ptr [EBX]

				;{168}:ptr2.val= tmp;
 00000931  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000934  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00000937  50				push	EAX
 00000938  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 0000093B  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 0000093E  50				push	EAX
 0000093F  52				push	EDX 
 00000940  DD C0			ffree	st
 00000942  DD 04 24			fld	qword ptr [ESP]
 00000945  5A				pop	EDX
 00000946  58				pop	EAX 
 00000947  5B				pop	EBX
 00000948  DD 1B			fstp	qword ptr [EBX]
				;}
 0000094A			$L000830:

 0000094A  5F				pop	EDI
 0000094B  5E				pop	ESI 
 0000094C  5B				pop	EBX 
 0000094D  C9				leave	
 0000094E  C2 0008			retn	000000008h
 00000951			UnitTesting_DoubleSwapper_Swap ENDP

 00000951			UnitTesting_DoubleSwapper_SwapEx PROC NEAR 
				;void SwapEx(UnitTesting::SimpleObject UnitTesting::SimpleObject [] array, unsigned left, unsigned right);
 00000951  55				push	EBP
 00000952  8B EC			mov	EBP,ESP
 00000954  83 EC 14			sub	ESP,000000014h
 00000957  53				push	EBX 
 00000958  56				push	ESI 
 00000959  57				push	EDI 
 0000095A  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 0000095D  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00000960  B9 00000004			mov	ECX,000000004h 
 00000965  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000096A  F3/ AB			rep stos	dword ptr [EDI]
 0000096C  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{180}:ptr1= dynamic_cast(UnitTesting::DoubleProxy, &array[left]);
 0000096F  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000972  8B C3			mov	EAX,EBX 
 00000974  50				push	EAX
 00000975  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000978  5E				pop	ESI
 00000979  6B C0 0C			imul	EAX,00000000Ch
 0000097C  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000097F  8B C1			mov	EAX,ECX
 00000981  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000984  89 03			mov	dword ptr [EBX],EAX

				;{181}:ptr2= dynamic_cast(&array[right]);
 00000986  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000989  8B C3			mov	EAX,EBX 
 0000098B  50				push	EAX
 0000098C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000098F  5E				pop	ESI
 00000990  6B C0 0C			imul	EAX,00000000Ch
 00000993  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000996  8B C1			mov	EAX,ECX
 00000998  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 0000099B  89 03			mov	dword ptr [EBX],EAX

				;{183}:tmp= ptr1.val;
 0000099D  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000009A0  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000009A3  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000009A6  50				push	EAX
 000009A7  52				push	EDX 
 000009A8  DD C0			ffree	st
 000009AA  DD 04 24			fld	qword ptr [ESP]
 000009AD  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{184}:ptr1.val= ptr2.val;
 000009B0  5A				pop	EDX
 000009B1  58				pop	EAX 
 000009B2  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000009B5  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000009B8  50				push	EAX
 000009B9  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000009BC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000009BF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000009C2  50				push	EAX
 000009C3  52				push	EDX 
 000009C4  DD C0			ffree	st
 000009C6  DD 04 24			fld	qword ptr [ESP]
 000009C9  5A				pop	EDX
 000009CA  58				pop	EAX 
 000009CB  5B				pop	EBX
 000009CC  DD 1B			fstp	qword ptr [EBX]

				;{185}:ptr2.val= tmp;
 000009CE  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000009D1  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000009D4  50				push	EAX
 000009D5  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 000009D8  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 000009DB  50				push	EAX
 000009DC  52				push	EDX 
 000009DD  DD C0			ffree	st
 000009DF  DD 04 24			fld	qword ptr [ESP]
 000009E2  5A				pop	EDX
 000009E3  58				pop	EAX 
 000009E4  5B				pop	EBX
 000009E5  DD 1B			fstp	qword ptr [EBX]
				;}
 000009E7			$L000842:

 000009E7  5F				pop	EDI
 000009E8  5E				pop	ESI 
 000009E9  5B				pop	EBX 
 000009EA  C9				leave	
 000009EB  C2 000C			retn	00000000Ch
 000009EE			UnitTesting_DoubleSwapper_SwapEx ENDP

 000009EE			UnitTesting_DoubleSwapper_lessThan PROC NEAR 
				;bool lessThan(UnitTesting::SimpleObject ref obj1, UnitTesting::SimpleObject ref obj2);
 000009EE  55				push	EBP
 000009EF  8B EC			mov	EBP,ESP
 000009F1  83 EC 0C			sub	ESP,00000000Ch
 000009F4  53				push	EBX 
 000009F5  56				push	ESI 
 000009F6  57				push	EDI 
 000009F7  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 000009FA  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 000009FD  B9 00000002			mov	ECX,000000002h 
 00000A02  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000A07  F3/ AB			rep stos	dword ptr [EDI]
 00000A09  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{156}:ptr1= dynamic_cast(&obj1);
 00000A0C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000A0F  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000A12  89 03			mov	dword ptr [EBX],EAX

				;{157}:ptr2= dynamic_cast(&obj2);
 00000A14  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000A17  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A1A  89 03			mov	dword ptr [EBX],EAX

				;{159}:return ptr1.val < ptr2.val
 00000A1C  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000A1F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A22  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A25  50				push	EAX
 00000A26  52				push	EDX 
 00000A27  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000A2A  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A2D  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A30  50				push	EAX
 00000A31  52				push	EDX 
 00000A32  E8 00000000 E		call	 FloatingPoint_Compare
 00000A37  83 F8 00			cmp	EAX,000000000h
 00000A3A  F7 D8			neg	EAX
 00000A3C  0F 9C C0			setl	AL
 00000A3F  EB 00			jmp	OFFSET $L000825
				;}
 00000A41			$L000825:

 00000A41  5F				pop	EDI
 00000A42  5E				pop	ESI 
 00000A43  5B				pop	EBX 
 00000A44  C9				leave	
 00000A45  C2 0008			retn	000000008h
 00000A48			UnitTesting_DoubleSwapper_lessThan ENDP

 00000A48			UnitTesting_DoubleSwapper_lessThanEx PROC NEAR 
				;bool lessThanEx(UnitTesting::SimpleObject UnitTesting::SimpleObject [] array, unsigned left, unsigned right);
 00000A48  55				push	EBP
 00000A49  8B EC			mov	EBP,ESP
 00000A4B  83 EC 0C			sub	ESP,00000000Ch
 00000A4E  53				push	EBX 
 00000A4F  56				push	ESI 
 00000A50  57				push	EDI 
 00000A51  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00000A54  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00000A57  B9 00000002			mov	ECX,000000002h 
 00000A5C  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000A61  F3/ AB			rep stos	dword ptr [EDI]
 00000A63  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{173}:ptr1= dynamic_cast(&array[left]);
 00000A66  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000A69  8B C3			mov	EAX,EBX 
 00000A6B  50				push	EAX
 00000A6C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000A6F  5E				pop	ESI
 00000A70  6B C0 0C			imul	EAX,00000000Ch
 00000A73  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000A76  8B C1			mov	EAX,ECX
 00000A78  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000A7B  89 03			mov	dword ptr [EBX],EAX

				;{174}:ptr2= dynamic_cast(UnitTesting::DoubleProxy, &array[right]);
 00000A7D  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000A80  8B C3			mov	EAX,EBX 
 00000A82  50				push	EAX
 00000A83  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000A86  5E				pop	ESI
 00000A87  6B C0 0C			imul	EAX,00000000Ch
 00000A8A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000A8D  8B C1			mov	EAX,ECX
 00000A8F  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A92  89 03			mov	dword ptr [EBX],EAX

				;{176}:return ptr1.val < ptr2.val
 00000A94  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000A97  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A9A  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A9D  50				push	EAX
 00000A9E  52				push	EDX 
 00000A9F  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000AA2  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000AA5  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000AA8  50				push	EAX
 00000AA9  52				push	EDX 
 00000AAA  E8 00000000 E		call	 FloatingPoint_Compare
 00000AAF  83 F8 00			cmp	EAX,000000000h
 00000AB2  F7 D8			neg	EAX
 00000AB4  0F 9C C0			setl	AL
 00000AB7  EB 00			jmp	OFFSET $L000836
				;}
 00000AB9			$L000836:

 00000AB9  5F				pop	EDI
 00000ABA  5E				pop	ESI 
 00000ABB  5B				pop	EBX 
 00000ABC  C9				leave	
 00000ABD  C2 000C			retn	00000000Ch
 00000AC0			UnitTesting_DoubleSwapper_lessThanEx ENDP

 00000AC0			UnitTesting_DoubleSwapper PROC NEAR 
				;void UnitTesting::DoubleSwapper(void);
 00000AC0  55				push	EBP
 00000AC1  8B EC			mov	EBP,ESP
 00000AC3  51				push	ECX 
 00000AC4  53				push	EBX 
 00000AC5  56				push	ESI 
 00000AC6  57				push	EDI 
 00000AC7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ACA  E8 000011CF			call	 UnitTesting_SwapperObject ;base constructor call
 00000ACF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000AD2  C7 01 0000004C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_DoubleSwapper 

 00000AD8  5F				pop	EDI
 00000AD9  5E				pop	ESI 
 00000ADA  5B				pop	EBX 
 00000ADB  C9				leave	
 00000ADC  C3				ret	
 00000ADD			UnitTesting_DoubleSwapper ENDP

 00000ADD			UnitTesting_HObject_Destructor PROC NEAR 
				;void Destructor(void);
 00000ADD  55				push	EBP
 00000ADE  8B EC			mov	EBP,ESP
 00000AE0  51				push	ECX 
 00000AE1  53				push	EBX 
 00000AE2  56				push	ESI 
 00000AE3  57				push	EDI 
				;{
				;}
				;}
 00000AE4			$L000877:

 00000AE4  5F				pop	EDI
 00000AE5  5E				pop	ESI 
 00000AE6  5B				pop	EBX 
 00000AE7  C9				leave	
 00000AE8  C3				ret	
 00000AE9			UnitTesting_HObject_Destructor ENDP

 00000AE9			UnitTesting_HObject PROC NEAR 
				;void UnitTesting::HObject(void);
 00000AE9  55				push	EBP
 00000AEA  8B EC			mov	EBP,ESP
 00000AEC  51				push	ECX 
 00000AED  53				push	EBX 
 00000AEE  56				push	ESI 
 00000AEF  57				push	EDI 
 00000AF0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000AF3  C7 01 0000006C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_HObject 
				;{
				;}

 00000AF9  5F				pop	EDI
 00000AFA  5E				pop	ESI 
 00000AFB  5B				pop	EBX 
 00000AFC  C9				leave	
 00000AFD  C3				ret	
 00000AFE			UnitTesting_HObject ENDP

 00000AFE			UnitTesting_HelloWorld_Destructor PROC NEAR 
				;void Destructor(void);
 00000AFE  55				push	EBP
 00000AFF  8B EC			mov	EBP,ESP
 00000B01  51				push	ECX 
 00000B02  53				push	EBX 
 00000B03  56				push	ESI 
 00000B04  57				push	EDI 
				;{

				;{431}:Console::WriteLn("The HelloWorld destructor");
 00000B05  8D 05 00000C76 R		lea	EAX,OFFSET $S000926
 00000B0B  6A 00			push	000000000h
 00000B0D  50				push	EAX 
 00000B0E  E8 00000000 E		call	 Console_WriteString
 00000B13  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B18			$L000925:

 00000B18  5F				pop	EDI
 00000B19  5E				pop	ESI 
 00000B1A  5B				pop	EBX 
 00000B1B  C9				leave	
 00000B1C  C3				ret	
 00000B1D			UnitTesting_HelloWorld_Destructor ENDP

 00000B1D			UnitTesting_HelloWorld_SayHello PROC NEAR 
				;void SayHello(string text);
 00000B1D  55				push	EBP
 00000B1E  8B EC			mov	EBP,ESP
 00000B20  51				push	ECX 
 00000B21  53				push	EBX 
 00000B22  56				push	ESI 
 00000B23  57				push	EDI 
				;{

				;{421}:Console::WriteLn("this is what I have to say for the first time in H++ :", text);
 00000B24  8D 05 000010D2 R		lea	EAX,OFFSET $S000921
 00000B2A  6A 00			push	000000000h
 00000B2C  50				push	EAX 
 00000B2D  E8 00000000 E		call	 Console_WriteString
 00000B32  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000B35  6A 00			push	000000000h 
 00000B37  50				push	EAX 
 00000B38  E8 00000000 E		call	 Console_WriteString 
 00000B3D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B42			$L000919:

 00000B42  5F				pop	EDI
 00000B43  5E				pop	ESI 
 00000B44  5B				pop	EBX 
 00000B45  C9				leave	
 00000B46  C2 0004			retn	000000004h
 00000B49			UnitTesting_HelloWorld_SayHello ENDP

 00000B49			UnitTesting_HelloWorld_ShowHello PROC NEAR 
				;void ShowHello(string text);
 00000B49  55				push	EBP
 00000B4A  8B EC			mov	EBP,ESP
 00000B4C  51				push	ECX 
 00000B4D  53				push	EBX 
 00000B4E  56				push	ESI 
 00000B4F  57				push	EDI 
				;{

				;{426}:System::ShowMessage(text, "H++ First program", System::IconInformation);
 00000B50  B8 00000040			mov	EAX,000000040h
 00000B55  50				push	EAX 
 00000B56  8D 05 000009DD R		lea	EAX,OFFSET $S000924
 00000B5C  50				push	EAX 
 00000B5D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000B60  50				push	EAX
 00000B61  E8 00000000 E		call	 System_ShowMessage
				;}
 00000B66			$L000922:

 00000B66  5F				pop	EDI
 00000B67  5E				pop	ESI 
 00000B68  5B				pop	EBX 
 00000B69  C9				leave	
 00000B6A  C2 0004			retn	000000004h
 00000B6D			UnitTesting_HelloWorld_ShowHello ENDP

 00000B6D			UnitTesting_HelloWorld PROC NEAR 
				;void UnitTesting::HelloWorld(void);
 00000B6D  55				push	EBP
 00000B6E  8B EC			mov	EBP,ESP
 00000B70  51				push	ECX 
 00000B71  53				push	EBX 
 00000B72  56				push	ESI 
 00000B73  57				push	EDI 
				;{

				;{416}:Console::WriteLn("The HelloWorld constructor");
 00000B74  8D 05 00000C5B R		lea	EAX,OFFSET $S000918
 00000B7A  6A 00			push	000000000h
 00000B7C  50				push	EAX 
 00000B7D  E8 00000000 E		call	 Console_WriteString
 00000B82  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 00000B87  5F				pop	EDI
 00000B88  5E				pop	ESI 
 00000B89  5B				pop	EBX 
 00000B8A  C9				leave	
 00000B8B  C3				ret	
 00000B8C			UnitTesting_HelloWorld ENDP

 00000B8C			UnitTesting_Integers_Inline_Test PROC NEAR 
				;void UnitTesting::Integers_Inline::Test(void);
 00000B8C  55				push	EBP
 00000B8D  8B EC			mov	EBP,ESP
 00000B8F  83 EC 14			sub	ESP,000000014h
 00000B92  53				push	EBX 
 00000B93  56				push	ESI 
 00000B94  57				push	EDI 
 00000B95  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00000B98  B9 00000004			mov	ECX,000000004h
 00000B9D  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000BA2  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{93}:a= 5, b= 4;
 00000BA4  B8 00000005			mov	EAX,000000005h
 00000BA9  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000BAC  B8 00000004			mov	EAX,000000004h
 00000BB1  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{95}:Console::WriteLn("The values: a = ", a, ", and b = ", b);
 00000BB4  8D 05 00000D1F R		lea	EAX,OFFSET $S000626
 00000BBA  6A 00			push	000000000h
 00000BBC  50				push	EAX 
 00000BBD  E8 00000000 E		call	 Console_WriteString
 00000BC2  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000BC5  50				push	EAX 
 00000BC6  E8 00000000 E		call	 Console_WriteInteger 
 00000BCB  8D 05 0000071B R		lea	EAX,OFFSET $S000627
 00000BD1  6A 00			push	000000000h 
 00000BD3  50				push	EAX 
 00000BD4  E8 00000000 E		call	 Console_WriteString 
 00000BD9  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000BDC  50				push	EAX 
 00000BDD  E8 00000000 E		call	 Console_WriteInteger 
 00000BE2  E8 00000000 E		call	 Console_WriteCrLf 

				;{97}:c= max(a, b);
 00000BE7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000BEA  50				push	EAX
 00000BEB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000BEE  5B				pop	EBX
 00000BEF  33 C9			xor	ECX,ECX
 00000BF1  3B D8			cmp	EBX,EAX
 00000BF3  0F 9E C1			setle	CL
 00000BF6  83 E9 01			sub	ECX,000000001h
 00000BF9  2B D8			sub	EBX,EAX 
 00000BFB  23 CB			and	ECX,EBX
 00000BFD  03 C1			add	EAX,ECX
 00000BFF  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{99}:Console::WriteLn("The max value is = ", c);
 00000C02  8D 05 00000CA0 R		lea	EAX,OFFSET $S000629
 00000C08  6A 00			push	000000000h
 00000C0A  50				push	EAX 
 00000C0B  E8 00000000 E		call	 Console_WriteString
 00000C10  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000C13  50				push	EAX 
 00000C14  E8 00000000 E		call	 Console_WriteInteger 
 00000C19  E8 00000000 E		call	 Console_WriteCrLf 

				;{101}:d= min(a, b);
 00000C1E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000C21  50				push	EAX
 00000C22  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000C25  5B				pop	EBX
 00000C26  2B D8			sub	EBX,EAX
 00000C28  1B C9			sbb	ECX,ECX
 00000C2A  23 CB			and	ECX,EBX
 00000C2C  03 C1			add	EAX,ECX
 00000C2E  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{103}:Console::WriteLn("The min value is = ", d);
 00000C31  8D 05 00000CB4 R		lea	EAX,OFFSET $S000631
 00000C37  6A 00			push	000000000h
 00000C39  50				push	EAX 
 00000C3A  E8 00000000 E		call	 Console_WriteString
 00000C3F  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000C42  50				push	EAX 
 00000C43  E8 00000000 E		call	 Console_WriteInteger 
 00000C48  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000C4D			$L000621:

 00000C4D  5F				pop	EDI
 00000C4E  5E				pop	ESI 
 00000C4F  5B				pop	EBX 
 00000C50  C9				leave	
 00000C51  C3				ret	
 00000C52			UnitTesting_Integers_Inline_Test ENDP

 00000C52			UnitTesting_MonteCarlo_PI PROC NEAR 
				;double UnitTesting::MonteCarlo::PI(unsigned trials);
 00000C52  55				push	EBP
 00000C53  8B EC			mov	EBP,ESP
 00000C55  83 EC 1C			sub	ESP,00000001Ch
 00000C58  53				push	EBX 
 00000C59  56				push	ESI 
 00000C5A  57				push	EDI 
 00000C5B  8D 7D E8			lea	EDI,dword ptr [EBP-0018h]
 00000C5E  B9 00000006			mov	ECX,000000006h
 00000C63  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000C68  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{273}:hits= 0;
 00000C6A  33 C0			xor	EAX,EAX
 00000C6C  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{274}:for(i= 0; i < trials; ++i)
 00000C6F  33 C0			xor	EAX,EAX
 00000C71  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000C74  EB 06			jmp	OFFSET $L001419
 00000C76			$L001420:
 00000C76  FF 45 F8			inc	dword ptr [EBP-8]
 00000C79  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000C7C			$L001419:
 00000C7C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000C7F  50				push	EAX
 00000C80  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C83  5A				pop	EDX
 00000C84  3B D0			cmp	EDX,EAX
 00000C86  0F 9C C0			setl	AL
 00000C89  84 C0			test	AL,AL
 00000C8B  0F 84 0000008C		jz	OFFSET $L001421
				;{

				;{276}:x= UnitTesting::Rnd::NextDblEx();
 00000C91  E8 000003BB			call	 UnitTesting_Rnd_NextDblEx
 00000C96  50				push	EAX
 00000C97  52				push	EDX 
 00000C98  DD C0			ffree	st
 00000C9A  DD 04 24			fld	qword ptr [ESP]
 00000C9D  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{277}:y= UnitTesting::Rnd::NextDblEx();
 00000CA0  5A				pop	EDX
 00000CA1  58				pop	EAX 
 00000CA2  E8 000003AA			call	 UnitTesting_Rnd_NextDblEx
 00000CA7  50				push	EAX
 00000CA8  52				push	EDX 
 00000CA9  DD C0			ffree	st
 00000CAB  DD 04 24			fld	qword ptr [ESP]
 00000CAE  DD 5D E8			fstp	qword ptr [EBP-0018h]

				;{278}:if(x * x + y * y < 1.0)
 00000CB1  5A				pop	EDX
 00000CB2  58				pop	EAX 
 00000CB3  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000CB6  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000CB9  50				push	EAX
 00000CBA  52				push	EDX 
 00000CBB  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000CBE  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000CC1  9B DB E2			fclex
 00000CC4  50				push	EAX
 00000CC5  52				push	EDX 
 00000CC6  DD 04 24			fld	qword ptr [ESP]
 00000CC9  59				pop	ECX
 00000CCA  59				pop	ECX 
 00000CCB  DC 0C 24			fmul	qword ptr [ESP]
 00000CCE  DD 1C 24			fstp	qword ptr [ESP]
 00000CD1  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 00000CD4  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00000CD7  50				push	EAX
 00000CD8  52				push	EDX 
 00000CD9  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 00000CDC  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00000CDF  9B DB E2			fclex
 00000CE2  50				push	EAX
 00000CE3  52				push	EDX 
 00000CE4  DD 04 24			fld	qword ptr [ESP]
 00000CE7  59				pop	ECX
 00000CE8  59				pop	ECX 
 00000CE9  DC 0C 24			fmul	qword ptr [ESP]
 00000CEC  DD 1C 24			fstp	qword ptr [ESP]
 00000CEF  DD 04 24			fld	qword ptr [ESP]
 00000CF2  59				pop	ECX
 00000CF3  59				pop	ECX 
 00000CF4  DC 04 24			fadd	qword ptr [ESP]
 00000CF7  DD 1C 24			fstp	qword ptr [ESP]
 00000CFA  D9 E8			fld1
 00000CFC  51				push	ECX
 00000CFD  51				push	ECX 
 00000CFE  DD 1C 24			fstp	qword ptr [ESP]
 00000D01  E8 00000000 E		call	 FloatingPoint_Compare
 00000D06  83 F8 00			cmp	EAX,000000000h
 00000D09  F7 D8			neg	EAX
 00000D0B  0F 9C C0			setl	AL
 00000D0E  84 C0			test	AL,AL
 00000D10  74 06			jz	OFFSET $L001422
				;{

				;{280}:++hits;
 00000D12  FF 45 FC			inc	dword ptr [EBP-4]
 00000D15  8B 45 FC			mov	EAX,dword ptr [EBP-4]
				;}
 00000D18			$L001422:
				;}
 00000D18  E9 FFFFFF59			jmp	OFFSET $L001420 
 00000D1D			$L001421:

				;{284}:return 4.0 * hits / trials
 00000D1D  33 D2			xor	EDX,EDX
 00000D1F  B8 40100000			mov	EAX,040100000h
 00000D24  50				push	EAX
 00000D25  52				push	EDX 
 00000D26  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000D29  9B DB E2			fclex
 00000D2C  50				push	EAX
 00000D2D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D32  50				push	EAX
 00000D33  52				push	EDX 
 00000D34  DD 04 24			fld	qword ptr [ESP]
 00000D37  59				pop	ECX
 00000D38  59				pop	ECX 
 00000D39  DC 0C 24			fmul	qword ptr [ESP]
 00000D3C  DD 1C 24			fstp	qword ptr [ESP]
 00000D3F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D42  9B DB E2			fclex
 00000D45  50				push	EAX
 00000D46  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D4B  50				push	EAX
 00000D4C  52				push	EDX 
 00000D4D  DD 04 24			fld	qword ptr [ESP]
 00000D50  59				pop	ECX 
 00000D51  59				pop	ECX 
 00000D52  DC 3C 24			fdivr	qword ptr [ESP]
 00000D55  DD 1C 24			fstp	qword ptr [ESP]
 00000D58  5A				pop	EDX
 00000D59  58				pop	EAX 
 00000D5A  EB 00			jmp	OFFSET $L000880
				;}
 00000D5C			$L000880:

 00000D5C  5F				pop	EDI
 00000D5D  5E				pop	ESI 
 00000D5E  5B				pop	EBX 
 00000D5F  C9				leave	
 00000D60  C2 0004			retn	000000004h
 00000D63			UnitTesting_MonteCarlo_PI ENDP

 00000D63			UnitTesting_Objects_Array_Destructor PROC NEAR 
				;void Destructor(void);
 00000D63  55				push	EBP
 00000D64  8B EC			mov	EBP,ESP
 00000D66  51				push	ECX 
 00000D67  53				push	EBX 
 00000D68  56				push	ESI 
 00000D69  57				push	EDI 
				;{

				;{59}:if(array != null)
 00000D6A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D6D  8B 01			mov	EAX,dword ptr [ECX]
 00000D6F  8B C8			mov	ECX,EAX 
 00000D71  50				push	EAX
 00000D72  33 C0			xor	EAX,EAX
 00000D74  5A				pop	EDX
 00000D75  3B D0			cmp	EDX,EAX
 00000D77  0F 95 C0			setnz	AL
 00000D7A  84 C0			test	AL,AL
 00000D7C  74 16			jz	OFFSET $L001424

				;{60}:destroy []array;
 00000D7E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D81  8B 01			mov	EAX,dword ptr [ECX]
 00000D83  8B C8			mov	ECX,EAX 
 00000D85  85 C0			test	EAX,EAX
 00000D87  74 0B			jz	OFFSET $L001426
 00000D89  8B F0			mov	ESI,EAX
 00000D8B  83 C6 FC			add	ESI,0FFFFFFFCh
 00000D8E  56				push	ESI
 00000D8F  E8 00000000 E		call	 System_Memory_Destroy
 00000D94			$L001426:
 00000D94			$L001424:
				;}
 00000D94			$L000763:

 00000D94  5F				pop	EDI
 00000D95  5E				pop	ESI 
 00000D96  5B				pop	EBX 
 00000D97  C9				leave	
 00000D98  C3				ret	
 00000D99			UnitTesting_Objects_Array_Destructor ENDP

 00000D99			UnitTesting_Objects_Array_get_length PROC NEAR 
				;unsigned get::length(void);
 00000D99  55				push	EBP
 00000D9A  8B EC			mov	EBP,ESP
 00000D9C  51				push	ECX 
 00000D9D  53				push	EBX 
 00000D9E  56				push	ESI 
 00000D9F  57				push	EDI 
				;{

				;{54}:return _length
 00000DA0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000DA3  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000DA6  EB 00			jmp	OFFSET $L000762
				;}
 00000DA8			$L000762:

 00000DA8  5F				pop	EDI
 00000DA9  5E				pop	ESI 
 00000DAA  5B				pop	EBX 
 00000DAB  C9				leave	
 00000DAC  C3				ret	
 00000DAD			UnitTesting_Objects_Array_get_length ENDP

 00000DAD			UnitTesting_Objects_Array PROC NEAR 
				;void UnitTesting::Objects::Array(void);
 00000DAD  55				push	EBP
 00000DAE  8B EC			mov	EBP,ESP
 00000DB0  51				push	ECX 
 00000DB1  53				push	EBX 
 00000DB2  56				push	ESI 
 00000DB3  57				push	EDI 
 00000DB4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000DB7  C7 41 08			mov	dword ptr [ECX+0008h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_Array 
	   00000070 R
 00000DBE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000DC1  E8 000038E1			call	 __member_Init@UnitTesting_Objects_Array

 00000DC6  5F				pop	EDI
 00000DC7  5E				pop	ESI 
 00000DC8  5B				pop	EBX 
 00000DC9  C9				leave	
 00000DCA  C3				ret	
 00000DCB			UnitTesting_Objects_Array ENDP

 00000DCB			UnitTesting_Objects_ArrayOfAutomobiles_Swap PROC NEAR 
				;void Swap(UnitTesting::Objects::__uint i, UnitTesting::Objects::__uint j);
 00000DCB  55				push	EBP
 00000DCC  8B EC			mov	EBP,ESP
 00000DCE  83 EC 10			sub	ESP,000000010h
 00000DD1  53				push	EBX 
 00000DD2  56				push	ESI 
 00000DD3  57				push	EDI 
 00000DD4  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 00000DD7  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000DDA  B9 00000003			mov	ECX,000000003h 
 00000DDF  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000DE4  F3/ AB			rep stos	dword ptr [EDI]
 00000DE6  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{82}:tmp= array[i];
 00000DE9  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000DEC  E8 000001CC			call	 UnitTesting_Objects_Automobile
 00000DF1  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000DF4  8B 01			mov	EAX,dword ptr [ECX]
 00000DF6  8B C8			mov	ECX,EAX 
 00000DF8  50				push	EAX
 00000DF9  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DFC  5E				pop	ESI
 00000DFD  6B C0 0C			imul	EAX,00000000Ch
 00000E00  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000E03  8B 04 30			mov	EAX,dword ptr [ESI+EAX]
 00000E06  8B F1			mov	ESI,ECX
 00000E08  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00000E0B  8B FB			mov	EDI,EBX 
 00000E0D  B9 0000000C			mov	ECX,00000000Ch 
 00000E12  FC				cld	
 00000E13  F3/ A4			rep movsb	

				;{83}:array[i]= array[j];
 00000E15  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E18  8B 01			mov	EAX,dword ptr [ECX]
 00000E1A  8B C8			mov	ECX,EAX 
 00000E1C  50				push	EAX
 00000E1D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E20  5E				pop	ESI
 00000E21  6B C0 0C			imul	EAX,00000000Ch
 00000E24  8D 04 30			lea	EAX,dword ptr [ESI+EAX]
 00000E27  50				push	EAX
 00000E28  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E2B  8B 01			mov	EAX,dword ptr [ECX]
 00000E2D  8B C8			mov	ECX,EAX 
 00000E2F  50				push	EAX
 00000E30  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000E33  5E				pop	ESI
 00000E34  6B C0 0C			imul	EAX,00000000Ch
 00000E37  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000E3A  8B 04 30			mov	EAX,dword ptr [ESI+EAX]
 00000E3D  5B				pop	EBX
 00000E3E  89 03			mov	dword ptr [EBX],EAX

				;{84}:array[j]= tmp;
 00000E40  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E43  8B 01			mov	EAX,dword ptr [ECX]
 00000E45  8B C8			mov	ECX,EAX 
 00000E47  50				push	EAX
 00000E48  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000E4B  5E				pop	ESI
 00000E4C  6B C0 0C			imul	EAX,00000000Ch
 00000E4F  8D 04 30			lea	EAX,dword ptr [ESI+EAX]
 00000E52  50				push	EAX
 00000E53  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000E56  5B				pop	EBX
 00000E57  89 03			mov	dword ptr [EBX],EAX
				;}
 00000E59			$L000776:

 00000E59  5F				pop	EDI
 00000E5A  5E				pop	ESI 
 00000E5B  5B	pop	EBX 
 00000E5C  C9				leave	
 00000E5D  C2 0008			retn	000000008h
 00000E60			UnitTesting_Objects_ArrayOfAutomobiles_Swap ENDP

 00000E60			UnitTesting_Objects_ArrayOfAutomobiles PROC NEAR 
				;void UnitTesting::Objects::ArrayOfAutomobiles(UnitTesting::Objects::__uint len);
 00000E60  55				push	EBP
 00000E61  8B EC			mov	EBP,ESP
 00000E63  51				push	ECX 
 00000E64  53				push	EBX 
 00000E65  56				push	ESI 
 00000E66  57				push	EDI 
 00000E67  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E6A  E8 FFFFFF3E			call	 UnitTesting_Objects_Array ;base constructor call
 00000E6F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000E72  C7 41 08			mov	dword ptr [ECX+0008h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles 
	   0000007C R
				;{

				;{72}:array= new UnitTesting::Objects::Automobile[_length= len];
 00000E79  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E7C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E7F  89 41 04			mov	dword ptr [ECX+0004h],EAX
 00000E82  6B C0 0C			imul	EAX,00000000Ch
 00000E85  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00000E88  53				push	EBX
 00000E89  8B D8			mov	EBX,EAX
 00000E8B  E8 00000000 E		call	 System_Memory_New
 00000E90  85 C0			test	EAX,EAX
 00000E92  74 14			jz	 $L001431
 00000E94  8B F0			mov	ESI,EAX 
 00000E96  8D 3E			lea	EDI,dword ptr [ESI]
 00000E98  8B CB			mov	ECX,EBX 
 00000E9A  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00000E9F  F3/ AA			rep stos	byte ptr [EDI]
 00000EA1  89 1E			mov	dword ptr [ESI],EBX 
 00000EA3  83 C6 04			add	ESI,000000004h
 00000EA6  EB 02			jmp	 $L001432
 00000EA8			$L001431:
 00000EA8  33 F6			xor	ESI,ESI
 00000EAA			$L001432:
 00000EAA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000EAD  89 31			mov	dword ptr [ECX],ESI 
 00000EAF  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00000EB2  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00000EB5  8B DE			mov	EBX,ESI 
 00000EB7			$L001433:
 00000EB7  8B CB			mov	ECX,EBX 
 00000EB9  E8 000000FF			call	 UnitTesting_Objects_Automobile
 00000EBE  83 C3 0C			add	EBX,00000000Ch 
 00000EC1  3B DF			cmp	EBX,EDI
 00000EC3  75 F2			jnz	OFFSET $L001433
 00000EC5  8B C6			mov	EAX,ESI 
				;}

 00000EC7  5F				pop	EDI
 00000EC8  5E				pop	ESI 
 00000EC9  5B				pop	EBX 
 00000ECA  C9				leave	
 00000ECB  C2 0004			retn	000000004h
 00000ECE			UnitTesting_Objects_ArrayOfAutomobiles ENDP

 00000ECE			UnitTesting_Objects_ArrayOfAutomobiles_getAt PROC NEAR 
				;UnitTesting::Objects::ProxyObject getAt(UnitTesting::Objects::__uint x);
 00000ECE  55				push	EBP
 00000ECF  8B EC			mov	EBP,ESP
 00000ED1  51				push	ECX 
 00000ED2  53				push	EBX 
 00000ED3  56				push	ESI 
 00000ED4  57				push	EDI 
				;{

				;{77}:return dynamic_cast(UnitTesting::Objects::Automobile, &array[x])
 00000ED5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ED8  8B 01			mov	EAX,dword ptr [ECX]
 00000EDA  8B C8			mov	ECX,EAX 
 00000EDC  50				push	EAX
 00000EDD  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000EE0  5E				pop	ESI
 00000EE1  6B C0 0C			imul	EAX,00000000Ch
 00000EE4  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000EE7  8B C1			mov	EAX,ECX
 00000EE9  EB 00			jmp	OFFSET $L000774
				;}
 00000EEB			$L000774:

 00000EEB  5F				pop	EDI
 00000EEC  5E				pop	ESI 
 00000EED  5B				pop	EBX 
 00000EEE  C9				leave	
 00000EEF  C2 0004			retn	000000004h
 00000EF2			UnitTesting_Objects_ArrayOfAutomobiles_getAt ENDP

 00000EF2			UnitTesting_Objects_Automobile_Compare PROC NEAR 
				;int Compare(UnitTesting::Objects::ProxyObject ^ obj);
 00000EF2  55				push	EBP
 00000EF3  8B EC			mov	EBP,ESP
 00000EF5  83 EC 08			sub	ESP,000000008h
 00000EF8  53				push	EBX 
 00000EF9  56				push	ESI 
 00000EFA  57				push	EDI 
 00000EFB  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00000EFE  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000F01  B9 00000001			mov	ECX,000000001h 
 00000F06  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000F0B  F3/ AB			rep stos	dword ptr [EDI]
 00000F0D  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{36}:other= dynamic_cast(obj);
 00000F10  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000F13  8B C3			mov	EAX,EBX 
 00000F15  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000F18  89 03			mov	dword ptr [EBX],EAX

				;{37}:if(speed < other.speed)
 00000F1A  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000F1D  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F20  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F23  50				push	EAX
 00000F24  52				push	EDX 
 00000F25  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000F28  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F2B  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F2E  50				push	EAX
 00000F2F  52				push	EDX 
 00000F30  E8 00000000 E		call	 FloatingPoint_Compare
 00000F35  83 F8 00			cmp	EAX,000000000h
 00000F38  F7 D8			neg	EAX
 00000F3A  0F 9C C0			setl	AL
 00000F3D  84 C0			test	AL,AL
 00000F3F  74 09			jz	OFFSET $L001434

				;{38}:return -1
 00000F41  B8 00000001			mov	EAX,000000001h
 00000F46  F7 D8			neg	EAX
 00000F48  EB 32			jmp	OFFSET $L000754

				; else {
 00000F4A			$L001434:

				;{39}:if(speed > other.speed)
 00000F4A  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000F4D  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F50  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F53  50				push	EAX
 00000F54  52				push	EDX 
 00000F55  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000F58  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F5B  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F5E  50				push	EAX
 00000F5F  52				push	EDX 
 00000F60  E8 00000000 E		call	 FloatingPoint_Compare
 00000F65  83 F8 00			cmp	EAX,000000000h
 00000F68  F7 D8			neg	EAX
 00000F6A  0F 9F C0			setg	AL
 00000F6D  84 C0			test	AL,AL
 00000F6F  74 07			jz	OFFSET $L001436

				;{40}:return 1
 00000F71  B8 00000001			mov	EAX,000000001h
 00000F76  EB 04			jmp	OFFSET $L000754
 00000F78			$L001436:
 00000F78			$L001435:

				; }

				;{42}:return 0
 00000F78  33 C0			xor	EAX,EAX
 00000F7A  EB 00			jmp	OFFSET $L000754
				;}
 00000F7C			$L000754:

 00000F7C  5F				pop	EDI
 00000F7D  5E				pop	ESI 
 00000F7E  5B				pop	EBX 
 00000F7F  C9				leave	
 00000F80  C2 0004			retn	000000004h
 00000F83			UnitTesting_Objects_Automobile_Compare ENDP

 00000F83			UnitTesting_Objects_Automobile_get_Speed PROC NEAR 
				;double get::Speed(void);
 00000F83  55				push	EBP
 00000F84  8B EC			mov	EBP,ESP
 00000F86  51				push	ECX 
 00000F87  53				push	EBX 
 00000F88  56				push	ESI 
 00000F89  57				push	EDI 
				;{

				;{27}:return speed
 00000F8A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F8D  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F90  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F93  EB 00			jmp	OFFSET $L000751
				;}
 00000F95			$L000751:

 00000F95  5F				pop	EDI
 00000F96  5E				pop	ESI 
 00000F97  5B				pop	EBX 
 00000F98  C9				leave	
 00000F99  C3				ret	
 00000F9A			UnitTesting_Objects_Automobile_get_Speed ENDP

 00000F9A			UnitTesting_Objects_Automobile_put_Speed PROC NEAR 
				;void put::Speed(double val);
 00000F9A  55				push	EBP
 00000F9B  8B EC			mov	EBP,ESP
 00000F9D  51				push	ECX 
 00000F9E  53				push	EBX 
 00000F9F  56				push	ESI 
 00000FA0  57				push	EDI 
				;{

				;{31}:speed= val;
 00000FA1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000FA4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000FA7  50				push	EAX
 00000FA8  52				push	EDX 
 00000FA9  DD C0			ffree	st
 00000FAB  DD 04 24			fld	qword ptr [ESP]
 00000FAE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FB1  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000FB4			$L000752:
 00000FB4  5A				pop	EDX
 00000FB5  58				pop	EAX 

 00000FB6  5F				pop	EDI
 00000FB7  5E				pop	ESI 
 00000FB8  5B				pop	EBX 
 00000FB9  C9				leave	
 00000FBA  C2 0008			retn	000000008h
 00000FBD			UnitTesting_Objects_Automobile_put_Speed ENDP

 00000FBD			UnitTesting_Objects_Automobile PROC NEAR 
				;void UnitTesting::Objects::Automobile(void);
 00000FBD  55				push	EBP
 00000FBE  8B EC			mov	EBP,ESP
 00000FC0  51				push	ECX 
 00000FC1  53				push	EBX 
 00000FC2  56				push	ESI 
 00000FC3  57				push	EDI 
 00000FC4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FC7  E8 00000016			call	 UnitTesting_Objects_ProxyObject ;base constructor call
 00000FCC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000FCF  C7 01 00000088 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_Automobile 
 00000FD5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000FD8  E8 000036E8			call	 __member_Init@UnitTesting_Objects_Automobile 
				;{
				;}

 00000FDD  5F				pop	EDI
 00000FDE  5E				pop	ESI 
 00000FDF  5B				pop	EBX 
 00000FE0  C9				leave	
 00000FE1  C3				ret	
 00000FE2			UnitTesting_Objects_Automobile ENDP

 00000FE2			UnitTesting_Objects_ProxyObject PROC NEAR 
				;void UnitTesting::Objects::ProxyObject(void);
 00000FE2  55				push	EBP
 00000FE3  8B EC			mov	EBP,ESP
 00000FE5  51				push	ECX 
 00000FE6  53				push	EBX 
 00000FE7  56				push	ESI 
 00000FE8  57				push	EDI 
 00000FE9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FEC  C7 01 0000008C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject 

 00000FF2  5F				pop	EDI
 00000FF3  5E				pop	ESI 
 00000FF4  5B				pop	EBX 
 00000FF5  C9				leave	
 00000FF6  C3				ret	
 00000FF7			UnitTesting_Objects_ProxyObject ENDP

 00000FF7			UnitTesting_Rnd_NextDbl PROC NEAR 
				;double NextDbl(void);
 00000FF7  55				push	EBP
 00000FF8  8B EC			mov	EBP,ESP
 00000FFA  51				push	ECX 
 00000FFB  53				push	EBX 
 00000FFC  56				push	ESI 
 00000FFD  57				push	EDI 
				;{

				;{45}:return UnitTesting::Rnd::NextDblEx()
 00000FFE  E8 0000004E			call	 UnitTesting_Rnd_NextDblEx
 00001003  EB 00			jmp	OFFSET $L000540
				;}
 00001005			$L000540:

 00001005  5F				pop	EDI
 00001006  5E				pop	ESI 
 00001007  5B				pop	EBX 
 00001008  C9				leave	
 00001009  C3				ret	
 0000100A			UnitTesting_Rnd_NextDbl ENDP

 0000100A			UnitTesting_Rnd_NextInt PROC NEAR 
				;double NextInt(void);
 0000100A  55				push	EBP
 0000100B  8B EC			mov	EBP,ESP
 0000100D  51				push	ECX 
 0000100E  53				push	EBX 
 0000100F  56				push	ESI 
 00001010  57				push	EDI 
				;{

				;{50}:return UnitTesting::Rnd::NextIntEx()
 00001011  E8 00000134			call	 UnitTesting_Rnd_NextIntEx
 00001016  EB 00			jmp	OFFSET $L000541
				;}
 00001018			$L000541:

 00001018  5F				pop	EDI
 00001019  5E				pop	ESI 
 0000101A  5B				pop	EBX 
 0000101B  C9				leave	
 0000101C  C3				ret	
 0000101D			UnitTesting_Rnd_NextInt ENDP

 0000101D			UnitTesting_Rnd PROC NEAR 
				;void UnitTesting::Rnd(int seedx);
 0000101D  55				push	EBP
 0000101E  8B EC			mov	EBP,ESP
 00001020  51				push	ECX 
 00001021  53				push	EBX 
 00001022  56				push	ESI 
 00001023  57				push	EDI 
 00001024  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001027  E8 000036B0			call	 __member_Init@UnitTesting_Rnd
				;{

				;{15}:UnitTesting::Rnd::seed= seedx;
 0000102C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000102F  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX
				;}

 00001034  5F				pop	EDI
 00001035  5E				pop	ESI 
 00001036  5B				pop	EBX 
 00001037  C9				leave	
 00001038  C2 0004			retn	000000004h
 0000103B			UnitTesting_Rnd ENDP

 0000103B			UnitTesting_Rnd_setSeed PROC NEAR 
				;void setSeed(long s);
 0000103B  55				push	EBP
 0000103C  8B EC			mov	EBP,ESP
 0000103E  51				push	ECX 
 0000103F  53				push	EBX 
 00001040  56				push	ESI 
 00001041  57				push	EDI 
				;{

				;{21}:UnitTesting::Rnd::seed= s;
 00001042  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001045  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX
				;}
 0000104A			$L000535:

 0000104A  5F				pop	EDI
 0000104B  5E				pop	ESI 
 0000104C  5B				pop	EBX 
 0000104D  C9				leave	
 0000104E  C2 0004			retn	000000004h
 00001051			UnitTesting_Rnd_setSeed ENDP

 00001051			UnitTesting_Rnd_NextDblEx PROC NEAR 
				;double UnitTesting::Rnd::NextDblEx(void);
 00001051  55				push	EBP
 00001052  8B EC			mov	EBP,ESP
 00001054  51				push	ECX 
 00001055  53				push	EBX 
 00001056  56				push	ESI 
 00001057  57				push	EDI 
				;{

				;{26}:UnitTesting::Rnd::seed= UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed / UnitTesting::Rnd::q);
 00001058  8D 1D 00001214 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 0000105E  8B 03			mov	EAX,dword ptr [EBX]
 00001060  50				push	EAX
 00001061  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001067  8B 03			mov	EAX,dword ptr [EBX]
 00001069  50				push	EAX
 0000106A  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001070  8B 03			mov	EAX,dword ptr [EBX]
 00001072  8B C8			mov	ECX,EAX
 00001074  58				pop	EAX
 00001075  33 D2			xor	EDX,EDX
 00001077  F7 F9			idiv	ECX
 00001079  8B C2			mov	EAX,EDX 
 0000107B  59				pop	ECX
 0000107C  99				cdq	
 0000107D  0F AF C1			imul	EAX,ECX
 00001080  50				push	EAX
 00001081  8D 1D 00001220 R		lea	EBX,OFFSET UnitTesting_Rnd_r
 00001087  8B 03			mov	EAX,dword ptr [EBX]
 00001089  50				push	EAX
 0000108A  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001090  8B 03			mov	EAX,dword ptr [EBX]
 00001092  50				push	EAX
 00001093  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001099  8B 03			mov	EAX,dword ptr [EBX]
 0000109B  9B DB E2			fclex
 0000109E  50				push	EAX
 0000109F  E8 00000000 E		call	 FloatingPoint_FromInt
 000010A4  50				push	EAX
 000010A5  52				push	EDX 
 000010A6  DD 04 24			fld	qword ptr [ESP]
 000010A9  59				pop	ECX
 000010AA  59				pop	ECX 
 000010AB  E8 00000000 E		call	 FloatingPoint_FromInt
 000010B0  50				push	EAX
 000010B1  52				push	EDX 
 000010B2  DC 3C 24			fdivr	qword ptr [ESP]
 000010B5  DD 1C 24			fstp	qword ptr [ESP]
 000010B8  9B DB E2			fclex
 000010BB  DD 04 24			fld	qword ptr [ESP]
 000010BE  59				pop	ECX
 000010BF  59				pop	ECX 
 000010C0  E8 00000000 E		call	 FloatingPoint_FromInt
 000010C5  50				push	EAX
 000010C6  52				push	EDX 
 000010C7  DC 0C 24			fmul	qword ptr [ESP]
 000010CA  DD 1C 24			fstp	qword ptr [ESP]
 000010CD  DD 04 24			fld	qword ptr [ESP]
 000010D0  59				pop	ECX
 000010D1  59				pop	ECX 
 000010D2  E8 00000000 E		call	 FloatingPoint_FromInt
 000010D7  50				push	EAX
 000010D8  52				push	EDX 
 000010D9  DD 04 24			fld	qword ptr [ESP]
 000010DC  D8 E1			fsub	st,st(1)
 000010DE  DD 1C 24			fstp	qword ptr [ESP]
 000010E1  E8 00000000 E		call	 FloatingPoint_ToInt
 000010E6  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{28}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 000010EB  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000010F1  8B 03			mov	EAX,dword ptr [EBX]
 000010F3  50				push	EAX
 000010F4  33 C0			xor	EAX,EAX
 000010F6  5A				pop	EDX
 000010F7  3B D0			cmp	EDX,EAX
 000010F9  0F 9C C0			setl	AL
 000010FC  84 C0			test	AL,AL
 000010FE  74 0A			jz	 $L001439
 00001100  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 00001106  8B 03			mov	EAX,dword ptr [EBX]
 00001108  EB 02			jmp	 $L001440
 0000110A			$L001439:
 0000110A  33 C0			xor	EAX,EAX
 0000110C			$L001440:
 0000110C  F8				clc	
 0000110D  01 05 00001210 R		add	 UnitTesting_Rnd_seed,EAX

				;{30}:return UnitTesting::Rnd::seed / UnitTesting::Rnd::m
 00001113  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001119  8B 03			mov	EAX,dword ptr [EBX]
 0000111B  50				push	EAX
 0000111C  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 00001122  8B 03			mov	EAX,dword ptr [EBX]
 00001124  9B DB E2			fclex
 00001127  50				push	EAX
 00001128  E8 00000000 E		call	 FloatingPoint_FromInt
 0000112D  50				push	EAX
 0000112E  52				push	EDX 
 0000112F  DD 04 24			fld	qword ptr [ESP]
 00001132  59				pop	ECX
 00001133  59				pop	ECX 
 00001134  E8 00000000 E		call	 FloatingPoint_FromInt
 00001139  50				push	EAX
 0000113A  52				push	EDX 
 0000113B  DC 3C 24			fdivr	qword ptr [ESP]
 0000113E  DD 1C 24			fstp	qword ptr [ESP]
 00001141  5A				pop	EDX
 00001142  58				pop	EAX 
 00001143  EB 00			jmp	OFFSET $L000537
				;}
 00001145			$L000537:

 00001145  5F				pop	EDI
 00001146  5E				pop	ESI 
 00001147  5B				pop	EBX 
 00001148  C9				leave	
 00001149  C3				ret	
 0000114A			UnitTesting_Rnd_NextDblEx ENDP

 0000114A			UnitTesting_Rnd_NextIntEx PROC NEAR 
				;double UnitTesting::Rnd::NextIntEx(void);
 0000114A  55				push	EBP
 0000114B  8B EC			mov	EBP,ESP
 0000114D  51				push	ECX 
 0000114E  53				push	EBX 
 0000114F  56				push	ESI 
 00001150  57				push	EDI 
				;{

				;{36}:UnitTesting::Rnd::seed= UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed * UnitTesting::Rnd::q);
 00001151  8D 1D 00001214 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 00001157  8B 03			mov	EAX,dword ptr [EBX]
 00001159  50				push	EAX
 0000115A  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001160  8B 03			mov	EAX,dword ptr [EBX]
 00001162  50				push	EAX
 00001163  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001169  8B 03			mov	EAX,dword ptr [EBX]
 0000116B  8B C8			mov	ECX,EAX
 0000116D  58				pop	EAX
 0000116E  33 D2			xor	EDX,EDX
 00001170  F7 F9			idiv	ECX
 00001172  8B C2			mov	EAX,EDX 
 00001174  59				pop	ECX
 00001175  99				cdq	
 00001176  0F AF C1			imul	EAX,ECX
 00001179  50				push	EAX
 0000117A  8D 1D 00001220 R		lea	EBX,OFFSET UnitTesting_Rnd_r
 00001180  8B 03			mov	EAX,dword ptr [EBX]
 00001182  50				push	EAX
 00001183  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001189  8B 03			mov	EAX,dword ptr [EBX]
 0000118B  50				push	EAX
 0000118C  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001192  8B 03			mov	EAX,dword ptr [EBX]
 00001194  59				pop	ECX
 00001195  99				cdq	
 00001196  0F AF C1			imul	EAX,ECX
 00001199  59				pop	ECX
 0000119A  99				cdq	
 0000119B  0F AF C1			imul	EAX,ECX
 0000119E  5A				pop	EDX
 0000119F  2B D0			sub	EDX,EAX
 000011A1  8B C2			mov	EAX,EDX
 000011A3  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{38}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 000011A8  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000011AE  8B 03			mov	EAX,dword ptr [EBX]
 000011B0  50				push	EAX
 000011B1  33 C0			xor	EAX,EAX
 000011B3  5A				pop	EDX
 000011B4  3B D0			cmp	EDX,EAX
 000011B6  0F 9C C0			setl	AL
 000011B9  84 C0			test	AL,AL
 000011BB  74 0A			jz	 $L001441
 000011BD  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000011C3  8B 03			mov	EAX,dword ptr [EBX]
 000011C5  EB 02			jmp	 $L001442
 000011C7			$L001441:
 000011C7  33 C0			xor	EAX,EAX
 000011C9			$L001442:
 000011C9  F8				clc	
 000011CA  01 05 00001210 R		add	 UnitTesting_Rnd_seed,EAX

				;{40}:return UnitTesting::Rnd::seed % UnitTesting::Rnd::m
 000011D0  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000011D6  8B 03			mov	EAX,dword ptr [EBX]
 000011D8  50				push	EAX
 000011D9  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000011DF  8B 03			mov	EAX,dword ptr [EBX]
 000011E1  8B C8			mov	ECX,EAX
 000011E3  58				pop	EAX
 000011E4  33 D2			xor	EDX,EDX
 000011E6  F7 F9			idiv	ECX
 000011E8  8B C2			mov	EAX,EDX 
 000011EA  50				push	EAX
 000011EB  E8 00000000 E		call	 FloatingPoint_FromInt
 000011F0  EB 00			jmp	OFFSET $L000539
				;}
 000011F2			$L000539:

 000011F2  5F				pop	EDI
 000011F3  5E				pop	ESI 
 000011F4  5B				pop	EBX 
 000011F5  C9				leave	
 000011F6  C3				ret	
 000011F7			UnitTesting_Rnd_NextIntEx ENDP

 000011F7			UnitTesting_Shape PROC NEAR 
				;void UnitTesting::Shape(void);
 000011F7  55				push	EBP
 000011F8  8B EC			mov	EBP,ESP
 000011FA  51				push	ECX 
 000011FB  53				push	EBX 
 000011FC  56				push	ESI 
 000011FD  57				push	EDI 
 000011FE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001201  C7 01 00000018 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Shape 

 00001207  5F				pop	EDI
 00001208  5E				pop	ESI 
 00001209  5B				pop	EBX 
 0000120A  C9				leave	
 0000120B  C3				ret	
 0000120C			UnitTesting_Shape ENDP

 0000120C			UnitTesting_ShapeFactoryCreator_Destructor PROC NEAR 
				;void Destructor(void);
 0000120C  55				push	EBP
 0000120D  8B EC			mov	EBP,ESP
 0000120F  51				push	ECX 
 00001210  53				push	EBX 
 00001211  56				push	ESI 
 00001212  57				push	EDI 
				;{

				;{299}:if(ptr3 != null)
 00001213  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001216  8B 01			mov	EAX,dword ptr [ECX]
 00001218  8B C8			mov	ECX,EAX 
 0000121A  51				push	ECX
 0000121B  33 C0			xor	EAX,EAX
 0000121D  5B				pop	EBX
 0000121E  3B D8			cmp	EBX,EAX
 00001220  0F 95 C0			setnz	AL
 00001223  84 C0			test	AL,AL
 00001225  74 18			jz	OFFSET $L001444

				;{300}:destroy ptr3;
 00001227  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000122A  8B 01			mov	EAX,dword ptr [ECX]
 0000122C  8B C8			mov	ECX,EAX 
 0000122E  8B F1			mov	ESI,ECX
 00001230  85 C9			test	ECX,ECX
 00001232  74 05			jz	OFFSET $L001447
 00001234  8B 01			mov	EAX,dword ptr [ECX] 
 00001236  FF 50 10			call	dword ptr [EAX+0010h]
 00001239			$L001447:
 00001239  56				push	ESI
 0000123A  E8 00000000 E		call	 System_Memory_Destroy
 0000123F			$L001444:

				;{302}:if(null != ptr3)
 0000123F  33 C0			xor	EAX,EAX
 00001241  50				push	EAX
 00001242  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001245  8B 01			mov	EAX,dword ptr [ECX]
 00001247  8B C8			mov	ECX,EAX 
 00001249  59				pop	ECX
 0000124A  3B C8			cmp	ECX,EAX
 0000124C  0F 95 C0			setnz	AL
 0000124F  84 C0			test	AL,AL
 00001251  74 18			jz	OFFSET $L001448

				;{303}:destroy ptr3;
 00001253  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001256  8B 01	mov	EAX,dword ptr [ECX]
 00001258  8B C8			mov	ECX,EAX 
 0000125A  8B F1			mov	ESI,ECX
 0000125C  85 C9			test	ECX,ECX
 0000125E  74 05			jz	OFFSET $L001451
 00001260  8B 01			mov	EAX,dword ptr [ECX] 
 00001262  FF 50 10			call	dword ptr [EAX+0010h]
 00001265			$L001451:
 00001265  56				push	ESI
 00001266  E8 00000000 E		call	 System_Memory_Destroy
 0000126B			$L001448:
				;}
 0000126B			$L000729:

 0000126B  5F				pop	EDI
 0000126C  5E				pop	ESI 
 0000126D  5B				pop	EBX 
 0000126E  C9				leave	
 0000126F  C3				ret	
 00001270			UnitTesting_ShapeFactoryCreator_Destructor ENDP

 00001270			UnitTesting_ShapeFactoryCreator PROC NEAR 
				;void UnitTesting::ShapeFactoryCreator(void);
 00001270  55				push	EBP
 00001271  8B EC			mov	EBP,ESP
 00001273  51				push	ECX 
 00001274  53				push	EBX 
 00001275  56				push	ESI 
 00001276  57				push	EDI 
 00001277  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000127A  E8 0000349E			call	 __member_Init@UnitTesting_ShapeFactoryCreator

 0000127F  5F				pop	EDI
 00001280  5E				pop	ESI 
 00001281  5B				pop	EBX 
 00001282  C9				leave	
 00001283  C3				ret	
 00001284			UnitTesting_ShapeFactoryCreator ENDP

 00001284			UnitTesting_ShapeFactoryCreator_Create PROC NEAR 
				;UnitTesting::Shape UnitTesting::ShapeFactoryCreator::Create(string name);
 00001284  55				push	EBP
 00001285  8B EC			mov	EBP,ESP
 00001287  83 EC 08			sub	ESP,000000008h
 0000128A  53				push	EBX 
 0000128B  56				push	ESI 
 0000128C  57				push	EDI 
 0000128D  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00001290  B9 00000001			mov	ECX,000000001h
 00001295  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000129A  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{245}:obj_ptr= new UnitTesting::Circle();
 0000129C  6A 0C			push	00000000Ch
 0000129E  E8 00000000 E		call	 System_Memory_New
 000012A3  85 C0			test	EAX,EAX
 000012A5  74 12			jz	 $L001453
 000012A7  8B F0			mov	ESI,EAX
 000012A9  8D 3E			lea	EDI,dword ptr [ESI]
 000012AB  B9 00000003			mov	ECX,000000003h 
 000012B0  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000012B5  F3/ AB			rep stos	dword ptr [EDI]
 000012B7  EB 02			jmp	 $L001454
 000012B9			$L001453:
 000012B9  33 F6			xor	ESI,ESI
 000012BB			$L001454:
 000012BB  89 75 FC			mov	dword ptr [EBP-0004h],ESI 
 000012BE  8B CE			mov	ECX,ESI
 000012C0  E8 FFFFF47A			call	 UnitTesting_Circle
 000012C5  8B C6			mov	EAX,ESI 

				;{251}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 000012C7  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000012CA  8B F1			mov	ESI,ECX
 000012CC  85 C9			test	ECX,ECX
 000012CE  74 05			jz	OFFSET $L001456
 000012D0  8B 01			mov	EAX,dword ptr [ECX] 
 000012D2  FF 50 10			call	dword ptr [EAX+0010h]
 000012D5			$L001456:
 000012D5  56				push	ESI
 000012D6  E8 00000000 E		call	 System_Memory_Destroy

				;{277}:if(name == "Circle")
 000012DB  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000012DE  50				push	EAX
 000012DF  8D 05 000007DB R		lea	EAX,OFFSET $S000670
 000012E5  5F				pop	EDI
 000012E6  8B F0			mov	ESI,EAX
 000012E8  50				push	EAX
 000012E9  E8 00000000 E		call	 StringHandling_StringLength
 000012EE  50				push	EAX 
 000012EF  56				push	ESI 
 000012F0  57				push	EDI 
 000012F1  E8 00000000 E		call	 StringHandling_StringCompare 
 000012F6  83 F8 00			cmp	EAX,000000000h
 000012F9  0F 94 C0			setz	AL
 000012FC  84 C0			test	AL,AL
 000012FE  74 32			jz	OFFSET $L001457
				;{

				;{279}:return new UnitTesting::Circle()
 00001300  6A 0C			push	00000000Ch
 00001302  E8 00000000 E		call	 System_Memory_New
 00001307  85 C0			test	EAX,EAX
 00001309  74 12			jz	 $L001459
 0000130B  8B F0			mov	ESI,EAX
 0000130D  8D 3E			lea	EDI,dword ptr [ESI]
 0000130F  B9 00000003			mov	ECX,000000003h 
 00001314  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001319  F3/ AB			rep stos	dword ptr [EDI]
 0000131B  EB 02			jmp	 $L001460
 0000131D			$L001459:
 0000131D  33 F6			xor	ESI,ESI
 0000131F			$L001460:
 0000131F  8B CE			mov	ECX,ESI
 00001321  E8 FFFFF419			call	 UnitTesting_Circle
 00001326  8B C6			mov	EAX,ESI 
 00001328  E9 000000A9			jmp	OFFSET $L000726
				;}
 0000132D  E9 000000A0			jmp	OFFSET $L001458

				; else {
 00001332			$L001457:

				;{280}:if(name == "Square")
 00001332  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001335  50				push	EAX
 00001336  8D 05 00000BE2 R		lea	EAX,OFFSET $S000696
 0000133C  5F				pop	EDI
 0000133D  8B F0			mov	ESI,EAX
 0000133F  50				push	EAX
 00001340  E8 00000000 E		call	 StringHandling_StringLength
 00001345  50				push	EAX 
 00001346  56				push	ESI 
 00001347  57				push	EDI 
 00001348  E8 00000000 E		call	 StringHandling_StringCompare 
 0000134D  83 F8 00			cmp	EAX,000000000h
 00001350  0F 94 C0			setz	AL
 00001353  84 C0			test	AL,AL
 00001355  74 2C			jz	OFFSET $L001461
				;{

				;{282}:return new UnitTesting::Square()
 00001357  6A 14			push	000000014h
 00001359  E8 00000000 E		call	 System_Memory_New
 0000135E  85 C0			test	EAX,EAX
 00001360  74 12			jz	 $L001463
 00001362  8B F0			mov	ESI,EAX
 00001364  8D 3E			lea	EDI,dword ptr [ESI]
 00001366  B9 00000005			mov	ECX,000000005h 
 0000136B  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001370  F3/ AB			rep stos	dword ptr [EDI]
 00001372  EB 02			jmp	 $L001464
 00001374			$L001463:
 00001374  33 F6			xor	ESI,ESI
 00001376			$L001464:
 00001376  8B CE			mov	ECX,ESI
 00001378  E8 000004DB			call	 UnitTesting_Square
 0000137D  8B C6			mov	EAX,ESI 
 0000137F  EB 55			jmp	OFFSET $L000726
				;}
 00001381  EB 4F			jmp	OFFSET $L001462

				; else {
 00001383			$L001461:

				;{283}:if(name == "Triangle")
 00001383  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001386  50				push	EAX
 00001387  8D 05 00000D80 R		lea	EAX,OFFSET $S000716
 0000138D  5F				pop	EDI
 0000138E  8B F0			mov	ESI,EAX
 00001390  50				push	EAX
 00001391  E8 00000000 E		call	 StringHandling_StringLength
 00001396  50				push	EAX 
 00001397  56				push	ESI 
 00001398  57				push	EDI 
 00001399  E8 00000000 E		call	 StringHandling_StringCompare 
 0000139E  83 F8 00			cmp	EAX,000000000h
 000013A1  0F 94 C0			setz	AL
 000013A4  84 C0			test	AL,AL
 000013A6  74 2A			jz	OFFSET $L001465
				;{

				;{285}:return new UnitTesting::Triangle()
 000013A8  6A 14			push	000000014h
 000013AA  E8 00000000 E		call	 System_Memory_New
 000013AF  85 C0			test	EAX,EAX
 000013B1  74 12			jz	 $L001467
 000013B3  8B F0			mov	ESI,EAX
 000013B5  8D 3E			lea	EDI,dword ptr [ESI]
 000013B7  B9 00000005			mov	ECX,000000005h 
 000013BC  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000013C1  F3/ AB			rep stos	dword ptr [EDI]
 000013C3  EB 02			jmp	 $L001468
 000013C5			$L001467:
 000013C5  33 F6			xor	ESI,ESI
 000013C7			$L001468:
 000013C7  8B CE			mov	ECX,ESI
 000013C9  E8 00003146			call	 UnitTesting_Triangle
 000013CE  8B C6			mov	EAX,ESI 
 000013D0  EB 04			jmp	OFFSET $L000726
				;}
 000013D2			$L001465:
 000013D2			$L001462:

				; }
 000013D2			$L001458:

				; }

				;{288}:return null
 000013D2  33 C0			xor	EAX,EAX
 000013D4  EB 00			jmp	OFFSET $L000726
				;}
 000013D6			$L000726:

 000013D6  5F				pop	EDI
 000013D7  5E				pop	ESI 
 000013D8  5B				pop	EBX 
 000013D9  C9				leave	
 000013DA  C2 0004			retn	000000004h
 000013DD			UnitTesting_ShapeFactoryCreator_Create ENDP

 000013DD			UnitTesting_SimpleObject_Destructor PROC NEAR 
				;void Destructor(void);
 000013DD  55				push	EBP
 000013DE  8B EC			mov	EBP,ESP
 000013E0  51				push	ECX 
 000013E1  53				push	EBX 
 000013E2  56				push	ESI 
 000013E3  57				push	EDI 
				;{

				;{100}:Console::WriteLn("Destroying a Simple Object...");
 000013E4  8D 05 000008E5 R		lea	EAX,OFFSET $S000789
 000013EA  6A 00			push	000000000h
 000013EC  50				push	EAX 
 000013ED  E8 00000000 E		call	 Console_WriteString
 000013F2  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000013F7			$L000788:

 000013F7  5F				pop	EDI
 000013F8  5E				pop	ESI 
 000013F9  5B				pop	EBX 
 000013FA  C9				leave	
 000013FB  C3				ret	
 000013FC			UnitTesting_SimpleObject_Destructor ENDP

 000013FC			UnitTesting_SimpleObject PROC NEAR 
				;void UnitTesting::SimpleObject(void);
 000013FC  55				push	EBP
 000013FD  8B EC			mov	EBP,ESP
 000013FF  51				push	ECX 
 00001400  53				push	EBX 
 00001401  56				push	ESI 
 00001402  57				push	EDI 
 00001403  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001406  C7 01 0000003C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_SimpleObject 

 0000140C  5F				pop	EDI
 0000140D  5E				pop	ESI 
 0000140E  5B				pop	EBX 
 0000140F  C9				leave	
 00001410  C3				ret	
 00001411			UnitTesting_SimpleObject ENDP

 00001411			UnitTesting_SortDoubleProxy_PrintObject PROC NEAR 
				;void PrintObject(UnitTesting::SimpleObject ref obj);
 00001411  55				push	EBP
 00001412  8B EC			mov	EBP,ESP
 00001414  83 EC 08			sub	ESP,000000008h
 00001417  53				push	EBX 
 00001418  56				push	ESI 
 00001419  57				push	EDI 
 0000141A  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 0000141D  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00001420  B9 00000001			mov	ECX,000000001h 
 00001425  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000142A  F3/ AB			rep stos	dword ptr [EDI]
 0000142C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{250}:dbl= dynamic_cast(&obj);
 0000142F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001432  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00001435  89 03			mov	dword ptr [EBX],EAX

				;{252}:Console::WriteLn("A double proxy = ", dbl.val);
 00001437  8D 05 00000769 R		lea	EAX,OFFSET $S000874
 0000143D  6A 00			push	000000000h
 0000143F  50				push	EAX 
 00001440  E8 00000000 E		call	 Console_WriteString
 00001445  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00001448  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000144B  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000144E  50				push	EAX 
 0000144F  52				push	EDX 
 00001450  E8 00000000 E		call	 Console_WriteDouble 
 00001455  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000145A			$L000871:

 0000145A  5F				pop	EDI
 0000145B  5E				pop	ESI 
 0000145C  5B				pop	EBX 
 0000145D  C9				leave	
 0000145E  C2 0004			retn	000000004h
 00001461			UnitTesting_SortDoubleProxy_PrintObject ENDP

 00001461			UnitTesting_SortDoubleProxy_Sort PROC NEAR 
				;void Sort(UnitTesting::DoubleProxy UnitTesting::DoubleProxy [] array, int n, UnitTesting::SwapperObject ref swapper);
 00001461  55				push	EBP
 00001462  8B EC			mov	EBP,ESP
 00001464  83 EC 0C			sub	ESP,00000000Ch
 00001467  53				push	EBX 
 00001468  56				push	ESI 
 00001469  57				push	EDI 
 0000146A  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 0000146D  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001470  B9 00000002			mov	ECX,000000002h 
 00001475  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000147A  F3/ AB			rep stos	dword ptr [EDI]
 0000147C  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{194}:for(index= 1; index < n; index++ )
 0000147F  B8 00000001			mov	EAX,000000001h
 00001484  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001487  EB 06			jmp	OFFSET $L001470
 00001489			$L001471:
 00001489  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000148C  FF 45 FC			inc	dword ptr [EBP-4]
 0000148F			$L001470:
 0000148F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001492  50				push	EAX
 00001493  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001496  5A				pop	EDX
 00001497  3B D0			cmp	EDX,EAX
 00001499  0F 9C C0			setl	AL
 0000149C  84 C0			test	AL,AL
 0000149E  0F 84 0000009C		jz	OFFSET $L001472
				;{

				;{196}:for(left= index - 1; left >= 0; --left)
 000014A4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014A7  50				push	EAX
 000014A8  B8 00000001			mov	EAX,000000001h
 000014AD  5A				pop	EDX
 000014AE  2B D0			sub	EDX,EAX
 000014B0  8B C2			mov	EAX,EDX
 000014B2  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000014B5  EB 06			jmp	OFFSET $L001473
 000014B7			$L001474:
 000014B7  FF 4D F8			dec	dword ptr [EBP-8]
 000014BA  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000014BD			$L001473:
 000014BD  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014C0  50				push	EAX
 000014C1  33 C0			xor	EAX,EAX
 000014C3  5A				pop	EDX
 000014C4  3B D0			cmp	EDX,EAX
 000014C6  0F 9D C0			setge	AL
 000014C9  84 C0			test	AL,AL
 000014CB  74 6E			jz	OFFSET $L001475
				;{

				;{199}:if(swapper.lessThan(array[left + 1], array[left]))
 000014CD  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000014D0  8B C3			mov	EAX,EBX 
 000014D2  50				push	EAX
 000014D3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014D6  5E				pop	ESI
 000014D7  6B C0 0C			imul	EAX,00000000Ch
 000014DA  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000014DD  51				push	ECX 
 000014DE  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000014E1  8B C3			mov	EAX,EBX 
 000014E3  50				push	EAX
 000014E4  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014E7  50				push	EAX
 000014E8  B8 00000001			mov	EAX,000000001h
 000014ED  5A				pop	EDX
 000014EE  03 C2			add	EAX,EDX
 000014F0  5E				pop	ESI
 000014F1  6B C0 0C			imul	EAX,00000000Ch
 000014F4  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000014F7  51				push	ECX
 000014F8  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 000014FB  8B 11			mov	EDX,dword ptr [ECX]
 000014FD  FF 12			call	dword ptr [EDX]
 000014FF  84 C0			test	AL,AL
 00001501  74 33			jz	OFFSET $L001476
				;{

				;{202}:swapper.Swap(array[left + 1], array[left]);
 00001503  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001506  8B C3			mov	EAX,EBX 
 00001508  50				push	EAX
 00001509  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000150C  5E				pop	ESI
 0000150D  6B C0 0C			imul	EAX,00000000Ch
 00001510  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001513  51				push	ECX 
 00001514  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001517  8B C3			mov	EAX,EBX 
 00001519  50				push	EAX
 0000151A  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000151D  50				push	EAX
 0000151E  B8 00000001			mov	EAX,000000001h
 00001523  5A				pop	EDX
 00001524  03 C2			add	EAX,EDX
 00001526  5E				pop	ESI
 00001527  6B C0 0C			imul	EAX,00000000Ch
 0000152A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000152D  51				push	ECX
 0000152E  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 00001531  8B 11			mov	EDX,dword ptr [ECX]
 00001533  FF 52 04			call	dword ptr [EDX+0004h]
				;}
 00001536			$L001476:
				;}
 00001536  E9 FFFFFF7C			jmp	OFFSET $L001474 
 0000153B			$L001475:
				;}
 0000153B  E9 FFFFFF49			jmp	OFFSET $L001471 
 00001540			$L001472:
				;}
 00001540			$L000850:

 00001540  5F				pop	EDI
 00001541  5E				pop	ESI 
 00001542  5B				pop	EBX 
 00001543  C9				leave	
 00001544  C2 000C			retn	00000000Ch
 00001547			UnitTesting_SortDoubleProxy_Sort ENDP

 00001547			UnitTesting_SortDoubleProxy_Sort2 PROC NEAR 
				;void Sort2(double double [] array, int n);
 00001547  55				push	EBP
 00001548  8B EC			mov	EBP,ESP
 0000154A  83 EC 0C			sub	ESP,00000000Ch
 0000154D  53				push	EBX 
 0000154E  56				push	ESI 
 0000154F  57				push	EDI 
 00001550  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001553  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001556  B9 00000002			mov	ECX,000000002h 
 0000155B  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001560  F3/ AB			rep stos	dword ptr [EDI]
 00001562  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{217}:for(index= 1; index < n; index++ )
 00001565  B8 00000001			mov	EAX,000000001h
 0000156A  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000156D  EB 06			jmp	OFFSET $L001478
 0000156F			$L001479:
 0000156F  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001572  FF 45 FC			inc	dword ptr [EBP-4]
 00001575			$L001478:
 00001575  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001578  50				push	EAX
 00001579  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000157C  5A				pop	EDX
 0000157D  3B D0			cmp	EDX,EAX
 0000157F  0F 9C C0			setl	AL
 00001582  84 C0			test	AL,AL
 00001584  0F 84 000000AC		jz	OFFSET $L001480
				;{

				;{219}:for(left= index - 1; left >= 0; left-- )
 0000158A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000158D  50				push	EAX
 0000158E  B8 00000001			mov	EAX,000000001h
 00001593  5A				pop	EDX
 00001594  2B D0			sub	EDX,EAX
 00001596  8B C2			mov	EAX,EDX
 00001598  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 0000159B  EB 06			jmp	OFFSET $L001481
 0000159D			$L001482:
 0000159D  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000015A0  FF 4D F8			dec	dword ptr [EBP-8]
 000015A3			$L001481:
 000015A3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015A6  50				push	EAX
 000015A7  33 C0			xor	EAX,EAX
 000015A9  5A				pop	EDX
 000015AA  3B D0			cmp	EDX,EAX
 000015AC  0F 9D C0			setge	AL
 000015AF  84 C0			test	AL,AL
 000015B1  74 7E			jz	OFFSET $L001483
				;{

				;{221}:if(array[left + 1] < array[left])
 000015B3  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015B6  8B C3			mov	EAX,EBX 
 000015B8  50				push	EAX
 000015B9  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015BC  50				push	EAX
 000015BD  B8 00000001			mov	EAX,000000001h
 000015C2  5A				pop	EDX
 000015C3  03 C2			add	EAX,EDX
 000015C5  5E				pop	ESI
 000015C6  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000015C9  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000015D0  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000015D3  50				push	EAX
 000015D4  52				push	EDX 
 000015D5  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015D8  8B C3			mov	EAX,EBX 
 000015DA  50				push	EAX
 000015DB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015DE  5E				pop	ESI
 000015DF  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000015E2  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000015E9  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000015EC  50				push	EAX
 000015ED  52				push	EDX 
 000015EE  E8 00000000 E		call	 FloatingPoint_Compare
 000015F3  83 F8 00			cmp	EAX,000000000h
 000015F6  F7 D8			neg	EAX
 000015F8  0F 9C C0			setl	AL
 000015FB  84 C0			test	AL,AL
 000015FD  74 2D			jz	OFFSET $L001484
				;{

				;{228}:Swap(array[left + 1], array[left]);
 000015FF  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001602  8B C3			mov	EAX,EBX 
 00001604  50				push	EAX
 00001605  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001608  5E				pop	ESI
 00001609  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 0000160C  50				push	EAX 
 0000160D  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001610  8B C3			mov	EAX,EBX 
 00001612  50				push	EAX
 00001613  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001616  50				push	EAX
 00001617  B8 00000001			mov	EAX,000000001h
 0000161C  5A				pop	EDX
 0000161D  03 C2			add	EAX,EDX
 0000161F  5E				pop	ESI
 00001620  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001623  50				push	EAX
 00001624  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 00001627  E8 000000C9			call	 UnitTesting_SortDoubleProxy_Swap
				;}
 0000162C			$L001484:
				;}
 0000162C  E9 FFFFFF6C			jmp	OFFSET $L001482 
 00001631			$L001483:
				;}
 00001631  E9 FFFFFF39			jmp	OFFSET $L001479 
 00001636			$L001480:
				;}
 00001636			$L000860:

 00001636  5F				pop	EDI
 00001637  5E				pop	ESI 
 00001638  5B				pop	EBX 
 00001639  C9				leave	
 0000163A  C2 0008			retn	000000008h
 0000163D			UnitTesting_SortDoubleProxy_Sort2 ENDP

 0000163D			UnitTesting_SortDoubleProxy_SortEx PROC NEAR 
				;void SortEx(UnitTesting::SimpleObject UnitTesting::SimpleObject [] array, int n, UnitTesting::SwapperObject ref swapper);
 0000163D  55				push	EBP
 0000163E  8B EC			mov	EBP,ESP
 00001640  83 EC 0C			sub	ESP,00000000Ch
 00001643  53				push	EBX 
 00001644  56				push	ESI 
 00001645  57				push	EDI 
 00001646  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001649  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 0000164C  B9 00000002			mov	ECX,000000002h 
 00001651  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001656  F3/ AB			rep stos	dword ptr [EDI]
 00001658  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{236}:for(index= 1; index < n; index++ )
 0000165B  B8 00000001			mov	EAX,000000001h
 00001660  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001663  EB 06			jmp	OFFSET $L001486
 00001665			$L001487:
 00001665  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001668  FF 45 FC			inc	dword ptr [EBP-4]
 0000166B			$L001486:
 0000166B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000166E  50				push	EAX
 0000166F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001672  5A				pop	EDX
 00001673  3B D0			cmp	EDX,EAX
 00001675  0F 9C C0			setl	AL
 00001678  84 C0			test	AL,AL
 0000167A  74 72			jz	OFFSET $L001488
				;{

				;{238}:for(left= index - 1; left >= 0; --left)
 0000167C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000167F  50				push	EAX
 00001680  B8 00000001			mov	EAX,000000001h
 00001685  5A				pop	EDX
 00001686  2B D0			sub	EDX,EAX
 00001688  8B C2			mov	EAX,EDX
 0000168A  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 0000168D  EB 06			jmp	OFFSET $L001489
 0000168F			$L001490:
 0000168F  FF 4D F8			dec	dword ptr [EBP-8]
 00001692  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001695			$L001489:
 00001695  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001698  50				push	EAX
 00001699  33 C0			xor	EAX,EAX
 0000169B  5A				pop	EDX
 0000169C  3B D0			cmp	EDX,EAX
 0000169E  0F 9D C0			setge	AL
 000016A1  84 C0			test	AL,AL
 000016A3  74 44			jz	OFFSET $L001491
				;{

				;{240}:if(swapper.lessThanEx(array, left + 1, left))
 000016A5  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016A8  50				push	EAX 
 000016A9  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016AC  50				push	EAX
 000016AD  B8 00000001			mov	EAX,000000001h
 000016B2  5A				pop	EDX
 000016B3  03 C2			add	EAX,EDX
 000016B5  50				push	EAX 
 000016B6  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000016B9  8B C3			mov	EAX,EBX 
 000016BB  50				push	EAX
 000016BC  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 000016BF  8B 11			mov	EDX,dword ptr [ECX]
 000016C1  FF 52 08			call	dword ptr [EDX+0008h]
 000016C4  84 C0			test	AL,AL
 000016C6  74 1F			jz	OFFSET $L001492
				;{

				;{242}:swapper.SwapEx(array, left + 1, left);
 000016C8  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016CB  50				push	EAX 
 000016CC  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016CF  50				push	EAX
 000016D0  B8 00000001			mov	EAX,000000001h
 000016D5  5A				pop	EDX
 000016D6  03 C2			add	EAX,EDX
 000016D8  50				push	EAX 
 000016D9  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000016DC  8B C3			mov	EAX,EBX 
 000016DE  50				push	EAX
 000016DF  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 000016E2  8B 11			mov	EDX,dword ptr [ECX]
 000016E4  FF 52 0C			call	dword ptr [EDX+000Ch]
				;}
 000016E7			$L001492:
				;}
 000016E7  EB A6			jmp	OFFSET $L001490 
 000016E9			$L001491:
				;}
 000016E9  E9 FFFFFF77			jmp	OFFSET $L001487 
 000016EE			$L001488:
				;}
 000016EE			$L000865:

 000016EE  5F				pop	EDI
 000016EF  5E				pop	ESI 
 000016F0  5B				pop	EBX 
 000016F1  C9				leave	
 000016F2  C2 000C			retn	00000000Ch
 000016F5			UnitTesting_SortDoubleProxy_SortEx ENDP

 000016F5			UnitTesting_SortDoubleProxy_Swap PROC NEAR 
				;void Swap(double ref val1, double ref val2);
 000016F5  55				push	EBP
 000016F6  8B EC			mov	EBP,ESP
 000016F8  83 EC 0C			sub	ESP,00000000Ch
 000016FB  53				push	EBX 
 000016FC  56				push	ESI 
 000016FD  57				push	EDI 
 000016FE  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001701  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001704  B9 00000002			mov	ECX,000000002h 
 00001709  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000170E  F3/ AB			rep stos	dword ptr [EDI]
 00001710  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{210}:tmp= val1;
 00001713  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001716  8B C3			mov	EAX,EBX 
 00001718  8B 43 04			mov	EAX,dword ptr [EBX+4]
 0000171B  8B 13			mov	EDX,dword ptr [EBX] 
 0000171D  50				push	EAX
 0000171E  52				push	EDX 
 0000171F  DD C0			ffree	st
 00001721  DD 04 24			fld	qword ptr [ESP]
 00001724  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{211}:val1= val2;
 00001727  5A				pop	EDX
 00001728  58				pop	EAX 
 00001729  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000172C  8B C3			mov	EAX,EBX 
 0000172E  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00001731  8B 13			mov	EDX,dword ptr [EBX] 
 00001733  50				push	EAX
 00001734  52				push	EDX 
 00001735  DD C0			ffree	st
 00001737  DD 04 24			fld	qword ptr [ESP]
 0000173A  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000173D  DD 1B			fstp	qword ptr [EBX]

				;{212}:val2= tmp;
 0000173F  5A				pop	EDX
 00001740  58				pop	EAX 
 00001741  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001744  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001747  50				push	EAX
 00001748  52				push	EDX 
 00001749  DD C0			ffree	st
 0000174B  DD 04 24			fld	qword ptr [ESP]
 0000174E  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001751  DD 1B			fstp	qword ptr [EBX]
				;}
 00001753			$L000856:
 00001753  5A				pop	EDX
 00001754  58				pop	EAX 

 00001755  5F				pop	EDI
 00001756  5E				pop	ESI 
 00001757  5B				pop	EBX 
 00001758  C9				leave	
 00001759  C2 0008			retn	000000008h
 0000175C			UnitTesting_SortDoubleProxy_Swap ENDP

 0000175C			UnitTesting_Square_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 0000175C  55				push	EBP
 0000175D  8B EC			mov	EBP,ESP
 0000175F  51				push	ECX 
 00001760  53				push	EBX 
 00001761  56				push	ESI 
 00001762  57				push	EDI 
				;{

				;{149}:return Width * Height
 00001763  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001766  E8 00000112			call	 UnitTesting_Square_get_Width
 0000176B  50				push	EAX
 0000176C  52				push	EDX 
 0000176D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001770  E8 00000082			call	 UnitTesting_Square_get_Height
 00001775  9B DB E2			fclex
 00001778  50				push	EAX
 00001779  52				push	EDX 
 0000177A  DD 04 24			fld	qword ptr [ESP]
 0000177D  59				pop	ECX
 0000177E  59				pop	ECX 
 0000177F  DC 0C 24			fmul	qword ptr [ESP]
 00001782  DD 1C 24			fstp	qword ptr [ESP]
 00001785  5A				pop	EDX
 00001786  58				pop	EAX 
 00001787  EB 00			jmp	OFFSET $L000693
				;}
 00001789			$L000693:

 00001789  5F				pop	EDI
 0000178A  5E				pop	ESI 
 0000178B  5B				pop	EBX 
 0000178C  C9				leave	
 0000178D  C3				ret	
 0000178E			UnitTesting_Square_ComputeArea ENDP

 0000178E			UnitTesting_Square_Destructor PROC NEAR 
				;void Destructor(void);
 0000178E  55				push	EBP
 0000178F  8B EC			mov	EBP,ESP
 00001791  51				push	ECX 
 00001792  53				push	EBX 
 00001793  56				push	ESI 
 00001794  57				push	EDI 
				;{

				;{122}:System::Debug::OutputString("destroying a Square object...");
 00001795  8D 05 00000ED3 R		lea	EAX,OFFSET $S000684
 0000179B  50				push	EAX
 0000179C  E8 00000000 E		call	 System_Debug_OutputString

				;{123}:Console::WriteLn("destroying a Square object...");
 000017A1  8D 05 00000ED3 R		lea	EAX,OFFSET $S000684
 000017A7  6A 00			push	000000000h
 000017A9  50				push	EAX 
 000017AA  E8 00000000 E		call	 Console_WriteString
 000017AF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000017B4			$L000683:

 000017B4  5F				pop	EDI
 000017B5  5E				pop	ESI 
 000017B6  5B				pop	EBX 
 000017B7  C9				leave	
 000017B8  C3				ret	
 000017B9			UnitTesting_Square_Destructor ENDP

 000017B9			UnitTesting_Square_Draw PROC NEAR 
				;void Draw(void);
 000017B9  55				push	EBP
 000017BA  8B EC			mov	EBP,ESP
 000017BC  51				push	ECX 
 000017BD  53				push	EBX 
 000017BE  56				push	ESI 
 000017BF  57				push	EDI 
				;{

				;{162}:Console::WriteLn("Drawing a Square!");
 000017C0  8D 05 0000099E R		lea	EAX,OFFSET $S000698
 000017C6  6A 00			push	000000000h
 000017C8  50				push	EAX 
 000017C9  E8 00000000 E		call	 Console_WriteString
 000017CE  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000017D3			$L000697:

 000017D3  5F				pop	EDI
 000017D4  5E				pop	ESI 
 000017D5  5B				pop	EBX 
 000017D6  C9				leave	
 000017D7  C3				ret	
 000017D8			UnitTesting_Square_Draw ENDP

 000017D8			UnitTesting_Square_DrawCube PROC NEAR 
				;void DrawCube(void);
 000017D8  55				push	EBP
 000017D9  8B EC			mov	EBP,ESP
 000017DB  51				push	ECX 
 000017DC  53				push	EBX 
 000017DD  56				push	ESI 
 000017DE  57				push	EDI 
				;{

				;{167}:Console::WriteLn("Drawing a Cube!");
 000017DF  8D 05 00000969 R		lea	EAX,OFFSET $S000700
 000017E5  6A 00			push	000000000h
 000017E7  50				push	EAX 
 000017E8  E8 00000000 E		call	 Console_WriteString
 000017ED  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000017F2			$L000699:

 000017F2  5F				pop	EDI
 000017F3  5E				pop	ESI 
 000017F4  5B				pop	EBX 
 000017F5  C9				leave	
 000017F6  C3				ret	
 000017F7			UnitTesting_Square_DrawCube ENDP

 000017F7			UnitTesting_Square_get_Height PROC NEAR 
				;double get::Height(void);
 000017F7  55				push	EBP
 000017F8  8B EC			mov	EBP,ESP
 000017FA  51				push	ECX 
 000017FB  53				push	EBX 
 000017FC  56				push	ESI 
 000017FD  57				push	EDI 
				;{

				;{139}:return dHeight
 000017FE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001801  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00001804  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00001807  EB 00			jmp	OFFSET $L000690
				;}
 00001809			$L000690:

 00001809  5F				pop	EDI
 0000180A  5E				pop	ESI 
 0000180B  5B				pop	EBX 
 0000180C  C9				leave	
 0000180D  C3				ret	
 0000180E			UnitTesting_Square_get_Height ENDP

 0000180E			UnitTesting_Square_put_Height PROC NEAR 
				;void put::Height(double value);
 0000180E  55				push	EBP
 0000180F  8B EC			mov	EBP,ESP
 00001811  51				push	ECX 
 00001812  53				push	EBX 
 00001813  56				push	ESI 
 00001814  57				push	EDI 
				;{

				;{144}:dHeight= value;
 00001815  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00001818  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000181B  50				push	EAX
 0000181C  52				push	EDX 
 0000181D  DD C0			ffree	st
 0000181F  DD 04 24			fld	qword ptr [ESP]
 00001822  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001825  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 00001828			$L000691:
 00001828  5A				pop	EDX
 00001829  58				pop	EAX 

 0000182A  5F				pop	EDI
 0000182B  5E				pop	ESI 
 0000182C  5B				pop	EBX 
 0000182D  C9				leave	
 0000182E  C2 0008			retn	000000008h
 00001831			UnitTesting_Square_put_Height ENDP

 00001831			UnitTesting_Square_Name PROC NEAR 
				;string Name(void);
 00001831  55				push	EBP
 00001832  8B EC			mov	EBP,ESP
 00001834  51				push	ECX 
 00001835  53				push	EBX 
 00001836  56				push	ESI 
 00001837  57				push	EDI 
				;{

				;{157}:return "Square"
 00001838  8D 05 00000BE2 R		lea	EAX,OFFSET $S000696
 0000183E  EB 00			jmp	OFFSET $L000695
				;}
 00001840			$L000695:

 00001840  5F				pop	EDI
 00001841  5E				pop	ESI 
 00001842  5B				pop	EBX 
 00001843  C9				leave	
 00001844  C3				ret	
 00001845			UnitTesting_Square_Name ENDP

 00001845			UnitTesting_Square_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00001845  55				push	EBP
 00001846  8B EC			mov	EBP,ESP
 00001848  51				push	ECX 
 00001849  53				push	EBX 
 0000184A  56				push	ESI 
 0000184B  57				push	EDI 
				;{

				;{153}:return UnitTesting::stSquare
 0000184C  B8 00000002			mov	EAX,000000002h
 00001851  EB 00			jmp	OFFSET $L000694
				;}
 00001853			$L000694:

 00001853  5F				pop	EDI
 00001854  5E				pop	ESI 
 00001855  5B				pop	EBX 
 00001856  C9				leave	
 00001857  C3				ret	
 00001858			UnitTesting_Square_Type ENDP

 00001858			UnitTesting_Square PROC NEAR 
				;void UnitTesting::Square(void);
 00001858  55				push	EBP
 00001859  8B EC			mov	EBP,ESP
 0000185B  51				push	ECX 
 0000185C  53				push	EBX 
 0000185D  56				push	ESI 
 0000185E  57				push	EDI 
 0000185F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001862  E8 FFFFF990			call	 UnitTesting_Shape ;base constructor call
 00001867  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000186A  C7 01 00000090 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Square 
 00001870  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001873  E8 00002EE1			call	 __member_Init@UnitTesting_Square 
				;{
				;}

 00001878  5F				pop	EDI
 00001879  5E				pop	ESI 
 0000187A  5B				pop	EBX 
 0000187B  C9				leave	
 0000187C  C3				ret	
 0000187D			UnitTesting_Square ENDP

 0000187D			UnitTesting_Square_get_Width PROC NEAR 
				;double get::Width(void);
 0000187D  55				push	EBP
 0000187E  8B EC			mov	EBP,ESP
 00001880  51				push	ECX 
 00001881  53				push	EBX 
 00001882  56				push	ESI 
 00001883  57				push	EDI 
				;{

				;{129}:return dWidth
 00001884  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001887  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000188A  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000188D  EB 00			jmp	OFFSET $L000686
				;}
 0000188F			$L000686:

 0000188F  5F				pop	EDI
 00001890  5E				pop	ESI 
 00001891  5B				pop	EBX 
 00001892  C9				leave	
 00001893  C3				ret	
 00001894			UnitTesting_Square_get_Width ENDP

 00001894			UnitTesting_Square_put_Width PROC NEAR 
				;void put::Width(double value);
 00001894  55				push	EBP
 00001895  8B EC			mov	EBP,ESP
 00001897  51				push	ECX 
 00001898  53				push	EBX 
 00001899  56				push	ESI 
 0000189A  57				push	EDI 
				;{

				;{134}:dWidth= value;
 0000189B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000189E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000018A1  50				push	EAX
 000018A2  52				push	EDX 
 000018A3  DD C0			ffree	st
 000018A5  DD 04 24			fld	qword ptr [ESP]
 000018A8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000018AB  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 000018AE			$L000687:
 000018AE  5A				pop	EDX
 000018AF  58				pop	EAX 

 000018B0  5F				pop	EDI
 000018B1  5E				pop	ESI 
 000018B2  5B				pop	EBX 
 000018B3  C9				leave	
 000018B4  C2 0008			retn	000000008h
 000018B7			UnitTesting_Square_put_Width ENDP

 000018B7			UnitTesting_SummationSeries_Ackermman PROC NEAR 
				;int UnitTesting::SummationSeries::Ackermman(int m, int n);
 000018B7  55				push	EBP
 000018B8  8B EC			mov	EBP,ESP
 000018BA  51				push	ECX 
 000018BB  53				push	EBX 
 000018BC  56				push	ESI 
 000018BD  57				push	EDI 
				;{

				;{80}:if(m == 0 && n >= 0)
 000018BE  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000018C1  50				push	EAX
 000018C2  33 C0			xor	EAX,EAX
 000018C4  5A				pop	EDX
 000018C5  3B D0			cmp	EDX,EAX
 000018C7  0F 94 C0			setz	AL
 000018CA  84 C0			test	AL,AL
 000018CC  74 0C			jz	OFFSET $L001496
 000018CE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000018D1  50				push	EAX
 000018D2  33 C0			xor	EAX,EAX
 000018D4  5A				pop	EDX
 000018D5  3B D0			cmp	EDX,EAX
 000018D7  0F 9D C0			setge	AL
 000018DA			$L001496:
 000018DA  84 C0			test	AL,AL
 000018DC  74 0E			jz	OFFSET $L001494

				;{81}:return n + 1
 000018DE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000018E1  50				push	EAX
 000018E2  B8 00000001			mov	EAX,000000001h
 000018E7  5A				pop	EDX
 000018E8  03 C2			add	EAX,EDX
 000018EA  EB 6E			jmp	OFFSET $L000617

				; else {
 000018EC			$L001494:

				;{82}:if(m >= 1 && n == 0)
 000018EC  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000018EF  50				push	EAX
 000018F0  B8 00000001			mov	EAX,000000001h
 000018F5  5A				pop	EDX
 000018F6  3B D0			cmp	EDX,EAX
 000018F8  0F 9D C0			setge	AL
 000018FB  84 C0			test	AL,AL
 000018FD  74 0C			jz	OFFSET $L001499
 000018FF  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001902  50				push	EAX
 00001903  33 C0			xor	EAX,EAX
 00001905  5A				pop	EDX
 00001906  3B D0			cmp	EDX,EAX
 00001908  0F 94 C0			setz	AL
 0000190B			$L001499:
 0000190B  84 C0			test	AL,AL
 0000190D  74 1C			jz	OFFSET $L001497

				;{83}:return UnitTesting::SummationSeries::Ackermman(m - 1, 1)
 0000190F  B8 00000001			mov	EAX,000000001h
 00001914  50				push	EAX 
 00001915  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001918  50				push	EAX
 00001919  B8 00000001			mov	EAX,000000001h
 0000191E  5A				pop	EDX
 0000191F  2B D0			sub	EDX,EAX
 00001921  8B C2			mov	EAX,EDX
 00001923  50				push	EAX
 00001924  E8 FFFFFF8E			call	 UnitTesting_SummationSeries_Ackermman
 00001929  EB 2F			jmp	OFFSET $L000617

				; else {
 0000192B			$L001497:

				;{85}:return UnitTesting::SummationSeries::Ackermman(m - 1, UnitTesting::SummationSeries::Ackermman(m, n - 1))
 0000192B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000192E  50				push	EAX
 0000192F  B8 00000001			mov	EAX,000000001h
 00001934  5A				pop	EDX
 00001935  2B D0			sub	EDX,EAX
 00001937  8B C2			mov	EAX,EDX
 00001939  50				push	EAX 
 0000193A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000193D  50				push	EAX
 0000193E  E8 FFFFFF74			call	 UnitTesting_SummationSeries_Ackermman
 00001943  50				push	EAX 
 00001944  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001947  50				push	EAX
 00001948  B8 00000001			mov	EAX,000000001h
 0000194D  5A				pop	EDX
 0000194E  2B D0			sub	EDX,EAX
 00001950  8B C2			mov	EAX,EDX
 00001952  50				push	EAX
 00001953  E8 FFFFFF5F			call	 UnitTesting_SummationSeries_Ackermman
 00001958  EB 00			jmp	OFFSET $L000617
 0000195A			$L001498:

				; }
 0000195A			$L001495:

				; }
				;}
 0000195A			$L000617:

 0000195A  5F				pop	EDI
 0000195B  5E				pop	ESI 
 0000195C  5B				pop	EBX 
 0000195D  C9				leave	
 0000195E  C2 0008			retn	000000008h
 00001961			UnitTesting_SummationSeries_Ackermman ENDP

 00001961			UnitTesting_SummationSeries_ComputeRenderGamma PROC NEAR 
				;void UnitTesting::SummationSeries::ComputeRenderGamma(void);
 00001961  55				push	EBP
 00001962  8B EC			mov	EBP,ESP
 00001964  83 EC 10			sub	ESP,000000010h
 00001967  53				push	EBX 
 00001968  56				push	ESI 
 00001969  57				push	EDI 
 0000196A  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 0000196D  B9 00000003			mov	ECX,000000003h
 00001972  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001977  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{69}:result= 0;
 00001979  33 C0			xor	EAX,EAX
 0000197B  50				push	EAX
 0000197C  DB 04 24			fild	dword ptr [ESP]
 0000197F  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{70}:for(i= 1; i <= 50; ++i)
 00001982  58				pop	EAX
 00001983  B8 00000001			mov	EAX,000000001h
 00001988  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 0000198B  EB 06			jmp	OFFSET $L001500
 0000198D			$L001501:
 0000198D  FF 45 F4			inc	dword ptr [EBP-12]
 00001990  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00001993			$L001500:
 00001993  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001996  50				push	EAX
 00001997  B8 00000032			mov	EAX,000000032h
 0000199C  5A				pop	EDX
 0000199D  3B D0			cmp	EDX,EAX
 0000199F  0F 9E C0			setle	AL
 000019A2  84 C0			test	AL,AL
 000019A4  0F 84 00000092		jz	OFFSET $L001502
				;{

				;{71}:result+= 1.0 / i - Math::log10((i + 1.0) / i);
 000019AA  D9 E8			fld1
 000019AC  51				push	ECX
 000019AD  51				push	ECX 
 000019AE  DD 1C 24			fstp	qword ptr [ESP]
 000019B1  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019B4  9B DB E2			fclex
 000019B7  50				push	EAX
 000019B8  E8 00000000 E		call	 FloatingPoint_FromInt
 000019BD  50				push	EAX
 000019BE  52				push	EDX 
 000019BF  DD 04 24			fld	qword ptr [ESP]
 000019C2  59				pop	ECX
 000019C3  59				pop	ECX 
 000019C4  DC 3C 24			fdivr	qword ptr [ESP]
 000019C7  DD 1C 24			fstp	qword ptr [ESP]
 000019CA  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019CD  50				push	EAX
 000019CE  D9 E8			fld1
 000019D0  E8 00000000 E		call	 FloatingPoint_FromInt
 000019D5  50				push	EAX
 000019D6  52				push	EDX 
 000019D7  DC 04 24			fadd	qword ptr [ESP]
 000019DA  DD 1C 24			fstp	qword ptr [ESP]
 000019DD  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019E0  9B DB E2			fclex
 000019E3  50				push	EAX
 000019E4  E8 00000000 E		call	 FloatingPoint_FromInt
 000019E9  50				push	EAX
 000019EA  52				push	EDX 
 000019EB  DD 04 24			fld	qword ptr [ESP]
 000019EE  59				pop	ECX
 000019EF  59				pop	ECX 
 000019F0  DC 3C 24			fdivr	qword ptr [ESP]
 000019F3  DD 1C 24			fstp	qword ptr [ESP]
 000019F6  E8 00000000 E		call	 Math_log10
 000019FB  50				push	EAX
 000019FC  52				push	EDX 
 000019FD  DD 04 24			fld	qword ptr [ESP]
 00001A00  59				pop	ECX
 00001A01  59				pop	ECX 
 00001A02  DD 04 24			fld	qword ptr [ESP]
 00001A05  D8 E1			fsub	st,st(1)
 00001A07  DD 1C 24			fstp	qword ptr [ESP]
 00001A0A  F8				clc	
 00001A0B  DD 04 24			fld	qword ptr [ESP]
 00001A0E  5A				pop	EDX
 00001A0F  58				pop	EAX 
 00001A10  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00001A13  DC 03			fadd	qword ptr [EBX]
 00001A15  DD 1B			fstp	qword ptr [EBX]

				;{72}:Console::WriteLn("Partial results = ", result);
 00001A17  8D 05 00000B6A R		lea	EAX,OFFSET $S000615
 00001A1D  6A 00			push	000000000h
 00001A1F  50				push	EAX 
 00001A20  E8 00000000 E		call	 Console_WriteString
 00001A25  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001A28  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001A2B  50				push	EAX 
 00001A2C  52				push	EDX 
 00001A2D  E8 00000000 E		call	 Console_WriteDouble 
 00001A32  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001A37  E9 FFFFFF51			jmp	OFFSET $L001501 
 00001A3C			$L001502:

				;{75}:Console::WriteLn("Gamma y = ", result);
 00001A3C  8D 05 000009D2 R		lea	EAX,OFFSET $S000616
 00001A42  6A 00			push	000000000h
 00001A44  50				push	EAX 
 00001A45  E8 00000000 E		call	 Console_WriteString
 00001A4A  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001A4D  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001A50  50				push	EAX 
 00001A51  52				push	EDX 
 00001A52  E8 00000000 E		call	 Console_WriteDouble 
 00001A57  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001A5C			$L000610:

 00001A5C  5F				pop	EDI
 00001A5D  5E				pop	ESI 
 00001A5E  5B				pop	EBX 
 00001A5F  C9				leave	
 00001A60  C3				ret	
 00001A61			UnitTesting_SummationSeries_ComputeRenderGamma ENDP

 00001A61			UnitTesting_SummationSeries_GeometricSeriesClosedSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesClosedSum(int x, unsigned n);
 00001A61  55				push	EBP
 00001A62  8B EC			mov	EBP,ESP
 00001A64  51				push	ECX 
 00001A65  53				push	EBX 
 00001A66  56				push	ESI 
 00001A67  57				push	EDI 
				;{

				;{62}:return FloatingPoint::ToInt((Math::Pow(x, n + 1) - 1) / (x - 1))
 00001A68  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001A6B  50				push	EAX
 00001A6C  B8 00000001			mov	EAX,000000001h
 00001A71  5A				pop	EDX
 00001A72  03 C2			add	EAX,EDX
 00001A74  50				push	EAX 
 00001A75  E8 00000000 E		call	 FloatingPoint_FromInt
 00001A7A  50				push	EAX
 00001A7B  52				push	EDX 
 00001A7C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001A7F  50				push	EAX
 00001A80  E8 00000000 E		call	 FloatingPoint_FromInt
 00001A85  50				push	EAX
 00001A86  52				push	EDX 
 00001A87  E8 00000000 E		call	 Math_Pow
 00001A8C  50				push	EAX
 00001A8D  52				push	EDX 
 00001A8E  B8 00000001			mov	EAX,000000001h
 00001A93  50				push	EAX
 00001A94  E8 00000000 E		call	 FloatingPoint_FromInt
 00001A99  50				push	EAX
 00001A9A  52				push	EDX 
 00001A9B  DD 04 24			fld	qword ptr [ESP]
 00001A9E  59				pop	ECX
 00001A9F  59				pop	ECX 
 00001AA0  DD 04 24			fld	qword ptr [ESP]
 00001AA3  D8 E1			fsub	st,st(1)
 00001AA5  DD 1C 24			fstp	qword ptr [ESP]
 00001AA8  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001AAB  50				push	EAX
 00001AAC  B8 00000001			mov	EAX,000000001h
 00001AB1  5A				pop	EDX
 00001AB2  2B D0			sub	EDX,EAX
 00001AB4  8B C2			mov	EAX,EDX
 00001AB6  9B DB E2			fclex
 00001AB9  50				push	EAX
 00001ABA  E8 00000000 E		call	 FloatingPoint_FromInt
 00001ABF  50				push	EAX
 00001AC0  52				push	EDX 
 00001AC1  DD 04 24			fld	qword ptr [ESP]
 00001AC4  59				pop	ECX
 00001AC5  59				pop	ECX 
 00001AC6  DC 3C 24			fdivr	qword ptr [ESP]
 00001AC9  DD 1C 24			fstp	qword ptr [ESP]
 00001ACC  E8 00000000 E		call	 FloatingPoint_ToInt
 00001AD1  EB 00			jmp	OFFSET $L000607
				;}
 00001AD3			$L000607:

 00001AD3  5F				pop	EDI
 00001AD4  5E				pop	ESI 
 00001AD5  5B				pop	EBX 
 00001AD6  C9				leave	
 00001AD7  C2 0008			retn	000000008h
 00001ADA			UnitTesting_SummationSeries_GeometricSeriesClosedSum ENDP

 00001ADA			UnitTesting_SummationSeries_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesSum(int x, unsigned n);
 00001ADA  55				push	EBP
 00001ADB  8B EC			mov	EBP,ESP
 00001ADD  83 EC 18			sub	ESP,000000018h
 00001AE0  53				push	EBX 
 00001AE1  56				push	ESI 
 00001AE2  57				push	EDI 
 00001AE3  8D 7D EC			lea	EDI,dword ptr [EBP-0014h]
 00001AE6  B9 00000005			mov	ECX,000000005h
 00001AEB  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001AF0  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{21}:nx= FloatingPoint::ToInt(3.145464654);
 00001AF2  BA 5F5D3B4E			mov	EDX,05F5D3B4Eh
 00001AF7  B8 400929E9			mov	EAX,0400929E9h 
 00001AFC  50				push	EAX
 00001AFD  52				push	EDX 
 00001AFE  E8 00000000 E		call	 FloatingPoint_ToInt
 00001B03  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{23}:sum= 0;
 00001B06  33 C0			xor	EAX,EAX
 00001B08  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{24}:for(i= 0; i <= n; ++i)
 00001B0B  33 C0			xor	EAX,EAX
 00001B0D  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00001B10  EB 06			jmp	OFFSET $L001503
 00001B12			$L001504:
 00001B12  FF 45 F4			inc	dword ptr [EBP-12]
 00001B15  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00001B18			$L001503:
 00001B18  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001B1B  50				push	EAX
 00001B1C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B1F  5A				pop	EDX
 00001B20  3B D0			cmp	EDX,EAX
 00001B22  0F 9E C0			setle	AL
 00001B25  84 C0			test	AL,AL
 00001B27  74 3B			jz	OFFSET $L001505
				;{

				;{26}:prod= 1;
 00001B29  B8 00000001			mov	EAX,000000001h
 00001B2E  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{27}:for(j= 0; j < i; ++j)
 00001B31  33 C0			xor	EAX,EAX
 00001B33  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 00001B36  EB 06			jmp	OFFSET $L001506
 00001B38			$L001507:
 00001B38  FF 45 EC			inc	dword ptr [EBP-20]
 00001B3B  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00001B3E			$L001506:
 00001B3E  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001B41  50				push	EAX
 00001B42  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001B45  5A				pop	EDX
 00001B46  3B D0			cmp	EDX,EAX
 00001B48  0F 9C C0			setl	AL
 00001B4B  84 C0			test	AL,AL
 00001B4D  74 0C			jz	OFFSET $L001508

				;{28}:prod*= x;
 00001B4F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001B52  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00001B55  F7 2B			imul	dword ptr [EBX]
 00001B57  89 03			mov	dword ptr [EBX],EAX
 00001B59  EB DD			jmp	OFFSET $L001507 
 00001B5B			$L001508:

				;{29}:sum+= prod;
 00001B5B  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001B5E  F8				clc	
 00001B5F  01 45 F8			add	dword ptr [EBP-0008h],EAX
				;}
 00001B62  EB AE			jmp	OFFSET $L001504 
 00001B64			$L001505:

				;{31}:return sum
 00001B64  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001B67  EB 00			jmp	OFFSET $L000586
				;}
 00001B69			$L000586:

 00001B69  5F				pop	EDI
 00001B6A  5E				pop	ESI 
 00001B6B  5B				pop	EBX 
 00001B6C  C9				leave	
 00001B6D  C2 0008			retn	000000008h
 00001B70			UnitTesting_SummationSeries_GeometricSeriesSum ENDP

 00001B70			UnitTesting_SummationSeries_Horner_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::GeometricSeriesSum(int x, unsigned n);
 00001B70  55				push	EBP
 00001B71  8B EC			mov	EBP,ESP
 00001B73  83 EC 0C			sub	ESP,00000000Ch
 00001B76  53				push	EBX 
 00001B77  56				push	ESI 
 00001B78  57				push	EDI 
 00001B79  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001B7C  B9 00000002			mov	ECX,000000002h
 00001B81  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001B86  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{49}:sum= 0;
 00001B88  33 C0			xor	EAX,EAX
 00001B8A  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{50}:for(i= 0; i <= n; ++i)
 00001B8D  33 C0			xor	EAX,EAX
 00001B8F  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001B92  EB 06			jmp	OFFSET $L001509
 00001B94			$L001510:
 00001B94  FF 45 F8			inc	dword ptr [EBP-8]
 00001B97  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001B9A			$L001509:
 00001B9A  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001B9D  50				push	EAX
 00001B9E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BA1  5A				pop	EDX
 00001BA2  3B D0			cmp	EDX,EAX
 00001BA4  0F 9E C0			setle	AL
 00001BA7  84 C0			test	AL,AL
 00001BA9  74 1A			jz	OFFSET $L001511

				;{51}:sum= sum * x + 1;
 00001BAB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001BAE  50				push	EAX
 00001BAF  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001BB2  59				pop	ECX
 00001BB3  99				cdq	
 00001BB4  0F AF C1			imul	EAX,ECX
 00001BB7  50				push	EAX
 00001BB8  B8 00000001			mov	EAX,000000001h
 00001BBD  5A				pop	EDX
 00001BBE  03 C2			add	EAX,EDX
 00001BC0  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001BC3  EB CF			jmp	OFFSET $L001510 
 00001BC5			$L001511:

				;{53}:return sum
 00001BC5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001BC8  EB 00			jmp	OFFSET $L000602
				;}
 00001BCA			$L000602:

 00001BCA  5F				pop	EDI
 00001BCB  5E				pop	ESI 
 00001BCC  5B				pop	EBX 
 00001BCD  C9				leave	
 00001BCE  C2 0008			retn	000000008h
 00001BD1			UnitTesting_SummationSeries_Horner_GeometricSeriesSum ENDP

 00001BD1			UnitTesting_SummationSeries_Horner_Horner PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::Horner(int int [] a, unsigned n, int x);
 00001BD1  55				push	EBP
 00001BD2  8B EC			mov	EBP,ESP
 00001BD4  83 EC 0C			sub	ESP,00000000Ch
 00001BD7  53				push	EBX 
 00001BD8  56				push	ESI 
 00001BD9  57				push	EDI 
 00001BDA  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001BDD  B9 00000002			mov	ECX,000000002h
 00001BE2  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001BE7  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{39}:result= a[n];
 00001BE9  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001BEC  8B C3			mov	EAX,EBX 
 00001BEE  50				push	EAX
 00001BEF  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BF2  5E				pop	ESI
 00001BF3  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00001BF6  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{41}:for(i= n - 1; i >= 0; --i)
 00001BF9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BFC  50				push	EAX
 00001BFD  B8 00000001			mov	EAX,000000001h
 00001C02  5A				pop	EDX
 00001C03  2B D0			sub	EDX,EAX
 00001C05  8B C2			mov	EAX,EDX
 00001C07  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001C0A  EB 06			jmp	OFFSET $L001512
 00001C0C			$L001513:
 00001C0C  FF 4D F8			dec	dword ptr [EBP-8]
 00001C0F  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001C12			$L001512:
 00001C12  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C15  50				push	EAX
 00001C16  33 C0			xor	EAX,EAX
 00001C18  5A				pop	EDX
 00001C19  3B D0			cmp	EDX,EAX
 00001C1B  0F 9D C0			setge	AL
 00001C1E  84 C0			test	AL,AL
 00001C20  74 1D			jz	OFFSET $L001514

				;{42}:result*= x + a[i];
 00001C22  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001C25  50				push	EAX
 00001C26  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001C29  8B C3			mov	EAX,EBX 
 00001C2B  50				push	EAX
 00001C2C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C2F  5E				pop	ESI
 00001C30  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00001C33  5A				pop	EDX
 00001C34  03 C2			add	EAX,EDX
 00001C36  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00001C39  F7 2B			imul	dword ptr [EBX]
 00001C3B  89 03			mov	dword ptr [EBX],EAX
 00001C3D  EB CD			jmp	OFFSET $L001513 
 00001C3F			$L001514:

				;{43}:return result
 00001C3F  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001C42  EB 00			jmp	OFFSET $L000596
				;}
 00001C44			$L000596:

 00001C44  5F				pop	EDI
 00001C45  5E				pop	ESI 
 00001C46  5B				pop	EBX 
 00001C47  C9				leave	
 00001C48  C2 000C			retn	00000000Ch
 00001C4B			UnitTesting_SummationSeries_Horner_Horner ENDP

 00001C4B			UnitTesting_SummationSeries_SimpleSum PROC NEAR 
				;unsigned UnitTesting::SummationSeries::SimpleSum(unsigned n);
 00001C4B  55				push	EBP
 00001C4C  8B EC			mov	EBP,ESP
 00001C4E  83 EC 0C			sub	ESP,00000000Ch
 00001C51  53				push	EBX 
 00001C52  56				push	ESI 
 00001C53  57				push	EDI 
 00001C54  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001C57  B9 00000002			mov	ECX,000000002h
 00001C5C  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001C61  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{11}:result= 0;
 00001C63  33 C0			xor	EAX,EAX
 00001C65  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{12}:for(i= 1; i <= n; ++i)
 00001C68  B8 00000001			mov	EAX,000000001h
 00001C6D  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001C70  EB 06			jmp	OFFSET $L001515
 00001C72			$L001516:
 00001C72  FF 45 F8			inc	dword ptr [EBP-8]
 00001C75  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001C78			$L001515:
 00001C78  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C7B  50				push	EAX
 00001C7C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001C7F  5A				pop	EDX
 00001C80  3B D0			cmp	EDX,EAX
 00001C82  0F 9E C0			setle	AL
 00001C85  84 C0			test	AL,AL
 00001C87  74 09			jz	OFFSET $L001517

				;{13}:result+= i;
 00001C89  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C8C  F8				clc	
 00001C8D  01 45 FC			add	dword ptr [EBP-0004h],EAX
 00001C90  EB E0			jmp	OFFSET $L001516 
 00001C92			$L001517:

				;{15}:return result
 00001C92  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001C95  EB 00			jmp	OFFSET $L000582
				;}
 00001C97			$L000582:

 00001C97  5F				pop	EDI
 00001C98  5E				pop	ESI 
 00001C99  5B				pop	EBX 
 00001C9A  C9				leave	
 00001C9B  C2 0004			retn	000000004h
 00001C9E			UnitTesting_SummationSeries_SimpleSum ENDP

 00001C9E			UnitTesting_SwapperObject PROC NEAR 
				;void UnitTesting::SwapperObject(void);
 00001C9E  55				push	EBP
 00001C9F  8B EC			mov	EBP,ESP
 00001CA1  51				push	ECX 
 00001CA2  53				push	EBX 
 00001CA3  56				push	ESI 
 00001CA4  57				push	EDI 
 00001CA5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CA8  C7 01 0000005C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_SwapperObject 

 00001CAE  5F				pop	EDI
 00001CAF  5E				pop	ESI 
 00001CB0  5B				pop	EBX 
 00001CB1  C9				leave	
 00001CB2  C3				ret	
 00001CB3			UnitTesting_SwapperObject ENDP

 00001CB3			UnitTesting_TestArrays_get_Name PROC NEAR 
				;string get::Name(void);
 00001CB3  55				push	EBP
 00001CB4  8B EC			mov	EBP,ESP
 00001CB6  51				push	ECX 
 00001CB7  53				push	EBX 
 00001CB8  56				push	ESI 
 00001CB9  57				push	EDI 
				;{

				;{911}:return name
 00001CBA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CBD  8B 01			mov	EAX,dword ptr [ECX]
 00001CBF  EB 00			jmp	OFFSET $L001134
				;}
 00001CC1			$L001134:

 00001CC1  5F				pop	EDI
 00001CC2  5E				pop	ESI 
 00001CC3  5B				pop	EBX 
 00001CC4  C9				leave	
 00001CC5  C3				ret	
 00001CC6			UnitTesting_TestArrays_get_Name ENDP

 00001CC6			UnitTesting_TestArrays_put_Name PROC NEAR 
				;void put::Name(string value);
 00001CC6  55				push	EBP
 00001CC7  8B EC			mov	EBP,ESP
 00001CC9  51				push	ECX 
 00001CCA  53				push	EBX 
 00001CCB  56				push	ESI 
 00001CCC  57				push	EDI 
				;{

				;{915}:name= value;
 00001CCD  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001CD0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CD3  89 01			mov	dword ptr [ECX],EAX
				;}
 00001CD5			$L001135:

 00001CD5  5F				pop	EDI
 00001CD6  5E				pop	ESI 
 00001CD7  5B				pop	EBX 
 00001CD8  C9				leave	
 00001CD9  C2 0004			retn	000000004h
 00001CDC			UnitTesting_TestArrays_put_Name ENDP

 00001CDC			UnitTesting_TestArrays PROC NEAR 
				;void UnitTesting::TestArrays(void);
 00001CDC  55				push	EBP
 00001CDD  8B EC			mov	EBP,ESP
 00001CDF  51				push	ECX 
 00001CE0  53				push	EBX 
 00001CE1  56				push	ESI 
 00001CE2  57				push	EDI 

 00001CE3  5F				pop	EDI
 00001CE4  5E				pop	ESI 
 00001CE5  5B				pop	EBX 
 00001CE6  C9				leave	
 00001CE7  C3				ret	
 00001CE8			UnitTesting_TestArrays ENDP

 00001CE8			UnitTesting_TestArrays_DoTest PROC NEAR 
				;void UnitTesting::TestArrays::DoTest(void);
 00001CE8  55				push	EBP
 00001CE9  8B EC			mov	EBP,ESP
 00001CEB  81 EC 000002E0		sub	ESP,0000002E0h
 00001CF1  53				push	EBX 
 00001CF2  56				push	ESI 
 00001CF3  57				push	EDI 
 00001CF4  8D BD FFFFFD24		lea	EDI,dword ptr [EBP-02DCh]
 00001CFA  B9 000000B7			mov	ECX,0000000B7h
 00001CFF  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001D04  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{946}:array2;
 00001D06  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001D0C  8B F0			mov	ESI,EAX

				;{948}:array2[0].Width= 100;
 00001D0E  33 C0			xor	EAX,EAX
 00001D10  6B C0 30			imul	EAX,EAX,000000030h
 00001D13  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D1A  51				push	ECX
 00001D1B  B8 00000064			mov	EAX,000000064h
 00001D20  59				pop	ECX
 00001D21  50				push	EAX
 00001D22  E8 00000ED2			call	 UnitTesting_TestIntegers_put_Width

				;{949}:array2[0].Height= 200;
 00001D27  33 C0			xor	EAX,EAX
 00001D29  6B C0 30			imul	EAX,EAX,000000030h
 00001D2C  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D33  51				push	ECX
 00001D34  B8 000000C8			mov	EAX,0000000C8h
 00001D39  59				pop	ECX
 00001D3A  50				push	EAX
 00001D3B  E8 00000E24			call	 UnitTesting_TestIntegers_put_Height

				;{951}:nArea= array2[0].Width;
 00001D40  33 C0			xor	EAX,EAX
 00001D42  6B C0 30			imul	EAX,EAX,000000030h
 00001D45  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D4C  E8 00000E95			call	 UnitTesting_TestIntegers_get_Width
 00001D51  99				cdq	
 00001D52  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001D58  89 03			mov	dword ptr [EBX],EAX
 00001D5A  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{953}:nArea= array2[0].Width * array2[0].Height;
 00001D5D  33 C0			xor	EAX,EAX
 00001D5F  6B C0 30			imul	EAX,EAX,000000030h
 00001D62  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D69  E8 00000E78			call	 UnitTesting_TestIntegers_get_Width
 00001D6E  50				push	EAX
 00001D6F  33 C0			xor	EAX,EAX
 00001D71  6B C0 30			imul	EAX,EAX,000000030h
 00001D74  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D7B  E8 00000DD0			call	 UnitTesting_TestIntegers_get_Height
 00001D80  59				pop	ECX
 00001D81  99				cdq	
 00001D82  0F AF C1			imul	EAX,ECX
 00001D85  99				cdq	
 00001D86  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001D8C  89 03			mov	dword ptr [EBX],EAX
 00001D8E  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{955}:array2[0].member1= Math::pi();
 00001D91  33 C0			xor	EAX,EAX
 00001D93  6B C0 30			imul	EAX,EAX,000000030h
 00001D96  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D9D  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00001DA0  50				push	EAX
 00001DA1  E8 00000000 E		call	 Math_pi
 00001DA6  50				push	EAX
 00001DA7  52				push	EDX 
 00001DA8  DD C0			ffree	st
 00001DAA  DD 04 24			fld	qword ptr [ESP]
 00001DAD  5A				pop	EDX
 00001DAE  58				pop	EAX 
 00001DAF  5B				pop	EBX
 00001DB0  DD 1B			fstp	qword ptr [EBX]

				;{956}:array2[0].member1= Math::log_e_base2();
 00001DB2  33 C0			xor	EAX,EAX
 00001DB4  6B C0 30			imul	EAX,EAX,000000030h
 00001DB7  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001DBE  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00001DC1  50				push	EAX
 00001DC2  E8 00000000 E		call	 Math_log_e_base2
 00001DC7  50				push	EAX
 00001DC8  52				push	EDX 
 00001DC9  DD C0			ffree	st
 00001DCB  DD 04 24			fld	qword ptr [ESP]
 00001DCE  5A				pop	EDX
 00001DCF  58				pop	EAX 
 00001DD0  5B				pop	EBX
 00001DD1  DD 1B			fstp	qword ptr [EBX]

				;{958}:Console::WriteLn("(1)", "nArea = 100 * 200 == ", nArea);
 00001DD3  8D 05 000001BA R		lea	EAX,OFFSET $S001148
 00001DD9  6A 00			push	000000000h
 00001DDB  50				push	EAX 
 00001DDC  E8 00000000 E		call	 Console_WriteString
 00001DE1  8D 05 00000FDF R		lea	EAX,OFFSET $S001149
 00001DE7  6A 00			push	000000000h 
 00001DE9  50				push	EAX 
 00001DEA  E8 00000000 E		call	 Console_WriteString 
 00001DEF  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001DF5  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001DFB  52				push	EDX 
 00001DFC  50				push	EAX 
 00001DFD  E8 00000000 E		call	 Console_WriteInteger64 
 00001E02  E8 00000000 E		call	 Console_WriteCrLf 

				;{960}:array2[1].Width= 100;
 00001E07  B8 00000001			mov	EAX,000000001h
 00001E0C  6B C0 30			imul	EAX,EAX,000000030h
 00001E0F  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E16  51				push	ECX
 00001E17  B8 00000064			mov	EAX,000000064h
 00001E1C  59				pop	ECX
 00001E1D  50				push	EAX
 00001E1E  E8 00000DD6			call	 UnitTesting_TestIntegers_put_Width

				;{961}:array2[1].Height= 200;
 00001E23  B8 00000001			mov	EAX,000000001h
 00001E28  6B C0 30			imul	EAX,EAX,000000030h
 00001E2B  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E32  51				push	ECX
 00001E33  B8 000000C8			mov	EAX,0000000C8h
 00001E38  59				pop	ECX
 00001E39  50				push	EAX
 00001E3A  E8 00000D25			call	 UnitTesting_TestIntegers_put_Height

				;{963}:nArea= array2[1].Width * array2[1].Height;
 00001E3F  B8 00000001			mov	EAX,000000001h
 00001E44  6B C0 30			imul	EAX,EAX,000000030h
 00001E47  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E4E  E8 00000D93			call	 UnitTesting_TestIntegers_get_Width
 00001E53  50				push	EAX
 00001E54  B8 00000001			mov	EAX,000000001h
 00001E59  6B C0 30			imul	EAX,EAX,000000030h
 00001E5C  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E63  E8 00000CE8			call	 UnitTesting_TestIntegers_get_Height
 00001E68  59				pop	ECX
 00001E69  99				cdq	
 00001E6A  0F AF C1			imul	EAX,ECX
 00001E6D  99				cdq	
 00001E6E  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001E74  89 03			mov	dword ptr [EBX],EAX
 00001E76  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{965}:Console::WriteLn("(2)", "nArea = 100 * 200 == ", nArea);
 00001E79  8D 05 0000024A R		lea	EAX,OFFSET $S001150
 00001E7F  6A 00			push	000000000h
 00001E81  50				push	EAX 
 00001E82  E8 00000000 E		call	 Console_WriteString
 00001E87  8D 05 00000FDF R		lea	EAX,OFFSET $S001149
 00001E8D  6A 00			push	000000000h 
 00001E8F  50				push	EAX 
 00001E90  E8 00000000 E		call	 Console_WriteString 
 00001E95  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001E9B  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001EA1  52				push	EDX 
 00001EA2  50				push	EAX 
 00001EA3  E8 00000000 E		call	 Console_WriteInteger64 
 00001EA8  E8 00000000 E		call	 Console_WriteCrLf 

				;{967}:array2[2].Width= 100;
 00001EAD  B8 00000002			mov	EAX,000000002h
 00001EB2  6B C0 30			imul	EAX,EAX,000000030h
 00001EB5  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001EBC  51				push	ECX
 00001EBD  B8 00000064			mov	EAX,000000064h
 00001EC2  59				pop	ECX
 00001EC3  50				push	EAX
 00001EC4  E8 00000D30			call	 UnitTesting_TestIntegers_put_Width

				;{968}:array2[2].Height= 200;
 00001EC9  B8 00000002			mov	EAX,000000002h
 00001ECE  6B C0 30			imul	EAX,EAX,000000030h
 00001ED1  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001ED8  51				push	ECX
 00001ED9  B8 000000C8			mov	EAX,0000000C8h
 00001EDE  59				pop	ECX
 00001EDF  50				push	EAX
 00001EE0  E8 00000C7F			call	 UnitTesting_TestIntegers_put_Height

				;{970}:nArea= array2[2].Width * array2[2].Height;
 00001EE5  B8 00000002			mov	EAX,000000002h
 00001EEA  6B C0 30			imul	EAX,EAX,000000030h
 00001EED  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001EF4  E8 00000CED			call	 UnitTesting_TestIntegers_get_Width
 00001EF9  50				push	EAX
 00001EFA  B8 00000002			mov	EAX,000000002h
 00001EFF  6B C0 30			imul	EAX,EAX,000000030h
 00001F02  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F09  E8 00000C42			call	 UnitTesting_TestIntegers_get_Height
 00001F0E  59				pop	ECX
 00001F0F  99				cdq	
 00001F10  0F AF C1			imul	EAX,ECX
 00001F13  99				cdq	
 00001F14  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001F1A  89 03			mov	dword ptr [EBX],EAX
 00001F1C  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{972}:Console::WriteLn("(3)", "nArea = 100 * 200 == ", nArea);
 00001F1F  8D 05 000002DA R		lea	EAX,OFFSET $S001151
 00001F25  6A 00			push	000000000h
 00001F27  50				push	EAX 
 00001F28  E8 00000000 E		call	 Console_WriteString
 00001F2D  8D 05 00000FDF R		lea	EAX,OFFSET $S001149
 00001F33  6A 00			push	000000000h 
 00001F35  50				push	EAX 
 00001F36  E8 00000000 E		call	 Console_WriteString 
 00001F3B  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001F41  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001F47  52				push	EDX 
 00001F48  50				push	EAX 
 00001F49  E8 00000000 E		call	 Console_WriteInteger64 
 00001F4E  E8 00000000 E		call	 Console_WriteCrLf 

				;{975}:array2[3].my_array1[0]= 9.99;
 00001F53  B8 00000003			mov	EAX,000000003h
 00001F58  6B C0 30			imul	EAX,EAX,000000030h
 00001F5B  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F62  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00001F65  8B F0			mov	ESI,EAX
 00001F67  56				push	ESI
 00001F68  33 C0			xor	EAX,EAX
 00001F6A  5E				pop	ESI
 00001F6B  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001F6E  50				push	EAX
 00001F6F  BA 47AE147B			mov	EDX,047AE147Bh
 00001F74  B8 4023FAE1			mov	EAX,04023FAE1h 
 00001F79  50				push	EAX
 00001F7A  52				push	EDX 
 00001F7B  DD C0			ffree	st
 00001F7D  DD 04 24			fld	qword ptr [ESP]
 00001F80  5A				pop	EDX
 00001F81  58				pop	EAX 
 00001F82  5B				pop	EBX
 00001F83  DD 1B			fstp	qword ptr [EBX]

				;{976}:array2[3].my_array1[1]= 3.1415927;
 00001F85  B8 00000003			mov	EAX,000000003h
 00001F8A  6B C0 30			imul	EAX,EAX,000000030h
 00001F8D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F94  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00001F97  8B F0			mov	ESI,EAX
 00001F99  56				push	ESI
 00001F9A  B8 00000001			mov	EAX,000000001h
 00001F9F  5E				pop	ESI
 00001FA0  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001FA3  50				push	EAX
 00001FA4  BA 5A7ED197			mov	EDX,05A7ED197h
 00001FA9  B8 400921FB			mov	EAX,0400921FBh 
 00001FAE  50				push	EAX
 00001FAF  52				push	EDX 
 00001FB0  DD C0			ffree	st
 00001FB2  DD 04 24			fld	qword ptr [ESP]
 00001FB5  5A				pop	EDX
 00001FB6  58				pop	EAX 
 00001FB7  5B				pop	EBX
 00001FB8  DD 1B			fstp	qword ptr [EBX]

				;{977}:array2[3].my_array2[0]= FloatingPoint::ToInt(9.99);
 00001FBA  B8 00000003			mov	EAX,000000003h
 00001FBF  6B C0 30			imul	EAX,EAX,000000030h
 00001FC2  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001FC9  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 00001FCC  8B F0			mov	ESI,EAX
 00001FCE  56				push	ESI
 00001FCF  33 C0			xor	EAX,EAX
 00001FD1  5E				pop	ESI
 00001FD2  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00001FD5  50				push	EAX
 00001FD6  BA 47AE147B			mov	EDX,047AE147Bh
 00001FDB  B8 4023FAE1			mov	EAX,04023FAE1h 
 00001FE0  50				push	EAX
 00001FE1  52				push	EDX 
 00001FE2  E8 00000000 E		call	 FloatingPoint_ToInt
 00001FE7  5B				pop	EBX
 00001FE8  89 03			mov	dword ptr [EBX],EAX

				;{978}:array2[3].my_array2[1]= FloatingPoint::ToInt(3.1415927);
 00001FEA  B8 00000003			mov	EAX,000000003h
 00001FEF  6B C0 30			imul	EAX,EAX,000000030h
 00001FF2  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001FF9  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 00001FFC  8B F0			mov	ESI,EAX
 00001FFE  56				push	ESI
 00001FFF  B8 00000001			mov	EAX,000000001h
 00002004  5E				pop	ESI
 00002005  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00002008  50				push	EAX
 00002009  BA 5A7ED197			mov	EDX,05A7ED197h
 0000200E  B8 400921FB			mov	EAX,0400921FBh 
 00002013  50				push	EAX
 00002014  52				push	EDX 
 00002015  E8 00000000 E		call	 FloatingPoint_ToInt
 0000201A  5B				pop	EBX
 0000201B  89 03			mov	dword ptr [EBX],EAX

				;{980}:Console::WriteLn("array2[3].my_array1[0] (double)== 9.99 == ", array2[3].my_array1[0]);
 0000201D  8D 05 00000DD3 R		lea	EAX,OFFSET $S001154
 00002023  6A 00			push	000000000h
 00002025  50				push	EAX 
 00002026  E8 00000000 E		call	 Console_WriteString
 0000202B  B8 00000003			mov	EAX,000000003h
 00002030  6B C0 30			imul	EAX,EAX,000000030h
 00002033  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 0000203A  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 0000203D  8B F0			mov	ESI,EAX
 0000203F  56				push	ESI
 00002040  33 C0			xor	EAX,EAX
 00002042  5E				pop	ESI
 00002043  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00002046  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000204D  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00002050  50				push	EAX 
 00002051  52				push	EDX 
 00002052  E8 00000000 E		call	 Console_WriteDouble 
 00002057  E8 00000000 E		call	 Console_WriteCrLf 

				;{981}:Console::WriteLn("array2[3].my_array1[1] (double)== 3.1415927 == ", array2[3].my_array1[1]);
 0000205C  8D 05 00000DFE R		lea	EAX,OFFSET $S001155
 00002062  6A 00			push	000000000h
 00002064  50				push	EAX 
 00002065  E8 00000000 E		call	 Console_WriteString
 0000206A  B8 00000003			mov	EAX,000000003h
 0000206F  6B C0 30			imul	EAX,EAX,000000030h
 00002072  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00002079  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 0000207C  8B F0			mov	ESI,EAX
 0000207E  56				push	ESI
 0000207F  B8 00000001			mov	EAX,000000001h
 00002084  5E				pop	ESI
 00002085  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00002088  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000208F  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00002092  50				push	EAX 
 00002093  52				push	EDX 
 00002094  E8 00000000 E		call	 Console_WriteDouble 
 00002099  E8 00000000 E		call	 Console_WriteCrLf 

				;{983}:Console::WriteLn("array2[3].my_array2[0] (int)== 10 == ", array2[3].my_array2[0]);
 0000209E  8D 05 00000E2E R		lea	EAX,OFFSET $S001156
 000020A4  6A 00			push	000000000h
 000020A6  50				push	EAX 
 000020A7  E8 00000000 E		call	 Console_WriteString
 000020AC  B8 00000003			mov	EAX,000000003h
 000020B1  6B C0 30			imul	EAX,EAX,000000030h
 000020B4  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 000020BB  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 000020BE  8B F0			mov	ESI,EAX
 000020C0  56				push	ESI
 000020C1  33 C0			xor	EAX,EAX
 000020C3  5E				pop	ESI
 000020C4  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 000020C7  50				push	EAX 
 000020C8  E8 00000000 E		call	 Console_WriteInteger 
 000020CD  E8 00000000 E		call	 Console_WriteCrLf 

				;{984}:Console::WriteLn("array2[3].my_array2[1] (int)== 3 == ", array2[3].my_array2[1]);
 000020D2  8D 05 00000E54 R		lea	EAX,OFFSET $S001157
 000020D8  6A 00			push	000000000h
 000020DA  50				push	EAX 
 000020DB  E8 00000000 E		call	 Console_WriteString
 000020E0  B8 00000003			mov	EAX,000000003h
 000020E5  6B C0 30			imul	EAX,EAX,000000030h
 000020E8  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 000020EF  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 000020F2  8B F0			mov	ESI,EAX
 000020F4  56				push	ESI
 000020F5  B8 00000001			mov	EAX,000000001h
 000020FA  5E				pop	ESI
 000020FB  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 000020FE  50				push	EAX 
 000020FF  E8 00000000 E		call	 Console_WriteInteger 
 00002104  E8 00000000 E		call	 Console_WriteCrLf 

				;{987}:UnitTesting::array3;
 00002109  8D 05 0000127C R		lea	EAX, UnitTesting_array3
 0000210F  8B F0			mov	ESI,EAX
 00002111  8B DE			mov	EBX,ESI
 00002113  8B CB			mov	ECX,EBX 
 00002115  E8 FFFFE625			call	 UnitTesting_Circle
 0000211A  83 C3 0C			add	EBX,00000000Ch
 0000211D  8B CB			mov	ECX,EBX 
 0000211F  E8 FFFFE61B			call	 UnitTesting_Circle
 00002124  83 C3 0C			add	EBX,00000000Ch 
 00002127  8B CB			mov	ECX,EBX 
 00002129  E8 FFFFE611			call	 UnitTesting_Circle
 0000212E  83 C3 0C			add	EBX,00000000Ch 
 00002131  8B CB			mov	ECX,EBX 
 00002133  E8 FFFFE607			call	 UnitTesting_Circle

				;{989}:UnitTesting::array3[0].Draw();
 00002138  33 C0			xor	EAX,EAX
 0000213A  6B C0 0C			imul	EAX,00000000Ch
 0000213D  8D 88 0000127C R		lea	ECX,dword ptr [EAX+UnitTesting_array3]
 00002143  8B 11			mov	EDX,dword ptr [ECX]
 00002145  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{991}:UnitTesting::array3[2].Draw();
 00002148  B8 00000002			mov	EAX,000000002h
 0000214D  6B C0 0C			imul	EAX,00000000Ch
 00002150  8D 88 0000127C R		lea	ECX,dword ptr [EAX+UnitTesting_array3]
 00002156  8B 11			mov	EDX,dword ptr [ECX]
 00002158  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{993}:UnitTesting::array4;
 0000215B  8D 05 00001280 R		lea	EAX, UnitTesting_array4

				;{995}:UnitTesting::array4[0]= Math::pi();
 00002161  33 C0			xor	EAX,EAX
 00002163  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 0000216A  50				push	EAX
 0000216B  E8 00000000 E		call	 Math_pi
 00002170  50				push	EAX
 00002171  52				push	EDX 
 00002172  DD C0			ffree	st
 00002174  DD 04 24			fld	qword ptr [ESP]
 00002177  5A				pop	EDX
 00002178  58				pop	EAX 
 00002179  5B				pop	EBX
 0000217A  DD 1B			fstp	qword ptr [EBX]

				;{996}:UnitTesting::array4[1]= Math::pi() * 2.1;
 0000217C  B8 00000001			mov	EAX,000000001h
 00002181  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 00002188  50				push	EAX
 00002189  E8 00000000 E		call	 Math_pi
 0000218E  50				push	EAX
 0000218F  52				push	EDX 
 00002190  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 00002195  B8 4000CCCC			mov	EAX,04000CCCCh 
 0000219A  9B DB E2			fclex
 0000219D  50				push	EAX
 0000219E  52				push	EDX 
 0000219F  DD 04 24			fld	qword ptr [ESP]
 000021A2  59				pop	ECX
 000021A3  59				pop	ECX 
 000021A4  DC 0C 24			fmul	qword ptr [ESP]
 000021A7  DD 1C 24			fstp	qword ptr [ESP]
 000021AA  DD C0			ffree	st
 000021AC  DD 04 24			fld	qword ptr [ESP]
 000021AF  5A				pop	EDX
 000021B0  58				pop	EAX 
 000021B1  5B				pop	EBX
 000021B2  DD 1B			fstp	qword ptr [EBX]

				;{997}:UnitTesting::array4[2]= Math::pi() * 4.1;
 000021B4  B8 00000002			mov	EAX,000000002h
 000021B9  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 000021C0  50				push	EAX
 000021C1  E8 00000000 E		call	 Math_pi
 000021C6  50				push	EAX
 000021C7  52				push	EDX 
 000021C8  BA 66666667			mov	EDX,066666667h
 000021CD  B8 40106666			mov	EAX,040106666h 
 000021D2  9B DB E2			fclex
 000021D5  50				push	EAX
 000021D6  52				push	EDX 
 000021D7  DD 04 24			fld	qword ptr [ESP]
 000021DA  59				pop	ECX
 000021DB  59				pop	ECX 
 000021DC  DC 0C 24			fmul	qword ptr [ESP]
 000021DF  DD 1C 24			fstp	qword ptr [ESP]
 000021E2  DD C0			ffree	st
 000021E4  DD 04 24			fld	qword ptr [ESP]
 000021E7  5A				pop	EDX
 000021E8  58				pop	EAX 
 000021E9  5B				pop	EBX
 000021EA  DD 1B			fstp	qword ptr [EBX]

				;{998}:UnitTesting::array4[3]= Math::pi() * 8.1;
 000021EC  B8 00000003			mov	EAX,000000003h
 000021F1  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 000021F8  50				push	EAX
 000021F9  E8 00000000 E		call	 Math_pi
 000021FE  50				push	EAX
 000021FF  52				push	EDX 
 00002200  BA 33333333			mov	EDX,033333333h
 00002205  B8 40203333			mov	EAX,040203333h 
 0000220A  9B DB E2			fclex
 0000220D  50				push	EAX
 0000220E  52				push	EDX 
 0000220F  DD 04 24			fld	qword ptr [ESP]
 00002212  59				pop	ECX
 00002213  59				pop	ECX 
 00002214  DC 0C 24			fmul	qword ptr [ESP]
 00002217  DD 1C 24			fstp	qword ptr [ESP]
 0000221A  DD C0			ffree	st
 0000221C  DD 04 24			fld	qword ptr [ESP]
 0000221F  5A				pop	EDX
 00002220  58				pop	EAX 
 00002221  5B				pop	EBX
 00002222  DD 1B			fstp	qword ptr [EBX]

				;{1000}:for(x= 0; x < 4; x++ )
 00002224  33 C0			xor	EAX,EAX
 00002226  89 85 FFFFFF34		mov	dword ptr [EBP-00CCh],EAX
 0000222C  EB 0C			jmp	OFFSET $L001520
 0000222E			$L001521:
 0000222E  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-204]
 00002234  FF 85 FFFFFF34		inc	dword ptr [EBP-204]
 0000223A			$L001520:
 0000223A  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00002240  50				push	EAX
 00002241  B8 00000004			mov	EAX,000000004h
 00002246  5A				pop	EDX
 00002247  3B D0			cmp	EDX,EAX
 00002249  0F 9C C0			setl	AL
 0000224C  84 C0			test	AL,AL
 0000224E  74 50			jz	OFFSET $L001522

				;{1001}:Console::WriteLn("array4[", x, "] = ", UnitTesting::array4[x]);
 00002250  8D 05 00000E79 R		lea	EAX,OFFSET $S001164
 00002256  6A 00			push	000000000h
 00002258  50				push	EAX 
 00002259  E8 00000000 E		call	 Console_WriteString
 0000225E  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00002264  50				push	EAX 
 00002265  E8 00000000 E		call	 Console_WriteInteger 
 0000226A  8D 05 00000DC1 R		lea	EAX,OFFSET $S001165
 00002270  6A 00			push	000000000h 
 00002272  50				push	EAX 
 00002273  E8 00000000 E		call	 Console_WriteString 
 00002278  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 0000227E  8B 14 C5			mov	EDX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 00002285  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000228C  8B 80 00001280 R		mov	EAX,dword ptr [EAX+UnitTesting_array4] 
 00002292  50				push	EAX 
 00002293  52				push	EDX 
 00002294  E8 00000000 E		call	 Console_WriteDouble 
 00002299  E8 00000000 E		call	 Console_WriteCrLf 
 0000229E  EB 8E			jmp	OFFSET $L001521 
 000022A0			$L001522:

				;{1005}:name= "Harold L. Marzan";
 000022A0  8D 05 00000A56 R		lea	EAX,OFFSET $S001167
 000022A6  89 85 FFFFFF30		mov	dword ptr [EBP-00D0h],EAX

				;{1006}:UnitTesting::TestArrays::printChars(name, StringHandling::StringLength(name));
 000022AC  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000022B2  50				push	EAX
 000022B3  E8 00000000 E		call	 StringHandling_StringLength
 000022B8  50				push	EAX 
 000022B9  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000022BF  50				push	EAX
 000022C0  E8 00000466			call	 UnitTesting_TestArrays_printChars

				;{1008}:my_name_is;
 000022C5  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]

				;{1010}:StringHandling::StringSet(my_name_is, 0, sizeof (my_name_is));
 000022CB  B8 00000014			mov	EAX,000000014h
 000022D0  50				push	EAX 
 000022D1  33 C0			xor	EAX,EAX
 000022D3  50				push	EAX 
 000022D4  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000022DA  50				push	EAX
 000022DB  E8 00000000 E		call	 StringHandling_StringSet

				;{1012}:my_name_is[0]= 'H';
 000022E0  33 C0			xor	EAX,EAX
 000022E2  6B C0 01			imul	EAX,EAX,000000001h
 000022E5  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 000022EC  50				push	EAX
 000022ED  B8 00000048			mov	EAX,000000048h
 000022F2  5B				pop	EBX
 000022F3  88 03			mov	byte ptr [EBX],AL

				;{1013}:my_name_is[1]= 'a';
 000022F5  B8 00000001			mov	EAX,000000001h
 000022FA  6B C0 01			imul	EAX,EAX,000000001h
 000022FD  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002304  50				push	EAX
 00002305  B8 00000061			mov	EAX,000000061h
 0000230A  5B				pop	EBX
 0000230B  88 03			mov	byte ptr [EBX],AL

				;{1014}:my_name_is[2]= 'r';
 0000230D  B8 00000002			mov	EAX,000000002h
 00002312  6B C0 01			imul	EAX,EAX,000000001h
 00002315  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000231C  50				push	EAX
 0000231D  B8 00000072			mov	EAX,000000072h
 00002322  5B				pop	EBX
 00002323  88 03			mov	byte ptr [EBX],AL

				;{1015}:my_name_is[3]= 'o';
 00002325  B8 00000003			mov	EAX,000000003h
 0000232A  6B C0 01			imul	EAX,EAX,000000001h
 0000232D  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002334  50				push	EAX
 00002335  B8 0000006F			mov	EAX,00000006Fh
 0000233A  5B				pop	EBX
 0000233B  88 03			mov	byte ptr [EBX],AL

				;{1016}:my_name_is[4]= 'l';
 0000233D  B8 00000004			mov	EAX,000000004h
 00002342  6B C0 01			imul	EAX,EAX,000000001h
 00002345  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000234C  50				push	EAX
 0000234D  B8 0000006C			mov	EAX,00000006Ch
 00002352  5B				pop	EBX
 00002353  88 03			mov	byte ptr [EBX],AL

				;{1017}:my_name_is[5]= 'd';
 00002355  B8 00000005			mov	EAX,000000005h
 0000235A  6B C0 01			imul	EAX,EAX,000000001h
 0000235D  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002364  50				push	EAX
 00002365  B8 00000064			mov	EAX,000000064h
 0000236A  5B				pop	EBX
 0000236B  88 03			mov	byte ptr [EBX],AL

				;{1018}:my_name_is[6]= ' ';
 0000236D  B8 00000006			mov	EAX,000000006h
 00002372  6B C0 01			imul	EAX,EAX,000000001h
 00002375  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000237C  50				push	EAX
 0000237D  33 C0			xor	EAX,EAX
 0000237F  5B				pop	EBX
 00002380  88 03			mov	byte ptr [EBX],AL

				;{1022}:Console::WriteLn("My name is :", my_name_is);
 00002382  8D 05 00000B15 R		lea	EAX,OFFSET $S001176
 00002388  6A 00			push	000000000h
 0000238A  50				push	EAX 
 0000238B  E8 00000000 E		call	 Console_WriteString
 00002390  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 00002396  6A 14			push	000000014h 
 00002398  50				push	EAX 
 00002399  E8 00000000 E		call	 Console_WriteString 
 0000239E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1024}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 000023A3  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000023A9  50				push	EAX
 000023AA  E8 00000000 E		call	 StringHandling_StringLength
 000023AF  50				push	EAX 
 000023B0  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000023B6  50				push	EAX
 000023B7  E8 0000036F			call	 UnitTesting_TestArrays_printChars

				;{1027}:arr;
 000023BC  8D 85 FFFFFE54		lea	EAX,dword ptr [EBP-01ACh]

				;{1029}:arr[0][0]= 'H';
 000023C2  33 C0			xor	EAX,EAX
 000023C4  6B C0 14			imul	EAX,EAX,000000014h
 000023C7  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000023CE  52				push	EDX
 000023CF  33 C0			xor	EAX,EAX
 000023D1  5E				pop	ESI
 000023D2  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000023D5  50				push	EAX
 000023D6  B8 00000048			mov	EAX,000000048h
 000023DB  5B				pop	EBX
 000023DC  88 03			mov	byte ptr [EBX],AL

				;{1030}:arr[0][1]= 'E';
 000023DE  33 C0			xor	EAX,EAX
 000023E0  6B C0 14			imul	EAX,EAX,000000014h
 000023E3  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000023EA  52				push	EDX
 000023EB  B8 00000001			mov	EAX,000000001h
 000023F0  5E				pop	ESI
 000023F1  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000023F4  50				push	EAX
 000023F5  B8 00000045			mov	EAX,000000045h
 000023FA  5B				pop	EBX
 000023FB  88 03			mov	byte ptr [EBX],AL

				;{1031}:arr[0][2]= 'L';
 000023FD  33 C0			xor	EAX,EAX
 000023FF  6B C0 14			imul	EAX,EAX,000000014h
 00002402  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002409  52				push	EDX
 0000240A  B8 00000002			mov	EAX,000000002h
 0000240F  5E				pop	ESI
 00002410  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002413  50				push	EAX
 00002414  B8 0000004C			mov	EAX,00000004Ch
 00002419  5B				pop	EBX
 0000241A  88 03			mov	byte ptr [EBX],AL

				;{1032}:arr[0][3]= 'L';
 0000241C  33 C0			xor	EAX,EAX
 0000241E  6B C0 14			imul	EAX,EAX,000000014h
 00002421  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002428  52				push	EDX
 00002429  B8 00000003			mov	EAX,000000003h
 0000242E  5E				pop	ESI
 0000242F  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002432  50				push	EAX
 00002433  B8 0000004C			mov	EAX,00000004Ch
 00002438  5B				pop	EBX
 00002439  88 03			mov	byte ptr [EBX],AL

				;{1033}:arr[0][4]= 'O';
 0000243B  33 C0			xor	EAX,EAX
 0000243D  6B C0 14			imul	EAX,EAX,000000014h
 00002440  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002447  52				push	EDX
 00002448  B8 00000004			mov	EAX,000000004h
 0000244D  5E				pop	ESI
 0000244E  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002451  50				push	EAX
 00002452  B8 0000004F			mov	EAX,00000004Fh
 00002457  5B				pop	EBX
 00002458  88 03			mov	byte ptr [EBX],AL

				;{1034}:arr[0][5]= '!';
 0000245A  33 C0			xor	EAX,EAX
 0000245C  6B C0 14			imul	EAX,EAX,000000014h
 0000245F  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002466  52				push	EDX
 00002467  B8 00000005			mov	EAX,000000005h
 0000246C  5E				pop	ESI
 0000246D  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002470  50				push	EAX
 00002471  B8 00000021			mov	EAX,000000021h
 00002476  5B				pop	EBX
 00002477  88 03			mov	byte ptr [EBX],AL

				;{1036}:arr[0][0]= 'H';
 00002479  33 C0			xor	EAX,EAX
 0000247B  6B C0 14			imul	EAX,EAX,000000014h
 0000247E  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002485  52				push	EDX
 00002486  33 C0			xor	EAX,EAX
 00002488  5E				pop	ESI
 00002489  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 0000248C  50				push	EAX
 0000248D  B8 00000048			mov	EAX,000000048h
 00002492  5B				pop	EBX
 00002493  88 03			mov	byte ptr [EBX],AL

				;{1037}:arr[1][1]= 'E';
 00002495  B8 00000001			mov	EAX,000000001h
 0000249A  6B C0 14			imul	EAX,EAX,000000014h
 0000249D  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024A4  52				push	EDX
 000024A5  B8 00000001			mov	EAX,000000001h
 000024AA  5E				pop	ESI
 000024AB  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000024AE  50				push	EAX
 000024AF  B8 00000045			mov	EAX,000000045h
 000024B4  5B				pop	EBX
 000024B5  88 03			mov	byte ptr [EBX],AL

				;{1038}:arr[2][2]= 'L';
 000024B7  B8 00000002			mov	EAX,000000002h
 000024BC  6B C0 14			imul	EAX,EAX,000000014h
 000024BF  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024C6  52				push	EDX
 000024C7  B8 00000002			mov	EAX,000000002h
 000024CC  5E				pop	ESI
 000024CD  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000024D0  50				push	EAX
 000024D1  B8 0000004C			mov	EAX,00000004Ch
 000024D6  5B				pop	EBX
 000024D7  88 03			mov	byte ptr [EBX],AL

				;{1039}:arr[3][3]= 'L';
 000024D9  B8 00000003			mov	EAX,000000003h
 000024DE  6B C0 14			imul	EAX,EAX,000000014h
 000024E1  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024E8  52				push	EDX
 000024E9  B8 00000003			mov	EAX,000000003h
 000024EE  5E				pop	ESI
 000024EF  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000024F2  50				push	EAX
 000024F3  B8 0000004C			mov	EAX,00000004Ch
 000024F8  5B				pop	EBX
 000024F9  88 03			mov	byte ptr [EBX],AL

				;{1040}:arr[4][4]= 'O';
 000024FB  B8 00000004			mov	EAX,000000004h
 00002500  6B C0 14			imul	EAX,EAX,000000014h
 00002503  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000250A  52				push	EDX
 0000250B  B8 00000004			mov	EAX,000000004h
 00002510  5E				pop	ESI
 00002511  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002514  50				push	EAX
 00002515  B8 0000004F			mov	EAX,00000004Fh
 0000251A  5B				pop	EBX
 0000251B  88 03			mov	byte ptr [EBX],AL

				;{1041}:arr[5][5]= '!';
 0000251D  B8 00000005			mov	EAX,000000005h
 00002522  6B C0 14			imul	EAX,EAX,000000014h
 00002525  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000252C  52				push	EDX
 0000252D  B8 00000005			mov	EAX,000000005h
 00002532  5E				pop	ESI
 00002533  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002536  50				push	EAX
 00002537  B8 00000021			mov	EAX,000000021h
 0000253C  5B				pop	EBX
 0000253D  88 03			mov	byte ptr [EBX],AL

				;{1043}:for(i= 0; i < 6; i++ )
 0000253F  33 C0			xor	EAX,EAX
 00002541  89 85 FFFFFE50		mov	dword ptr [EBP-01B0h],EAX
 00002547  EB 0C			jmp	OFFSET $L001523
 00002549			$L001524:
 00002549  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 0000254F  FF 85 FFFFFE50		inc	dword ptr [EBP-432]
 00002555			$L001523:
 00002555  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 0000255B  50				push	EAX
 0000255C  B8 00000006			mov	EAX,000000006h
 00002561  5A				pop	EDX
 00002562  3B D0			cmp	EDX,EAX
 00002564  0F 9C C0			setl	AL
 00002567  84 C0			test	AL,AL
 00002569  74 6D			jz	OFFSET $L001525

				;{1044}:Console::WriteLn("Char at [", i, ", ", i, "]=", arr[i][i]);
 0000256B  8D 05 000007C5 R		lea	EAX,OFFSET $S001183
 00002571  6A 00			push	000000000h
 00002573  50				push	EAX 
 00002574  E8 00000000 E		call	 Console_WriteString
 00002579  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 0000257F  50				push	EAX 
 00002580  E8 00000000 E		call	 Console_WriteInteger 
 00002585  8D 05 000006FC R		lea	EAX,OFFSET $S001184
 0000258B  6A 00			push	000000000h 
 0000258D  50				push	EAX 
 0000258E  E8 00000000 E		call	 Console_WriteString 
 00002593  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 00002599  50				push	EAX 
 0000259A  E8 00000000 E		call	 Console_WriteInteger 
 0000259F  8D 05 00000DD0 R		lea	EAX,OFFSET $S001185
 000025A5  6A 00			push	000000000h 
 000025A7  50				push	EAX 
 000025A8  E8 00000000 E		call	 Console_WriteString 
 000025AD  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000025B3  6B C0 14			imul	EAX,EAX,000000014h
 000025B6  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000025BD  52				push	EDX
 000025BE  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000025C4  5E				pop	ESI
 000025C5  8B 04 06			mov	EAX,dword ptr [ESI+EAX*0001h]
 000025C8  50				push	EAX 
 000025C9  E8 00000000 E		call	 Console_WriteChar 
 000025CE  E8 00000000 E		call	 Console_WriteCrLf 
 000025D3  E9 FFFFFF71			jmp	OFFSET $L001524 
 000025D8			$L001525:

				;{1048}:testt;
 000025D8  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]

				;{1049}:test= "Testing!!!";
 000025DE  8D 05 00000C50 R		lea	EAX,OFFSET $S001188
 000025E4  89 85 FFFFFD84		mov	dword ptr [EBP-027Ch],EAX

				;{1050}:StringHandling::StringCopy(testt, test, StringHandling::StringLength(test));
 000025EA  8B 85 FFFFFD84		mov	EAX,dword ptr [EBP-027Ch]
 000025F0  50				push	EAX
 000025F1  E8 00000000 E		call	 StringHandling_StringLength
 000025F6  50				push	EAX 
 000025F7  8B 85 FFFFFD84		mov	EAX,dword ptr [EBP-027Ch]
 000025FD  50				push	EAX 
 000025FE  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 00002604  50				push	EAX
 00002605  E8 00000000 E		call	 StringHandling_StringCopy

				;{1052}:UnitTesting::TestArrays::printChars(testt, StringHandling::StringLength(testt));
 0000260A  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 00002610  50				push	EAX
 00002611  E8 00000000 E		call	 StringHandling_StringLength
 00002616  50				push	EAX 
 00002617  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 0000261D  50				push	EAX
 0000261E  E8 00000108			call	 UnitTesting_TestArrays_printChars

				;{1057}:arr_of_strings;
 00002623  8D 85 FFFFFD74		lea	EAX,dword ptr [EBP-028Ch]

				;{1059}:arr_of_strings[0]= "Harold ";
 00002629  33 C0			xor	EAX,EAX
 0000262B  6B C0 04			imul	EAX,EAX,000000004h
 0000262E  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002635  50				push	EAX
 00002636  8D 05 00000A4E R		lea	EAX,OFFSET $S001190
 0000263C  5B				pop	EBX
 0000263D  89 03			mov	dword ptr [EBX],EAX

				;{1060}:arr_of_strings[1]= "Lawrence ";
 0000263F  B8 00000001			mov	EAX,000000001h
 00002644  6B C0 04			imul	EAX,EAX,000000004h
 00002647  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 0000264E  50				push	EAX
 0000264F  8D 05 00000AED R		lea	EAX,OFFSET $S001191
 00002655  5B				pop	EBX
 00002656  89 03			mov	dword ptr [EBX],EAX

				;{1061}:arr_of_strings[2]= "Marzan ";
 00002658  B8 00000002			mov	EAX,000000002h
 0000265D  6B C0 04			imul	EAX,EAX,000000004h
 00002660  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002667  50				push	EAX
 00002668  8D 05 00000AF7 R		lea	EAX,OFFSET $S001192
 0000266E  5B				pop	EBX
 0000266F  89 03			mov	dword ptr [EBX],EAX

				;{1062}:arr_of_strings[3]= "Mercado.";
 00002671  B8 00000003			mov	EAX,000000003h
 00002676  6B C0 04			imul	EAX,EAX,000000004h
 00002679  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002680  50				push	EAX
 00002681  8D 05 00000AFF R		lea	EAX,OFFSET $S001193
 00002687  5B				pop	EBX
 00002688  89 03			mov	dword ptr [EBX],EAX

				;{1064}:for(i= 0; i < 4; ++i)
 0000268A  33 C0			xor	EAX,EAX
 0000268C  89 85 FFFFFE50		mov	dword ptr [EBP-01B0h],EAX
 00002692  EB 0C			jmp	OFFSET $L001526
 00002694			$L001527:
 00002694  FF 85 FFFFFE50		inc	dword ptr [EBP-432]
 0000269A  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 000026A0			$L001526:
 000026A0  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026A6  50				push	EAX
 000026A7  B8 00000004			mov	EAX,000000004h
 000026AC  5A				pop	EDX
 000026AD  3B D0			cmp	EDX,EAX
 000026AF  0F 9C C0			setl	AL
 000026B2  84 C0			test	AL,AL
 000026B4  74 2F			jz	OFFSET $L001528
				;{

				;{1066}:UnitTesting::TestArrays::printChars(arr_of_strings[i], StringHandling::StringLength(arr_of_strings[i]));
 000026B6  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026BC  6B C0 04			imul	EAX,EAX,000000004h
 000026BF  8B 84 28			mov	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 000026C6  50				push	EAX
 000026C7  E8 00000000 E		call	 StringHandling_StringLength
 000026CC  50				push	EAX 
 000026CD  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026D3  6B C0 04			imul	EAX,EAX,000000004h
 000026D6  8B 84 28			mov	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 000026DD  50				push	EAX
 000026DE  E8 00000048			call	 UnitTesting_TestArrays_printChars
				;}
 000026E3  EB AF			jmp	OFFSET $L001527 
 000026E5			$L001528:

				;{1069}:StringHandling::StringCopy(my_name_is, name, StringHandling::StringLength(name));
 000026E5  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000026EB  50				push	EAX
 000026EC  E8 00000000 E		call	 StringHandling_StringLength
 000026F1  50				push	EAX 
 000026F2  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000026F8  50				push	EAX 
 000026F9  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000026FF  50				push	EAX
 00002700  E8 00000000 E		call	 StringHandling_StringCopy

				;{1070}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 00002705  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 0000270B  50				push	EAX
 0000270C  E8 00000000 E		call	 StringHandling_StringLength
 00002711  50				push	EAX 
 00002712  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 00002718  50				push	EAX
 00002719  E8 0000000D			call	 UnitTesting_TestArrays_printChars
				;}
 0000271E			$L001144:
 0000271E  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00002724  8B F0			mov	ESI,EAX 

 00002726  5F				pop	EDI
 00002727  5E				pop	ESI 
 00002728  5B				pop	EBX 
 00002729  C9				leave	
 0000272A  C3				ret	
 0000272B			UnitTesting_TestArrays_DoTest ENDP

 0000272B			UnitTesting_TestArrays_printChars PROC NEAR 
				;void UnitTesting::TestArrays::printChars(char char [] array, int n);
 0000272B  55				push	EBP
 0000272C  8B EC			mov	EBP,ESP
 0000272E  83 EC 08			sub	ESP,000000008h
 00002731  53				push	EBX 
 00002732  56				push	ESI 
 00002733  57				push	EDI 
 00002734  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002737  B9 00000001			mov	ECX,000000001h
 0000273C  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002741  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;try
 00002743  54				push	ESP ;pPrevESP
 00002744  55				push	EBP ;pPrevEBP
 00002745  68 000027B7 R		push	OFFSET __except_handlerXXX001532 
					assume FS:nothing
 0000274A  64: FF 35			push	dword ptr  FS:[0] 
	   00000000
 00002751  64: 89 25			mov	dword ptr  FS:[0],ESP
	   00000000

				;{924}:for(i= 0; i < n; ++i)
 00002758  33 C0			xor	EAX,EAX
 0000275A  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000275D  EB 06			jmp	OFFSET $L001535
 0000275F			$L001536:
 0000275F  FF 45 FC			inc	dword ptr [EBP-4]
 00002762  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00002765			$L001535:
 00002765  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002768  50				push	EAX
 00002769  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000276C  5A				pop	EDX
 0000276D  3B D0			cmp	EDX,EAX
 0000276F  0F 9C C0			setl	AL
 00002772  84 C0			test	AL,AL
 00002774  74 3F			jz	OFFSET $L001537

				;{925}:Console::WriteLn("Char at i:[", i, "] == ", array[i]);
 00002776  8D 05 000007CF R		lea	EAX,OFFSET $S001141
 0000277C  6A 00			push	000000000h
 0000277E  50				push	EAX 
 0000277F  E8 00000000 E		call	 Console_WriteString
 00002784  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002787  50				push	EAX 
 00002788  E8 00000000 E		call	 Console_WriteInteger 
 0000278D  8D 05 00000DC6 R		lea	EAX,OFFSET $S001142
 00002793  6A 00			push	000000000h 
 00002795  50				push	EAX 
 00002796  E8 00000000 E		call	 Console_WriteString 
 0000279B  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000279E  8B C3			mov	EAX,EBX 
 000027A0  50				push	EAX
 000027A1  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000027A4  5E				pop	ESI
 000027A5  8B 04 06			mov	EAX,dword ptr [ESI+EAX*0001h]
 000027A8  50				push	EAX 
 000027A9  E8 00000000 E		call	 Console_WriteChar 
 000027AE  E8 00000000 E		call	 Console_WriteCrLf 
 000027B3  EB AA			jmp	OFFSET $L001536 
 000027B5			$L001537:
				;}
 000027B5  EB 5C			jmp	OFFSET $L001531
 000027B7			__except_handlerXXX001532:
 000027B7  8B 5C 24 04			mov	EBX,dword ptr [ESP+0004h] ;_ExceptionRecord
 000027BB  8B 0B			mov	ECX,dword ptr [EBX] ;_ExceptionRecord->ExceptionCode // The reason the exception occurred.
 000027BD  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 000027C4  8B 23			mov	ESP,dword ptr [EBX] 
 000027C6  64: 8F 05			pop	dword ptr  FS:[0]
	   00000000
 000027CD  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 000027D1  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP

				;{925}:(System::Exception::ACCESS_VIOLATION);
 000027D5  B8 C0000005			mov	EAX,0C0000005h
 000027DA  3B C1			cmp	EAX,ECX
 000027DC  75 15			jnz	OFFSET $L001538

				;{934}:Console::WriteLn("Oops! there was a serious bug in this code!");
 000027DE  8D 05 00000B2E R		lea	EAX,OFFSET $S001143
 000027E4  6A 00			push	000000000h
 000027E6  50				push	EAX 
 000027E7  E8 00000000 E		call	 Console_WriteString
 000027EC  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000027F1  EB 36			jmp	OFFSET $L001534 
 000027F3			$L001538:

				;{934}:(System::Exception::INTEGER_DIVIDE_BY_ZERO);
 000027F3  B8 C0000094			mov	EAX,0C0000094h
 000027F8  3B C1			cmp	EAX,ECX 
 000027FA  75 15			jnz	OFFSET $L001539 

				;{938}:Console::WriteLn("Oops! there was a serious bug in this code!");
 000027FC  8D 05 00000B2E R		lea	EAX,OFFSET $S001143
 00002802  6A 00			push	000000000h
 00002804  50				push	EAX 
 00002805  E8 00000000 E		call	 Console_WriteString
 0000280A  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000280F  EB 18			jmp	OFFSET $L001534 
 00002811			$L001539:
 00002811  EB 16			jmp	OFFSET $L001534 
 00002813			$L001531:
 00002813  64: 8B 25			mov	ESP,dword ptr  FS:[0] 
	   00000000
 0000281A  64: 8F 05			pop	dword ptr  FS:[0] 
	   00000000
 00002821  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00002825  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 00002829			$L001534:
				;}
 00002829			$L001137:

 00002829  5F				pop	EDI
 0000282A  5E				pop	ESI 
 0000282B  5B				pop	EBX 
 0000282C  C9				leave	
 0000282D  C2 0008			retn	000000008h
 00002830			UnitTesting_TestArrays_printChars ENDP

 00002830			UnitTesting_TestFloatingPoint_Area PROC NEAR 
				;double Area(double minor_base, double major_base, double height);
 00002830  55				push	EBP
 00002831  8B EC			mov	EBP,ESP
 00002833  83 EC 0C			sub	ESP,00000000Ch
 00002836  53				push	EBX 
 00002837  56				push	ESI 
 00002838  57				push	EDI 
 00002839  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 0000283C  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 0000283F  B9 00000002			mov	ECX,000000002h 
 00002844  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002849  F3/ AB			rep stos	dword ptr [EDI]
 0000284B  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{899}:area= ((minor_base + major_base) * height) / 2.0;
 0000284E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002851  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002854  50				push	EAX
 00002855  52				push	EDX 
 00002856  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 00002859  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 0000285C  50				push	EAX
 0000285D  52				push	EDX 
 0000285E  DD 04 24			fld	qword ptr [ESP]
 00002861  59				pop	ECX
 00002862  59				pop	ECX 
 00002863  DC 04 24			fadd	qword ptr [ESP]
 00002866  DD 1C 24			fstp	qword ptr [ESP]
 00002869  8B 55 18			mov	EDX,dword ptr [EBP+0018h]
 0000286C  8B 45 1C			mov	EAX,dword ptr [EBP+001Ch] 
 0000286F  9B DB E2			fclex
 00002872  50				push	EAX
 00002873  52				push	EDX 
 00002874  DD 04 24			fld	qword ptr [ESP]
 00002877  59				pop	ECX
 00002878  59				pop	ECX 
 00002879  DC 0C 24			fmul	qword ptr [ESP]
 0000287C  DD 1C 24			fstp	qword ptr [ESP]
 0000287F  33 D2			xor	EDX,EDX
 00002881  B8 40000000			mov	EAX,040000000h
 00002886  9B DB E2			fclex
 00002889  50				push	EAX
 0000288A  52				push	EDX 
 0000288B  DD 04 24			fld	qword ptr [ESP]
 0000288E  59				pop	ECX
 0000288F  59				pop	ECX 
 00002890  DC 3C 24			fdivr	qword ptr [ESP]
 00002893  DD 1C 24			fstp	qword ptr [ESP]
 00002896  DD C0			ffree	st
 00002898  DD 04 24			fld	qword ptr [ESP]
 0000289B  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{901}:return area
 0000289E  5A				pop	EDX
 0000289F  58				pop	EAX 
 000028A0  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000028A3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000028A6  EB 00			jmp	OFFSET $L001126
				;}
 000028A8			$L001126:

 000028A8  5F				pop	EDI
 000028A9  5E				pop	ESI 
 000028AA  5B				pop	EBX 
 000028AB  C9				leave	
 000028AC  C2 0018			retn	000000018h
 000028AF			UnitTesting_TestFloatingPoint_Area ENDP

 000028AF			UnitTesting_TestFloatingPoint_Destructor PROC NEAR 
				;void Destructor(void);
 000028AF  55				push	EBP
 000028B0  8B EC			mov	EBP,ESP
 000028B2  51				push	ECX 
 000028B3  53				push	EBX 
 000028B4  56				push	ESI 
 000028B5  57				push	EDI 
				;{

				;{877}:System::Debug::OutputString("destroying a TestFloatingPoint() object...");
 000028B6  8D 05 00000EF1 R		lea	EAX,OFFSET $S001119
 000028BC  50				push	EAX
 000028BD  E8 00000000 E		call	 System_Debug_OutputString

				;{878}:Console::WriteLn("destroying a TestFloatingPoint() object...");
 000028C2  8D 05 00000EF1 R		lea	EAX,OFFSET $S001119
 000028C8  6A 00			push	000000000h
 000028CA  50				push	EAX 
 000028CB  E8 00000000 E		call	 Console_WriteString
 000028D0  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000028D5			$L001118:

 000028D5  5F				pop	EDI
 000028D6  5E				pop	ESI 
 000028D7  5B				pop	EBX 
 000028D8  C9				leave	
 000028D9  C3				ret	
 000028DA			UnitTesting_TestFloatingPoint_Destructor ENDP

 000028DA			UnitTesting_TestFloatingPoint_Power PROC NEAR 
				;double Power(double X, int n);
 000028DA  55				push	EBP
 000028DB  8B EC			mov	EBP,ESP
 000028DD  51				push	ECX 
 000028DE  53				push	EBX 
 000028DF  56				push	ESI 
 000028E0  57				push	EDI 
				;{

				;{882}:if(n == 0)
 000028E1  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000028E4  50				push	EAX
 000028E5  33 C0			xor	EAX,EAX
 000028E7  5A				pop	EDX
 000028E8  3B D0			cmp	EDX,EAX
 000028EA  0F 94 C0			setz	AL
 000028ED  84 C0			test	AL,AL
 000028EF  74 10			jz	OFFSET $L001540

				;{883}:return 1
 000028F1  B8 00000001			mov	EAX,000000001h
 000028F6  50				push	EAX
 000028F7  E8 00000000 E		call	 FloatingPoint_FromInt
 000028FC  E9 000000AB			jmp	OFFSET $L001120
 00002901			$L001540:

				;{885}:if(n % 2 == 0)
 00002901  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002904  50				push	EAX
 00002905  B8 00000002			mov	EAX,000000002h
 0000290A  8B C8			mov	ECX,EAX
 0000290C  58				pop	EAX
 0000290D  33 D2			xor	EDX,EDX
 0000290F  F7 F9			idiv	ECX
 00002911  8B C2			mov	EAX,EDX 
 00002913  50				push	EAX
 00002914  33 C0			xor	EAX,EAX
 00002916  5A				pop	EDX
 00002917  3B D0			cmp	EDX,EAX
 00002919  0F 94 C0			setz	AL
 0000291C  84 C0			test	AL,AL
 0000291E  74 39			jz	OFFSET $L001542

				;{886}:return Power(X * X, n div 2)
 00002920  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002923  50				push	EAX
 00002924  B8 00000002			mov	EAX,000000002h
 00002929  8B C8			mov	ECX,EAX
 0000292B  58				pop	EAX
 0000292C  33 D2			xor	EDX,EDX
 0000292E  F7 F9			idiv	ECX
 00002930  50				push	EAX
 00002931  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002934  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002937  50				push	EAX
 00002938  52				push	EDX 
 00002939  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000293C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000293F  9B DB E2			fclex
 00002942  50				push	EAX
 00002943  52				push	EDX 
 00002944  DD 04 24			fld	qword ptr [ESP]
 00002947  59				pop	ECX
 00002948  59				pop	ECX 
 00002949  DC 0C 24			fmul	qword ptr [ESP]
 0000294C  DD 1C 24			fstp	qword ptr [ESP]
 0000294F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002952  E8 FFFFFF83			call	 UnitTesting_TestFloatingPoint_Power
 00002957  EB 53			jmp	OFFSET $L001120

				; else {
 00002959			$L001542:

				;{888}:return X * Power(X * X, n div 2)
 00002959  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000295C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000295F  50				push	EAX
 00002960  52				push	EDX 
 00002961  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002964  50				push	EAX
 00002965  B8 00000002			mov	EAX,000000002h
 0000296A  8B C8			mov	ECX,EAX
 0000296C  58				pop	EAX
 0000296D  33 D2			xor	EDX,EDX
 0000296F  F7 F9			idiv	ECX
 00002971  50				push	EAX
 00002972  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002975  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002978  50				push	EAX
 00002979  52				push	EDX 
 0000297A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000297D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002980  9B DB E2			fclex
 00002983  50				push	EAX
 00002984  52				push	EDX 
 00002985  DD 04 24			fld	qword ptr [ESP]
 00002988  59				pop	ECX
 00002989  59				pop	ECX 
 0000298A  DC 0C 24			fmul	qword ptr [ESP]
 0000298D  DD 1C 24			fstp	qword ptr [ESP]
 00002990  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002993  E8 FFFFFF42			call	 UnitTesting_TestFloatingPoint_Power
 00002998  9B DB E2			fclex
 0000299B  50				push	EAX
 0000299C  52				push	EDX 
 0000299D  DD 04 24			fld	qword ptr [ESP]
 000029A0  59				pop	ECX
 000029A1  59				pop	ECX 
 000029A2  DC 0C 24			fmul	qword ptr [ESP]
 000029A5  DD 1C 24			fstp	qword ptr [ESP]
 000029A8  5A				pop	EDX
 000029A9  58				pop	EAX 
 000029AA  EB 00			jmp	OFFSET $L001120
 000029AC			$L001543:

				; }
				;}
 000029AC			$L001120:

 000029AC  5F				pop	EDI
 000029AD  5E				pop	ESI 
 000029AE  5B				pop	EBX 
 000029AF  C9				leave	
 000029B0  C2 000C			retn	00000000Ch
 000029B3			UnitTesting_TestFloatingPoint_Power ENDP

 000029B3			UnitTesting_TestFloatingPoint PROC NEAR 
				;void UnitTesting::TestFloatingPoint(void);
 000029B3  55				push	EBP
 000029B4  8B EC			mov	EBP,ESP
 000029B6  51				push	ECX 
 000029B7  53				push	EBX 
 000029B8  56				push	ESI 
 000029B9  57				push	EDI 
				;{

				;{872}:System::Debug::OutputString("constructing a TestFloatingPoint() object...");
 000029BA  8D 05 00000E88 R		lea	EAX,OFFSET $S001117
 000029C0  50				push	EAX
 000029C1  E8 00000000 E		call	 System_Debug_OutputString
				;}

 000029C6  5F				pop	EDI
 000029C7  5E				pop	ESI 
 000029C8  5B				pop	EBX 
 000029C9  C9				leave	
 000029CA  C3				ret	
 000029CB			UnitTesting_TestFloatingPoint ENDP

 000029CB			UnitTesting_TestFloatingPoint_speed PROC NEAR 
				;double UnitTesting::TestFloatingPoint::speed(double distance, double time);
 000029CB  55				push	EBP
 000029CC  8B EC			mov	EBP,ESP
 000029CE  51				push	ECX 
 000029CF  53				push	EBX 
 000029D0  56				push	ESI 
 000029D1  57				push	EDI 
				;{

				;{894}:return distance / time
 000029D2  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000029D5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000029D8  50				push	EAX
 000029D9  52				push	EDX 
 000029DA  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 000029DD  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 000029E0  9B DB E2			fclex
 000029E3  50				push	EAX
 000029E4  52				push	EDX 
 000029E5  DD 04 24			fld	qword ptr [ESP]
 000029E8  59				pop	ECX
 000029E9  59				pop	ECX 
 000029EA  DC 3C 24			fdivr	qword ptr [ESP]
 000029ED  DD 1C 24			fstp	qword ptr [ESP]
 000029F0  5A				pop	EDX
 000029F1  58				pop	EAX 
 000029F2  EB 00			jmp	OFFSET $L001123
				;}
 000029F4			$L001123:

 000029F4  5F				pop	EDI
 000029F5  5E				pop	ESI 
 000029F6  5B				pop	EBX 
 000029F7  C9				leave	
 000029F8  C2 0010			retn	000000010h
 000029FB			UnitTesting_TestFloatingPoint_speed ENDP

 000029FB			UnitTesting_TestIntegers_Calc1 PROC NEAR 
				;int Calc1(int i, int ref j);
 000029FB  55				push	EBP
 000029FC  8B EC			mov	EBP,ESP
 000029FE  83 EC 08			sub	ESP,000000008h
 00002A01  53				push	EBX 
 00002A02  56				push	ESI 
 00002A03  57				push	EDI 
 00002A04  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002A07  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002A0A  B9 00000001			mov	ECX,000000001h 
 00002A0F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002A14  F3/ AB			rep stos	dword ptr [EDI]
 00002A16  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{766}:nArea= j * Height;
 00002A19  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A1C  8B C3			mov	EAX,EBX 
 00002A1E  8B 03			mov	EAX,dword ptr [EBX]
 00002A20  50				push	EAX
 00002A21  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A24  E8 00000127			call	 UnitTesting_TestIntegers_get_Height
 00002A29  59				pop	ECX
 00002A2A  99				cdq	
 00002A2B  0F AF C1			imul	EAX,ECX
 00002A2E  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{768}:j= Width;
 00002A31  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A34  E8 000001AD			call	 UnitTesting_TestIntegers_get_Width
 00002A39  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A3C  89 03			mov	dword ptr [EBX],EAX

				;{770}:j= i div 5;
 00002A3E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002A41  50				push	EAX
 00002A42  B8 00000005			mov	EAX,000000005h
 00002A47  8B C8			mov	ECX,EAX
 00002A49  58				pop	EAX
 00002A4A  33 D2			xor	EDX,EDX
 00002A4C  F7 F9			idiv	ECX
 00002A4E  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A51  89 03			mov	dword ptr [EBX],EAX

				;{772}:nArea= FloatingPoint::ToInt(j * Height * 1.0);
 00002A53  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A56  8B C3			mov	EAX,EBX 
 00002A58  8B 03			mov	EAX,dword ptr [EBX]
 00002A5A  50				push	EAX
 00002A5B  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A5E  E8 000000ED			call	 UnitTesting_TestIntegers_get_Height
 00002A63  59				pop	ECX
 00002A64  99				cdq	
 00002A65  0F AF C1			imul	EAX,ECX
 00002A68  50				push	EAX
 00002A69  D9 E8			fld1
 00002A6B  9B DB E2			fclex
 00002A6E  E8 00000000 E		call	 FloatingPoint_FromInt
 00002A73  50				push	EAX
 00002A74  52				push	EDX 
 00002A75  DC 0C 24			fmul	qword ptr [ESP]
 00002A78  DD 1C 24			fstp	qword ptr [ESP]
 00002A7B  E8 00000000 E		call	 FloatingPoint_ToInt
 00002A80  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{775}:j*= 3;
 00002A83  B8 00000003			mov	EAX,000000003h
 00002A88  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A8B  8B C3			mov	EAX,EBX 
 00002A8D  F7 2B			imul	dword ptr [EBX]
 00002A8F  89 03			mov	dword ptr [EBX],EAX

				;{777}:return nArea
 00002A91  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002A94  EB 00			jmp	OFFSET $L001055
				;}
 00002A96			$L001055:

 00002A96  5F				pop	EDI
 00002A97  5E				pop	ESI 
 00002A98  5B				pop	EBX 
 00002A99  C9				leave	
 00002A9A  C2 0008			retn	000000008h
 00002A9D			UnitTesting_TestIntegers_Calc1 ENDP

 00002A9D			UnitTesting_TestIntegers_Calc2 PROC NEAR 
				;void Calc2(Int32 ref x, Int32 ref y);
 00002A9D  55				push	EBP
 00002A9E  8B EC			mov	EBP,ESP
 00002AA0  83 EC 08			sub	ESP,000000008h
 00002AA3  53				push	EBX 
 00002AA4  56				push	ESI 
 00002AA5  57				push	EDI 
 00002AA6  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002AA9  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002AAC  B9 00000001			mov	ECX,000000001h 
 00002AB1  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002AB6  F3/ AB			rep stos	dword ptr [EDI]
 00002AB8  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{789}:a= 1000;
 00002ABB  B8 000003E8			mov	EAX,0000003E8h
 00002AC0  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{790}:x= 9 * 3 * a;
 00002AC3  B8 00000009			mov	EAX,000000009h
 00002AC8  50				push	EAX
 00002AC9  B8 00000003			mov	EAX,000000003h
 00002ACE  59				pop	ECX
 00002ACF  33 D2			xor	EDX,EDX
 00002AD1  0F AF C1			imul	EAX,ECX
 00002AD4  50				push	EAX
 00002AD5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002AD8  59				pop	ECX 
 00002AD9  99				cdq	
 00002ADA  0F AF C1			imul	EAX,ECX 
 00002ADD  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002AE0  89 03			mov	dword ptr [EBX],EAX

				;{791}:y= a * 4 * 5;
 00002AE2  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002AE5  50				push	EAX
 00002AE6  B8 00000004			mov	EAX,000000004h
 00002AEB  59				pop	ECX
 00002AEC  33 D2			xor	EDX,EDX
 00002AEE  0F AF C1			imul	EAX,ECX
 00002AF1  50				push	EAX
 00002AF2  B8 00000005			mov	EAX,000000005h
 00002AF7  59				pop	ECX 
 00002AF8  33 D2			xor	EDX,EDX 
 00002AFA  0F AF C1			imul	EAX,ECX 
 00002AFD  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002B00  89 03			mov	dword ptr [EBX],EAX
				;}
 00002B02			$L001063:

 00002B02  5F				pop	EDI
 00002B03  5E				pop	ESI 
 00002B04  5B				pop	EBX 
 00002B05  C9				leave	
 00002B06  C2 0008			retn	000000008h
 00002B09			UnitTesting_TestIntegers_Calc2 ENDP

 00002B09			UnitTesting_TestIntegers_Factorial PROC NEAR 
				;int Factorial(int n);
 00002B09  55				push	EBP
 00002B0A  8B EC			mov	EBP,ESP
 00002B0C  51				push	ECX 
 00002B0D  53				push	EBX 
 00002B0E  56				push	ESI 
 00002B0F  57				push	EDI 
				;{

				;{848}:if(n == 0)
 00002B10  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B13  50				push	EAX
 00002B14  33 C0			xor	EAX,EAX
 00002B16  5A				pop	EDX
 00002B17  3B D0			cmp	EDX,EAX
 00002B19  0F 94 C0			setz	AL
 00002B1C  84 C0			test	AL,AL
 00002B1E  74 07			jz	OFFSET $L001544

				;{849}:return 1
 00002B20  B8 00000001			mov	EAX,000000001h
 00002B25  EB 22			jmp	OFFSET $L001105

				; else {
 00002B27			$L001544:

				;{851}:return n * Factorial(n - 1)
 00002B27  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B2A  50				push	EAX
 00002B2B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B2E  50				push	EAX
 00002B2F  B8 00000001			mov	EAX,000000001h
 00002B34  5A				pop	EDX
 00002B35  2B D0			sub	EDX,EAX
 00002B37  8B C2			mov	EAX,EDX
 00002B39  50				push	EAX
 00002B3A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B3D  E8 FFFFFFC7			call	 UnitTesting_TestIntegers_Factorial
 00002B42  59				pop	ECX
 00002B43  99				cdq	
 00002B44  0F AF C1			imul	EAX,ECX
 00002B47  EB 00			jmp	OFFSET $L001105
 00002B49			$L001545:

				; }
				;}
 00002B49			$L001105:

 00002B49  5F				pop	EDI
 00002B4A  5E				pop	ESI 
 00002B4B  5B				pop	EBX 
 00002B4C  C9				leave	
 00002B4D  C2 0004			retn	000000004h
 00002B50			UnitTesting_TestIntegers_Factorial ENDP

 00002B50			UnitTesting_TestIntegers_get_Height PROC NEAR 
				;int get::Height(void);
 00002B50  55				push	EBP
 00002B51  8B EC			mov	EBP,ESP
 00002B53  51				push	ECX 
 00002B54  53				push	EBX 
 00002B55  56				push	ESI 
 00002B56  57				push	EDI 
				;{

				;{495}:return nHeight
 00002B57  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B5A  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00002B5D  EB 00			jmp	OFFSET $L000967
				;}
 00002B5F			$L000967:

 00002B5F  5F				pop	EDI
 00002B60  5E				pop	ESI 
 00002B61  5B				pop	EBX 
 00002B62  C9				leave	
 00002B63  C3				ret	
 00002B64			UnitTesting_TestIntegers_get_Height ENDP

 00002B64			UnitTesting_TestIntegers_put_Height PROC NEAR 
				;void put::Height(int value);
 00002B64  55				push	EBP
 00002B65  8B EC			mov	EBP,ESP
 00002B67  51				push	ECX 
 00002B68  53				push	EBX 
 00002B69  56				push	ESI 
 00002B6A  57				push	EDI 
				;{

				;{500}:nHeight= value;
 00002B6B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B6E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B71  89 41 04			mov	dword ptr [ECX+0004h],EAX
				;}
 00002B74			$L000968:

 00002B74  5F				pop	EDI
 00002B75  5E				pop	ESI 
 00002B76  5B				pop	EBX 
 00002B77  C9				leave	
 00002B78  C2 0004			retn	000000004h
 00002B7B			UnitTesting_TestIntegers_put_Height ENDP

 00002B7B			UnitTesting_TestIntegers_Swap PROC NEAR 
				;void Swap(int ref value1, int ref value2);
 00002B7B  55				push	EBP
 00002B7C  8B EC			mov	EBP,ESP
 00002B7E  83 EC 08			sub	ESP,000000008h
 00002B81  53				push	EBX 
 00002B82  56				push	ESI 
 00002B83  57				push	EDI 
 00002B84  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002B87  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002B8A  B9 00000001			mov	ECX,000000001h 
 00002B8F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002B94  F3/ AB			rep stos	dword ptr [EDI]
 00002B96  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{782}:tmp= value1;
 00002B99  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002B9C  8B C3			mov	EAX,EBX 
 00002B9E  8B 03			mov	EAX,dword ptr [EBX]
 00002BA0  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{783}:value1= value2;
 00002BA3  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002BA6  8B C3			mov	EAX,EBX 
 00002BA8  8B 03			mov	EAX,dword ptr [EBX]
 00002BAA  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002BAD  89 03			mov	dword ptr [EBX],EAX

				;{784}:value2= tmp;
 00002BAF  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002BB2  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002BB5  89 03			mov	dword ptr [EBX],EAX
				;}
 00002BB7			$L001059:

 00002BB7  5F				pop	EDI
 00002BB8  5E				pop	ESI 
 00002BB9  5B				pop	EBX 
 00002BBA  C9				leave	
 00002BBB  C2 0008			retn	000000008h
 00002BBE			UnitTesting_TestIntegers_Swap ENDP

 00002BBE			UnitTesting_TestIntegers_SwapDebug PROC NEAR 
				;void SwapDebug(int ref value1, int ref value2);
 00002BBE  55				push	EBP
 00002BBF  8B EC			mov	EBP,ESP
 00002BC1  51				push	ECX 
 00002BC2  53				push	EBX 
 00002BC3  56				push	ESI 
 00002BC4  57				push	EDI 
				;{

				;{856}:System::Debug::OutputString("Swaping values...");
 00002BC5  8D 05 00000C18 R		lea	EAX,OFFSET $S001110
 00002BCB  50				push	EAX
 00002BCC  E8 00000000 E		call	 System_Debug_OutputString

				;{857}:Swap(value1, value2);
 00002BD1  FF 75 0C			push	dword ptr [EBP+000Ch]
 00002BD4  FF 75 08			push	dword ptr [EBP+0008h]
 00002BD7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002BDA  E8 FFFFFF9C			call	 UnitTesting_TestIntegers_Swap
				;}
 00002BDF			$L001107:

 00002BDF  5F				pop	EDI
 00002BE0  5E				pop	ESI 
 00002BE1  5B				pop	EBX 
 00002BE2  C9				leave	
 00002BE3  C2 0008			retn	000000008h
 00002BE6			UnitTesting_TestIntegers_SwapDebug ENDP

 00002BE6			UnitTesting_TestIntegers_get_Width PROC NEAR 
				;int get::Width(void);
 00002BE6  55				push	EBP
 00002BE7  8B EC			mov	EBP,ESP
 00002BE9  51				push	ECX 
 00002BEA  53				push	EBX 
 00002BEB  56				push	ESI 
 00002BEC  57				push	EDI 
				;{

				;{485}:return nWidth
 00002BED  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002BF0  8B 01			mov	EAX,dword ptr [ECX]
 00002BF2  EB 00			jmp	OFFSET $L000963
				;}
 00002BF4			$L000963:

 00002BF4  5F				pop	EDI
 00002BF5  5E				pop	ESI 
 00002BF6  5B				pop	EBX 
 00002BF7  C9				leave	
 00002BF8  C3				ret	
 00002BF9			UnitTesting_TestIntegers_get_Width ENDP

 00002BF9			UnitTesting_TestIntegers_put_Width PROC NEAR 
				;void put::Width(int value);
 00002BF9  55				push	EBP
 00002BFA  8B EC			mov	EBP,ESP
 00002BFC  51				push	ECX 
 00002BFD  53				push	EBX 
 00002BFE  56				push	ESI 
 00002BFF  57				push	EDI 
				;{

				;{490}:nWidth= value;
 00002C00  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C03  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C06  89 01			mov	dword ptr [ECX],EAX
				;}
 00002C08			$L000964:

 00002C08  5F				pop	EDI
 00002C09  5E				pop	ESI 
 00002C0A  5B				pop	EBX 
 00002C0B  C9				leave	
 00002C0C  C2 0004			retn	000000004h
 00002C0F			UnitTesting_TestIntegers_put_Width ENDP

 00002C0F			UnitTesting_TestIntegers_add PROC NEAR 
				;void add(int v1, int v2, int ref res);
 00002C0F  55				push	EBP
 00002C10  8B EC			mov	EBP,ESP
 00002C12  51				push	ECX 
 00002C13  53				push	EBX 
 00002C14  56				push	ESI 
 00002C15  57				push	EDI 
				;{

				;{797}:res= v1 + v2;
 00002C16  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C19  50				push	EAX
 00002C1A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002C1D  5A				pop	EDX
 00002C1E  03 C2			add	EAX,EDX
 00002C20  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C23  89 03			mov	dword ptr [EBX],EAX

				;{799}:Console::WriteLn("(+) the result is: ", res);
 00002C25  8D 05 00000192 R		lea	EAX,OFFSET $S001072
 00002C2B  6A 00			push	000000000h
 00002C2D  50				push	EAX 
 00002C2E  E8 00000000 E		call	 Console_WriteString
 00002C33  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C36  8B C3			mov	EAX,EBX 
 00002C38  8B 03			mov	EAX,dword ptr [EBX]
 00002C3A  50				push	EAX 
 00002C3B  E8 00000000 E		call	 Console_WriteInteger 
 00002C40  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002C45			$L001068:

 00002C45  5F				pop	EDI
 00002C46  5E				pop	ESI 
 00002C47  5B				pop	EBX 
 00002C48  C9				leave	
 00002C49  C2 000C			retn	00000000Ch
 00002C4C			UnitTesting_TestIntegers_add ENDP

 00002C4C			UnitTesting_TestIntegers_divide PROC NEAR 
				;void divide(int v1, int v2, int ref res);
 00002C4C  55				push	EBP
 00002C4D  8B EC			mov	EBP,ESP
 00002C4F  51				push	ECX 
 00002C50  53				push	EBX 
 00002C51  56				push	ESI 
 00002C52  57				push	EDI 
				;{

				;{818}:res= v1 div v2;
 00002C53  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C56  50				push	EAX
 00002C57  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002C5A  8B C8			mov	ECX,EAX
 00002C5C  58				pop	EAX
 00002C5D  33 D2			xor	EDX,EDX
 00002C5F  F7 F9			idiv	ECX
 00002C61  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C64  89 03			mov	dword ptr [EBX],EAX

				;{820}:Console::WriteLn("(div) the result is: ", res);
 00002C66  8D 05 00000468 R		lea	EAX,OFFSET $S001087
 00002C6C  6A 00			push	000000000h
 00002C6E  50				push	EAX 
 00002C6F  E8 00000000 E		call	 Console_WriteString
 00002C74  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C77  8B C3			mov	EAX,EBX 
 00002C79  8B 03			mov	EAX,dword ptr [EBX]
 00002C7B  50				push	EAX 
 00002C7C  E8 00000000 E		call	 Console_WriteInteger 
 00002C81  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002C86			$L001083:

 00002C86  5F				pop	EDI
 00002C87  5E				pop	ESI 
 00002C88  5B				pop	EBX 
 00002C89  C9				leave	
 00002C8A  C2 000C			retn	00000000Ch
 00002C8D			UnitTesting_TestIntegers_divide ENDP

 00002C8D			UnitTesting_TestIntegers_divide2 PROC NEAR 
				;void divide2(int v1, int v2, int ref res);
 00002C8D  55				push	EBP
 00002C8E  8B EC			mov	EBP,ESP
 00002C90  51				push	ECX 
 00002C91  53				push	EBX 
 00002C92  56				push	ESI 
 00002C93  57				push	EDI 
				;{

				;{832}:res= Math::Round(v1 / v2);
 00002C94  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C97  50				push	EAX
 00002C98  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002C9B  9B DB E2			fclex
 00002C9E  50				push	EAX
 00002C9F  E8 00000000 E		call	 FloatingPoint_FromInt
 00002CA4  50				push	EAX
 00002CA5  52				push	EDX 
 00002CA6  DD 04 24			fld	qword ptr [ESP]
 00002CA9  59				pop	ECX
 00002CAA  59				pop	ECX 
 00002CAB  E8 00000000 E		call	 FloatingPoint_FromInt
 00002CB0  50				push	EAX
 00002CB1  52				push	EDX 
 00002CB2  DC 3C 24			fdivr	qword ptr [ESP]
 00002CB5  DD 1C 24			fstp	qword ptr [ESP]
 00002CB8  E8 00000000 E		call	 Math_Round
 00002CBD  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002CC0  89 03			mov	dword ptr [EBX],EAX

				;{834}:Console::WriteLn("(round(/)) the result is: ", res);
 00002CC2  8D 05 000004C4 R		lea	EAX,OFFSET $S001097
 00002CC8  6A 00			push	000000000h
 00002CCA  50				push	EAX 
 00002CCB  E8 00000000 E		call	 Console_WriteString
 00002CD0  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002CD3  8B C3			mov	EAX,EBX 
 00002CD5  8B 03			mov	EAX,dword ptr [EBX]
 00002CD7  50				push	EAX 
 00002CD8  E8 00000000 E		call	 Console_WriteInteger 
 00002CDD  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002CE2			$L001093:

 00002CE2  5F				pop	EDI
 00002CE3  5E				pop	ESI 
 00002CE4  5B				pop	EBX 
 00002CE5  C9				leave	
 00002CE6  C2 000C			retn	00000000Ch
 00002CE9			UnitTesting_TestIntegers_divide2 ENDP

 00002CE9			UnitTesting_TestIntegers_getArea PROC NEAR 
				;int getArea(void);
 00002CE9  55				push	EBP
 00002CEA  8B EC			mov	EBP,ESP
 00002CEC  51				push	ECX 
 00002CED  53				push	EBX 
 00002CEE  56				push	ESI 
 00002CEF  57				push	EDI 
				;{

				;{505}:return Width * Height
 00002CF0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002CF3  E8 FFFFFEEE			call	 UnitTesting_TestIntegers_get_Width
 00002CF8  50				push	EAX
 00002CF9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002CFC  E8 FFFFFE4F			call	 UnitTesting_TestIntegers_get_Height
 00002D01  59				pop	ECX
 00002D02  99				cdq	
 00002D03  0F AF C1			imul	EAX,ECX
 00002D06  EB 00			jmp	OFFSET $L000970
				;}
 00002D08			$L000970:

 00002D08  5F				pop	EDI
 00002D09  5E				pop	ESI 
 00002D0A  5B				pop	EBX 
 00002D0B  C9				leave	
 00002D0C  C3				ret	
 00002D0D			UnitTesting_TestIntegers_getArea ENDP

 00002D0D			UnitTesting_TestIntegers_getArea2 PROC NEAR 
				;double getArea2(void);
 00002D0D  55				push	EBP
 00002D0E  8B EC			mov	EBP,ESP
 00002D10  51				push	ECX 
 00002D11  53				push	EBX 
 00002D12  56				push	ESI 
 00002D13  57				push	EDI 
				;{

				;{510}:return nWidth * nHeight * 1.0
 00002D14  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D17  8B 01			mov	EAX,dword ptr [ECX]
 00002D19  50				push	EAX
 00002D1A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D1D  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00002D20  59				pop	ECX
 00002D21  99				cdq	
 00002D22  0F AF C1			imul	EAX,ECX
 00002D25  50				push	EAX
 00002D26  D9 E8			fld1
 00002D28  9B DB E2			fclex
 00002D2B  E8 00000000 E		call	 FloatingPoint_FromInt
 00002D30  50				push	EAX
 00002D31  52				push	EDX 
 00002D32  DC 0C 24			fmul	qword ptr [ESP]
 00002D35  DD 1C 24			fstp	qword ptr [ESP]
 00002D38  5A				pop	EDX
 00002D39  58				pop	EAX 
 00002D3A  EB 00			jmp	OFFSET $L000971
				;}
 00002D3C			$L000971:

 00002D3C  5F				pop	EDI
 00002D3D  5E				pop	ESI 
 00002D3E  5B				pop	EBX 
 00002D3F  C9				leave	
 00002D40  C3				ret	
 00002D41			UnitTesting_TestIntegers_getArea2 ENDP

 00002D41			UnitTesting_TestIntegers_modulus PROC NEAR 
				;void modulus(int v1, int v2, int ref res);
 00002D41  55				push	EBP
 00002D42  8B EC			mov	EBP,ESP
 00002D44  51				push	ECX 
 00002D45  53				push	EBX 
 00002D46  56				push	ESI 
 00002D47  57				push	EDI 
				;{

				;{825}:res= v1 % v2;
 00002D48  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002D4B  50				push	EAX
 00002D4C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002D4F  8B C8			mov	ECX,EAX
 00002D51  58				pop	EAX
 00002D52  33 D2			xor	EDX,EDX
 00002D54  F7 F9			idiv	ECX
 00002D56  8B C2			mov	EAX,EDX 
 00002D58  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002D5B  89 03			mov	dword ptr [EBX],EAX

				;{827}:Console::WriteLn("(mod) the result is: ", res);
 00002D5D  8D 05 000004A7 R		lea	EAX,OFFSET $S001092
 00002D63  6A 00			push	000000000h
 00002D65  50				push	EAX 
 00002D66  E8 00000000 E		call	 Console_WriteString
 00002D6B  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002D6E  8B C3			mov	EAX,EBX 
 00002D70  8B 03			mov	EAX,dword ptr [EBX]
 00002D72  50				push	EAX 
 00002D73  E8 00000000 E		call	 Console_WriteInteger 
 00002D78  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002D7D			$L001088:

 00002D7D  5F				pop	EDI
 00002D7E  5E				pop	ESI 
 00002D7F  5B				pop	EBX 
 00002D80  C9				leave	
 00002D81  C2 000C			retn	00000000Ch
 00002D84			UnitTesting_TestIntegers_modulus ENDP

 00002D84			UnitTesting_TestIntegers_multiple_assignments PROC NEAR 
				;void multiple_assignments(int ref param1, int param2);
 00002D84  55				push	EBP
 00002D85  8B EC			mov	EBP,ESP
 00002D87  83 EC 0C			sub	ESP,00000000Ch
 00002D8A  53				push	EBX 
 00002D8B  56				push	ESI 
 00002D8C  57				push	EDI 
 00002D8D  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00002D90  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00002D93  B9 00000002			mov	ECX,000000002h 
 00002D98  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002D9D  F3/ AB			rep stos	dword ptr [EDI]
 00002D9F  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{839}:local= param2= param1= (0x400 * 1024) / 0x10;
 00002DA2  B8 00000400			mov	EAX,000000400h
 00002DA7  50				push	EAX
 00002DA8  B8 00000400			mov	EAX,000000400h
 00002DAD  59				pop	ECX
 00002DAE  33 D2			xor	EDX,EDX
 00002DB0  0F AF C1			imul	EAX,ECX
 00002DB3  50				push	EAX
 00002DB4  B8 00000010			mov	EAX,000000010h
 00002DB9  9B DB E2			fclex
 00002DBC  50				push	EAX
 00002DBD  E8 00000000 E		call	 FloatingPoint_FromInt
 00002DC2  50				push	EAX
 00002DC3  52				push	EDX 
 00002DC4  DD 04 24			fld	qword ptr [ESP]
 00002DC7  59				pop	ECX
 00002DC8  59				pop	ECX 
 00002DC9  E8 00000000 E		call	 FloatingPoint_FromInt
 00002DCE  50				push	EAX
 00002DCF  52				push	EDX 
 00002DD0  DC 3C 24			fdivr	qword ptr [ESP]
 00002DD3  DD 1C 24			fstp	qword ptr [ESP]
 00002DD6  E8 00000000 E		call	 FloatingPoint_ToInt
 00002DDB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002DDE  89 03			mov	dword ptr [EBX],EAX
 00002DE0  89 45 0C			mov	dword ptr [EBP+000Ch],EAX
 00002DE3  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{841}:what= (local == 0x10000);
 00002DE6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002DE9  50				push	EAX
 00002DEA  B8 00010000			mov	EAX,000010000h
 00002DEF  5A				pop	EDX
 00002DF0  3B D0			cmp	EDX,EAX
 00002DF2  0F 94 C0			setz	AL
 00002DF5  88 45 F8			mov	byte ptr [EBP-0008h],AL
				;}
 00002DF8			$L001098:

 00002DF8  5F				pop	EDI
 00002DF9  5E				pop	ESI 
 00002DFA  5B				pop	EBX 
 00002DFB  C9				leave	
 00002DFC  C2 0008			retn	000000008h
 00002DFF			UnitTesting_TestIntegers_multiple_assignments ENDP

 00002DFF			UnitTesting_TestIntegers_multiply PROC NEAR 
				;void multiply(int v1, int v2, int ref res);
 00002DFF  55				push	EBP
 00002E00  8B EC			mov	EBP,ESP
 00002E02  51				push	ECX 
 00002E03  53				push	EBX 
 00002E04  56				push	ESI 
 00002E05  57				push	EDI 
				;{

				;{811}:res= v1 * v2;
 00002E06  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002E09  50				push	EAX
 00002E0A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002E0D  59				pop	ECX
 00002E0E  99				cdq	
 00002E0F  0F AF C1			imul	EAX,ECX
 00002E12  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E15  89 03			mov	dword ptr [EBX],EAX

				;{813}:Console::WriteLn("(*) the result is: ", res);
 00002E17  8D 05 0000017E R		lea	EAX,OFFSET $S001082
 00002E1D  6A 00			push	000000000h
 00002E1F  50				push	EAX 
 00002E20  E8 00000000 E		call	 Console_WriteString
 00002E25  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E28  8B C3			mov	EAX,EBX 
 00002E2A  8B 03			mov	EAX,dword ptr [EBX]
 00002E2C  50				push	EAX 
 00002E2D  E8 00000000 E		call	 Console_WriteInteger 
 00002E32  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002E37			$L001078:

 00002E37  5F				pop	EDI
 00002E38  5E				pop	ESI 
 00002E39  5B				pop	EBX 
 00002E3A  C9				leave	
 00002E3B  C2 000C			retn	00000000Ch
 00002E3E			UnitTesting_TestIntegers_multiply ENDP

 00002E3E			UnitTesting_TestIntegers_subs PROC NEAR 
				;void subs(int v1, int v2, int ref res);
 00002E3E  55				push	EBP
 00002E3F  8B EC			mov	EBP,ESP
 00002E41  51				push	ECX 
 00002E42  53				push	EBX 
 00002E43  56				push	ESI 
 00002E44  57				push	EDI 
				;{

				;{804}:res= v1 - v2;
 00002E45  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002E48  50				push	EAX
 00002E49  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002E4C  5A				pop	EDX
 00002E4D  2B D0			sub	EDX,EAX
 00002E4F  8B C2			mov	EAX,EDX
 00002E51  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E54  89 03			mov	dword ptr [EBX],EAX

				;{806}:Console::WriteLn("(-) the result is: ", res);
 00002E56  8D 05 000001A6 R		lea	EAX,OFFSET $S001077
 00002E5C  6A 00			push	000000000h
 00002E5E  50	push	EAX 
 00002E5F  E8 00000000 E		call	 Console_WriteString
 00002E64  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E67  8B C3			mov	EAX,EBX 
 00002E69  8B 03			mov	EAX,dword ptr [EBX]
 00002E6B  50				push	EAX 
 00002E6C  E8 00000000 E		call	 Console_WriteInteger 
 00002E71  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002E76			$L001073:

 00002E76  5F				pop	EDI
 00002E77  5E				pop	ESI 
 00002E78  5B				pop	EBX 
 00002E79  C9				leave	
 00002E7A  C2 000C			retn	00000000Ch
 00002E7D			UnitTesting_TestIntegers_subs ENDP

 00002E7D			UnitTesting_TestIntegers PROC NEAR 
				;void UnitTesting::TestIntegers(void);
 00002E7D  55				push	EBP
 00002E7E  8B EC			mov	EBP,ESP
 00002E80  51				push	ECX 
 00002E81  53				push	EBX 
 00002E82  56				push	ESI 
 00002E83  57				push	EDI 
 00002E84  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002E87  E8 000018EC			call	 __member_Init@UnitTesting_TestIntegers

 00002E8C  5F				pop	EDI
 00002E8D  5E				pop	ESI 
 00002E8E  5B				pop	EBX 
 00002E8F  C9				leave	
 00002E90  C3				ret	
 00002E91			UnitTesting_TestIntegers ENDP

 00002E91			UnitTesting_TestIntegers_TestExpressions PROC NEAR 
				;void UnitTesting::TestIntegers::TestExpressions(void);
 00002E91  55				push	EBP
 00002E92  8B EC			mov	EBP,ESP
 00002E94  81 EC 00000084		sub	ESP,000000084h
 00002E9A  53				push	EBX 
 00002E9B  56				push	ESI 
 00002E9C  57				push	EDI 
 00002E9D  8D 7D 80			lea	EDI,dword ptr [EBP-0080h]
 00002EA0  B9 00000020			mov	ECX,000000020h
 00002EA5  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002EAA  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{517}:hex_value= 0xDEADC0DEh;
 00002EAC  B8 DEADC0DE			mov	EAX,0DEADC0DEh
 00002EB1  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{519}:hex_value= hex_value << 0x10;
 00002EB4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EB7  C1 E0 10			shl	EAX,000000010h
 00002EBA  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{521}:hex_value= hex_value >> 8;
 00002EBD  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EC0  C1 E8 08			shr	EAX,000000008h
 00002EC3  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{523}:hex_value= hex_value >> 8;
 00002EC6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EC9  C1 E8 08			shr	EAX,000000008h
 00002ECC  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{525}:shift= 0x10;
 00002ECF  B8 00000010			mov	EAX,000000010h
 00002ED4  66| 89 45 F8			mov	word ptr [EBP-0008h],AX

				;{527}:hex_value= hex_value << shift;
 00002ED8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EDB  50				push	EAX
 00002EDC  0F BF 45 F8			movsx	EAX,word ptr [EBP-0008h]
 00002EE0  8A C8			mov	CL,AL
 00002EE2  58				pop	EAX
 00002EE3  D3 E0			shl	EAX,CL
 00002EE5  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{529}:hex_value= hex_value >> shift;
 00002EE8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EEB  50				push	EAX
 00002EEC  0F BF 45 F8			movsx	EAX,word ptr [EBP-0008h]
 00002EF0  8A C8			mov	CL,AL
 00002EF2  58				pop	EAX
 00002EF3  D3 E8			shr	EAX,CL
 00002EF5  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{532}:j= 0;
 00002EF8  33 C0			xor	EAX,EAX
 00002EFA  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{534}:what= false;
 00002EFD  33 C0			xor	EAX,EAX
 00002EFF  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{543}:hex_value= 0;
 00002F02  33 C0			xor	EAX,EAX
 00002F04  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{545}:while(true)
 00002F07			$L001547:
 00002F07  B8 00000001			mov	EAX,000000001h
 00002F0C  84 C0			test	AL,AL
 00002F0E  74 7B			jz	OFFSET $L001548
				;{

				;{547}:j= (4 + (--j)) % 4;
 00002F10  B8 00000004			mov	EAX,000000004h
 00002F15  50				push	EAX
 00002F16  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00002F19  FF 0B			dec	dword ptr [EBX]
 00002F1B  8B 03			mov	EAX,dword ptr [EBX]
 00002F1D  5A				pop	EDX
 00002F1E  03 C2			add	EAX,EDX
 00002F20  50				push	EAX
 00002F21  B8 00000004			mov	EAX,000000004h
 00002F26  8B C8			mov	ECX,EAX
 00002F28  58				pop	EAX
 00002F29  33 D2			xor	EDX,EDX
 00002F2B  F7 F9			idiv	ECX
 00002F2D  8B C2			mov	EAX,EDX 
 00002F2F  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{549}:Console::WriteLn(" j = (4 + (--j))%4 ==", j);
 00002F32  8D 05 00000157 R		lea	EAX,OFFSET $S000982
 00002F38  6A 00			push	000000000h
 00002F3A  50				push	EAX 
 00002F3B  E8 00000000 E		call	 Console_WriteString
 00002F40  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002F43  50				push	EAX 
 00002F44  E8 00000000 E		call	 Console_WriteInteger 
 00002F49  E8 00000000 E		call	 Console_WriteCrLf 

				;{551}:if(++hex_value < 12)
 00002F4E  FF 45 FC			inc	dword ptr [EBP-4]
 00002F51  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00002F54  50				push	EAX
 00002F55  B8 0000000C			mov	EAX,00000000Ch
 00002F5A  5A				pop	EDX
 00002F5B  3B D0			cmp	EDX,EAX
 00002F5D  0F 9C C0			setl	AL
 00002F60  84 C0			test	AL,AL
 00002F62  74 02			jz	OFFSET $L001549

				;continue;
 00002F64  EB A1			jmp	OFFSET $L001547
 00002F66			$L001549:

				;{554}:what= (j % 2) == 0;
 00002F66  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002F69  50				push	EAX
 00002F6A  B8 00000002			mov	EAX,000000002h
 00002F6F  8B C8			mov	ECX,EAX
 00002F71  58				pop	EAX
 00002F72  33 D2			xor	EDX,EDX
 00002F74  F7 F9			idiv	ECX
 00002F76  8B C2			mov	EAX,EDX 
 00002F78  50				push	EAX
 00002F79  33 C0			xor	EAX,EAX
 00002F7B  5A				pop	EDX
 00002F7C  3B D0			cmp	EDX,EAX
 00002F7E  0F 94 C0			setz	AL
 00002F81  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;break;
 00002F84  EB 05			jmp	OFFSET $L001548
				;}
 00002F86  E9 FFFFFF7C			jmp	OFFSET $L001547
 00002F8B			$L001548:

				;{559}:what= j == 3;
 00002F8B  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002F8E  50				push	EAX
 00002F8F  B8 00000003			mov	EAX,000000003h
 00002F94  5A				pop	EDX
 00002F95  3B D0			cmp	EDX,EAX
 00002F97  0F 94 C0			setz	AL
 00002F9A  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;do
 00002F9D			$L001551:
				;{

				;{562}:j= (4 + (--j)) % 4;
 00002F9D  B8 00000004			mov	EAX,000000004h
 00002FA2  50				push	EAX
 00002FA3  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00002FA6  FF 0B			dec	dword ptr [EBX]
 00002FA8  8B 03			mov	EAX,dword ptr [EBX]
 00002FAA  5A				pop	EDX
 00002FAB  03 C2			add	EAX,EDX
 00002FAD  50				push	EAX
 00002FAE  B8 00000004			mov	EAX,000000004h
 00002FB3  8B C8			mov	ECX,EAX
 00002FB5  58				pop	EAX
 00002FB6  33 D2			xor	EDX,EDX
 00002FB8  F7 F9			idiv	ECX
 00002FBA  8B C2			mov	EAX,EDX 
 00002FBC  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{563}:Console::WriteLn(" j = (4 + (--j))%4 ==", j);
 00002FBF  8D 05 00000157 R		lea	EAX,OFFSET $S000982
 00002FC5  6A 00			push	000000000h
 00002FC7  50				push	EAX 
 00002FC8  E8 00000000 E		call	 Console_WriteString
 00002FCD  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FD0  50				push	EAX 
 00002FD1  E8 00000000 E		call	 Console_WriteInteger 
 00002FD6  E8 00000000 E		call	 Console_WriteCrLf 

				;{565}:if(j == 0)
 00002FDB  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FDE  50				push	EAX
 00002FDF  33 C0			xor	EAX,EAX
 00002FE1  5A				pop	EDX
 00002FE2  3B D0			cmp	EDX,EAX
 00002FE4  0F 94 C0			setz	AL
 00002FE7  84 C0			test	AL,AL
 00002FE9  74 02			jz	OFFSET $L001554

				;break;
 00002FEB  EB 10			jmp	OFFSET $L001553
 00002FED			$L001554:
				;}
 00002FED			$L001552:

				;{566}:while(j > 0)
 00002FED  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FF0  50				push	EAX
 00002FF1  33 C0			xor	EAX,EAX
 00002FF3  5A				pop	EDX
 00002FF4  3B D0			cmp	EDX,EAX
 00002FF6  0F 9F C0			setg	AL
 00002FF9  84 C0			test	AL,AL
 00002FFB  75 A0			jne	OFFSET $L001551
 00002FFD			$L001553:

				;{570}:x= 0;
 00002FFD  33 C0			xor	EAX,EAX
 00002FFF  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{572}:y= 1, z= 2;
 00003002  B8 00000001			mov	EAX,000000001h
 00003007  89 45 E8			mov	dword ptr [EBP-0018h],EAX
 0000300A  B8 00000002			mov	EAX,000000002h
 0000300F  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{574}:result= (y + 1) * z;
 00003012  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003015  50				push	EAX
 00003016  B8 00000001			mov	EAX,000000001h
 0000301B  5A				pop	EDX
 0000301C  03 C2			add	EAX,EDX
 0000301E  50				push	EAX
 0000301F  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00003022  59				pop	ECX
 00003023  99				cdq	
 00003024  0F AF C1			imul	EAX,ECX
 00003027  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{576}:x++ ;
 0000302A  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 0000302D  FF 45 EC			inc	dword ptr [EBP-20]

				;{577}:++x;
 00003030  FF 45 EC			inc	dword ptr [EBP-20]
 00003033  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{579}:x+= 14;
 00003036  B8 0000000E			mov	EAX,00000000Eh
 0000303B  F8				clc	
 0000303C  01 45 EC			add	dword ptr [EBP-0014h],EAX

				;{583}:what= x == 0x10h;
 0000303F  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003042  50				push	EAX
 00003043  B8 00000010			mov	EAX,000000010h
 00003048  5A				pop	EDX
 00003049  3B D0			cmp	EDX,EAX
 0000304B  0F 94 C0			setz	AL
 0000304E  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{585}:Console::WriteLn("(what = x==0x10h)		= ", what);
 00003051  8D 05 000005EC R		lea	EAX,OFFSET $S000990
 00003057  6A 00			push	000000000h
 00003059  50				push	EAX 
 0000305A  E8 00000000 E		call	 Console_WriteString
 0000305F  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003063  50				push	EAX 
 00003064  E8 00000000 E		call	 Console_WriteBoolean 
 00003069  E8 00000000 E		call	 Console_WriteCrLf 

				;{587}:x/= 4;
 0000306E  B8 00000004			mov	EAX,000000004h
 00003073  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003076  50				push	EAX
 00003077  8B 03			mov	EAX,dword ptr [EBX]
 00003079  99				cdq	
 0000307A  F7 3C 24			idiv	dword ptr [ESP]
 0000307D  89 03			mov	dword ptr [EBX],EAX 
 0000307F  59				pop	ECX

				;{589}:--x;
 00003080  FF 4D EC			dec	dword ptr [EBP-20]
 00003083  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{590}:x-- ;
 00003086  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003089  FF 4D EC			dec	dword ptr [EBP-20]

				;{592}:x= 7 % x;
 0000308C  B8 00000007			mov	EAX,000000007h
 00003091  50				push	EAX
 00003092  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003095  8B C8			mov	ECX,EAX
 00003097  58				pop	EAX
 00003098  33 D2			xor	EDX,EDX
 0000309A  F7 F9			idiv	ECX
 0000309C  8B C2			mov	EAX,EDX 
 0000309E  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{594}:what= x == 1;
 000030A1  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000030A4  50				push	EAX
 000030A5  B8 00000001			mov	EAX,000000001h
 000030AA  5A				pop	EDX
 000030AB  3B D0			cmp	EDX,EAX
 000030AD  0F 94 C0			setz	AL
 000030B0  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{596}:Console::WriteLn("(what = x==1)			= ", what);
 000030B3  8D 05 0000061A R		lea	EAX,OFFSET $S000992
 000030B9  6A 00			push	000000000h
 000030BB  50				push	EAX 
 000030BC  E8 00000000 E		call	 Console_WriteString
 000030C1  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000030C5  50				push	EAX 
 000030C6  E8 00000000 E		call	 Console_WriteBoolean 
 000030CB  E8 00000000 E		call	 Console_WriteCrLf 

				;{598}:x++ ;
 000030D0  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000030D3  FF 45 EC			inc	dword ptr [EBP-20]

				;{600}:x*= 10;
 000030D6  B8 0000000A			mov	EAX,00000000Ah
 000030DB  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030DE  F7 2B			imul	dword ptr [EBX]
 000030E0  89 03			mov	dword ptr [EBX],EAX

				;{602}:x/= 5;
 000030E2  B8 00000005			mov	EAX,000000005h
 000030E7  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030EA  50				push	EAX
 000030EB  8B 03			mov	EAX,dword ptr [EBX]
 000030ED  99				cdq	
 000030EE  F7 3C 24			idiv	dword ptr [ESP]
 000030F1  89 03			mov	dword ptr [EBX],EAX 
 000030F3  59				pop	ECX

				;{604}:x/= 4;
 000030F4  B8 00000004			mov	EAX,000000004h
 000030F9  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030FC  50				push	EAX
 000030FD  8B 03			mov	EAX,dword ptr [EBX]
 000030FF  99				cdq	
 00003100  F7 3C 24			idiv	dword ptr [ESP]
 00003103  89 03			mov	dword ptr [EBX],EAX 
 00003105  59				pop	ECX

				;{606}:x%= 4;
 00003106  B8 00000004			mov	EAX,000000004h
 0000310B  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000310E  50				push	EAX
 0000310F  8B 03			mov	EAX,dword ptr [EBX]
 00003111  99				cdq	
 00003112  F7 3C 24			idiv	dword ptr [ESP]
 00003115  89 13			mov	dword ptr [EBX],EDX 
 00003117  59				pop	ECX

				;{608}:y= 0x400h;
 00003118  B8 00000400			mov	EAX,000000400h
 0000311D  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{610}:x= y div 15;
 00003120  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003123  50				push	EAX
 00003124  B8 0000000F			mov	EAX,00000000Fh
 00003129  8B C8			mov	ECX,EAX
 0000312B  58				pop	EAX
 0000312C  33 D2			xor	EDX,EDX
 0000312E  F7 F9			idiv	ECX
 00003130  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{612}:what= x == 68;
 00003133  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003136  50				push	EAX
 00003137  B8 00000044			mov	EAX,000000044h
 0000313C  5A				pop	EDX
 0000313D  3B D0			cmp	EDX,EAX
 0000313F  0F 94 C0			setz	AL
 00003142  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{614}:Console::WriteLn("(what = x == 68) 		= ", what);
 00003145  8D 05 000005A8 R		lea	EAX,OFFSET $S000996
 0000314B  6A 00			push	000000000h
 0000314D  50				push	EAX 
 0000314E  E8 00000000 E		call	 Console_WriteString
 00003153  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003157  50				push	EAX 
 00003158  E8 00000000 E		call	 Console_WriteBoolean 
 0000315D  E8 00000000 E		call	 Console_WriteCrLf 

				;{618}:z= 0x10;
 00003162  B8 00000010			mov	EAX,000000010h
 00003167  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{620}:x= y * z;
 0000316A  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 0000316D  50				push	EAX
 0000316E  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00003171  59				pop	ECX
 00003172  99				cdq	
 00003173  0F AF C1			imul	EAX,ECX
 00003176  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{622}:what= x == 0x4000;
 00003179  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000317C  50				push	EAX
 0000317D  B8 00004000			mov	EAX,000004000h
 00003182  5A				pop	EDX
 00003183  3B D0			cmp	EDX,EAX
 00003185  0F 94 C0			setz	AL
 00003188  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{624}:Console::WriteLn("(what = x==0x4000) 		= ", what);
 0000318B  8D 05 00000602 R		lea	EAX,OFFSET $S000998
 00003191  6A 00			push	000000000h
 00003193  50				push	EAX 
 00003194  E8 00000000 E		call	 Console_WriteString
 00003199  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000319D  50				push	EAX 
 0000319E  E8 00000000 E		call	 Console_WriteBoolean 
 000031A3  E8 00000000 E		call	 Console_WriteCrLf 

				;{626}:y= z= x;
 000031A8  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000031AB  89 45 E4			mov	dword ptr [EBP-001Ch],EAX
 000031AE  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{628}:x= y div 4;
 000031B1  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000031B4  50				push	EAX
 000031B5  B8 00000004			mov	EAX,000000004h
 000031BA  8B C8			mov	ECX,EAX
 000031BC  58				pop	EAX
 000031BD  33 D2			xor	EDX,EDX
 000031BF  F7 F9			idiv	ECX
 000031C1  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{630}:what= x == 4096;
 000031C4  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000031C7  50				push	EAX
 000031C8  B8 00001000			mov	EAX,000001000h
 000031CD  5A				pop	EDX
 000031CE  3B D0			cmp	EDX,EAX
 000031D0  0F 94 C0			setz	AL
 000031D3  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{632}:Console::WriteLn("(what = x==4096) 		= ", what);
 000031D6  8D 05 0000062D R		lea	EAX,OFFSET $S001000
 000031DC  6A 00			push	000000000h
 000031DE  50				push	EAX 
 000031DF  E8 00000000 E		call	 Console_WriteString
 000031E4  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000031E8  50				push	EAX 
 000031E9  E8 00000000 E		call	 Console_WriteBoolean 
 000031EE  E8 00000000 E		call	 Console_WriteCrLf 

				;{634}:z= x % 3;
 000031F3  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000031F6  50				push	EAX
 000031F7  B8 00000003			mov	EAX,000000003h
 000031FC  8B C8			mov	ECX,EAX
 000031FE  58				pop	EAX
 000031FF  33 D2			xor	EDX,EDX
 00003201  F7 F9			idiv	ECX
 00003203  8B C2			mov	EAX,EDX 
 00003205  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{636}:what= z == 1;
 00003208  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 0000320B  50				push	EAX
 0000320C  B8 00000001			mov	EAX,000000001h
 00003211  5A				pop	EDX
 00003212  3B D0			cmp	EDX,EAX
 00003214  0F 94 C0			setz	AL
 00003217  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{638}:y= x div 3;
 0000321A  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000321D  50				push	EAX
 0000321E  B8 00000003			mov	EAX,000000003h
 00003223  8B C8			mov	ECX,EAX
 00003225  58				pop	EAX
 00003226  33 D2			xor	EDX,EDX
 00003228  F7 F9			idiv	ECX
 0000322A  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{640}:what= y == 1365;
 0000322D  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003230  50				push	EAX
 00003231  B8 00000555			mov	EAX,000000555h
 00003236  5A				pop	EDX
 00003237  3B D0			cmp	EDX,EAX
 00003239  0F 94 C0			setz	AL
 0000323C  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{642}:Console::WriteLn("(what = y==1365) 		= ", what);
 0000323F  8D 05 00000643 R		lea	EAX,OFFSET $S001002
 00003245  6A 00			push	000000000h
 00003247  50				push	EAX 
 00003248  E8 00000000 E		call	 Console_WriteString
 0000324D  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003251  50				push	EAX 
 00003252  E8 00000000 E		call	 Console_WriteBoolean 
 00003257  E8 00000000 E		call	 Console_WriteCrLf 

				;{644}:result= FloatingPoint::ToInt(x / 3);
 0000325C  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000325F  50				push	EAX
 00003260  B8 00000003			mov	EAX,000000003h
 00003265  9B DB E2			fclex
 00003268  50				push	EAX
 00003269  E8 00000000 E		call	 FloatingPoint_FromInt
 0000326E  50				push	EAX
 0000326F  52				push	EDX 
 00003270  DD 04 24			fld	qword ptr [ESP]
 00003273  59				pop	ECX
 00003274  59				pop	ECX 
 00003275  E8 00000000 E		call	 FloatingPoint_FromInt
 0000327A  50				push	EAX
 0000327B  52				push	EDX 
 0000327C  DC 3C 24			fdivr	qword ptr [ESP]
 0000327F  DD 1C 24			fstp	qword ptr [ESP]
 00003282  E8 00000000 E		call	 FloatingPoint_ToInt
 00003287  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{646}:what= (result == 1365.0);
 0000328A  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000328D  50				push	EAX
 0000328E  33 D2			xor	EDX,EDX
 00003290  B8 40955400			mov	EAX,040955400h
 00003295  50				push	EAX
 00003296  52				push	EDX 
 00003297  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 0000329C  83 F8 00			cmp	EAX,000000000h
 0000329F  F7 D8			neg	EAX
 000032A1  0F 94 C0			setz	AL
 000032A4  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{648}:Console::WriteLn("(what = (result==1365.0)) 	= ", what);
 000032A7  8D 05 000004FB R		lea	EAX,OFFSET $S001004
 000032AD  6A 00			push	000000000h
 000032AF  50				push	EAX 
 000032B0  E8 00000000 E		call	 Console_WriteString
 000032B5  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000032B9  50				push	EAX 
 000032BA  E8 00000000 E		call	 Console_WriteBoolean 
 000032BF  E8 00000000 E		call	 Console_WriteCrLf 

				;{650}:result= x div (3 + 1);
 000032C4  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000032C7  50				push	EAX
 000032C8  B8 00000003			mov	EAX,000000003h
 000032CD  50				push	EAX
 000032CE  B8 00000001			mov	EAX,000000001h
 000032D3  5A				pop	EDX
 000032D4  03 C2			add	EAX,EDX
 000032D6  8B C8			mov	ECX,EAX
 000032D8  58				pop	EAX
 000032D9  33 D2			xor	EDX,EDX
 000032DB  F7 F9			idiv	ECX
 000032DD  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{652}:what= (result == 1024);
 000032E0  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000032E3  50				push	EAX
 000032E4  B8 00000400			mov	EAX,000000400h
 000032E9  5A				pop	EDX
 000032EA  3B D0			cmp	EDX,EAX
 000032EC  0F 94 C0			setz	AL
 000032EF  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{654}:Console::WriteLn("(what = (result==1024)) 	= ", what);
 000032F2  8D 05 000004DF R		lea	EAX,OFFSET $S001006
 000032F8  6A 00			push	000000000h
 000032FA  50				push	EAX 
 000032FB  E8 00000000 E		call	 Console_WriteString
 00003300  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003304  50				push	EAX 
 00003305  E8 00000000 E		call	 Console_WriteBoolean 
 0000330A  E8 00000000 E		call	 Console_WriteCrLf 

				;{656}:a= 20000, b= 4, c= 10;
 0000330F  B8 00004E20			mov	EAX,000004E20h
 00003314  66| 89 45 DC			mov	word ptr [EBP-0024h],AX
 00003318  B8 00000004			mov	EAX,000000004h
 0000331D  66| 89 45 D8			mov	word ptr [EBP-0028h],AX
 00003321  B8 0000000A			mov	EAX,00000000Ah
 00003326  66| 89 45 D4			mov	word ptr [EBP-002Ch],AX

				;{658}:result= a * b * c;
 0000332A  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 0000332E  50				push	EAX
 0000332F  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 00003333  59				pop	ECX
 00003334  33 D2			xor	EDX,EDX
 00003336  0F AF C1			imul	EAX,ECX
 00003339  50				push	EAX
 0000333A  0F BF 45 D4			movsx	EAX,word ptr [EBP-002Ch]
 0000333E  59				pop	ECX 
 0000333F  33 D2			xor	EDX,EDX 
 00003341  0F AF C1			imul	EAX,ECX 
 00003344  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{660}:what= result == 0xC3500h;
 00003347  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000334A  50				push	EAX
 0000334B  B8 000C3500			mov	EAX,0000C3500h
 00003350  5A				pop	EDX
 00003351  3B D0			cmp	EDX,EAX
 00003353  0F 94 C0			setz	AL
 00003356  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{662}:Console::WriteLn("(what = result==0xC3500h) 	= ", what);
 00003359  8D 05 0000056B R		lea	EAX,OFFSET $S001012
 0000335F  6A 00			push	000000000h
 00003361  50				push	EAX 
 00003362  E8 00000000 E		call	 Console_WriteString
 00003367  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000336B  50				push	EAX 
 0000336C  E8 00000000 E		call	 Console_WriteBoolean 
 00003371  E8 00000000 E		call	 Console_WriteCrLf 

				;{664}:result/= 0x10;
 00003376  B8 00000010			mov	EAX,000000010h
 0000337B  8D 5D E0			lea	EBX,dword ptr [EBP-0020h]
 0000337E  50				push	EAX
 0000337F  8B 03			mov	EAX,dword ptr [EBX]
 00003381  99				cdq	
 00003382  F7 3C 24			idiv	dword ptr [ESP]
 00003385  89 03			mov	dword ptr [EBX],EAX 
 00003387  59				pop	ECX

				;{666}:what= (result == 50000);
 00003388  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000338B  50				push	EAX
 0000338C  B8 0000C350			mov	EAX,00000C350h
 00003391  5A				pop	EDX
 00003392  3B D0			cmp	EDX,EAX
 00003394  0F 94 C0			setz	AL
 00003397  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{668}:Console::WriteLn("(what = (result==50000)) 	= ", what);
 0000339A  8D 05 00000536 R		lea	EAX,OFFSET $S001014
 000033A0  6A 00			push	000000000h
 000033A2  50				push	EAX 
 000033A3  E8 00000000 E		call	 Console_WriteString
 000033A8  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000033AC  50				push	EAX 
 000033AD  E8 00000000 E		call	 Console_WriteBoolean 
 000033B2  E8 00000000 E		call	 Console_WriteCrLf 

				;{670}:x= result % 3;
 000033B7  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000033BA  50				push	EAX
 000033BB  B8 00000003			mov	EAX,000000003h
 000033C0  8B C8			mov	ECX,EAX
 000033C2  58				pop	EAX
 000033C3  33 D2			xor	EDX,EDX
 000033C5  F7 F9			idiv	ECX
 000033C7  8B C2			mov	EAX,EDX 
 000033C9  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{672}:result= Math::Round(a / 3) * 5;
 000033CC  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 000033D0  50				push	EAX
 000033D1  B8 00000003			mov	EAX,000000003h
 000033D6  9B DB E2			fclex
 000033D9  50				push	EAX
 000033DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000033DF  50				push	EAX
 000033E0  52				push	EDX 
 000033E1  DD 04 24			fld	qword ptr [ESP]
 000033E4  59				pop	ECX
 000033E5  59				pop	ECX 
 000033E6  E8 00000000 E		call	 FloatingPoint_FromInt
 000033EB  50				push	EAX
 000033EC  52				push	EDX 
 000033ED  DC 3C 24			fdivr	qword ptr [ESP]
 000033F0  DD 1C 24			fstp	qword ptr [ESP]
 000033F3  E8 00000000 E		call	 Math_Round
 000033F8  50				push	EAX
 000033F9  B8 00000005			mov	EAX,000000005h
 000033FE  59				pop	ECX
 000033FF  33 D2			xor	EDX,EDX
 00003401  0F AF C1			imul	EAX,ECX
 00003404  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{674}:what= (result == 33335);
 00003407  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000340A  50				push	EAX
 0000340B  B8 00008237			mov	EAX,000008237h
 00003410  5A				pop	EDX
 00003411  3B D0			cmp	EDX,EAX
 00003413  0F 94 C0			setz	AL
 00003416  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{676}:Console::WriteLn("(what = (result==33335)) 	= ", what);
 00003419  8D 05 00000519 R		lea	EAX,OFFSET $S001016
 0000341F  6A 00			push	000000000h
 00003421  50				push	EAX 
 00003422  E8 00000000 E		call	 Console_WriteString
 00003427  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000342B  50				push	EAX 
 0000342C  E8 00000000 E		call	 Console_WriteBoolean 
 00003431  E8 00000000 E		call	 Console_WriteCrLf 

				;{678}:a= 1;
 00003436  B8 00000001			mov	EAX,000000001h
 0000343B  66| 89 45 DC			mov	word ptr [EBP-0024h],AX

				;{678}:b= 4;
 0000343F  B8 00000004			mov	EAX,000000004h
 00003444  66| 89 45 D8			mov	word ptr [EBP-0028h],AX

				;{678}:c= 4;
 00003448  B8 00000004			mov	EAX,000000004h
 0000344D  66| 89 45 D4			mov	word ptr [EBP-002Ch],AX

				;{680}:disc= Math::Sqr(b) - 4 * a * c;
 00003451  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 00003455  50				push	EAX
 00003456  E8 00000000 E		call	 FloatingPoint_FromInt
 0000345B  50				push	EAX
 0000345C  52				push	EDX 
 0000345D  E8 00000000 E		call	 Math_Sqr
 00003462  50				push	EAX
 00003463  52				push	EDX 
 00003464  B8 00000004			mov	EAX,000000004h
 00003469  50				push	EAX
 0000346A  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 0000346E  59				pop	ECX
 0000346F  33 D2			xor	EDX,EDX
 00003471  0F AF C1			imul	EAX,ECX
 00003474  50				push	EAX
 00003475  0F BF 45 D4			movsx	EAX,word ptr [EBP-002Ch]
 00003479  59				pop	ECX 
 0000347A  33 D2			xor	EDX,EDX 
 0000347C  0F AF C1			imul	EAX,ECX 
 0000347F  50				push	EAX
 00003480  E8 00000000 E		call	 FloatingPoint_FromInt
 00003485  50				push	EAX
 00003486  52				push	EDX 
 00003487  DD 04 24			fld	qword ptr [ESP]
 0000348A  59				pop	ECX
 0000348B  59				pop	ECX 
 0000348C  DD 04 24			fld	qword ptr [ESP]
 0000348F  D8 E1			fsub	st,st(1)
 00003491  DD 1C 24			fstp	qword ptr [ESP]
 00003494  DD C0			ffree	st
 00003496  DD 04 24			fld	qword ptr [ESP]
 00003499  DD 5D CC			fstp	qword ptr [EBP-0034h]

				;{683}:what= disc == 0.0;
 0000349C  5A				pop	EDX
 0000349D  58				pop	EAX 
 0000349E  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 000034A1  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 000034A4  50				push	EAX
 000034A5  52				push	EDX 
 000034A6  D9 EE			fldz
 000034A8  51				push	ECX
 000034A9  51				push	ECX 
 000034AA  DD 1C 24			fstp	qword ptr [ESP]
 000034AD  E8 00000000 E		call	 FloatingPoint_Compare
 000034B2  83 F8 00			cmp	EAX,000000000h
 000034B5  F7 D8			neg	EAX
 000034B7  0F 94 C0			setz	AL
 000034BA  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{685}:Console::WriteLn("(what = disc==0.0) 		= ", what);
 000034BD  8D 05 00000553 R		lea	EAX,OFFSET $S001018
 000034C3  6A 00			push	000000000h
 000034C5  50				push	EAX 
 000034C6  E8 00000000 E		call	 Console_WriteString
 000034CB  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000034CF  50				push	EAX 
 000034D0  E8 00000000 E		call	 Console_WriteBoolean 
 000034D5  E8 00000000 E		call	 Console_WriteCrLf 

				;{687}:x1= (-b + Math::Sqrt(disc)) / 2 * a;
 000034DA  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 000034DE  F7 D8			neg	EAX
 000034E0  50				push	EAX
 000034E1  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 000034E4  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 000034E7  50				push	EAX
 000034E8  52				push	EDX 
 000034E9  E8 00000000 E		call	 Math_Sqrt
 000034EE  50				push	EAX
 000034EF  52				push	EDX 
 000034F0  DD 04 24			fld	qword ptr [ESP]
 000034F3  59				pop	ECX
 000034F4  59				pop	ECX 
 000034F5  E8 00000000 E		call	 FloatingPoint_FromInt
 000034FA  50				push	EAX
 000034FB  52				push	EDX 
 000034FC  DC 04 24			fadd	qword ptr [ESP]
 000034FF  DD 1C 24			fstp	qword ptr [ESP]
 00003502  B8 00000002			mov	EAX,000000002h
 00003507  9B DB E2			fclex
 0000350A  50				push	EAX
 0000350B  E8 00000000 E		call	 FloatingPoint_FromInt
 00003510  50				push	EAX
 00003511  52				push	EDX 
 00003512  DD 04 24			fld	qword ptr [ESP]
 00003515  59				pop	ECX
 00003516  59				pop	ECX 
 00003517  DC 3C 24			fdivr	qword ptr [ESP]
 0000351A  DD 1C 24			fstp	qword ptr [ESP]
 0000351D  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003521  9B DB E2			fclex
 00003524  50				push	EAX
 00003525  E8 00000000 E		call	 FloatingPoint_FromInt
 0000352A  50				push	EAX
 0000352B  52				push	EDX 
 0000352C  DD 04 24			fld	qword ptr [ESP]
 0000352F  59				pop	ECX 
 00003530  59				pop	ECX 
 00003531  DC 0C 24			fmul	qword ptr [ESP]
 00003534  DD 1C 24			fstp	qword ptr [ESP]
 00003537  DD C0			ffree	st
 00003539  DD 04 24			fld	qword ptr [ESP]
 0000353C  DD 5D C4			fstp	qword ptr [EBP-003Ch]

				;{688}:what= x1 == -2.0;
 0000353F  5A				pop	EDX
 00003540  58				pop	EAX 
 00003541  8B 55 C4			mov	EDX,dword ptr [EBP-003Ch]
 00003544  8B 45 C8			mov	EAX,dword ptr [EBP-0038h] 
 00003547  50				push	EAX
 00003548  52				push	EDX 
 00003549  33 D2			xor	EDX,EDX
 0000354B  B8 40000000			mov	EAX,040000000h
 00003550  50				push	EAX
 00003551  52				push	EDX 
 00003552  DD 04 24			fld	qword ptr [ESP]
 00003555  D9 E0			fchs
 00003557  DD 1C 24			fstp	qword ptr [ESP]
 0000355A  E8 00000000 E		call	 FloatingPoint_Compare
 0000355F  83 F8 00			cmp	EAX,000000000h
 00003562  F7 D8			neg	EAX
 00003564  0F 94 C0			setz	AL
 00003567  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{690}:Console::WriteLn("(what = x1==-2.0) 		= ", what);
 0000356A  8D 05 000005BE R		lea	EAX,OFFSET $S001021
 00003570  6A 00			push	000000000h
 00003572  50				push	EAX 
 00003573  E8 00000000 E		call	 Console_WriteString
 00003578  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000357C  50				push	EAX 
 0000357D  E8 00000000 E		call	 Console_WriteBoolean 
 00003582  E8 00000000 E		call	 Console_WriteCrLf 

				;{692}:x2= (-b - Math::Sqrt(disc)) / 2 * a;
 00003587  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 0000358B  F7 D8			neg	EAX
 0000358D  50				push	EAX
 0000358E  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 00003591  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 00003594  50				push	EAX
 00003595  52				push	EDX 
 00003596  E8 00000000 E		call	 Math_Sqrt
 0000359B  50				push	EAX
 0000359C  52				push	EDX 
 0000359D  DD 04 24			fld	qword ptr [ESP]
 000035A0  59				pop	ECX
 000035A1  59				pop	ECX 
 000035A2  E8 00000000 E		call	 FloatingPoint_FromInt
 000035A7  50				push	EAX
 000035A8  52				push	EDX 
 000035A9  DD 04 24			fld	qword ptr [ESP]
 000035AC  D8 E1			fsub	st,st(1)
 000035AE  DD 1C 24			fstp	qword ptr [ESP]
 000035B1  B8 00000002			mov	EAX,000000002h
 000035B6  9B DB E2			fclex
 000035B9  50				push	EAX
 000035BA  E8 00000000 E		call	 FloatingPoint_FromInt
 000035BF  50				push	EAX
 000035C0  52				push	EDX 
 000035C1  DD 04 24			fld	qword ptr [ESP]
 000035C4  59				pop	ECX
 000035C5  59				pop	ECX 
 000035C6  DC 3C 24			fdivr	qword ptr [ESP]
 000035C9  DD 1C 24			fstp	qword ptr [ESP]
 000035CC  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 000035D0  9B DB E2			fclex
 000035D3  50				push	EAX
 000035D4  E8 00000000 E		call	 FloatingPoint_FromInt
 000035D9  50				push	EAX
 000035DA  52				push	EDX 
 000035DB  DD 04 24			fld	qword ptr [ESP]
 000035DE  59				pop	ECX 
 000035DF  59				pop	ECX 
 000035E0  DC 0C 24			fmul	qword ptr [ESP]
 000035E3  DD 1C 24			fstp	qword ptr [ESP]
 000035E6  DD C0			ffree	st
 000035E8  DD 04 24			fld	qword ptr [ESP]
 000035EB  DD 5D BC			fstp	qword ptr [EBP-0044h]

				;{693}:what= x2 == -2.0;
 000035EE  5A				pop	EDX
 000035EF  58				pop	EAX 
 000035F0  8B 55 BC			mov	EDX,dword ptr [EBP-0044h]
 000035F3  8B 45 C0			mov	EAX,dword ptr [EBP-0040h] 
 000035F6  50				push	EAX
 000035F7  52				push	EDX 
 000035F8  33 D2			xor	EDX,EDX
 000035FA  B8 40000000			mov	EAX,040000000h
 000035FF  50				push	EAX
 00003600  52				push	EDX 
 00003601  DD 04 24			fld	qword ptr [ESP]
 00003604  D9 E0			fchs
 00003606  DD 1C 24			fstp	qword ptr [ESP]
 00003609  E8 00000000 E		call	 FloatingPoint_Compare
 0000360E  83 F8 00			cmp	EAX,000000000h
 00003611  F7 D8			neg	EAX
 00003613  0F 94 C0			setz	AL
 00003616  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{695}:Console::WriteLn("(what = x2==-2.0) 		= ", what);
 00003619  8D 05 000005D5 R		lea	EAX,OFFSET $S001023
 0000361F  6A 00			push	000000000h
 00003621  50				push	EAX 
 00003622  E8 00000000 E		call	 Console_WriteString
 00003627  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000362B  50				push	EAX 
 0000362C  E8 00000000 E		call	 Console_WriteBoolean 
 00003631  E8 00000000 E		call	 Console_WriteCrLf 

				;{697}:x= 1;
 00003636  B8 00000001			mov	EAX,000000001h
 0000363B  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{698}:Console::WriteLn("the value of x is: ", x);
 0000363E  8D 05 000010BE R		lea	EAX,OFFSET $S001024
 00003644  6A 00			push	000000000h
 00003646  50				push	EAX 
 00003647  E8 00000000 E		call	 Console_WriteString
 0000364C  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000364F  50				push	EAX 
 00003650  E8 00000000 E		call	 Console_WriteInteger 
 00003655  E8 00000000 E		call	 Console_WriteCrLf 

				;{700}:++x;
 0000365A  FF 45 EC			inc	dword ptr [EBP-20]
 0000365D  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{701}:Console::WriteLn("the value of x is: ", x);
 00003660  8D 05 000010BE R		lea	EAX,OFFSET $S001024
 00003666  6A 00			push	000000000h
 00003668  50				push	EAX 
 00003669  E8 00000000 E		call	 Console_WriteString
 0000366E  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003671  50				push	EAX 
 00003672  E8 00000000 E		call	 Console_WriteInteger 
 00003677  E8 00000000 E		call	 Console_WriteCrLf 

				;{703}:--x;
 0000367C  FF 4D EC			dec	dword ptr [EBP-20]
 0000367F  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{704}:Console::WriteLn("the value of x is (1): ", x);
 00003682  8D 05 0000108E R		lea	EAX,OFFSET $S001025
 00003688  6A 00			push	000000000h
 0000368A  50				push	EAX 
 0000368B  E8 00000000 E		call	 Console_WriteString
 00003690  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003693  50				push	EAX 
 00003694  E8 00000000 E		call	 Console_WriteInteger 
 00003699  E8 00000000 E		call	 Console_WriteCrLf 

				;{706}:Console::WriteLn("the value of x is (1): ", x++ );
 0000369E  8D 05 0000108E R		lea	EAX,OFFSET $S001025
 000036A4  6A 00			push	000000000h
 000036A6  50				push	EAX 
 000036A7  E8 00000000 E		call	 Console_WriteString
 000036AC  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036AF  FF 45 EC			inc	dword ptr [EBP-20]
 000036B2  50				push	EAX 
 000036B3  E8 00000000 E		call	 Console_WriteInteger 
 000036B8  E8 00000000 E		call	 Console_WriteCrLf 

				;{708}:Console::WriteLn("the value of x is (2): ", x-- );
 000036BD  8D 05 000010A6 R		lea	EAX,OFFSET $S001026
 000036C3  6A 00			push	000000000h
 000036C5  50				push	EAX 
 000036C6  E8 00000000 E		call	 Console_WriteString
 000036CB  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036CE  FF 4D EC			dec	dword ptr [EBP-20]
 000036D1  50				push	EAX 
 000036D2  E8 00000000 E		call	 Console_WriteInteger 
 000036D7  E8 00000000 E		call	 Console_WriteCrLf 

				;{710}:Console::WriteLn("the value is (5): ", x++ -4 / (-1));
 000036DC  8D 05 0000107B R		lea	EAX,OFFSET $S001027
 000036E2  6A 00			push	000000000h
 000036E4  50				push	EAX 
 000036E5  E8 00000000 E		call	 Console_WriteString
 000036EA  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036ED  FF 45 EC			inc	dword ptr [EBP-20]
 000036F0  50				push	EAX
 000036F1  B8 00000004			mov	EAX,000000004h
 000036F6  50				push	EAX
 000036F7  B8 00000001			mov	EAX,000000001h
 000036FC  F7 D8			neg	EAX
 000036FE  9B DB E2			fclex
 00003701  50				push	EAX
 00003702  E8 00000000 E		call	 FloatingPoint_FromInt
 00003707  50				push	EAX
 00003708  52				push	EDX 
 00003709  DD 04 24			fld	qword ptr [ESP]
 0000370C  59				pop	ECX
 0000370D  59				pop	ECX 
 0000370E  E8 00000000 E		call	 FloatingPoint_FromInt
 00003713  50				push	EAX
 00003714  52				push	EDX 
 00003715  DC 3C 24			fdivr	qword ptr [ESP]
 00003718  DD 1C 24			fstp	qword ptr [ESP]
 0000371B  DD 04 24			fld	qword ptr [ESP]
 0000371E  59				pop	ECX
 0000371F  59				pop	ECX 
 00003720  E8 00000000 E		call	 FloatingPoint_FromInt
 00003725  50				push	EAX
 00003726  52				push	EDX 
 00003727  DD 04 24			fld	qword ptr [ESP]
 0000372A  D8 E1			fsub	st,st(1)
 0000372C  DD 1C 24			fstp	qword ptr [ESP]
 0000372F  E8 00000000 E		call	 Console_WriteDouble 
 00003734  E8 00000000 E		call	 Console_WriteCrLf 

				;{712}:Console::WriteLn("the value is (5): ", --x - 4 / (-1));
 00003739  8D 05 0000107B R		lea	EAX,OFFSET $S001027
 0000373F  6A 00			push	000000000h
 00003741  50				push	EAX 
 00003742  E8 00000000 E		call	 Console_WriteString
 00003747  FF 4D EC			dec	dword ptr [EBP-20]
 0000374A  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 0000374D  50				push	EAX
 0000374E  B8 00000004			mov	EAX,000000004h
 00003753  50				push	EAX
 00003754  B8 00000001			mov	EAX,000000001h
 00003759  F7 D8			neg	EAX
 0000375B  9B DB E2			fclex
 0000375E  50				push	EAX
 0000375F  E8 00000000 E		call	 FloatingPoint_FromInt
 00003764  50				push	EAX
 00003765  52				push	EDX 
 00003766  DD 04 24			fld	qword ptr [ESP]
 00003769  59				pop	ECX
 0000376A  59				pop	ECX 
 0000376B  E8 00000000 E		call	 FloatingPoint_FromInt
 00003770  50				push	EAX
 00003771  52				push	EDX 
 00003772  DC 3C 24			fdivr	qword ptr [ESP]
 00003775  DD 1C 24			fstp	qword ptr [ESP]
 00003778  DD 04 24			fld	qword ptr [ESP]
 0000377B  59				pop	ECX
 0000377C  59				pop	ECX 
 0000377D  E8 00000000 E		call	 FloatingPoint_FromInt
 00003782  50				push	EAX
 00003783  52				push	EDX 
 00003784  DD 04 24			fld	qword ptr [ESP]
 00003787  D8 E1			fsub	st,st(1)
 00003789  DD 1C 24			fstp	qword ptr [ESP]
 0000378C  E8 00000000 E		call	 Console_WriteDouble 
 00003791  E8 00000000 E		call	 Console_WriteCrLf 

				;{714}:Console::WriteLn("the value is (3): ", (x++ -4) / (-1));
 00003796  8D 05 00001068 R		lea	EAX,OFFSET $S001028
 0000379C  6A 00			push	000000000h
 0000379E  50				push	EAX 
 0000379F  E8 00000000 E		call	 Console_WriteString
 000037A4  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000037A7  FF 45 EC			inc	dword ptr [EBP-20]
 000037AA  50				push	EAX
 000037AB  B8 00000004			mov	EAX,000000004h
 000037B0  5A				pop	EDX
 000037B1  2B D0			sub	EDX,EAX
 000037B3  8B C2			mov	EAX,EDX
 000037B5  50				push	EAX
 000037B6  B8 00000001			mov	EAX,000000001h
 000037BB  F7 D8			neg	EAX
 000037BD  9B DB E2			fclex
 000037C0  50				push	EAX
 000037C1  E8 00000000 E		call	 FloatingPoint_FromInt
 000037C6  50				push	EAX
 000037C7  52				push	EDX 
 000037C8  DD 04 24			fld	qword ptr [ESP]
 000037CB  59				pop	ECX
 000037CC  59				pop	ECX 
 000037CD  E8 00000000 E		call	 FloatingPoint_FromInt
 000037D2  50				push	EAX
 000037D3  52				push	EDX 
 000037D4  DC 3C 24			fdivr	qword ptr [ESP]
 000037D7  DD 1C 24			fstp	qword ptr [ESP]
 000037DA  E8 00000000 E		call	 Console_WriteDouble 
 000037DF  E8 00000000 E		call	 Console_WriteCrLf 

				;{716}:Console::WriteLn("the value is (3): ", (--x - 4) / (-1));
 000037E4  8D 05 00001068 R		lea	EAX,OFFSET $S001028
 000037EA  6A 00			push	000000000h
 000037EC  50				push	EAX 
 000037ED  E8 00000000 E		call	 Console_WriteString
 000037F2  FF 4D EC			dec	dword ptr [EBP-20]
 000037F5  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000037F8  50				push	EAX
 000037F9  B8 00000004			mov	EAX,000000004h
 000037FE  5A				pop	EDX
 000037FF  2B D0			sub	EDX,EAX
 00003801  8B C2			mov	EAX,EDX
 00003803  50				push	EAX
 00003804  B8 00000001			mov	EAX,000000001h
 00003809  F7 D8			neg	EAX
 0000380B  9B DB E2			fclex
 0000380E  50				push	EAX
 0000380F  E8 00000000 E		call	 FloatingPoint_FromInt
 00003814  50				push	EAX
 00003815  52				push	EDX 
 00003816  DD 04 24			fld	qword ptr [ESP]
 00003819  59				pop	ECX
 0000381A  59				pop	ECX 
 0000381B  E8 00000000 E		call	 FloatingPoint_FromInt
 00003820  50				push	EAX
 00003821  52				push	EDX 
 00003822  DC 3C 24			fdivr	qword ptr [ESP]
 00003825  DD 1C 24			fstp	qword ptr [ESP]
 00003828  E8 00000000 E		call	 Console_WriteDouble 
 0000382D  E8 00000000 E		call	 Console_WriteCrLf 

				;{718}:x= UnitTesting::ten * 100;
 00003832  B8 0000000A			mov	EAX,00000000Ah
 00003837  50				push	EAX
 00003838  B8 00000064			mov	EAX,000000064h
 0000383D  59				pop	ECX
 0000383E  33 D2			xor	EDX,EDX
 00003840  0F AF C1			imul	EAX,ECX
 00003843  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{720}:what= x == 1000;
 00003846  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003849  50				push	EAX
 0000384A  B8 000003E8			mov	EAX,0000003E8h
 0000384F  5A				pop	EDX
 00003850  3B D0			cmp	EDX,EAX
 00003852  0F 94 C0			setz	AL
 00003855  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{722}:what= UnitTesting::ten * 50 == 500;
 00003858  B8 0000000A			mov	EAX,00000000Ah
 0000385D  50				push	EAX
 0000385E  B8 00000032			mov	EAX,000000032h
 00003863  59				pop	ECX
 00003864  33 D2			xor	EDX,EDX
 00003866  0F AF C1			imul	EAX,ECX
 00003869  50				push	EAX
 0000386A  B8 000001F4			mov	EAX,0000001F4h
 0000386F  5A				pop	EDX
 00003870  3B D0			cmp	EDX,EAX
 00003872  0F 94 C0			setz	AL
 00003875  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{726}:alett= UnitTesting::misc1::alpha;
 00003878  B8 00000000			mov	EAX,000000000h
 0000387D  89 45 B8			mov	dword ptr [EBP-0048h],EAX

				;{728}:lundi= UnitTesting::misc1::monday, mardi= UnitTesting::misc1::tuesday;
 00003880  B8 00000001			mov	EAX,000000001h
 00003885  89 45 B4			mov	dword ptr [EBP-004Ch],EAX
 00003888  B8 00000002			mov	EAX,000000002h
 0000388D  89 45 B0			mov	dword ptr [EBP-0050h],EAX

				;{731}:length= 15, width= 10;
 00003890  B8 0000000F			mov	EAX,00000000Fh
 00003895  89 45 AC			mov	dword ptr [EBP-0054h],EAX
 00003898  B8 0000000A			mov	EAX,00000000Ah
 0000389D  89 45 A8			mov	dword ptr [EBP-0058h],EAX

				;{732}:area= length * width;
 000038A0  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000038A3  50				push	EAX
 000038A4  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 000038A7  59				pop	ECX
 000038A8  99				cdq	
 000038A9  0F AF C1			imul	EAX,ECX
 000038AC  50				push	EAX
 000038AD  DB 04 24			fild	dword ptr [ESP]
 000038B0  DD 5D A0			fstp	qword ptr [EBP-0060h]

				;{734}:Console::WriteLn("l = ", length, "w = ", width);
 000038B3  58				pop	EAX
 000038B4  8D 05 00000FC6 R		lea	EAX,OFFSET $S001038
 000038BA  6A 00			push	000000000h
 000038BC  50				push	EAX 
 000038BD  E8 00000000 E		call	 Console_WriteString
 000038C2  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000038C5  50				push	EAX 
 000038C6  E8 00000000 E		call	 Console_WriteInteger 
 000038CB  8D 05 0000114A R		lea	EAX,OFFSET $S001039
 000038D1  6A 00			push	000000000h 
 000038D3  50				push	EAX 
 000038D4  E8 00000000 E		call	 Console_WriteString 
 000038D9  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 000038DC  50				push	EAX 
 000038DD  E8 00000000 E		call	 Console_WriteInteger 
 000038E2  E8 00000000 E		call	 Console_WriteCrLf 

				;{735}:Console::WriteLn("(a = l * w) =", area);
 000038E7  8D 05 00000441 R		lea	EAX,OFFSET $S001040
 000038ED  6A 00			push	000000000h
 000038EF  50				push	EAX 
 000038F0  E8 00000000 E		call	 Console_WriteString
 000038F5  8B 55 A0			mov	EDX,dword ptr [EBP-0060h]
 000038F8  8B 45 A4			mov	EAX,dword ptr [EBP-005Ch] 
 000038FB  50				push	EAX 
 000038FC  52				push	EDX 
 000038FD  E8 00000000 E		call	 Console_WriteDouble 
 00003902  E8 00000000 E		call	 Console_WriteCrLf 

				;{737}:radius, ;
 00003907  8B 55 98			mov	EDX,dword ptr [EBP-0068h]
 0000390A  8B 45 9C			mov	EAX,dword ptr [EBP-0064h] 

				;{737}:circ;
 0000390D  8B 55 90			mov	EDX,dword ptr [EBP-0070h]
 00003910  8B 45 94			mov	EAX,dword ptr [EBP-006Ch] 

				;{739}:letter= 'x';
 00003913  B8 00000078			mov	EAX,000000078h
 00003918  88 45 8C			mov	byte ptr [EBP-0074h],AL

				;{741}:darea= (length * width) * 0.9;
 0000391B  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 0000391E  50				push	EAX
 0000391F  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00003922  59				pop	ECX
 00003923  99				cdq	
 00003924  0F AF C1			imul	EAX,ECX
 00003927  50				push	EAX
 00003928  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 0000392D  B8 3FECCCCC			mov	EAX,03FECCCCCh 
 00003932  9B DB E2			fclex
 00003935  50				push	EAX
 00003936  52				push	EDX 
 00003937  DD 04 24			fld	qword ptr [ESP]
 0000393A  59				pop	ECX
 0000393B  59				pop	ECX 
 0000393C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003941  50				push	EAX
 00003942  52				push	EDX 
 00003943  DC 0C 24			fmul	qword ptr [ESP]
 00003946  DD 1C 24			fstp	qword ptr [ESP]
 00003949  DD C0			ffree	st
 0000394B  DD 04 24			fld	qword ptr [ESP]
 0000394E  DD 5D 84			fstp	qword ptr [EBP-007Ch]

				;{743}:Console::WriteLn("(a = l * w * 0.9) = ", darea);
 00003951  5A				pop	EDX
 00003952  58				pop	EAX 
 00003953  8D 05 0000042C R		lea	EAX,OFFSET $S001047
 00003959  6A 00			push	000000000h
 0000395B  50				push	EAX 
 0000395C  E8 00000000 E		call	 Console_WriteString
 00003961  8B 55 84			mov	EDX,dword ptr [EBP-007Ch]
 00003964  8B 45 88			mov	EAX,dword ptr [EBP-0078h] 
 00003967  50				push	EAX 
 00003968  52				push	EDX 
 00003969  E8 00000000 E		call	 Console_WriteDouble 
 0000396E  E8 00000000 E		call	 Console_WriteCrLf 

				;{745}:a= 2;
 00003973  B8 00000002			mov	EAX,000000002h
 00003978  66| 89 45 DC			mov	word ptr [EBP-0024h],AX

				;{749}:ternary= 4 >= a ? 999 < 1000 && 1 > 0 : 777 == 77.7 * 10;
 0000397C  B8 00000004			mov	EAX,000000004h
 00003981  50				push	EAX
 00003982  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003986  5A				pop	EDX
 00003987  3B D0			cmp	EDX,EAX
 00003989  0F 9D C0			setge	AL
 0000398C  84 C0			test	AL,AL
 0000398E  74 25			jz	 $L001556
 00003990  B8 000003E7			mov	EAX,0000003E7h
 00003995  50				push	EAX
 00003996  B8 000003E8			mov	EAX,0000003E8h
 0000399B  5A				pop	EDX
 0000399C  3B D0			cmp	EDX,EAX
 0000399E  0F 9C C0			setl	AL
 000039A1  84 C0			test	AL,AL
 000039A3  74 0E			jz	OFFSET $L001558
 000039A5  B8 00000001			mov	EAX,000000001h
 000039AA  50				push	EAX
 000039AB  33 C0			xor	EAX,EAX
 000039AD  5A				pop	EDX
 000039AE  3B D0			cmp	EDX,EAX
 000039B0  0F 9F C0			setg	AL
 000039B3			$L001558:
 000039B3  EB 3A			jmp	 $L001557
 000039B5			$L001556:
 000039B5  B8 00000309			mov	EAX,000000309h
 000039BA  50				push	EAX
 000039BB  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000039C0  B8 40536CCC			mov	EAX,040536CCCh 
 000039C5  50				push	EAX
 000039C6  52				push	EDX 
 000039C7  B8 0000000A			mov	EAX,00000000Ah
 000039CC  9B DB E2			fclex
 000039CF  50				push	EAX
 000039D0  E8 00000000 E		call	 FloatingPoint_FromInt
 000039D5  50				push	EAX
 000039D6  52				push	EDX 
 000039D7  DD 04 24			fld	qword ptr [ESP]
 000039DA  59				pop	ECX
 000039DB  59				pop	ECX 
 000039DC  DC 0C 24			fmul	qword ptr [ESP]
 000039DF  DD 1C 24			fstp	qword ptr [ESP]
 000039E2  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 000039E7  83 F8 00			cmp	EAX,000000000h
 000039EA  F7 D8			neg	EAX
 000039EC  0F 94 C0			setz	AL
 000039EF			$L001557:
 000039EF  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{749}:7 == 111;
 000039F2  B8 00000007			mov	EAX,000000007h
 000039F7  50				push	EAX
 000039F8  B8 0000006F			mov	EAX,00000006Fh
 000039FD  5A				pop	EDX
 000039FE  3B D0			cmp	EDX,EAX
 00003A00  0F 94 C0			setz	AL

				;{751}:Console::WriteLn("Ternary (true) = ", ternary);
 00003A03  8D 05 00000C3E R		lea	EAX,OFFSET $S001053
 00003A09  6A 00			push	000000000h
 00003A0B  50				push	EAX 
 00003A0C  E8 00000000 E		call	 Console_WriteString
 00003A11  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003A15  50				push	EAX 
 00003A16  E8 00000000 E		call	 Console_WriteBoolean 
 00003A1B  E8 00000000 E		call	 Console_WriteCrLf 

				;{753}:ternary= (4 >= a) ? 999 > 1000 && 1 > 0 : 777 / 7 == 111;
 00003A20  B8 00000004			mov	EAX,000000004h
 00003A25  50				push	EAX
 00003A26  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003A2A  5A				pop	EDX
 00003A2B  3B D0			cmp	EDX,EAX
 00003A2D  0F 9D C0			setge	AL
 00003A30  84 C0			test	AL,AL
 00003A32  74 25			jz	 $L001559
 00003A34  B8 000003E7			mov	EAX,0000003E7h
 00003A39  50				push	EAX
 00003A3A  B8 000003E8			mov	EAX,0000003E8h
 00003A3F  5A				pop	EDX
 00003A40  3B D0			cmp	EDX,EAX
 00003A42  0F 9F C0			setg	AL
 00003A45  84 C0			test	AL,AL
 00003A47  74 0E			jz	OFFSET $L001561
 00003A49  B8 00000001			mov	EAX,000000001h
 00003A4E  50				push	EAX
 00003A4F  33 C0			xor	EAX,EAX
 00003A51  5A				pop	EDX
 00003A52  3B D0			cmp	EDX,EAX
 00003A54  0F 9F C0			setg	AL
 00003A57			$L001561:
 00003A57  EB 42			jmp	 $L001560
 00003A59			$L001559:
 00003A59  B8 00000309			mov	EAX,000000309h
 00003A5E  50				push	EAX
 00003A5F  B8 00000007			mov	EAX,000000007h
 00003A64  9B DB E2			fclex
 00003A67  50				push	EAX
 00003A68  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A6D  50				push	EAX
 00003A6E  52				push	EDX 
 00003A6F  DD 04 24			fld	qword ptr [ESP]
 00003A72  59				pop	ECX
 00003A73  59				pop	ECX 
 00003A74  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A79  50				push	EAX
 00003A7A  52				push	EDX 
 00003A7B  DC 3C 24			fdivr	qword ptr [ESP]
 00003A7E  DD 1C 24			fstp	qword ptr [ESP]
 00003A81  B8 0000006F			mov	EAX,00000006Fh
 00003A86  50				push	EAX
 00003A87  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A8C  50				push	EAX
 00003A8D  52				push	EDX 
 00003A8E  E8 00000000 E		call	 FloatingPoint_Compare
 00003A93  83 F8 00			cmp	EAX,000000000h
 00003A96  F7 D8			neg	EAX
 00003A98  0F 94 C0			setz	AL
 00003A9B			$L001560:
 00003A9B  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{755}:Console::WriteLn("Ternary (false ) = ", ternary);
 00003A9E  8D 05 00000C2A R		lea	EAX,OFFSET $S001054
 00003AA4  6A 00			push	000000000h
 00003AA6  50				push	EAX 
 00003AA7  E8 00000000 E		call	 Console_WriteString
 00003AAC  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003AB0  50				push	EAX 
 00003AB1  E8 00000000 E		call	 Console_WriteBoolean 
 00003AB6  E8 00000000 E		call	 Console_WriteCrLf 

				;{757}:ternary= 4 < a ? 999 > 1000 && 1 > 0 : 777 / (3 + 4) == 111;
 00003ABB  B8 00000004			mov	EAX,000000004h
 00003AC0  50				push	EAX
 00003AC1  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003AC5  5A				pop	EDX
 00003AC6  3B D0			cmp	EDX,EAX
 00003AC8  0F 9C C0			setl	AL
 00003ACB  84 C0			test	AL,AL
 00003ACD  74 25			jz	 $L001562
 00003ACF  B8 000003E7			mov	EAX,0000003E7h
 00003AD4  50				push	EAX
 00003AD5  B8 000003E8			mov	EAX,0000003E8h
 00003ADA  5A				pop	EDX
 00003ADB  3B D0			cmp	EDX,EAX
 00003ADD  0F 9F C0			setg	AL
 00003AE0  84 C0			test	AL,AL
 00003AE2  74 0E			jz	OFFSET $L001564
 00003AE4  B8 00000001			mov	EAX,000000001h
 00003AE9  50				push	EAX
 00003AEA  33 C0			xor	EAX,EAX
 00003AEC  5A				pop	EDX
 00003AED  3B D0			cmp	EDX,EAX
 00003AEF  0F 9F C0			setg	AL
 00003AF2			$L001564:
 00003AF2  EB 4B			jmp	 $L001563
 00003AF4			$L001562:
 00003AF4  B8 00000309			mov	EAX,000000309h
 00003AF9  50				push	EAX
 00003AFA  B8 00000003			mov	EAX,000000003h
 00003AFF  50				push	EAX
 00003B00  B8 00000004			mov	EAX,000000004h
 00003B05  5A				pop	EDX
 00003B06  03 C2			add	EAX,EDX
 00003B08  9B DB E2			fclex
 00003B0B  50				push	EAX
 00003B0C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B11  50				push	EAX
 00003B12  52				push	EDX 
 00003B13  DD 04 24			fld	qword ptr [ESP]
 00003B16  59				pop	ECX
 00003B17  59				pop	ECX 
 00003B18  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B1D  50				push	EAX
 00003B1E  52				push	EDX 
 00003B1F  DC 3C 24			fdivr	qword ptr [ESP]
 00003B22  DD 1C 24			fstp	qword ptr [ESP]
 00003B25  B8 0000006F			mov	EAX,00000006Fh
 00003B2A  50				push	EAX
 00003B2B  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B30  50				push	EAX
 00003B31  52				push	EDX 
 00003B32  E8 00000000 E		call	 FloatingPoint_Compare
 00003B37  83 F8 00			cmp	EAX,000000000h
 00003B3A  F7 D8			neg	EAX
 00003B3C  0F 94 C0			setz	AL
 00003B3F			$L001563:
 00003B3F  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{759}:Console::WriteLn("Ternary (true) = ", ternary);
 00003B42  8D 05 00000C3E R		lea	EAX,OFFSET $S001053
 00003B48  6A 00			push	000000000h
 00003B4A  50				push	EAX 
 00003B4B  E8 00000000 E		call	 Console_WriteString
 00003B50  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003B54  50				push	EAX 
 00003B55  E8 00000000 E		call	 Console_WriteBoolean 
 00003B5A  E8 00000000 E		call	 Console_WriteCrLf 

				;{761}:return 
 00003B5F  EB 00			jmp	OFFSET $L000974
				;}
 00003B61			$L000974:

 00003B61  5F				pop	EDI
 00003B62  5E				pop	ESI 
 00003B63  5B				pop	EBX 
 00003B64  C9				leave	
 00003B65  C3				ret	
 00003B66			UnitTesting_TestIntegers_TestExpressions ENDP

 00003B66			UnitTesting_TestProperties_Destructor PROC NEAR 
				;void Destructor(void);
 00003B66  55				push	EBP
 00003B67  8B EC			mov	EBP,ESP
 00003B69  51				push	ECX 
 00003B6A  53				push	EBX 
 00003B6B  56				push	ESI 
 00003B6C  57				push	EDI 
				;{

				;{401}:Console::WriteLn("**Before destroying all object in shapes1:");
 00003B6D  8D 05 0000067C R		lea	EAX,OFFSET $S000914
 00003B73  6A 00			push	000000000h
 00003B75  50				push	EAX 
 00003B76  E8 00000000 E		call	 Console_WriteString
 00003B7B  E8 00000000 E		call	 Console_WriteCrLf 

				;{402}:if(shapes1 != null)
 00003B80  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003B83  8B 01			mov	EAX,dword ptr [ECX]
 00003B85  8B C8			mov	ECX,EAX 
 00003B87  50				push	EAX
 00003B88  33 C0			xor	EAX,EAX
 00003B8A  5A				pop	EDX
 00003B8B  3B D0			cmp	EDX,EAX
 00003B8D  0F 95 C0			setnz	AL
 00003B90  84 C0			test	AL,AL
 00003B92  74 30			jz	OFFSET $L001565

				;{403}:destroy []shapes1;
 00003B94  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003B97  8B 01			mov	EAX,dword ptr [ECX]
 00003B99  8B C8			mov	ECX,EAX 
 00003B9B  85 C0			test	EAX,EAX
 00003B9D  74 25			jz	OFFSET $L001567
 00003B9F  8B F0			mov	ESI,EAX
 00003BA1  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003BA4  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003BA7  8B DE			mov	EBX,ESI 
 00003BA9			$L001568:
 00003BA9  8B CB			mov	ECX,EBX 
 00003BAB  85 C9			test	ECX,ECX
 00003BAD  74 05			jz	OFFSET $L001569
 00003BAF  8B 01			mov	EAX,dword ptr [ECX]
 00003BB1  FF 50 10			call	dword ptr [EAX+0010h]
 00003BB4			$L001569:
 00003BB4  83 C3 0C			add	EBX,00000000Ch
 00003BB7  3B DF			cmp	EBX,EDI
 00003BB9  75 EE			jnz	OFFSET $L001568

 00003BBB  83 C6 FC			add	ESI,0FFFFFFFCh
 00003BBE  56				push	ESI
 00003BBF  E8 00000000 E		call	 System_Memory_Destroy
 00003BC4			$L001567:
 00003BC4			$L001565:

				;{405}:Console::WriteLn("**Before destroying all object in shapes2:");
 00003BC4  8D 05 000006A7 R		lea	EAX,OFFSET $S000915
 00003BCA  6A 00			push	000000000h
 00003BCC  50				push	EAX 
 00003BCD  E8 00000000 E		call	 Console_WriteString
 00003BD2  E8 00000000 E		call	 Console_WriteCrLf 

				;{406}:destroy []shapes2;
 00003BD7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003BDA  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003BDD  8B C8			mov	ECX,EAX 
 00003BDF  85 C0			test	EAX,EAX
 00003BE1  74 25			jz	OFFSET $L001570
 00003BE3  8B F0			mov	ESI,EAX
 00003BE5  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003BE8  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003BEB  8B DE			mov	EBX,ESI 
 00003BED			$L001571:
 00003BED  8B CB			mov	ECX,EBX 
 00003BEF  85 C9			test	ECX,ECX
 00003BF1  74 05			jz	OFFSET $L001572
 00003BF3  8B 01			mov	EAX,dword ptr [ECX]
 00003BF5  FF 50 10			call	dword ptr [EAX+0010h]
 00003BF8			$L001572:
 00003BF8  83 C3 0C			add	EBX,00000000Ch
 00003BFB  3B DF			cmp	EBX,EDI
 00003BFD  75 EE			jnz	OFFSET $L001571

 00003BFF  83 C6 FC			add	ESI,0FFFFFFFCh
 00003C02  56				push	ESI
 00003C03  E8 00000000 E		call	 System_Memory_Destroy
 00003C08			$L001570:
				;}
 00003C08			$L000911:

 00003C08  5F				pop	EDI
 00003C09  5E				pop	ESI 
 00003C0A  5B				pop	EBX 
 00003C0B  C9				leave	
 00003C0C  C3				ret	
 00003C0D			UnitTesting_TestProperties_Destructor ENDP

 00003C0D			UnitTesting_TestProperties_get_Shapes PROC NEAR 
				;UnitTesting::Shape get::Shapes(void);
 00003C0D  55				push	EBP
 00003C0E  8B EC			mov	EBP,ESP
 00003C10  51				push	ECX 
 00003C11  53				push	EBX 
 00003C12  56				push	ESI 
 00003C13  57				push	EDI 
				;{

				;{323}:return shapes1
 00003C14  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003C17  8B 01			mov	EAX,dword ptr [ECX]
 00003C19  8B C8			mov	ECX,EAX 
 00003C1B  EB 00			jmp	OFFSET $L000900
				;}
 00003C1D			$L000900:

 00003C1D  5F				pop	EDI
 00003C1E  5E				pop	ESI 
 00003C1F  5B				pop	EBX 
 00003C20  C9				leave	
 00003C21  C3				ret	
 00003C22			UnitTesting_TestProperties_get_Shapes ENDP

 00003C22			UnitTesting_TestProperties_put_Shapes PROC NEAR 
				;void put::Shapes(UnitTesting::Shape ^ _shape);
 00003C22  55				push	EBP
 00003C23  8B EC			mov	EBP,ESP
 00003C25  81 EC 00000098		sub	ESP,000000098h
 00003C2B  53				push	EBX 
 00003C2C  56				push	ESI 
 00003C2D  57				push	EDI 
 00003C2E  89 8D FFFFFF68		mov	dword ptr [EBP-0098h],ECX
 00003C34  8D BD FFFFFF6C		lea	EDI,dword ptr [EBP-0094h]
 00003C3A  B9 00000025			mov	ECX,000000025h 
 00003C3F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00003C44  F3/ AB			rep stos	dword ptr [EDI]
 00003C46  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h] 
				;{

				;{330}:link;
 00003C4C  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C4F  E8 0000043A			call	 UnitTesting_TestProperties_node

				;{332}:link.left= new UnitTesting::TestProperties::node();
 00003C54  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C57  8D 01			lea	EAX,dword ptr [ECX]
 00003C59  50				push	EAX
 00003C5A  6A 0C			push	00000000Ch
 00003C5C  E8 00000000 E		call	 System_Memory_New
 00003C61  85 C0			test	EAX,EAX
 00003C63  74 12			jz	 $L001573
 00003C65  8B F0			mov	ESI,EAX
 00003C67  8D 3E			lea	EDI,dword ptr [ESI]
 00003C69  B9 00000003			mov	ECX,000000003h 
 00003C6E  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003C73  F3/ AB			rep stos	dword ptr [EDI]
 00003C75  EB 02			jmp	 $L001574
 00003C77			$L001573:
 00003C77  33 F6			xor	ESI,ESI
 00003C79			$L001574:
 00003C79  5B				pop	EBX
 00003C7A  89 33			mov	dword ptr [EBX],ESI 
 00003C7C  8B CE			mov	ECX,ESI
 00003C7E  E8 0000040B			call	 UnitTesting_TestProperties_node
 00003C83  8B C6			mov	EAX,ESI 

				;{333}:link.right= new UnitTesting::TestProperties::node();
 00003C85  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C88  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003C8B  50				push	EAX
 00003C8C  6A 0C			push	00000000Ch
 00003C8E  E8 00000000 E		call	 System_Memory_New
 00003C93  85 C0			test	EAX,EAX
 00003C95  74 12			jz	 $L001575
 00003C97  8B F0			mov	ESI,EAX
 00003C99  8D 3E			lea	EDI,dword ptr [ESI]
 00003C9B  B9 00000003			mov	ECX,000000003h 
 00003CA0  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003CA5  F3/ AB			rep stos	dword ptr [EDI]
 00003CA7  EB 02			jmp	 $L001576
 00003CA9			$L001575:
 00003CA9  33 F6			xor	ESI,ESI
 00003CAB			$L001576:
 00003CAB  5B				pop	EBX
 00003CAC  89 33			mov	dword ptr [EBX],ESI 
 00003CAE  8B CE			mov	ECX,ESI
 00003CB0  E8 000003D9			call	 UnitTesting_TestProperties_node
 00003CB5  8B C6			mov	EAX,ESI 

				;{334}:link.value= new UnitTesting::HObject();
 00003CB7  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003CBA  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00003CBD  50				push	EAX
 00003CBE  6A 04			push	000000004h
 00003CC0  E8 00000000 E		call	 System_Memory_New
 00003CC5  85 C0			test	EAX,EAX
 00003CC7  74 12			jz	 $L001577
 00003CC9  8B F0			mov	ESI,EAX
 00003CCB  8D 3E			lea	EDI,dword ptr [ESI]
 00003CCD  B9 00000001			mov	ECX,000000001h 
 00003CD2  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003CD7  F3/ AB			rep stos	dword ptr [EDI]
 00003CD9  EB 02			jmp	 $L001578
 00003CDB			$L001577:
 00003CDB  33 F6			xor	ESI,ESI
 00003CDD			$L001578:
 00003CDD  5B				pop	EBX
 00003CDE  89 33			mov	dword ptr [EBX],ESI 
 00003CE0  8B CE			mov	ECX,ESI
 00003CE2  E8 FFFFCE02			call	 UnitTesting_HObject
 00003CE7  8B C6			mov	EAX,ESI 

				;{342}:left= link.left;
 00003CE9  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003CEC  8B 01			mov	EAX,dword ptr [ECX]
 00003CEE  8B C8			mov	ECX,EAX 
 00003CF0  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00003CF3  89 03			mov	dword ptr [EBX],EAX

				;{343}:destroy left;
 00003CF5  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 00003CF8  8B F1			mov	ESI,ECX
 00003CFA  85 C9			test	ECX,ECX
 00003CFC  74 05			jz	OFFSET $L001580
 00003CFE  E8 000002F8			call	 UnitTesting_TestProperties_node_Destructor
 00003D03			$L001580:
 00003D03  56				push	ESI
 00003D04  E8 00000000 E		call	 System_Memory_Destroy

				;{344}:link.left= null;
 00003D09  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D0C  8D 01			lea	EAX,dword ptr [ECX]
 00003D0E  50				push	EAX
 00003D0F  33 C0			xor	EAX,EAX
 00003D11  5B				pop	EBX
 00003D12  89 03			mov	dword ptr [EBX],EAX

				;{346}:link.left= link.right;
 00003D14  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D17  8D 01			lea	EAX,dword ptr [ECX]
 00003D19  50				push	EAX
 00003D1A  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D1D  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003D20  8B C8			mov	ECX,EAX 
 00003D22  5B				pop	EBX
 00003D23  89 03			mov	dword ptr [EBX],EAX

				;{347}:link.right= new UnitTesting::TestProperties::node();
 00003D25  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D28  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003D2B  50				push	EAX
 00003D2C  6A 0C			push	00000000Ch
 00003D2E  E8 00000000 E		call	 System_Memory_New
 00003D33  85 C0			test	EAX,EAX
 00003D35  74 12			jz	 $L001581
 00003D37  8B F0			mov	ESI,EAX
 00003D39  8D 3E			lea	EDI,dword ptr [ESI]
 00003D3B  B9 00000003			mov	ECX,000000003h 
 00003D40  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003D45  F3/ AB			rep stos	dword ptr [EDI]
 00003D47  EB 02			jmp	 $L001582
 00003D49			$L001581:
 00003D49  33 F6			xor	ESI,ESI
 00003D4B			$L001582:
 00003D4B  5B				pop	EBX
 00003D4C  89 33			mov	dword ptr [EBX],ESI 
 00003D4E  8B CE			mov	ECX,ESI
 00003D50  E8 00000339			call	 UnitTesting_TestProperties_node
 00003D55  8B C6			mov	EAX,ESI 

				;{349}:right= link.right;
 00003D57  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D5A  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003D5D  8B C8			mov	ECX,EAX 
 00003D5F  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003D62  89 03			mov	dword ptr [EBX],EAX

				;{350}:destroy right;
 00003D64  8B 4D EC			mov	ECX,dword ptr [EBP-20]
 00003D67  8B F1			mov	ESI,ECX
 00003D69  85 C9			test	ECX,ECX
 00003D6B  74 05			jz	OFFSET $L001584
 00003D6D  E8 00000289			call	 UnitTesting_TestProperties_node_Destructor
 00003D72			$L001584:
 00003D72  56				push	ESI
 00003D73  E8 00000000 E		call	 System_Memory_Destroy

				;{352}:link.right= link.left;
 00003D78  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D7B  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003D7E  50				push	EAX
 00003D7F  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D82  8B 01			mov	EAX,dword ptr [ECX]
 00003D84  8B C8			mov	ECX,EAX 
 00003D86  5B				pop	EBX
 00003D87  89 03			mov	dword ptr [EBX],EAX

				;{353}:link.left= new UnitTesting::TestProperties::node();
 00003D89  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D8C  8D 01			lea	EAX,dword ptr [ECX]
 00003D8E  50				push	EAX
 00003D8F  6A 0C			push	00000000Ch
 00003D91  E8 00000000 E		call	 System_Memory_New
 00003D96  85 C0			test	EAX,EAX
 00003D98  74 12			jz	 $L001585
 00003D9A  8B F0			mov	ESI,EAX
 00003D9C  8D 3E			lea	EDI,dword ptr [ESI]
 00003D9E  B9 00000003			mov	ECX,000000003h 
 00003DA3  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003DA8  F3/ AB			rep stos	dword ptr [EDI]
 00003DAA  EB 02			jmp	 $L001586
 00003DAC			$L001585:
 00003DAC  33 F6			xor	ESI,ESI
 00003DAE			$L001586:
 00003DAE  5B				pop	EBX
 00003DAF  89 33			mov	dword ptr [EBX],ESI 
 00003DB1  8B CE			mov	ECX,ESI
 00003DB3  E8 000002D6			call	 UnitTesting_TestProperties_node
 00003DB8  8B C6			mov	EAX,ESI 

				;{355}:left= link.left;
 00003DBA  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003DBD  8B 01			mov	EAX,dword ptr [ECX]
 00003DBF  8B C8			mov	ECX,EAX 
 00003DC1  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00003DC4  89 03			mov	dword ptr [EBX],EAX

				;{357}:link.left= left;
 00003DC6  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003DC9  8D 01			lea	EAX,dword ptr [ECX]
 00003DCB  50				push	EAX
 00003DCC  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00003DCF  5B				pop	EBX
 00003DD0  89 03			mov	dword ptr [EBX],EAX

				;{359}:shapes1[0].Draw();
 00003DD2  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003DD8  8B 01			mov	EAX,dword ptr [ECX]
 00003DDA  8B C8			mov	ECX,EAX 
 00003DDC  50				push	EAX
 00003DDD  33 C0			xor	EAX,EAX
 00003DDF  5E				pop	ESI
 00003DE0  6B C0 0C			imul	EAX,00000000Ch
 00003DE3  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003DE6  8B 11			mov	EDX,dword ptr [ECX]
 00003DE8  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{360}:shapes2[0].Draw();
 00003DEB  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003DF1  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003DF4  8B C8			mov	ECX,EAX 
 00003DF6  50				push	EAX
 00003DF7  33 C0			xor	EAX,EAX
 00003DF9  5E				pop	ESI
 00003DFA  6B C0 0C			imul	EAX,00000000Ch
 00003DFD  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E00  8B 11			mov	EDX,dword ptr [ECX]
 00003E02  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{362}:shapes_ptr[0].Draw();
 00003E05  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E0B  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00003E0E  8B C8			mov	ECX,EAX 
 00003E10  50				push	EAX
 00003E11  33 C0			xor	EAX,EAX
 00003E13  5E				pop	ESI
 00003E14  6B C0 0C			imul	EAX,00000000Ch
 00003E17  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E1A  8B 11			mov	EDX,dword ptr [ECX]
 00003E1C  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{364}:shapes1[1].Draw();
 00003E1F  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E25  8B 01			mov	EAX,dword ptr [ECX]
 00003E27  8B C8			mov	ECX,EAX 
 00003E29  50				push	EAX
 00003E2A  B8 00000001			mov	EAX,000000001h
 00003E2F  5E				pop	ESI
 00003E30  6B C0 0C			imul	EAX,00000000Ch
 00003E33  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E36  8B 11			mov	EDX,dword ptr [ECX]
 00003E38  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{365}:shapes2[2].Draw();
 00003E3B  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E41  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003E44  8B C8			mov	ECX,EAX 
 00003E46  50				push	EAX
 00003E47  B8 00000002			mov	EAX,000000002h
 00003E4C  5E				pop	ESI
 00003E4D  6B C0 0C			imul	EAX,00000000Ch
 00003E50  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E53  8B 11			mov	EDX,dword ptr [ECX]
 00003E55  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{367}:shapes_ptr[3].Draw();
 00003E58  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E5E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00003E61  8B C8			mov	ECX,EAX 
 00003E63  50				push	EAX
 00003E64  B8 00000003			mov	EAX,000000003h
 00003E69  5E				pop	ESI
 00003E6A  6B C0 0C			imul	EAX,00000000Ch
 00003E6D  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E70  8B 11			mov	EDX,dword ptr [ECX]
 00003E72  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{374}:if(shapes1 != null)
 00003E75  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E7B  8B 01			mov	EAX,dword ptr [ECX]
 00003E7D  8B C8			mov	ECX,EAX 
 00003E7F  50				push	EAX
 00003E80  33 C0			xor	EAX,EAX
 00003E82  5A				pop	EDX
 00003E83  3B D0			cmp	EDX,EAX
 00003E85  0F 95 C0			setnz	AL
 00003E88  84 C0			test	AL,AL
 00003E8A  74 33			jz	OFFSET $L001587

				;{375}:destroy []shapes1;
 00003E8C  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E92  8B 01			mov	EAX,dword ptr [ECX]
 00003E94  8B C8			mov	ECX,EAX 
 00003E96  85 C0			test	EAX,EAX
 00003E98  74 25			jz	OFFSET $L001589
 00003E9A  8B F0			mov	ESI,EAX
 00003E9C  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003E9F  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003EA2  8B DE			mov	EBX,ESI 
 00003EA4			$L001590:
 00003EA4  8B CB			mov	ECX,EBX 
 00003EA6  85 C9			test	ECX,ECX
 00003EA8  74 05			jz	OFFSET $L001591
 00003EAA  8B 01			mov	EAX,dword ptr [ECX]
 00003EAC  FF 50 10			call	dword ptr [EAX+0010h]
 00003EAF			$L001591:
 00003EAF  83 C3 0C			add	EBX,00000000Ch
 00003EB2  3B DF			cmp	EBX,EDI
 00003EB4  75 EE			jnz	OFFSET $L001590

 00003EB6  83 C6 FC			add	ESI,0FFFFFFFCh
 00003EB9  56				push	ESI
 00003EBA  E8 00000000 E		call	 System_Memory_Destroy
 00003EBF			$L001589:
 00003EBF			$L001587:

				;{377}:shapes1= _shape;
 00003EBF  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00003EC2  8B C3			mov	EAX,EBX 
 00003EC4  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003ECA  89 01			mov	dword ptr [ECX],EAX

				;{380}:local_circles;
 00003ECC  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 00003ED2  8B F0			mov	ESI,EAX
 00003ED4  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00003ED7  8B DE			mov	EBX,ESI
 00003ED9			$L001592:
 00003ED9  8B CB			mov	ECX,EBX 
 00003EDB  E8 FFFFC85F			call	 UnitTesting_Circle
 00003EE0  83 C3 0C			add	EBX,00000000Ch
 00003EE3  3B DF			cmp	EBX,EDI
 00003EE5  75 F2			jnz	OFFSET $L001592

				;{382}:local_circles[0].Draw();
 00003EE7  33 C0			xor	EAX,EAX
 00003EE9  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003EEC  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003EF3  8B 11			mov	EDX,dword ptr [ECX]
 00003EF5  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{384}:local_circles[2].Draw();
 00003EF8  B8 00000002			mov	EAX,000000002h
 00003EFD  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003F00  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003F07  8B 11			mov	EDX,dword ptr [ECX]
 00003F09  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{386}:for(i= 0; i < n; i++ )
 00003F0C  33 C0			xor	EAX,EAX
 00003F0E  89 85 FFFFFF70		mov	dword ptr [EBP-0090h],EAX
 00003F14  EB 0C			jmp	OFFSET $L001593
 00003F16			$L001594:
 00003F16  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-144]
 00003F1C  FF 85 FFFFFF70		inc	dword ptr [EBP-144]
 00003F22			$L001593:
 00003F22  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 00003F28  50				push	EAX
 00003F29  B8 0000000A			mov	EAX,00000000Ah
 00003F2E  5A				pop	EDX
 00003F2F  3B D0			cmp	EDX,EAX
 00003F31  0F 9C C0			setl	AL
 00003F34  84 C0			test	AL,AL
 00003F36  74 17			jz	OFFSET $L001595

				;{387}:local_circles[i].Draw();
 00003F38  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 00003F3E  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003F41  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003F48  8B 11			mov	EDX,dword ptr [ECX]
 00003F4A  FF 52 0C			call	dword ptr [EDX+000Ch]
 00003F4D  EB C7			jmp	OFFSET $L001594 
 00003F4F			$L001595:

				;{390}:circlxx= new UnitTesting::Circle[5];
 00003F4F  B8 00000005			mov	EAX,000000005h
 00003F54  6B C0 0C			imul	EAX,00000000Ch
 00003F57  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00003F5A  53				push	EBX
 00003F5B  8B D8			mov	EBX,EAX
 00003F5D  E8 00000000 E		call	 System_Memory_New
 00003F62  85 C0			test	EAX,EAX
 00003F64  74 14			jz	 $L001596
 00003F66  8B F0			mov	ESI,EAX 
 00003F68  8D 3E			lea	EDI,dword ptr [ESI]
 00003F6A  8B CB			mov	ECX,EBX 
 00003F6C  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003F71  F3/ AA			rep stos	byte ptr [EDI]
 00003F73  89 1E			mov	dword ptr [ESI],EBX 
 00003F75  83 C6 04			add	ESI,000000004h
 00003F78  EB 02			jmp	 $L001597
 00003F7A			$L001596:
 00003F7A  33 F6			xor	ESI,ESI
 00003F7C			$L001597:
 00003F7C  89 B5 FFFFFF6C		mov	dword ptr [EBP-0094h],ESI 
 00003F82  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00003F85  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00003F88  8B DE			mov	EBX,ESI 
 00003F8A			$L001598:
 00003F8A  8B CB			mov	ECX,EBX 
 00003F8C  E8 FFFFC7AE			call	 UnitTesting_Circle
 00003F91  83 C3 0C			add	EBX,00000000Ch 
 00003F94  3B DF			cmp	EBX,EDI
 00003F96  75 F2			jnz	OFFSET $L001598
 00003F98  8B C6			mov	EAX,ESI 

				;{392}:circlxx[0].Draw();
 00003F9A  8B 85 FFFFFF6C		mov	EAX,dword ptr [EBP-148]
 00003FA0  50				push	EAX
 00003FA1  33 C0			xor	EAX,EAX
 00003FA3  5E				pop	ESI
 00003FA4  6B C0 0C			imul	EAX,00000000Ch
 00003FA7  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003FAA  8B 11			mov	EDX,dword ptr [ECX]
 00003FAC  FF 52 0C			call	dword ptr [EDX+000Ch]
				;}
 00003FAF			$L000901:
 00003FAF  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 00003FB5  8B F0			mov	ESI,EAX 
 00003FB7  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00003FBA  8B DE			mov	EBX,ESI
 00003FBC			$L001600:
 00003FBC  8B CB			mov	ECX,EBX 
 00003FBE  85 C9			test	ECX,ECX
 00003FC0  74 05			jz	OFFSET $L001601
 00003FC2  8B 01			mov	EAX,dword ptr [ECX]
 00003FC4  FF 50 10			call	dword ptr [EAX+0010h]
 00003FC7			$L001601:
 00003FC7  83 C3 0C			add	EBX,00000000Ch
 00003FCA  3B DF			cmp	EBX,EDI
 00003FCC  75 EE			jnz	OFFSET $L001600

 00003FCE  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003FD1  E8 00000025			call	 UnitTesting_TestProperties_node_Destructor
 00003FD6			$L001602:

 00003FD6  5F				pop	EDI
 00003FD7  5E				pop	ESI 
 00003FD8  5B				pop	EBX 
 00003FD9  C9				leave	
 00003FDA  C2 0004			retn	000000004h
 00003FDD			UnitTesting_TestProperties_put_Shapes ENDP

 00003FDD			UnitTesting_TestProperties PROC NEAR 
				;void UnitTesting::TestProperties(void);
 00003FDD  55				push	EBP
 00003FDE  8B EC			mov	EBP,ESP
 00003FE0  51				push	ECX 
 00003FE1  53				push	EBX 
 00003FE2  56				push	ESI 
 00003FE3  57				push	EDI 
 00003FE4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003FE7  C7 41 48			mov	dword ptr [ECX+0048h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestProperties 
	   000000A4 R
 00003FEE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00003FF1  E8 000007C1			call	 __member_Init@UnitTesting_TestProperties

 00003FF6  5F				pop	EDI
 00003FF7  5E				pop	ESI 
 00003FF8  5B				pop	EBX 
 00003FF9  C9				leave	
 00003FFA  C3				ret	
 00003FFB			UnitTesting_TestProperties ENDP

 00003FFB			UnitTesting_TestProperties_node_Destructor PROC NEAR 
				;void Destructor(void);
 00003FFB  55				push	EBP
 00003FFC  8B EC			mov	EBP,ESP
 00003FFE  51				push	ECX 
 00003FFF  53				push	EBX 
 00004000  56				push	ESI 
 00004001  57				push	EDI 
				;{

				;{303}:if(left != null)
 00004002  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004005  8B 01			mov	EAX,dword ptr [ECX]
 00004007  8B C8			mov	ECX,EAX 
 00004009  51				push	ECX
 0000400A  33 C0			xor	EAX,EAX
 0000400C  5B				pop	EBX
 0000400D  3B D8			cmp	EBX,EAX
 0000400F  0F 95 C0			setnz	AL
 00004012  84 C0			test	AL,AL
 00004014  74 18			jz	OFFSET $L001604

				;{304}:destroy left;
 00004016  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004019  8B 01			mov	EAX,dword ptr [ECX]
 0000401B  8B C8			mov	ECX,EAX 
 0000401D  8B F1			mov	ESI,ECX
 0000401F  85 C9			test	ECX,ECX
 00004021  74 05			jz	OFFSET $L001607
 00004023  E8 FFFFFFD3			call	 UnitTesting_TestProperties_node_Destructor
 00004028			$L001607:
 00004028  56				push	ESI
 00004029  E8 00000000 E		call	 System_Memory_Destroy
 0000402E			$L001604:

				;{305}:if(right != null)
 0000402E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004031  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00004034  8B C8			mov	ECX,EAX 
 00004036  51				push	ECX
 00004037  33 C0			xor	EAX,EAX
 00004039  5B				pop	EBX
 0000403A  3B D8			cmp	EBX,EAX
 0000403C  0F 95 C0			setnz	AL
 0000403F  84 C0			test	AL,AL
 00004041  74 19			jz	OFFSET $L001608

				;{306}:destroy right;
 00004043  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004046  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00004049  8B C8			mov	ECX,EAX 
 0000404B  8B F1			mov	ESI,ECX
 0000404D  85 C9			test	ECX,ECX
 0000404F  74 05			jz	OFFSET $L001611
 00004051  E8 FFFFFFA5			call	 UnitTesting_TestProperties_node_Destructor
 00004056			$L001611:
 00004056  56				push	ESI
 00004057  E8 00000000 E		call	 System_Memory_Destroy
 0000405C			$L001608:

				;{307}:if(value != null)
 0000405C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000405F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004062  8B C8			mov	ECX,EAX 
 00004064  51				push	ECX
 00004065  33 C0			xor	EAX,EAX
 00004067  5B				pop	EBX
 00004068  3B D8			cmp	EBX,EAX
 0000406A  0F 95 C0			setnz	AL
 0000406D  84 C0			test	AL,AL
 0000406F  74 18			jz	OFFSET $L001612

				;{308}:destroy value;
 00004071  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004074  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004077  8B C8			mov	ECX,EAX 
 00004079  8B F1			mov	ESI,ECX
 0000407B  85 C9			test	ECX,ECX
 0000407D  74 04			jz	OFFSET $L001615
 0000407F  8B 01			mov	EAX,dword ptr [ECX] 
 00004081  FF 10			call	dword ptr [EAX]
 00004083			$L001615:
 00004083  56				push	ESI
 00004084  E8 00000000 E		call	 System_Memory_Destroy
 00004089			$L001612:
				;}
 00004089			$L000893:

 00004089  5F				pop	EDI
 0000408A  5E				pop	ESI 
 0000408B  5B				pop	EBX 
 0000408C  C9				leave	
 0000408D  C3				ret	
 0000408E			UnitTesting_TestProperties_node_Destructor ENDP

 0000408E			UnitTesting_TestProperties_node PROC NEAR 
				;void UnitTesting::TestProperties::node(void);
 0000408E  55				push	EBP
 0000408F  8B EC			mov	EBP,ESP
 00004091  51				push	ECX 
 00004092  53				push	EBX 
 00004093  56				push	ESI 
 00004094  57				push	EDI 
 00004095  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004098  E8 00000809			call	 __member_Init@UnitTesting_TestProperties_node
				;{
				;}

 0000409D  5F				pop	EDI
 0000409E  5E				pop	ESI 
 0000409F  5B				pop	EBX 
 000040A0  C9				leave	
 000040A1  C3				ret	
 000040A2			UnitTesting_TestProperties_node ENDP

 000040A2			UnitTesting_TestSwitch_RunTest PROC NEAR 
				;void UnitTesting::TestSwitch::RunTest(int option);
 000040A2  55				push	EBP
 000040A3  8B EC			mov	EBP,ESP
 000040A5  51				push	ECX 
 000040A6  53				push	EBX 
 000040A7  56				push	ESI 
 000040A8  57				push	EDI 
				;{

				;{14}:switch(option)
 000040A9  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000040AC  8B F0			mov	ESI,EAX
 000040AE  B8 00000001			mov	EAX,000000001h
 000040B3  3B C6			cmp	EAX,ESI
 000040B5  74 2F			jz	OFFSET $L001617
 000040B7  B8 00000002			mov	EAX,000000002h
 000040BC  3B C6			cmp	EAX,ESI
 000040BE  74 3E			jz	OFFSET $L001618
 000040C0  B8 00000003			mov	EAX,000000003h
 000040C5  3B C6			cmp	EAX,ESI
 000040C7  74 4A			jz	OFFSET $L001619
 000040C9  B8 00000004			mov	EAX,000000004h
 000040CE  3B C6			cmp	EAX,ESI
 000040D0  74 56			jz	OFFSET $L001620
 000040D2  B8 00000005			mov	EAX,000000005h
 000040D7  3B C6			cmp	EAX,ESI
 000040D9  74 62			jz	OFFSET $L001621
 000040DB  B8 00000006			mov	EAX,000000006h
 000040E0  3B C6			cmp	EAX,ESI 
 000040E2  74 6C			jz	OFFSET $L001622 
 000040E4  EB 7F			jmp	OFFSET $L001623
 000040E6			$L001617:

				;{17}:Console::WriteLn("Opening file...");
 000040E6  8D 05 00000B5A R		lea	EAX,OFFSET $S000639
 000040EC  6A 00			push	000000000h
 000040EE  50				push	EAX 
 000040EF  E8 00000000 E		call	 Console_WriteString
 000040F4  E8 00000000 E		call	 Console_WriteCrLf 
 000040F9  E9 00000083			jmp	OFFSET $L001616
 000040FE			$L001618:

				;{20}:Console::WriteLn("Closing file...");
 000040FE  8D 05 0000086B R		lea	EAX,OFFSET $S000640
 00004104  6A 00			push	000000000h
 00004106  50				push	EAX 
 00004107  E8 00000000 E		call	 Console_WriteString
 0000410C  E8 00000000 E		call	 Console_WriteCrLf 
 00004111  EB 6E			jmp	OFFSET $L001616
 00004113			$L001619:

				;{23}:Console::WriteLn("Do Write to file...");
 00004113  8D 05 0000092A R		lea	EAX,OFFSET $S000641
 00004119  6A 00			push	000000000h
 0000411B  50				push	EAX 
 0000411C  E8 00000000 E		call	 Console_WriteString
 00004121  E8 00000000 E		call	 Console_WriteCrLf 
 00004126  EB 59			jmp	OFFSET $L001616
 00004128			$L001620:

				;{26}:Console::WriteLn("Do Read from file...");
 00004128  8D 05 00000915 R		lea	EAX,OFFSET $S000642
 0000412E  6A 00			push	000000000h
 00004130  50				push	EAX 
 00004131  E8 00000000 E		call	 Console_WriteString
 00004136  E8 00000000 E		call	 Console_WriteCrLf 
 0000413B  EB 44			jmp	OFFSET $L001616
 0000413D			$L001621:

				;{29}:Console::WriteLn("Do for 5 and follow to 6");
 0000413D  8D 05 0000093E R		lea	EAX,OFFSET $S000643
 00004143  6A 00			push	000000000h
 00004145  50				push	EAX 
 00004146  E8 00000000 E		call	 Console_WriteString
 0000414B  E8 00000000 E		call	 Console_WriteCrLf 
 00004150			$L001622:
				;{

				;{32}:Console::WriteLn("Do 6, then finish");
 00004150  8D 05 00000903 R		lea	EAX,OFFSET $S000645
 00004156  6A 00			push	000000000h
 00004158  50				push	EAX 
 00004159  E8 00000000 E		call	 Console_WriteString
 0000415E  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004163  EB 1C			jmp	OFFSET $L001616
 00004165			$L001623:

				;{36}:Console::WriteLn("Invalid Option : ", option);
 00004165  8D 05 00000AC1 R		lea	EAX,OFFSET $S000646
 0000416B  6A 00			push	000000000h
 0000416D  50				push	EAX 
 0000416E  E8 00000000 E		call	 Console_WriteString
 00004173  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00004176  50				push	EAX 
 00004177  E8 00000000 E		call	 Console_WriteInteger 
 0000417C  E8 00000000 E		call	 Console_WriteCrLf 
 00004181			$L001616:
				;}
 00004181			$L000637:

 00004181  5F				pop	EDI
 00004182  5E				pop	ESI 
 00004183  5B				pop	EBX 
 00004184  C9				leave	
 00004185  C2 0004			retn	000000004h
 00004188			UnitTesting_TestSwitch_RunTest ENDP

 00004188			UnitTesting_TestVirtuals_ExponentialRV_get_MU PROC NEAR 
				;double get::MU(void);
 00004188  55				push	EBP
 00004189  8B EC			mov	EBP,ESP
 0000418B  51				push	ECX 
 0000418C  53				push	EBX 
 0000418D  56				push	ESI 
 0000418E  57				push	EDI 
				;{

				;{125}:return mu
 0000418F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004192  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004195  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00004198  EB 00			jmp	OFFSET $L000575
				;}
 0000419A			$L000575:

 0000419A  5F				pop	EDI
 0000419B  5E				pop	ESI 
 0000419C  5B				pop	EBX 
 0000419D  C9				leave	
 0000419E  C3				ret	
 0000419F			UnitTesting_TestVirtuals_ExponentialRV_get_MU ENDP

 0000419F			UnitTesting_TestVirtuals_ExponentialRV_Name PROC NEAR 
				;string Name(void);
 0000419F  55				push	EBP
 000041A0  8B EC			mov	EBP,ESP
 000041A2  51				push	ECX 
 000041A3  53				push	EBX 
 000041A4  56				push	ESI 
 000041A5  57				push	EDI 
				;{

				;{138}:return "An exponential variable"
 000041A6  8D 05 0000078D R		lea	EAX,OFFSET $S000580
 000041AC  EB 00			jmp	OFFSET $L000579
				;}
 000041AE			$L000579:

 000041AE  5F				pop	EDI
 000041AF  5E				pop	ESI 
 000041B0  5B				pop	EBX 
 000041B1  C9				leave	
 000041B2  C3				ret	
 000041B3			UnitTesting_TestVirtuals_ExponentialRV_Name ENDP

 000041B3			UnitTesting_TestVirtuals_ExponentialRV_Sample PROC NEAR 
				;double Sample(void);
 000041B3  55				push	EBP
 000041B4  8B EC			mov	EBP,ESP
 000041B6  51				push	ECX 
 000041B7  53				push	EBX 
 000041B8  56				push	ESI 
 000041B9  57				push	EDI 
				;{

				;{134}:return -MU * Math::log10(UnitTesting::Rnd::NextDblEx())
 000041BA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000041BD  E8 FFFFFFC6			call	 UnitTesting_TestVirtuals_ExponentialRV_get_MU
 000041C2  50				push	EAX
 000041C3  52				push	EDX 
 000041C4  E8 FFFFCE88			call	 UnitTesting_Rnd_NextDblEx
 000041C9  50				push	EAX
 000041CA  52				push	EDX 
 000041CB  E8 00000000 E		call	 Math_log10
 000041D0  9B DB E2			fclex
 000041D3  50				push	EAX
 000041D4  52				push	EDX 
 000041D5  DD 04 24			fld	qword ptr [ESP]
 000041D8  59				pop	ECX
 000041D9  59				pop	ECX 
 000041DA  DC 0C 24			fmul	qword ptr [ESP]
 000041DD  DD 1C 24			fstp	qword ptr [ESP]
 000041E0  DD 04 24			fld	qword ptr [ESP]
 000041E3  D9 E0			fchs
 000041E5  DD 1C 24			fstp	qword ptr [ESP]
 000041E8  5A				pop	EDX
 000041E9  58				pop	EAX 
 000041EA  EB 00			jmp	OFFSET $L000578
				;}
 000041EC			$L000578:

 000041EC  5F				pop	EDI
 000041ED  5E				pop	ESI 
 000041EE  5B				pop	EBX 
 000041EF  C9				leave	
 000041F0  C3				ret	
 000041F1			UnitTesting_TestVirtuals_ExponentialRV_Sample ENDP

 000041F1			UnitTesting_TestVirtuals_ExponentialRV PROC NEAR 
				;void UnitTesting::TestVirtuals::ExponentialRV(double _mu);
 000041F1  55				push	EBP
 000041F2  8B EC			mov	EBP,ESP
 000041F4  51				push	ECX 
 000041F5  53				push	EBX 
 000041F6  56				push	ESI 
 000041F7  57				push	EDI 
 000041F8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000041FB  E8 00000039			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00004200  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004203  C7 01 000000A8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV 
				;{

				;{130}:mu= _mu;
 00004209  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000420C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000420F  50				push	EAX
 00004210  52				push	EDX 
 00004211  DD C0			ffree	st
 00004213  DD 04 24			fld	qword ptr [ESP]
 00004216  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004219  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 0000421C  5A				pop	EDX
 0000421D  58				pop	EAX 

 0000421E  5F				pop	EDI
 0000421F  5E				pop	ESI 
 00004220  5B				pop	EBX 
 00004221  C9				leave	
 00004222  C2 0008			retn	000000008h
 00004225			UnitTesting_TestVirtuals_ExponentialRV ENDP

 00004225			UnitTesting_TestVirtuals_RandomVariable_Name PROC NEAR 
				;string Name(void);
 00004225  55				push	EBP
 00004226  8B EC			mov	EBP,ESP
 00004228  51				push	ECX 
 00004229  53				push	EBX 
 0000422A  56				push	ESI 
 0000422B  57				push	EDI 
				;{

				;{62}:return "(none)"
 0000422C  8D 05 000004BD R		lea	EAX,OFFSET $S000547
 00004232  EB 00			jmp	OFFSET $L000546
				;}
 00004234			$L000546:

 00004234  5F				pop	EDI
 00004235  5E				pop	ESI 
 00004236  5B				pop	EBX 
 00004237  C9				leave	
 00004238  C3				ret	
 00004239			UnitTesting_TestVirtuals_RandomVariable_Name ENDP

 00004239			UnitTesting_TestVirtuals_RandomVariable PROC NEAR 
				;void UnitTesting::TestVirtuals::RandomVariable(void);
 00004239  55				push	EBP
 0000423A  8B EC			mov	EBP,ESP
 0000423C  51				push	ECX 
 0000423D  53				push	EBX 
 0000423E  56				push	ESI 
 0000423F  57				push	EDI 
 00004240  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004243  C7 01 000000B0 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable 

 00004249  5F				pop	EDI
 0000424A  5E				pop	ESI 
 0000424B  5B				pop	EBX 
 0000424C  C9				leave	
 0000424D  C3				ret	
 0000424E			UnitTesting_TestVirtuals_RandomVariable ENDP

 0000424E			UnitTesting_TestVirtuals_SimpleRV_Name PROC NEAR 
				;string Name(void);
 0000424E  55				push	EBP
 0000424F  8B EC			mov	EBP,ESP
 00004251  51				push	ECX 
 00004252  53				push	EBX 
 00004253  56				push	ESI 
 00004254  57				push	EDI 
				;{

				;{75}:return "A simple variable"
 00004255  8D 05 0000077B R		lea	EAX,OFFSET $S000552
 0000425B  EB 00			jmp	OFFSET $L000551
				;}
 0000425D			$L000551:

 0000425D  5F				pop	EDI
 0000425E  5E				pop	ESI 
 0000425F  5B				pop	EBX 
 00004260  C9				leave	
 00004261  C3				ret	
 00004262			UnitTesting_TestVirtuals_SimpleRV_Name ENDP

 00004262			UnitTesting_TestVirtuals_SimpleRV_Sample PROC NEAR 
				;double Sample(void);
 00004262  55				push	EBP
 00004263  8B EC			mov	EBP,ESP
 00004265  51				push	ECX 
 00004266  53				push	EBX 
 00004267  56				push	ESI 
 00004268  57				push	EDI 
				;{

				;{70}:return UnitTesting::Rnd::NextDblEx()
 00004269  E8 FFFFCDE3			call	 UnitTesting_Rnd_NextDblEx
 0000426E  EB 00			jmp	OFFSET $L000550
				;}
 00004270			$L000550:

 00004270  5F				pop	EDI
 00004271  5E				pop	ESI 
 00004272  5B				pop	EBX 
 00004273  C9				leave	
 00004274  C3				ret	
 00004275			UnitTesting_TestVirtuals_SimpleRV_Sample ENDP

 00004275			UnitTesting_TestVirtuals_SimpleRV PROC NEAR 
				;void UnitTesting::TestVirtuals::SimpleRV(void);
 00004275  55				push	EBP
 00004276  8B EC			mov	EBP,ESP
 00004278  51				push	ECX 
 00004279  53				push	EBX 
 0000427A  56				push	ESI 
 0000427B  57				push	EDI 
 0000427C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000427F  E8 FFFFFFB5			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00004284  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004287  C7 01 000000B8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV 

 0000428D  5F				pop	EDI
 0000428E  5E				pop	ESI 
 0000428F  5B				pop	EBX 
 00004290  C9				leave	
 00004291  C3				ret	
 00004292			UnitTesting_TestVirtuals_SimpleRV ENDP

 00004292			UnitTesting_TestVirtuals_UniformRV_Name PROC NEAR 
				;string Name(void);
 00004292  55				push	EBP
 00004293  8B EC			mov	EBP,ESP
 00004295  51				push	ECX 
 00004296  53				push	EBX 
 00004297  56				push	ESI 
 00004298  57				push	EDI 
				;{

				;{115}:return "An uniform variable"
 00004299  8D 05 000007A5 R		lea	EAX,OFFSET $S000570
 0000429F  EB 00			jmp	OFFSET $L000569
				;}
 000042A1			$L000569:

 000042A1  5F				pop	EDI
 000042A2  5E				pop	ESI 
 000042A3  5B				pop	EBX 
 000042A4  C9				leave	
 000042A5  C3				ret	
 000042A6			UnitTesting_TestVirtuals_UniformRV_Name ENDP

 000042A6			UnitTesting_TestVirtuals_UniformRV_Sample PROC NEAR 
				;double Sample(void);
 000042A6  55				push	EBP
 000042A7  8B EC			mov	EBP,ESP
 000042A9  51				push	ECX 
 000042AA  53				push	EBX 
 000042AB  56				push	ESI 
 000042AC  57				push	EDI 
				;{

				;{111}:return u + (v - u) * UnitTesting::Rnd::NextDblEx()
 000042AD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042B0  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000042B3  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000042B6  50				push	EAX
 000042B7  52				push	EDX 
 000042B8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042BB  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000042BE  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000042C1  50				push	EAX
 000042C2  52				push	EDX 
 000042C3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042C6  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000042C9  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000042CC  50				push	EAX
 000042CD  52				push	EDX 
 000042CE  DD 04 24			fld	qword ptr [ESP]
 000042D1  59				pop	ECX
 000042D2  59				pop	ECX 
 000042D3  DD 04 24			fld	qword ptr [ESP]
 000042D6  D8 E1			fsub	st,st(1)
 000042D8  DD 1C 24			fstp	qword ptr [ESP]
 000042DB  E8 FFFFCD71			call	 UnitTesting_Rnd_NextDblEx
 000042E0  9B DB E2			fclex
 000042E3  50				push	EAX
 000042E4  52				push	EDX 
 000042E5  DD 04 24			fld	qword ptr [ESP]
 000042E8  59				pop	ECX
 000042E9  59				pop	ECX 
 000042EA  DC 0C 24			fmul	qword ptr [ESP]
 000042ED  DD 1C 24			fstp	qword ptr [ESP]
 000042F0  DD 04 24			fld	qword ptr [ESP]
 000042F3  59				pop	ECX
 000042F4  59				pop	ECX 
 000042F5  DC 04 24			fadd	qword ptr [ESP]
 000042F8  DD 1C 24			fstp	qword ptr [ESP]
 000042FB  5A				pop	EDX
 000042FC  58				pop	EAX 
 000042FD  EB 00			jmp	OFFSET $L000568
				;}
 000042FF			$L000568:

 000042FF  5F				pop	EDI
 00004300  5E				pop	ESI 
 00004301  5B				pop	EBX 
 00004302  C9				leave	
 00004303  C3				ret	
 00004304			UnitTesting_TestVirtuals_UniformRV_Sample ENDP

 00004304			UnitTesting_TestVirtuals_UniformRV_get_U PROC NEAR 
				;double get::U(void);
 00004304  55				push	EBP
 00004305  8B EC			mov	EBP,ESP
 00004307  51				push	ECX 
 00004308  53				push	EBX 
 00004309  56				push	ESI 
 0000430A  57				push	EDI 
				;{

				;{86}:return u
 0000430B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000430E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004311  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00004314  EB 00			jmp	OFFSET $L000558
				;}
 00004316			$L000558:

 00004316  5F				pop	EDI
 00004317  5E				pop	ESI 
 00004318  5B				pop	EBX 
 00004319  C9				leave	
 0000431A  C3				ret	
 0000431B			UnitTesting_TestVirtuals_UniformRV_get_U ENDP

 0000431B			UnitTesting_TestVirtuals_UniformRV_put_U PROC NEAR 
				;void put::U(double value);
 0000431B  55				push	EBP
 0000431C  8B EC			mov	EBP,ESP
 0000431E  51				push	ECX 
 0000431F  53				push	EBX 
 00004320  56				push	ESI 
 00004321  57				push	EDI 
				;{

				;{91}:u= value;
 00004322  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00004325  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00004328  50				push	EAX
 00004329  52				push	EDX 
 0000432A  DD C0			ffree	st
 0000432C  DD 04 24			fld	qword ptr [ESP]
 0000432F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004332  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00004335			$L000559:
 00004335  5A				pop	EDX
 00004336  58				pop	EAX 

 00004337  5F				pop	EDI
 00004338  5E				pop	ESI 
 00004339  5B				pop	EBX 
 0000433A  C9				leave	
 0000433B  C2 0008			retn	000000008h
 0000433E			UnitTesting_TestVirtuals_UniformRV_put_U ENDP

 0000433E			UnitTesting_TestVirtuals_UniformRV PROC NEAR 
				;void UnitTesting::TestVirtuals::UniformRV(double _u, double _v);
 0000433E  55				push	EBP
 0000433F  8B EC			mov	EBP,ESP
 00004341  51				push	ECX 
 00004342  53				push	EBX 
 00004343  56				push	ESI 
 00004344  57				push	EDI 
 00004345  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004348  E8 FFFFFEEC			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 0000434D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004350  C7 01 000000C0 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV 
				;{

				;{106}:U= _u;
 00004356  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00004359  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000435C  50				push	EAX
 0000435D  52				push	EDX 
 0000435E  DD C0			ffree	st
 00004360  DD 04 24			fld	qword ptr [ESP]
 00004363  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004366  E8 FFFFFFB0			call	 UnitTesting_TestVirtuals_UniformRV_put_U

				;{106}:V= _v;
 0000436B  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 0000436E  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 00004371  50				push	EAX
 00004372  52				push	EDX 
 00004373  DD C0			ffree	st
 00004375  DD 04 24			fld	qword ptr [ESP]
 00004378  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000437B  E8 0000001E			call	 UnitTesting_TestVirtuals_UniformRV_put_V
				;}

 00004380  5F				pop	EDI
 00004381  5E				pop	ESI 
 00004382  5B				pop	EBX 
 00004383  C9				leave	
 00004384  C2 0010			retn	000000010h
 00004387			UnitTesting_TestVirtuals_UniformRV ENDP

 00004387			UnitTesting_TestVirtuals_UniformRV_get_V PROC NEAR 
				;double get::V(void);
 00004387  55				push	EBP
 00004388  8B EC			mov	EBP,ESP
 0000438A  51				push	ECX 
 0000438B  53				push	EBX 
 0000438C  56				push	ESI 
 0000438D  57				push	EDI 
				;{

				;{96}:return v
 0000438E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004391  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00004394  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00004397  EB 00			jmp	OFFSET $L000562
				;}
 00004399			$L000562:

 00004399  5F				pop	EDI
 0000439A  5E				pop	ESI 
 0000439B  5B				pop	EBX 
 0000439C  C9				leave	
 0000439D  C3				ret	
 0000439E			UnitTesting_TestVirtuals_UniformRV_get_V ENDP

 0000439E			UnitTesting_TestVirtuals_UniformRV_put_V PROC NEAR 
				;void put::V(double value);
 0000439E  55				push	EBP
 0000439F  8B EC			mov	EBP,ESP
 000043A1  51				push	ECX 
 000043A2  53				push	EBX 
 000043A3  56				push	ESI 
 000043A4  57				push	EDI 
				;{

				;{101}:v= value;
 000043A5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000043A8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000043AB  50				push	EAX
 000043AC  52				push	EDX 
 000043AD  DD C0			ffree	st
 000043AF  DD 04 24			fld	qword ptr [ESP]
 000043B2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043B5  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 000043B8			$L000563:
 000043B8  5A				pop	EDX
 000043B9  58				pop	EAX 

 000043BA  5F				pop	EDI
 000043BB  5E				pop	ESI 
 000043BC  5B				pop	EBX 
 000043BD  C9				leave	
 000043BE  C2 0008			retn	000000008h
 000043C1			UnitTesting_TestVirtuals_UniformRV_put_V ENDP

 000043C1			UnitTesting_Triangle_get_Base PROC NEAR 
				;double get::Base(void);
 000043C1  55				push	EBP
 000043C2  8B EC			mov	EBP,ESP
 000043C4  51				push	ECX 
 000043C5  53				push	EBX 
 000043C6  56				push	ESI 
 000043C7  57				push	EDI 
				;{

				;{181}:return dBase
 000043C8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043CB  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000043CE  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000043D1  EB 00			jmp	OFFSET $L000707
				;}
 000043D3			$L000707:

 000043D3  5F				pop	EDI
 000043D4  5E				pop	ESI 
 000043D5  5B				pop	EBX 
 000043D6  C9				leave	
 000043D7  C3				ret	
 000043D8			UnitTesting_Triangle_get_Base ENDP

 000043D8			UnitTesting_Triangle_put_Base PROC NEAR 
				;void put::Base(double value);
 000043D8  55				push	EBP
 000043D9  8B EC			mov	EBP,ESP
 000043DB  51				push	ECX 
 000043DC  53				push	EBX 
 000043DD  56				push	ESI 
 000043DE  57				push	EDI 
				;{

				;{186}:dBase= value;
 000043DF  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000043E2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000043E5  50				push	EAX
 000043E6  52				push	EDX 
 000043E7  DD C0			ffree	st
 000043E9  DD 04 24			fld	qword ptr [ESP]
 000043EC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043EF  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 000043F2			$L000708:
 000043F2  5A				pop	EDX
 000043F3  58				pop	EAX 

 000043F4  5F				pop	EDI
 000043F5  5E				pop	ESI 
 000043F6  5B				pop	EBX 
 000043F7  C9				leave	
 000043F8  C2 0008			retn	000000008h
 000043FB			UnitTesting_Triangle_put_Base ENDP

 000043FB			UnitTesting_Triangle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 000043FB  55				push	EBP
 000043FC  8B EC			mov	EBP,ESP
 000043FE  51				push	ECX 
 000043FF  53				push	EBX 
 00004400  56				push	ESI 
 00004401  57				push	EDI 
				;{

				;{215}:return Base * High / 2
 00004402  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004405  E8 FFFFFFB7			call	 UnitTesting_Triangle_get_Base
 0000440A  50				push	EAX
 0000440B  52				push	EDX 
 0000440C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000440F  E8 0000009F			call	 UnitTesting_Triangle_get_High
 00004414  9B DB E2			fclex
 00004417  50				push	EAX
 00004418  52				push	EDX 
 00004419  DD 04 24			fld	qword ptr [ESP]
 0000441C  59				pop	ECX
 0000441D  59				pop	ECX 
 0000441E  DC 0C 24			fmul	qword ptr [ESP]
 00004421  DD 1C 24			fstp	qword ptr [ESP]
 00004424  B8 00000002			mov	EAX,000000002h
 00004429  9B DB E2			fclex
 0000442C  50				push	EAX
 0000442D  E8 00000000 E		call	 FloatingPoint_FromInt
 00004432  50				push	EAX
 00004433  52				push	EDX 
 00004434  DD 04 24			fld	qword ptr [ESP]
 00004437  59				pop	ECX 
 00004438  59				pop	ECX 
 00004439  DC 3C 24			fdivr	qword ptr [ESP]
 0000443C  DD 1C 24			fstp	qword ptr [ESP]
 0000443F  5A				pop	EDX
 00004440  58				pop	EAX 
 00004441  EB 00			jmp	OFFSET $L000719
				;}
 00004443			$L000719:

 00004443  5F				pop	EDI
 00004444  5E				pop	ESI 
 00004445  5B				pop	EBX 
 00004446  C9				leave	
 00004447  C3				ret	
 00004448			UnitTesting_Triangle_ComputeArea ENDP

 00004448			UnitTesting_Triangle_Destructor PROC NEAR 
				;void Destructor(void);
 00004448  55				push	EBP
 00004449  8B EC			mov	EBP,ESP
 0000444B  51				push	ECX 
 0000444C  53				push	EBX 
 0000444D  56				push	ESI 
 0000444E  57				push	EDI 
				;{

				;{220}:System::Debug::OutputString("destroying a Triangle object...");
 0000444F  8D 05 00000F1C R		lea	EAX,OFFSET $S000721
 00004455  50				push	EAX
 00004456  E8 00000000 E		call	 System_Debug_OutputString

				;{221}:Console::WriteLn("destroying a Triangle object...");
 0000445B  8D 05 00000F1C R		lea	EAX,OFFSET $S000721
 00004461  6A 00			push	000000000h
 00004463  50				push	EAX 
 00004464  E8 00000000 E		call	 Console_WriteString
 00004469  E8 00000000 E		call	 Console_WriteCrLf 

				;{222}:return 
 0000446E  EB 00			jmp	OFFSET $L000720
				;}
 00004470			$L000720:

 00004470  5F				pop	EDI
 00004471  5E				pop	ESI 
 00004472  5B				pop	EBX 
 00004473  C9				leave	
 00004474  C3				ret	
 00004475			UnitTesting_Triangle_Destructor ENDP

 00004475			UnitTesting_Triangle_Draw PROC NEAR 
				;void Draw(void);
 00004475  55				push	EBP
 00004476  8B EC			mov	EBP,ESP
 00004478  51				push	ECX 
 00004479  53				push	EBX 
 0000447A  56				push	ESI 
 0000447B  57				push	EDI 
				;{

				;{209}:Console::WriteLn("Drawing a Triangle!");
 0000447C  8D 05 000009B0 R		lea	EAX,OFFSET $S000718
 00004482  6A 00			push	000000000h
 00004484  50				push	EAX 
 00004485  E8 00000000 E		call	 Console_WriteString
 0000448A  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000448F			$L000717:

 0000448F  5F				pop	EDI
 00004490  5E				pop	ESI 
 00004491  5B				pop	EBX 
 00004492  C9				leave	
 00004493  C3				ret	
 00004494			UnitTesting_Triangle_Draw ENDP

 00004494			UnitTesting_Triangle_DrawPiramid PROC NEAR 
				;void DrawPiramid(void);
 00004494  55				push	EBP
 00004495  8B EC			mov	EBP,ESP
 00004497  51				push	ECX 
 00004498  53				push	EBX 
 00004499  56				push	ESI 
 0000449A  57				push	EDI 
				;{

				;{227}:Console::WriteLn("Drawing a Piramid!");
 0000449B  8D 05 00000979 R		lea	EAX,OFFSET $S000723
 000044A1  6A 00			push	000000000h
 000044A3  50				push	EAX 
 000044A4  E8 00000000 E		call	 Console_WriteString
 000044A9  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000044AE			$L000722:

 000044AE  5F				pop	EDI
 000044AF  5E				pop	ESI 
 000044B0  5B				pop	EBX 
 000044B1  C9				leave	
 000044B2  C3				ret	
 000044B3			UnitTesting_Triangle_DrawPiramid ENDP

 000044B3			UnitTesting_Triangle_get_High PROC NEAR 
				;double get::High(void);
 000044B3  55				push	EBP
 000044B4  8B EC			mov	EBP,ESP
 000044B6  51				push	ECX 
 000044B7  53				push	EBX 
 000044B8  56				push	ESI 
 000044B9  57				push	EDI 
				;{

				;{191}:return dHigh
 000044BA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000044BD  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000044C0  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000044C3  EB 00			jmp	OFFSET $L000711
				;}
 000044C5			$L000711:

 000044C5  5F				pop	EDI
 000044C6  5E				pop	ESI 
 000044C7  5B				pop	EBX 
 000044C8  C9				leave	
 000044C9  C3				ret	
 000044CA			UnitTesting_Triangle_get_High ENDP

 000044CA			UnitTesting_Triangle_put_High PROC NEAR 
				;void put::High(double value);
 000044CA  55				push	EBP
 000044CB  8B EC			mov	EBP,ESP
 000044CD  51				push	ECX 
 000044CE  53				push	EBX 
 000044CF  56				push	ESI 
 000044D0  57				push	EDI 
				;{

				;{196}:dHigh= value;
 000044D1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000044D4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000044D7  50				push	EAX
 000044D8  52				push	EDX 
 000044D9  DD C0			ffree	st
 000044DB  DD 04 24			fld	qword ptr [ESP]
 000044DE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000044E1  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 000044E4			$L000712:
 000044E4  5A				pop	EDX
 000044E5  58				pop	EAX 

 000044E6  5F				pop	EDI
 000044E7  5E				pop	ESI 
 000044E8  5B				pop	EBX 
 000044E9  C9				leave	
 000044EA  C2 0008			retn	000000008h
 000044ED			UnitTesting_Triangle_put_High ENDP

 000044ED			UnitTesting_Triangle_Name PROC NEAR 
				;string Name(void);
 000044ED  55				push	EBP
 000044EE  8B EC			mov	EBP,ESP
 000044F0  51				push	ECX 
 000044F1  53				push	EBX 
 000044F2  56				push	ESI 
 000044F3  57				push	EDI 
				;{

				;{204}:return "Triangle"
 000044F4  8D 05 00000D80 R		lea	EAX,OFFSET $S000716
 000044FA  EB 00			jmp	OFFSET $L000715
				;}
 000044FC			$L000715:

 000044FC  5F				pop	EDI
 000044FD  5E				pop	ESI 
 000044FE  5B				pop	EBX 
 000044FF  C9				leave	
 00004500  C3				ret	
 00004501			UnitTesting_Triangle_Name ENDP

 00004501			UnitTesting_Triangle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00004501  55				push	EBP
 00004502  8B EC			mov	EBP,ESP
 00004504  51				push	ECX 
 00004505  53				push	EBX 
 00004506  56				push	ESI 
 00004507  57				push	EDI 
				;{

				;{200}:return UnitTesting::stTriangle
 00004508  B8 00000003			mov	EAX,000000003h
 0000450D  EB 00			jmp	OFFSET $L000714
				;}
 0000450F			$L000714:

 0000450F  5F				pop	EDI
 00004510  5E				pop	ESI 
 00004511  5B				pop	EBX 
 00004512  C9				leave	
 00004513  C3				ret	
 00004514			UnitTesting_Triangle_Type ENDP

 00004514			UnitTesting_Triangle PROC NEAR 
				;void UnitTesting::Triangle(void);
 00004514  55				push	EBP
 00004515  8B EC			mov	EBP,ESP
 00004517  51				push	ECX 
 00004518  53				push	EBX 
 00004519  56				push	ESI 
 0000451A  57				push	EDI 
 0000451B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000451E  E8 FFFFCCD4			call	 UnitTesting_Shape ;base constructor call
 00004523  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004526  C7 01 000000C8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Triangle 
 0000452C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000452F  E8 00000398			call	 __member_Init@UnitTesting_Triangle 
				;{
				;}

 00004534  5F				pop	EDI
 00004535  5E				pop	ESI 
 00004536  5B				pop	EBX 
 00004537  C9				leave	
 00004538  C3				ret	
 00004539			UnitTesting_Triangle ENDP

 00004539			UnitTesting_Visitor_Visit PROC NEAR 
				;void Visit(UnitTesting::Shape ^ shape);
 00004539  55				push	EBP
 0000453A  8B EC			mov	EBP,ESP
 0000453C  83 EC 14			sub	ESP,000000014h
 0000453F  53				push	EBX 
 00004540  56				push	ESI 
 00004541  57				push	EDI 
 00004542  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 00004545  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00004548  B9 00000004			mov	ECX,000000004h 
 0000454D  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00004552  F3/ AB			rep stos	dword ptr [EDI]
 00004554  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{312}:shape.Draw();
 00004557  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000455A  8B 11			mov	EDX,dword ptr [ECX]
 0000455C  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{314}:shape_ptr= null;
 0000455F  33 C0			xor	EAX,EAX
 00004561  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00004564  89 03			mov	dword ptr [EBX],EAX

				;{316}:switch(shape.Type())
 00004566  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00004569  8B 11			mov	EDX,dword ptr [ECX]
 0000456B  FF 12			call	dword ptr [EDX]
 0000456D  8B F0			mov	ESI,EAX
 0000456F  B8 00000001			mov	EAX,000000001h
 00004574  3B C6			cmp	EAX,ESI
 00004576  74 17			jz	OFFSET $L001627
 00004578  B8 00000002			mov	EAX,000000002h
 0000457D  3B C6			cmp	EAX,ESI
 0000457F  74 3D			jz	OFFSET $L001628
 00004581  B8 00000003			mov	EAX,000000003h
 00004586  3B C6			cmp	EAX,ESI
 00004588  74 63			jz	OFFSET $L001629
 0000458A  E9 0000008D			jmp	OFFSET $L001630
 0000458F			$L001627:
				;{

				;{320}:Console::WriteLn("type == stCircle");
 0000458F  8D 05 00001115 R		lea	EAX,OFFSET $S000734
 00004595  6A 00			push	000000000h
 00004597  50				push	EAX 
 00004598  E8 00000000 E		call	 Console_WriteString
 0000459D  E8 00000000 E		call	 Console_WriteCrLf 

				;{322}:circle= dynamic_cast(shape);
 000045A2  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000045A5  8B C3			mov	EAX,EBX 
 000045A7  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 000045AA  89 03			mov	dword ptr [EBX],EAX

				;{323}:circle.DrawSphere();
 000045AC  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000045AF  8B 11			mov	EDX,dword ptr [ECX]
 000045B1  FF 52 14			call	dword ptr [EDX+0014h]

				;{325}:shape_ptr= circle;
 000045B4  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000045B7  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000045BA  89 03			mov	dword ptr [EBX],EAX
				;}
 000045BC  EB 5F			jmp	OFFSET $L001626
 000045BE			$L001628:
				;{

				;{330}:Console::WriteLn("type == stSquare");
 000045BE  8D 05 00001126 R		lea	EAX,OFFSET $S000736
 000045C4  6A 00			push	000000000h
 000045C6  50				push	EAX 
 000045C7  E8 00000000 E		call	 Console_WriteString
 000045CC  E8 00000000 E		call	 Console_WriteCrLf 

				;{332}:square= dynamic_cast(shape);
 000045D1  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000045D4  8B C3			mov	EAX,EBX 
 000045D6  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000045D9  89 03			mov	dword ptr [EBX],EAX

				;{333}:square.DrawCube();
 000045DB  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000045DE  E8 FFFFD1F5			call	 UnitTesting_Square_DrawCube

				;{335}:shape_ptr= square;
 000045E3  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000045E6  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000045E9  89 03			mov	dword ptr [EBX],EAX
				;}
 000045EB  EB 30			jmp	OFFSET $L001626
 000045ED			$L001629:
				;{

				;{340}:Console::WriteLn("type == stTriangle");
 000045ED  8D 05 00001137 R		lea	EAX,OFFSET $S000738
 000045F3  6A 00			push	000000000h
 000045F5  50				push	EAX 
 000045F6  E8 00000000 E		call	 Console_WriteString
 000045FB  E8 00000000 E		call	 Console_WriteCrLf 

				;{342}:triangle= dynamic_cast(shape);
 00004600  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00004603  8B C3			mov	EAX,EBX 
 00004605  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00004608  89 03			mov	dword ptr [EBX],EAX

				;{343}:triangle.DrawPiramid();
 0000460A  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 0000460D  8B 11			mov	EDX,dword ptr [ECX]
 0000460F  FF 52 14			call	dword ptr [EDX+0014h]

				;{345}:shape_ptr= triangle;
 00004612  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00004615  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00004618  89 03			mov	dword ptr [EBX],EAX
				;}
 0000461A  EB 01			jmp	OFFSET $L001626
 0000461C			$L001630:
 0000461C  CC				int	000000003h ;User breakpoint
 0000461D			$L001626:

				;{353}:if(shape_ptr != null)
 0000461D  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00004620  8B C8			mov	ECX,EAX 
 00004622  51				push	ECX
 00004623  33 C0			xor	EAX,EAX
 00004625  5B				pop	EBX
 00004626  3B D8			cmp	EBX,EAX
 00004628  0F 95 C0			setnz	AL
 0000462B  84 C0			test	AL,AL
 0000462D  74 08			jz	OFFSET $L001631

				;{354}:shape_ptr.Draw();
 0000462F  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00004632  8B 11			mov	EDX,dword ptr [ECX]
 00004634  FF 52 0C			call	dword ptr [EDX+000Ch]
 00004637			$L001631:

				;{356}:if(null != shape_ptr)
 00004637  33 C0			xor	EAX,EAX
 00004639  50				push	EAX
 0000463A  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000463D  59				pop	ECX
 0000463E  3B C8			cmp	ECX,EAX
 00004640  0F 95 C0			setnz	AL
 00004643  84 C0			test	AL,AL
 00004645  74 08			jz	OFFSET $L001633

				;{357}:shape_ptr.Draw();
 00004647  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000464A  8B 11			mov	EDX,dword ptr [ECX]
 0000464C  FF 52 0C			call	dword ptr [EDX+000Ch]
 0000464F			$L001633:

				;{360}:Console::WriteLn("**Visited object name = ", shape_ptr.Name());
 0000464F  8D 05 000006D2 R		lea	EAX,OFFSET $S000740
 00004655  6A 00			push	000000000h
 00004657  50				push	EAX 
 00004658  E8 00000000 E		call	 Console_WriteString
 0000465D  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00004660  8B 11			mov	EDX,dword ptr [ECX]
 00004662  FF 52 08			call	dword ptr [EDX+0008h]
 00004665  6A 00			push	000000000h 
 00004667  50				push	EAX 
 00004668  E8 00000000 E		call	 Console_WriteString 
 0000466D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004672			$L000731:

 00004672  5F				pop	EDI
 00004673  5E				pop	ESI 
 00004674  5B				pop	EBX 
 00004675  C9				leave	
 00004676  C2 0004			retn	000000004h
 00004679			UnitTesting_Visitor_Visit ENDP

 00004679			__member_Init@UnitTesting_Circle PROC NEAR

 00004679  55				push	EBP
 0000467A  8B EC			mov	EBP,ESP
 0000467C  51				push	ECX 
 0000467D  53				push	EBX 
 0000467E  56				push	ESI 
 0000467F  57				push	EDI 
 00004680  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:radius= 0.0;
 00004683  D9 EE			fldz
 00004685  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004688  DD 59 04			fstp	qword ptr [ECX+0004h]

 0000468B  5F				pop	EDI
 0000468C  5E				pop	ESI 
 0000468D  5B				pop	EBX 
 0000468E  C9				leave	
 0000468F  C3				ret	
 00004690			__member_Init@UnitTesting_Circle ENDP
 00004690			__member_Init@UnitTesting_DoubleProxy PROC NEAR

 00004690  55				push	EBP
 00004691  8B EC			mov	EBP,ESP
 00004693  51				push	ECX 
 00004694  53				push	EBX 
 00004695  56				push	ESI 
 00004696  57				push	EDI 
 00004697  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:val= 0.0;
 0000469A  D9 EE			fldz
 0000469C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000469F  DD 59 04			fstp	qword ptr [ECX+0004h]

 000046A2  5F				pop	EDI
 000046A3  5E				pop	ESI 
 000046A4  5B				pop	EBX 
 000046A5  C9				leave	
 000046A6  C3				ret	
 000046A7			__member_Init@UnitTesting_DoubleProxy ENDP
 000046A7			__member_Init@UnitTesting_Objects_Array PROC NEAR

 000046A7  55				push	EBP
 000046A8  8B EC			mov	EBP,ESP
 000046AA  51				push	ECX 
 000046AB  53				push	EBX 
 000046AC  56				push	ESI 
 000046AD  57				push	EDI 
 000046AE  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:array= null;
 000046B1  33 C0			xor	EAX,EAX
 000046B3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046B6  89 01			mov	dword ptr [ECX],EAX

				;{0}:_length= 0;
 000046B8  33 C0			xor	EAX,EAX
 000046BA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046BD  89 41 04			mov	dword ptr [ECX+0004h],EAX

 000046C0  5F				pop	EDI
 000046C1  5E				pop	ESI 
 000046C2  5B				pop	EBX 
 000046C3  C9				leave	
 000046C4  C3				ret	
 000046C5			__member_Init@UnitTesting_Objects_Array ENDP
 000046C5			__member_Init@UnitTesting_Objects_Automobile PROC NEAR

 000046C5  55				push	EBP
 000046C6  8B EC			mov	EBP,ESP
 000046C8  51				push	ECX 
 000046C9  53				push	EBX 
 000046CA  56				push	ESI 
 000046CB  57				push	EDI 
 000046CC  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:speed= 0.0;
 000046CF  D9 EE			fldz
 000046D1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046D4  DD 59 04			fstp	qword ptr [ECX+0004h]

 000046D7  5F				pop	EDI
 000046D8  5E				pop	ESI 
 000046D9  5B				pop	EBX 
 000046DA  C9				leave	
 000046DB  C3				ret	
 000046DC			__member_Init@UnitTesting_Objects_Automobile ENDP
 000046DC			__member_Init@UnitTesting_Rnd PROC NEAR

 000046DC  55				push	EBP
 000046DD  8B EC			mov	EBP,ESP
 000046DF  51				push	ECX 
 000046E0  53				push	EBX 
 000046E1  56				push	ESI 
 000046E2  57				push	EDI 
 000046E3  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:UnitTesting::Rnd::seed= 1;
 000046E6  B8 00000001			mov	EAX,000000001h
 000046EB  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{0}:UnitTesting::Rnd::a= 16807;
 000046F0  B8 000041A7			mov	EAX,0000041A7h
 000046F5  A3 00001214 R		mov	 UnitTesting_Rnd_a,EAX

				;{0}:UnitTesting::Rnd::m= 2147483647;
 000046FA  B8 7FFFFFFF			mov	EAX,07FFFFFFFh
 000046FF  A3 00001218 R		mov	 UnitTesting_Rnd_m,EAX

				;{0}:UnitTesting::Rnd::q= 127773;
 00004704  B8 0001F31D			mov	EAX,00001F31Dh
 00004709  A3 0000121C R		mov	 UnitTesting_Rnd_q,EAX

				;{0}:UnitTesting::Rnd::r= 2836;
 0000470E  B8 00000B14			mov	EAX,000000B14h
 00004713  A3 00001220 R		mov	 UnitTesting_Rnd_r,EAX

 00004718  5F				pop	EDI
 00004719  5E				pop	ESI 
 0000471A  5B				pop	EBX 
 0000471B  C9				leave	
 0000471C  C3				ret	
 0000471D			__member_Init@UnitTesting_Rnd ENDP
 0000471D			__member_Init@UnitTesting_ShapeFactoryCreator PROC NEAR

 0000471D  55				push	EBP
 0000471E  8B EC			mov	EBP,ESP
 00004720  51				push	ECX 
 00004721  53				push	EBX 
 00004722  56				push	ESI 
 00004723  57				push	EDI 
 00004724  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:ptr3= new UnitTesting::Circle();
 00004727  6A 0C			push	00000000Ch
 00004729  E8 00000000 E		call	 System_Memory_New
 0000472E  85 C0			test	EAX,EAX
 00004730  74 12			jz	 $L001635
 00004732  8B F0			mov	ESI,EAX
 00004734  8D 3E			lea	EDI,dword ptr [ESI]
 00004736  B9 00000003			mov	ECX,000000003h 
 0000473B  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00004740  F3/ AB			rep stos	dword ptr [EDI]
 00004742  EB 02			jmp	 $L001636
 00004744			$L001635:
 00004744  33 F6			xor	ESI,ESI
 00004746			$L001636:
 00004746  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004749  89 31			mov	dword ptr [ECX],ESI 
 0000474B  8B CE			mov	ECX,ESI
 0000474D  E8 FFFFBFED			call	 UnitTesting_Circle
 00004752  8B C6			mov	EAX,ESI 

 00004754  5F				pop	EDI
 00004755  5E				pop	ESI 
 00004756  5B				pop	EBX 
 00004757  C9				leave	
 00004758  C3				ret	
 00004759			__member_Init@UnitTesting_ShapeFactoryCreator ENDP
 00004759			__member_Init@UnitTesting_Square PROC NEAR

 00004759  55				push	EBP
 0000475A  8B EC			mov	EBP,ESP
 0000475C  51				push	ECX 
 0000475D  53				push	EBX 
 0000475E  56				push	ESI 
 0000475F  57				push	EDI 
 00004760  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dWidth= 0.0;
 00004763  D9 EE			fldz
 00004765  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004768  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHeight= 0.0;
 0000476B  D9 EE			fldz
 0000476D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004770  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 00004773  5F				pop	EDI
 00004774  5E				pop	ESI 
 00004775  5B				pop	EBX 
 00004776  C9				leave	
 00004777  C3				ret	
 00004778			__member_Init@UnitTesting_Square ENDP
 00004778			__member_Init@UnitTesting_TestIntegers PROC NEAR

 00004778  55				push	EBP
 00004779  8B EC			mov	EBP,ESP
 0000477B  51				push	ECX 
 0000477C  53				push	EBX 
 0000477D  56				push	ESI 
 0000477E  57				push	EDI 
 0000477F  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:nWidth= 0;
 00004782  33 C0			xor	EAX,EAX
 00004784  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004787  89 01			mov	dword ptr [ECX],EAX

				;{0}:nHeight= 0;
 00004789  33 C0			xor	EAX,EAX
 0000478B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000478E  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:UnitTesting::TestIntegers::bigValue= 2147483648;
 00004791  B8 FFFFFFFF			mov	EAX,0FFFFFFFFh
 00004796  99				cdq	
 00004797  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 0000479D  89 03			mov	dword ptr [EBX],EAX
 0000479F  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{0}:member1= 0.0;
 000047A2  D9 EE			fldz
 000047A4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047A7  DD 59 08			fstp	qword ptr [ECX+0008h]

				;{0}:member2= 1.0;
 000047AA  D9 E8			fld1
 000047AC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047AF  DD 59 10			fstp	qword ptr [ECX+0010h]

 000047B2  5F				pop	EDI
 000047B3  5E				pop	ESI 
 000047B4  5B				pop	EBX 
 000047B5  C9				leave	
 000047B6  C3				ret	
 000047B7			__member_Init@UnitTesting_TestIntegers ENDP
 000047B7			__member_Init@UnitTesting_TestProperties PROC NEAR

 000047B7  55				push	EBP
 000047B8  8B EC			mov	EBP,ESP
 000047BA  51				push	ECX 
 000047BB  53				push	EBX 
 000047BC  56				push	ESI 
 000047BD  57				push	EDI 
 000047BE  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:shapes1= new UnitTesting::Circle[10];
 000047C1  B8 0000000A			mov	EAX,00000000Ah
 000047C6  6B C0 0C			imul	EAX,00000000Ch
 000047C9  8D 58 04			lea	EBX,dword ptr [EAX+4]
 000047CC  53				push	EBX
 000047CD  8B D8			mov	EBX,EAX
 000047CF  E8 00000000 E		call	 System_Memory_New
 000047D4  85 C0			test	EAX,EAX
 000047D6  74 14			jz	 $L001637
 000047D8  8B F0			mov	ESI,EAX 
 000047DA  8D 3E			lea	EDI,dword ptr [ESI]
 000047DC  8B CB			mov	ECX,EBX 
 000047DE  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000047E3  F3/ AA			rep stos	byte ptr [EDI]
 000047E5  89 1E			mov	dword ptr [ESI],EBX 
 000047E7  83 C6 04			add	ESI,000000004h
 000047EA  EB 02			jmp	 $L001638
 000047EC			$L001637:
 000047EC  33 F6			xor	ESI,ESI
 000047EE			$L001638:
 000047EE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047F1  89 31			mov	dword ptr [ECX],ESI 
 000047F3  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 000047F6  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000047F9  8B DE			mov	EBX,ESI 
 000047FB			$L001639:
 000047FB  8B CB			mov	ECX,EBX 
 000047FD  E8 FFFFBF3D			call	 UnitTesting_Circle
 00004802  83 C3 0C			add	EBX,00000000Ch 
 00004805  3B DF			cmp	EBX,EDI
 00004807  75 F2			jnz	OFFSET $L001639
 00004809  8B C6			mov	EAX,ESI 

				;{0}:shapes2= new UnitTesting::Circle[4];
 0000480B  B8 00000004			mov	EAX,000000004h
 00004810  6B C0 0C			imul	EAX,00000000Ch
 00004813  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00004816  53				push	EBX
 00004817  8B D8			mov	EBX,EAX
 00004819  E8 00000000 E		call	 System_Memory_New
 0000481E  85 C0			test	EAX,EAX
 00004820  74 14			jz	 $L001640
 00004822  8B F0			mov	ESI,EAX 
 00004824  8D 3E			lea	EDI,dword ptr [ESI]
 00004826  8B CB			mov	ECX,EBX 
 00004828  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000482D  F3/ AA			rep stos	byte ptr [EDI]
 0000482F  89 1E			mov	dword ptr [ESI],EBX 
 00004831  83 C6 04			add	ESI,000000004h
 00004834  EB 02			jmp	 $L001641
 00004836			$L001640:
 00004836  33 F6			xor	ESI,ESI
 00004838			$L001641:
 00004838  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000483B  89 71 04			mov	dword ptr [ECX+0004h],ESI 
 0000483E  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00004841  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00004844  8B DE			mov	EBX,ESI 
 00004846			$L001642:
 00004846  8B CB			mov	ECX,EBX 
 00004848  E8 FFFFBEF2			call	 UnitTesting_Circle
 0000484D  83 C3 0C			add	EBX,00000000Ch 
 00004850  3B DF			cmp	EBX,EDI
 00004852  75 F2			jnz	OFFSET $L001642
 00004854  8B C6			mov	EAX,ESI 

				;{0}:shapes_ptr= new UnitTesting::Circle[10];
 00004856  B8 0000000A			mov	EAX,00000000Ah
 0000485B  6B C0 0C			imul	EAX,00000000Ch
 0000485E  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00004861  53				push	EBX
 00004862  8B D8			mov	EBX,EAX
 00004864  E8 00000000 E		call	 System_Memory_New
 00004869  85 C0			test	EAX,EAX
 0000486B  74 14			jz	 $L001643
 0000486D  8B F0			mov	ESI,EAX 
 0000486F  8D 3E			lea	EDI,dword ptr [ESI]
 00004871  8B CB			mov	ECX,EBX 
 00004873  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00004878  F3/ AA			rep stos	byte ptr [EDI]
 0000487A  89 1E			mov	dword ptr [ESI],EBX 
 0000487C  83 C6 04			add	ESI,000000004h
 0000487F  EB 02			jmp	 $L001644
 00004881			$L001643:
 00004881  33 F6			xor	ESI,ESI
 00004883			$L001644:
 00004883  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004886  89 71 08			mov	dword ptr [ECX+0008h],ESI 
 00004889  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 0000488C  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 0000488F  8B DE			mov	EBX,ESI 
 00004891			$L001645:
 00004891  8B CB			mov	ECX,EBX 
 00004893  E8 FFFFBEA7			call	 UnitTesting_Circle
 00004898  83 C3 0C			add	EBX,00000000Ch 
 0000489B  3B DF			cmp	EBX,EDI
 0000489D  75 F2			jnz	OFFSET $L001645
 0000489F  8B C6			mov	EAX,ESI 

 000048A1  5F				pop	EDI
 000048A2  5E				pop	ESI 
 000048A3  5B				pop	EBX 
 000048A4  C9				leave	
 000048A5  C3				ret	
 000048A6			__member_Init@UnitTesting_TestProperties ENDP
 000048A6			__member_Init@UnitTesting_TestProperties_node PROC NEAR

 000048A6  55				push	EBP
 000048A7  8B EC			mov	EBP,ESP
 000048A9  51				push	ECX 
 000048AA  53				push	EBX 
 000048AB  56				push	ESI 
 000048AC  57				push	EDI 
 000048AD  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:left= null;
 000048B0  33 C0			xor	EAX,EAX
 000048B2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048B5  89 01			mov	dword ptr [ECX],EAX

				;{0}:right= null;
 000048B7  33 C0			xor	EAX,EAX
 000048B9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048BC  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:value= null;
 000048BF  33 C0			xor	EAX,EAX
 000048C1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048C4  89 41 08			mov	dword ptr [ECX+0008h],EAX

 000048C7  5F				pop	EDI
 000048C8  5E				pop	ESI 
 000048C9  5B				pop	EBX 
 000048CA  C9				leave	
 000048CB  C3				ret	
 000048CC			__member_Init@UnitTesting_TestProperties_node ENDP
 000048CC			__member_Init@UnitTesting_Triangle PROC NEAR

 000048CC  55				push	EBP
 000048CD  8B EC			mov	EBP,ESP
 000048CF  51				push	ECX 
 000048D0  53				push	EBX 
 000048D1  56				push	ESI 
 000048D2  57				push	EDI 
 000048D3  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dBase= 0.0;
 000048D6  D9 EE			fldz
 000048D8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048DB  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHigh= 0.0;
 000048DE  D9 EE			fldz
 000048E0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048E3  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 000048E6  5F				pop	EDI
 000048E7  5E				pop	ESI 
 000048E8  5B				pop	EBX 
 000048E9  C9				leave	
 000048EA  C3				ret	
 000048EB			__member_Init@UnitTesting_Triangle ENDP
 000048EB			UnitTesting_Test1_TestRunner_main PROC NEAR 
				;void UnitTesting::Test1::TestRunner::main(int argc, string string [] argv);
 000048EB  55				push	EBP
 000048EC  8B EC			mov	EBP,ESP
 000048EE  81 EC 000004C8		sub	ESP,0000004C8h
 000048F4  53				push	EBX 
 000048F5  56				push	ESI 
 000048F6  57				push	EDI 
 000048F7  8D BD FFFFFB38		lea	EDI,dword ptr [EBP-04C8h]
 000048FD  B9 00000132			mov	ECX,000000132h
 00004902  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00004907  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{1081}:for(ac= 0; ac < argc; ac++ )
 00004909  33 C0			xor	EAX,EAX
 0000490B  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000490E  EB 06			jmp	OFFSET $L001646
 00004910			$L001647:
 00004910  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00004913  FF 45 FC			inc	dword ptr [EBP-4]
 00004916			$L001646:
 00004916  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004919  50				push	EAX
 0000491A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000491D  5A				pop	EDX
 0000491E  3B D0			cmp	EDX,EAX
 00004920  0F 9C C0			setl	AL
 00004923  84 C0			test	AL,AL
 00004925  74 41			jz	OFFSET $L001648
				;{

				;{1083}:Console::WriteLn("Argument: [", ac, "]= ", argv[ac]);
 00004927  8D 05 000007B9 R		lea	EAX,OFFSET $S001200
 0000492D  6A 00			push	000000000h
 0000492F  50				push	EAX 
 00004930  E8 00000000 E		call	 Console_WriteString
 00004935  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004938  50				push	EAX 
 00004939  E8 00000000 E		call	 Console_WriteInteger 
 0000493E  8D 05 00000DCC R		lea	EAX,OFFSET $S001201
 00004944  6A 00			push	000000000h 
 00004946  50				push	EAX 
 00004947  E8 00000000 E		call	 Console_WriteString 
 0000494C  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000494F  8B C3			mov	EAX,EBX 
 00004951  50				push	EAX
 00004952  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004955  5E				pop	ESI
 00004956  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00004959  6A 00			push	000000000h 
 0000495B  50				push	EAX 
 0000495C  E8 00000000 E		call	 Console_WriteString 
 00004961  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004966  EB A8			jmp	OFFSET $L001647 
 00004968			$L001648:

				;{1086}:bUnattended= argc > 1 && (argv[1] == "/Silent");
 00004968  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000496B  50				push	EAX
 0000496C  B8 00000001			mov	EAX,000000001h
 00004971  5A				pop	EDX
 00004972  3B D0			cmp	EDX,EAX
 00004974  0F 9F C0			setg	AL
 00004977  84 C0			test	AL,AL
 00004979  74 2D			jz	OFFSET $L001649
 0000497B  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000497E  8B C3			mov	EAX,EBX 
 00004980  50				push	EAX
 00004981  B8 00000001			mov	EAX,000000001h
 00004986  5E				pop	ESI
 00004987  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 0000498A  50				push	EAX
 0000498B  8D 05 00000761 R		lea	EAX,OFFSET $S001203
 00004991  5F				pop	EDI
 00004992  8B F0			mov	ESI,EAX
 00004994  50				push	EAX
 00004995  E8 00000000 E		call	 StringHandling_StringLength
 0000499A  50				push	EAX 
 0000499B  56				push	ESI 
 0000499C  57				push	EDI 
 0000499D  E8 00000000 E		call	 StringHandling_StringCompare 
 000049A2  83 F8 00			cmp	EAX,000000000h
 000049A5  0F 94 C0			setz	AL
 000049A8			$L001649:
 000049A8  88 45 F8			mov	byte ptr [EBP-0008h],AL

				;{1088}:bUnattended= bUnattended || 5 >= 5.99;
 000049AB  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 000049AF  84 C0			test	AL,AL
 000049B1  75 1F			jnz	OFFSET $L001650
 000049B3  B8 00000005			mov	EAX,000000005h
 000049B8  50				push	EAX
 000049B9  BA 8F5C28F6			mov	EDX,08F5C28F6h
 000049BE  B8 4017F5C2			mov	EAX,04017F5C2h 
 000049C3  50				push	EAX
 000049C4  52				push	EDX 
 000049C5  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 000049CA  83 F8 00			cmp	EAX,000000000h
 000049CD  F7 D8			neg	EAX
 000049CF  0F 9D C0			setge	AL
 000049D2			$L001650:
 000049D2  88 45 F8			mov	byte ptr [EBP-0008h],AL

				;{1090}:__HELLO_PART: hello();
 000049D5			__HELLO_PART:

				;{1091}:hello();
 000049D5  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000049D8  E8 FFFFC190			call	 UnitTesting_HelloWorld

				;{1093}:say= "Hello World from H++!!!";
 000049DD  8D 05 00000A78 R		lea	EAX,OFFSET $S001208
 000049E3  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{1095}:hello.SayHello(say);
 000049E6  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000049E9  50				push	EAX
 000049EA  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000049ED  E8 FFFFC12B			call	 UnitTesting_HelloWorld_SayHello

				;{1097}:if(false == bUnattended)
 000049F2  33 C0			xor	EAX,EAX
 000049F4  50				push	EAX
 000049F5  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 000049F9  5A				pop	EDX
 000049FA  38 C2			cmp	DL,AL
 000049FC  0F 94 C0			setz	AL
 000049FF  84 C0			test	AL,AL
 00004A01  74 0C			jz	OFFSET $L001651

				;{1098}:hello.ShowHello(say);
 00004A03  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00004A06  50				push	EAX
 00004A07  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00004A0A  E8 FFFFC13A			call	 UnitTesting_HelloWorld_ShowHello
 00004A0F			$L001651:

				;{1101}:tester1;
 00004A0F  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A12  E8 FFFFE466			call	 UnitTesting_TestIntegers

				;{1103}:tester1.Width= 0x400h * 1024;
 00004A17  B8 00000400			mov	EAX,000000400h
 00004A1C  50				push	EAX
 00004A1D  B8 00000400			mov	EAX,000000400h
 00004A22  59				pop	ECX
 00004A23  33 D2			xor	EDX,EDX
 00004A25  0F AF C1			imul	EAX,ECX
 00004A28  50				push	EAX
 00004A29  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A2C  E8 FFFFE1C8			call	 UnitTesting_TestIntegers_put_Width

				;{1104}:tester1.Height= 0x20h;
 00004A31  B8 00000020			mov	EAX,000000020h
 00004A36  50				push	EAX
 00004A37  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A3A  E8 FFFFE125			call	 UnitTesting_TestIntegers_put_Height

				;{1106}:nWidth= tester1.Width, nHeight= tester1.Height;
 00004A3F  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A42  E8 FFFFE19F			call	 UnitTesting_TestIntegers_get_Width
 00004A47  89 45 BC			mov	dword ptr [EBP-0044h],EAX
 00004A4A  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A4D  E8 FFFFE0FE			call	 UnitTesting_TestIntegers_get_Height
 00004A52  89 45 B8			mov	dword ptr [EBP-0048h],EAX

				;{1109}:nArea= tester1.Width * tester1.Height;
 00004A55  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A58  E8 FFFFE189			call	 UnitTesting_TestIntegers_get_Width
 00004A5D  50				push	EAX
 00004A5E  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A61  E8 FFFFE0EA			call	 UnitTesting_TestIntegers_get_Height
 00004A66  59				pop	ECX
 00004A67  99				cdq	
 00004A68  0F AF C1			imul	EAX,ECX
 00004A6B  99				cdq	
 00004A6C  8D 5D B0			lea	EBX,dword ptr [EBP-0050h]
 00004A6F  89 03			mov	dword ptr [EBX],EAX
 00004A71  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{1111}:Console::WriteLn("nArea = ", nArea);
 00004A74  8D 05 00000FD6 R		lea	EAX,OFFSET $S001214
 00004A7A  6A 00			push	000000000h
 00004A7C  50				push	EAX 
 00004A7D  E8 00000000 E		call	 Console_WriteString
 00004A82  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00004A85  8B 55 B4			mov	EDX,dword ptr [EBP-004Ch] 
 00004A88  52				push	EDX 
 00004A89  50				push	EAX 
 00004A8A  E8 00000000 E		call	 Console_WriteInteger64 
 00004A8F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1113}:with(tester1)
				;{
 00004A94  B8 00000666			mov	EAX,000000666h
 00004A99  50				push	EAX
 00004A9A  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A9D  E8 FFFFE157			call	 UnitTesting_TestIntegers_put_Width
 00004AA2  B8 00000777			mov	EAX,000000777h
 00004AA7  50				push	EAX
 00004AA8  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004AAB  E8 FFFFE0B4			call	 UnitTesting_TestIntegers_put_Height
				;}

				;{1125}:nArea= nWidth * nHeight;
 00004AB0  8B 45 BC			mov	EAX,dword ptr [EBP-0044h]
 00004AB3  50				push	EAX
 00004AB4  8B 45 B8			mov	EAX,dword ptr [EBP-0048h]
 00004AB7  59				pop	ECX
 00004AB8  99				cdq	
 00004AB9  0F AF C1			imul	EAX,ECX
 00004ABC  99				cdq	
 00004ABD  8D 5D B0			lea	EBX,dword ptr [EBP-0050h]
 00004AC0  89 03			mov	dword ptr [EBX],EAX
 00004AC2  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{1127}:Console::WriteLn("nArea = ", nArea);
 00004AC5  8D 05 00000FD6 R		lea	EAX,OFFSET $S001214
 00004ACB  6A 00			push	000000000h
 00004ACD  50				push	EAX 
 00004ACE  E8 00000000 E		call	 Console_WriteString
 00004AD3  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00004AD6  8B 55 B4			mov	EDX,dword ptr [EBP-004Ch] 
 00004AD9  52				push	EDX 
 00004ADA  50				push	EAX 
 00004ADB  E8 00000000 E		call	 Console_WriteInteger64 
 00004AE0  E8 00000000 E		call	 Console_WriteCrLf 

				;{1129}:n= 10;
 00004AE5  B8 0000000A			mov	EAX,00000000Ah
 00004AEA  89 45 AC			mov	dword ptr [EBP-0054h],EAX

				;{1131}:UnitTesting::Integers_Inline::Test();
 00004AED  E8 FFFFC09A			call	 UnitTesting_Integers_Inline_Test

				;{1133}:for(index= 0; index < 50; index++ )
 00004AF2  33 C0			xor	EAX,EAX
 00004AF4  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004AF7  EB 06			jmp	OFFSET $L001653
 00004AF9			$L001654:
 00004AF9  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004AFC  FF 45 A8			inc	dword ptr [EBP-88]
 00004AFF			$L001653:
 00004AFF  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B02  50				push	EAX
 00004B03  B8 00000032			mov	EAX,000000032h
 00004B08  5A				pop	EDX
 00004B09  3B D0			cmp	EDX,EAX
 00004B0B  0F 9C C0			setl	AL
 00004B0E  84 C0			test	AL,AL
 00004B10  74 1E			jz	OFFSET $L001655
				;{

				;{1135}:Console::WriteLn("Current Index :", index);
 00004B12  8D 05 0000089A R		lea	EAX,OFFSET $S001219
 00004B18  6A 00			push	000000000h
 00004B1A  50				push	EAX 
 00004B1B  E8 00000000 E		call	 Console_WriteString
 00004B20  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B23  50				push	EAX 
 00004B24  E8 00000000 E		call	 Console_WriteInteger 
 00004B29  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004B2E  EB C9			jmp	OFFSET $L001654 
 00004B30			$L001655:

				;{1138}:for(; ; )
 00004B30  EB 00			jmp	OFFSET $L001656
 00004B32			$L001657:
 00004B32			$L001656:
				;{

				;{1141}:if(--index == 0)
 00004B32  FF 4D A8			dec	dword ptr [EBP-88]
 00004B35  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004B38  50				push	EAX
 00004B39  33 C0			xor	EAX,EAX
 00004B3B  5A				pop	EDX
 00004B3C  3B D0			cmp	EDX,EAX
 00004B3E  0F 94 C0			setz	AL
 00004B41  84 C0			test	AL,AL
 00004B43  74 02			jz	OFFSET $L001659

				;break;
 00004B45  EB 02			jmp	OFFSET $L001658
 00004B47			$L001659:
				;}
 00004B47  EB E9			jmp	OFFSET $L001657 
 00004B49			$L001658:

				;{1146}:what= !(index == 0);
 00004B49  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B4C  50				push	EAX
 00004B4D  33 C0			xor	EAX,EAX
 00004B4F  5A				pop	EDX
 00004B50  3B D0			cmp	EDX,EAX
 00004B52  0F 94 C0			setz	AL
 00004B55  F7 D8			neg	EAX
 00004B57  F7 D0			not	EAX
 00004B59  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1148}:__CALC_FACTORIAL: nf= tester1.Factorial(n);
 00004B5C			__CALC_FACTORIAL:

				;{1150}:nf= tester1.Factorial(n);
 00004B5C  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004B5F  50				push	EAX
 00004B60  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004B63  E8 FFFFDFA1			call	 UnitTesting_TestIntegers_Factorial
 00004B68  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{1152}:Console::WriteLn("Factorial of ", n, " = ", nf);
 00004B6B  8D 05 000009C4 R		lea	EAX,OFFSET $S001223
 00004B71  6A 00			push	000000000h
 00004B73  50				push	EAX 
 00004B74  E8 00000000 E		call	 Console_WriteString
 00004B79  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004B7C  50				push	EAX 
 00004B7D  E8 00000000 E		call	 Console_WriteInteger 
 00004B82  8D 05 00000129 R		lea	EAX,OFFSET $S001224
 00004B88  6A 00			push	000000000h 
 00004B8A  50				push	EAX 
 00004B8B  E8 00000000 E		call	 Console_WriteString 
 00004B90  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 00004B93  50				push	EAX 
 00004B94  E8 00000000 E		call	 Console_WriteInteger 
 00004B99  E8 00000000 E		call	 Console_WriteCrLf 

				;{1154}:--n;
 00004B9E  FF 4D AC			dec	dword ptr [EBP-84]
 00004BA1  8B 45 AC			mov	EAX,dword ptr [EBP-84]

				;{1155}:if(n == 0)
 00004BA4  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004BA7  50				push	EAX
 00004BA8  33 C0			xor	EAX,EAX
 00004BAA  5A				pop	EDX
 00004BAB  3B D0			cmp	EDX,EAX
 00004BAD  0F 94 C0			setz	AL
 00004BB0  84 C0			test	AL,AL
 00004BB2  74 02			jz	OFFSET $L001661

				;goto
 00004BB4  EB 02			jmp	OFFSET __END_FACTORIAL
 00004BB6			$L001661:

				;goto
 00004BB6  EB A4			jmp	OFFSET __CALC_FACTORIAL

				;{1160}:__END_FACTORIAL: myRef1= 0;
 00004BB8			__END_FACTORIAL:

				;{1163}:myRef1= 0;
 00004BB8  33 C0			xor	EAX,EAX
 00004BBA  89 45 9C			mov	dword ptr [EBP-0064h],EAX

				;{1164}:myVar1= 0;
 00004BBD  33 C0			xor	EAX,EAX
 00004BBF  89 45 98			mov	dword ptr [EBP-0068h],EAX

				;{1168}:tester1.multiple_assignments(myRef1, myVar1);
 00004BC2  8B 45 98			mov	EAX,dword ptr [EBP-0068h]
 00004BC5  50				push	EAX
 00004BC6  8D 45 9C			lea	EAX,dword ptr [EBP-0064h]
 00004BC9  50				push	EAX
 00004BCA  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004BCD  E8 FFFFE1B2			call	 UnitTesting_TestIntegers_multiple_assignments

				;{1170}:Console::WriteLn("The value of myRef1 must be 65536 ==", myRef1);
 00004BD2  8D 05 00000CC8 R		lea	EAX,OFFSET $S001228
 00004BD8  6A 00			push	000000000h
 00004BDA  50				push	EAX 
 00004BDB  E8 00000000 E		call	 Console_WriteString
 00004BE0  8B 45 9C			mov	EAX,dword ptr [EBP-0064h]
 00004BE3  50				push	EAX 
 00004BE4  E8 00000000 E		call	 Console_WriteInteger 
 00004BE9  E8 00000000 E		call	 Console_WriteCrLf 

				;{1171}:Console::WriteLn("The value of myVar1 is not 65536 but zero (0) == ", myVar1);
 00004BEE  8D 05 00000CED R		lea	EAX,OFFSET $S001229
 00004BF4  6A 00			push	000000000h
 00004BF6  50				push	EAX 
 00004BF7  E8 00000000 E		call	 Console_WriteString
 00004BFC  8B 45 98			mov	EAX,dword ptr [EBP-0068h]
 00004BFF  50				push	EAX 
 00004C00  E8 00000000 E		call	 Console_WriteInteger 
 00004C05  E8 00000000 E		call	 Console_WriteCrLf 

				;{1173}:Console::WriteLn("(int)the area is: ", tester1.getArea());
 00004C0A  8D 05 00000494 R		lea	EAX,OFFSET $S001230
 00004C10  6A 00			push	000000000h
 00004C12  50				push	EAX 
 00004C13  E8 00000000 E		call	 Console_WriteString
 00004C18  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C1B  E8 FFFFE0C9			call	 UnitTesting_TestIntegers_getArea
 00004C20  50				push	EAX 
 00004C21  E8 00000000 E		call	 Console_WriteInteger 
 00004C26  E8 00000000 E		call	 Console_WriteCrLf 

				;{1174}:Console::WriteLn("(double)the area is: ", tester1.getArea2());
 00004C2B  8D 05 0000047E R		lea	EAX,OFFSET $S001231
 00004C31  6A 00			push	000000000h
 00004C33  50				push	EAX 
 00004C34  E8 00000000 E		call	 Console_WriteString
 00004C39  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C3C  E8 FFFFE0CC			call	 UnitTesting_TestIntegers_getArea2
 00004C41  50				push	EAX 
 00004C42  52				push	EDX 
 00004C43  E8 00000000 E		call	 Console_WriteDouble 
 00004C48  E8 00000000 E		call	 Console_WriteCrLf 

				;{1176}:result= 0;
 00004C4D  33 C0			xor	EAX,EAX
 00004C4F  89 45 94			mov	dword ptr [EBP-006Ch],EAX

				;{1177}:tester1.add(1024, 3072, result);
 00004C52  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C55  50				push	EAX
 00004C56  B8 00000C00			mov	EAX,000000C00h
 00004C5B  50				push	EAX 
 00004C5C  B8 00000400			mov	EAX,000000400h
 00004C61  50				push	EAX
 00004C62  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C65  E8 FFFFDFA5			call	 UnitTesting_TestIntegers_add

				;{1179}:tester1.subs(1024, 3072, result);
 00004C6A  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C6D  50				push	EAX
 00004C6E  B8 00000C00			mov	EAX,000000C00h
 00004C73  50				push	EAX 
 00004C74  B8 00000400			mov	EAX,000000400h
 00004C79  50				push	EAX
 00004C7A  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C7D  E8 FFFFE1BC			call	 UnitTesting_TestIntegers_subs

				;{1181}:tester1.subs(3072, 1024, result);
 00004C82  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C85  50				push	EAX
 00004C86  B8 00000400			mov	EAX,000000400h
 00004C8B  50				push	EAX 
 00004C8C  B8 00000C00			mov	EAX,000000C00h
 00004C91  50				push	EAX
 00004C92  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C95  E8 FFFFE1A4			call	 UnitTesting_TestIntegers_subs

				;{1183}:tester1.modulus(4096, 6, result);
 00004C9A  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C9D  50				push	EAX
 00004C9E  B8 00000006			mov	EAX,000000006h
 00004CA3  50				push	EAX 
 00004CA4  B8 00001000			mov	EAX,000001000h
 00004CA9  50				push	EAX
 00004CAA  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CAD  E8 FFFFE08F			call	 UnitTesting_TestIntegers_modulus

				;{1185}:tester1.multiply(3, 927, result);
 00004CB2  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CB5  50				push	EAX
 00004CB6  B8 0000039F			mov	EAX,00000039Fh
 00004CBB  50				push	EAX 
 00004CBC  B8 00000003			mov	EAX,000000003h
 00004CC1  50				push	EAX
 00004CC2  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CC5  E8 FFFFE135			call	 UnitTesting_TestIntegers_multiply

				;{1187}:tester1.divide(4096, 6, result);
 00004CCA  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CCD  50				push	EAX
 00004CCE  B8 00000006			mov	EAX,000000006h
 00004CD3  50				push	EAX 
 00004CD4  B8 00001000			mov	EAX,000001000h
 00004CD9  50				push	EAX
 00004CDA  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CDD  E8 FFFFDF6A			call	 UnitTesting_TestIntegers_divide

				;{1189}:tester1.divide2(4096, 6, result);
 00004CE2  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CE5  50				push	EAX
 00004CE6  B8 00000006			mov	EAX,000000006h
 00004CEB  50				push	EAX 
 00004CEC  B8 00001000			mov	EAX,000001000h
 00004CF1  50				push	EAX
 00004CF2  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CF5  E8 FFFFDF93			call	 UnitTesting_TestIntegers_divide2

				;{1193}:UnitTesting::TestIntegers::TestExpressions();
 00004CFA  E8 FFFFE192			call	 UnitTesting_TestIntegers_TestExpressions

				;{1195}:val1= 1, val2= 2;
 00004CFF  B8 00000001			mov	EAX,000000001h
 00004D04  89 45 90			mov	dword ptr [EBP-0070h],EAX
 00004D07  B8 00000002			mov	EAX,000000002h
 00004D0C  89 45 8C			mov	dword ptr [EBP-0074h],EAX

				;{1197}:what= false;
 00004D0F  33 C0			xor	EAX,EAX
 00004D11  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1199}:tester1.Swap(val1, val2);
 00004D14  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004D17  50				push	EAX
 00004D18  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004D1B  50				push	EAX
 00004D1C  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004D1F  E8 FFFFDE57			call	 UnitTesting_TestIntegers_Swap

				;{1201}:what= val1 == 2 && val2 == 1;
 00004D24  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004D27  50				push	EAX
 00004D28  B8 00000002			mov	EAX,000000002h
 00004D2D  5A				pop	EDX
 00004D2E  3B D0			cmp	EDX,EAX
 00004D30  0F 94 C0			setz	AL
 00004D33  84 C0			test	AL,AL
 00004D35  74 0F			jz	OFFSET $L001663
 00004D37  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004D3A  50				push	EAX
 00004D3B  B8 00000001			mov	EAX,000000001h
 00004D40  5A				pop	EDX
 00004D41  3B D0			cmp	EDX,EAX
 00004D43  0F 94 C0			setz	AL
 00004D46			$L001663:
 00004D46  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1203}:Console::WriteLn("what == True ?", what);
 00004D49  8D 05 0000114F R		lea	EAX,OFFSET $S001237
 00004D4F  6A 00			push	000000000h
 00004D51  50				push	EAX 
 00004D52  E8 00000000 E		call	 Console_WriteString
 00004D57  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004D5B  50				push	EAX 
 00004D5C  E8 00000000 E		call	 Console_WriteBoolean 
 00004D61  E8 00000000 E		call	 Console_WriteCrLf 

				;{1205}:tester1.Calc2(val1, val2);
 00004D66  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004D69  50				push	EAX
 00004D6A  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004D6D  50				push	EAX
 00004D6E  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004D71  E8 FFFFDD27			call	 UnitTesting_TestIntegers_Calc2

				;{1208}:what= val1 == 27000 && val2 == 20000;
 00004D76  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004D79  50				push	EAX
 00004D7A  B8 00006978			mov	EAX,000006978h
 00004D7F  5A				pop	EDX
 00004D80  3B D0			cmp	EDX,EAX
 00004D82  0F 94 C0			setz	AL
 00004D85  84 C0			test	AL,AL
 00004D87  74 0F			jz	OFFSET $L001664
 00004D89  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004D8C  50				push	EAX
 00004D8D  B8 00004E20			mov	EAX,000004E20h
 00004D92  5A				pop	EDX
 00004D93  3B D0			cmp	EDX,EAX
 00004D95  0F 94 C0			setz	AL
 00004D98			$L001664:
 00004D98  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1210}:Console::WriteLn("what == True ?", what);
 00004D9B  8D 05 0000114F R		lea	EAX,OFFSET $S001237
 00004DA1  6A 00			push	000000000h
 00004DA3  50				push	EAX 
 00004DA4  E8 00000000 E		call	 Console_WriteString
 00004DA9  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004DAD  50				push	EAX 
 00004DAE  E8 00000000 E		call	 Console_WriteBoolean 
 00004DB3  E8 00000000 E		call	 Console_WriteCrLf 

				;{1212}:tester1.Swap(val1, val2);
 00004DB8  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004DBB  50				push	EAX
 00004DBC  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004DBF  50				push	EAX
 00004DC0  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004DC3  E8 FFFFDDB3			call	 UnitTesting_TestIntegers_Swap

				;{1214}:what= val1 == 20000 && val2 == 27000;
 00004DC8  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004DCB  50				push	EAX
 00004DCC  B8 00004E20			mov	EAX,000004E20h
 00004DD1  5A				pop	EDX
 00004DD2  3B D0			cmp	EDX,EAX
 00004DD4  0F 94 C0			setz	AL
 00004DD7  84 C0			test	AL,AL
 00004DD9  74 0F			jz	OFFSET $L001665
 00004DDB  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004DDE  50				push	EAX
 00004DDF  B8 00006978			mov	EAX,000006978h
 00004DE4  5A				pop	EDX
 00004DE5  3B D0			cmp	EDX,EAX
 00004DE7  0F 94 C0			setz	AL
 00004DEA			$L001665:
 00004DEA  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1216}:Console::WriteLn("what == True ?", what);
 00004DED  8D 05 0000114F R		lea	EAX,OFFSET $S001237
 00004DF3  6A 00			push	000000000h
 00004DF5  50				push	EAX 
 00004DF6  E8 00000000 E		call	 Console_WriteString
 00004DFB  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004DFF  50				push	EAX 
 00004E00  E8 00000000 E		call	 Console_WriteBoolean 
 00004E05  E8 00000000 E		call	 Console_WriteCrLf 

				;{1218}:tester1.SwapDebug(val1, val2);
 00004E0A  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004E0D  50				push	EAX
 00004E0E  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004E11  50				push	EAX
 00004E12  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004E15  E8 FFFFDDA4			call	 UnitTesting_TestIntegers_SwapDebug

				;{1220}:what= val1 == 27000 && val2 == 20000;
 00004E1A  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E1D  50				push	EAX
 00004E1E  B8 00006978			mov	EAX,000006978h
 00004E23  5A				pop	EDX
 00004E24  3B D0			cmp	EDX,EAX
 00004E26  0F 94 C0			setz	AL
 00004E29  84 C0			test	AL,AL
 00004E2B  74 0F			jz	OFFSET $L001666
 00004E2D  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004E30  50				push	EAX
 00004E31  B8 00004E20			mov	EAX,000004E20h
 00004E36  5A				pop	EDX
 00004E37  3B D0			cmp	EDX,EAX
 00004E39  0F 94 C0			setz	AL
 00004E3C			$L001666:
 00004E3C  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1222}:Console::WriteLn("what == True ?", what);
 00004E3F  8D 05 0000114F R		lea	EAX,OFFSET $S001237
 00004E45  6A 00			push	000000000h
 00004E47  50				push	EAX 
 00004E48  E8 00000000 E		call	 Console_WriteString
 00004E4D  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004E51  50				push	EAX 
 00004E52  E8 00000000 E		call	 Console_WriteBoolean 
 00004E57  E8 00000000 E		call	 Console_WriteCrLf 

				;{1224}:tester1.Calc1(val1, val2);
 00004E5C  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004E5F  50				push	EAX
 00004E60  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E63  50				push	EAX
 00004E64  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004E67  E8 FFFFDB8F			call	 UnitTesting_TestIntegers_Calc1

				;{1226}:what= val2 != 27000;
 00004E6C  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004E6F  50				push	EAX
 00004E70  B8 00006978			mov	EAX,000006978h
 00004E75  5A				pop	EDX
 00004E76  3B D0			cmp	EDX,EAX
 00004E78  0F 95 C0			setnz	AL
 00004E7B  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1228}:val1= val1 << 24;
 00004E7E  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E81  C1 E0 18			shl	EAX,000000018h
 00004E84  89 45 90			mov	dword ptr [EBP-0070h],EAX

				;{1230}:what= val1 == 0x78000000;
 00004E87  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E8A  50				push	EAX
 00004E8B  B8 78000000			mov	EAX,078000000h
 00004E90  5A				pop	EDX
 00004E91  3B D0			cmp	EDX,EAX
 00004E93  0F 94 C0			setz	AL
 00004E96  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1232}:Console::WriteLn("(what = val1 == 0x78000000) = ", what);
 00004E99  8D 05 00000589 R		lea	EAX,OFFSET $S001241
 00004E9F  6A 00			push	000000000h
 00004EA1  50				push	EAX 
 00004EA2  E8 00000000 E		call	 Console_WriteString
 00004EA7  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004EAB  50				push	EAX 
 00004EAC  E8 00000000 E		call	 Console_WriteBoolean 
 00004EB1  E8 00000000 E		call	 Console_WriteCrLf 

				;{1234}:if(false == bUnattended)
 00004EB6  33 C0			xor	EAX,EAX
 00004EB8  50				push	EAX
 00004EB9  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 00004EBD  5A				pop	EDX
 00004EBE  38 C2			cmp	DL,AL
 00004EC0  0F 94 C0			setz	AL
 00004EC3  84 C0			test	AL,AL
 00004EC5  74 0F			jz	OFFSET $L001667

				;{1235}:hello.ShowHello("H++ Unit Testing : Second Phase");
 00004EC7  8D 05 00000A0F R		lea	EAX,OFFSET $S001242
 00004ECD  50				push	EAX
 00004ECE  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00004ED1  E8 FFFFBC73			call	 UnitTesting_HelloWorld_ShowHello
 00004ED6			$L001667:

				;{1237}:fpTester();
 00004ED6  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00004ED9  E8 FFFFDAD5			call	 UnitTesting_TestFloatingPoint

				;{1239}:for(index= 0; index <= 32; index++ )
 00004EDE  33 C0			xor	EAX,EAX
 00004EE0  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004EE3  EB 06			jmp	OFFSET $L001669
 00004EE5			$L001670:
 00004EE5  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004EE8  FF 45 A8			inc	dword ptr [EBP-88]
 00004EEB			$L001669:
 00004EEB  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004EEE  50				push	EAX
 00004EEF  B8 00000020			mov	EAX,000000020h
 00004EF4  5A				pop	EDX
 00004EF5  3B D0			cmp	EDX,EAX
 00004EF7  0F 9E C0			setle	AL
 00004EFA  84 C0			test	AL,AL
 00004EFC  74 5A			jz	OFFSET $L001671
				;{

				;{1241}:_pow= fpTester.Power(2.0, index);
 00004EFE  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004F01  50				push	EAX 
 00004F02  33 D2			xor	EDX,EDX
 00004F04  B8 40000000			mov	EAX,040000000h
 00004F09  50				push	EAX
 00004F0A  52				push	EDX 
 00004F0B  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00004F0E  E8 FFFFD9C7			call	 UnitTesting_TestFloatingPoint_Power
 00004F13  50				push	EAX
 00004F14  52				push	EDX 
 00004F15  DD C0			ffree	st
 00004F17  DD 04 24			fld	qword ptr [ESP]
 00004F1A  DD 5D 80			fstp	qword ptr [EBP-0080h]

				;{1243}:Console::WriteLn("pow(2, ", index, ") = ", _pow);
 00004F1D  5A				pop	EDX
 00004F1E  58				pop	EAX 
 00004F1F  8D 05 00001042 R		lea	EAX,OFFSET $S001246
 00004F25  6A 00			push	000000000h
 00004F27  50				push	EAX 
 00004F28  E8 00000000 E		call	 Console_WriteString
 00004F2D  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004F30  50				push	EAX 
 00004F31  E8 00000000 E		call	 Console_WriteInteger 
 00004F36  8D 05 00000659 R		lea	EAX,OFFSET $S001247
 00004F3C  6A 00			push	000000000h 
 00004F3E  50				push	EAX 
 00004F3F  E8 00000000 E		call	 Console_WriteString 
 00004F44  8B 55 80			mov	EDX,dword ptr [EBP-0080h]
 00004F47  8B 45 84			mov	EAX,dword ptr [EBP-007Ch] 
 00004F4A  50				push	EAX 
 00004F4B  52				push	EDX 
 00004F4C  E8 00000000 E		call	 Console_WriteDouble 
 00004F51  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004F56  EB 8D			jmp	OFFSET $L001670 
 00004F58			$L001671:

				;{1246}:array1;
 00004F58  8D 85 FFFFFF30		lea	EAX,dword ptr [EBP-00D0h]

				;{1249}:for(index= 0; index < sizeof (array1) / sizeof (int); )
 00004F5E  33 C0			xor	EAX,EAX
 00004F60  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004F63  EB 00			jmp	OFFSET $L001672
 00004F65			$L001673:
 00004F65			$L001672:
 00004F65  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004F68  50				push	EAX
 00004F69  B8 00000050			mov	EAX,000000050h
 00004F6E  50				push	EAX
 00004F6F  B8 00000004			mov	EAX,000000004h
 00004F74  9B DB E2			fclex
 00004F77  50				push	EAX
 00004F78  E8 00000000 E		call	 FloatingPoint_FromInt
 00004F7D  50				push	EAX
 00004F7E  52				push	EDX 
 00004F7F  DD 04 24			fld	qword ptr [ESP]
 00004F82  59				pop	ECX
 00004F83  59				pop	ECX 
 00004F84  E8 00000000 E		call	 FloatingPoint_FromInt
 00004F89  50				push	EAX
 00004F8A  52				push	EDX 
 00004F8B  DC 3C 24			fdivr	qword ptr [ESP]
 00004F8E  DD 1C 24			fstp	qword ptr [ESP]
 00004F91  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 00004F96  83 F8 00			cmp	EAX,000000000h
 00004F99  F7 D8			neg	EAX
 00004F9B  0F 9C C0			setl	AL
 00004F9E  84 C0			test	AL,AL
 00004FA0  0F 84 0000008C		jz	OFFSET $L001674
				;{

				;{1251}:array1[index]= FloatingPoint::ToInt((index + 1) * 9.45);
 00004FA6  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FA9  6B C0 04			imul	EAX,EAX,000000004h
 00004FAC  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00D0h]
	   FFFFFF30
 00004FB3  50				push	EAX
 00004FB4  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FB7  50				push	EAX
 00004FB8  B8 00000001			mov	EAX,000000001h
 00004FBD  5A				pop	EDX
 00004FBE  03 C2			add	EAX,EDX
 00004FC0  50				push	EAX
 00004FC1  BA 66666667			mov	EDX,066666667h
 00004FC6  B8 4022E666			mov	EAX,04022E666h 
 00004FCB  9B DB E2			fclex
 00004FCE  50				push	EAX
 00004FCF  52				push	EDX 
 00004FD0  DD 04 24			fld	qword ptr [ESP]
 00004FD3  59				pop	ECX
 00004FD4  59				pop	ECX 
 00004FD5  E8 00000000 E		call	 FloatingPoint_FromInt
 00004FDA  50				push	EAX
 00004FDB  52				push	EDX 
 00004FDC  DC 0C 24			fmul	qword ptr [ESP]
 00004FDF  DD 1C 24			fstp	qword ptr [ESP]
 00004FE2  E8 00000000 E		call	 FloatingPoint_ToInt
 00004FE7  5B				pop	EBX
 00004FE8  89 03			mov	dword ptr [EBX],EAX

				;{1252}:Console::WriteLn("Result for array1[", index, "] = ", array1[index]);
 00004FEA  8D 05 00000BCF R		lea	EAX,OFFSET $S001250
 00004FF0  6A 00			push	000000000h
 00004FF2  50				push	EAX 
 00004FF3  E8 00000000 E		call	 Console_WriteString
 00004FF8  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FFB  50				push	EAX 
 00004FFC  E8 00000000 E		call	 Console_WriteInteger 
 00005001  8D 05 00000DC1 R		lea	EAX,OFFSET $S001165
 00005007  6A 00			push	000000000h 
 00005009  50				push	EAX 
 0000500A  E8 00000000 E		call	 Console_WriteString 
 0000500F  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00005012  6B C0 04			imul	EAX,EAX,000000004h
 00005015  8B 84 28			mov	EAX,dword ptr [EBP+EAX-00D0h]
	   FFFFFF30
 0000501C  50				push	EAX 
 0000501D  E8 00000000 E		call	 Console_WriteInteger 
 00005022  E8 00000000 E		call	 Console_WriteCrLf 

				;{1253}:index++ ;
 00005027  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 0000502A  FF 45 A8			inc	dword ptr [EBP-88]
				;}
 0000502D  E9 FFFFFF33			jmp	OFFSET $L001673 
 00005032			$L001674:

				;{1256}:UnitTesting::TestArrays::DoTest();
 00005032  E8 FFFFCCB1			call	 UnitTesting_TestArrays_DoTest

				;{1260}:rnd(Math::Round(0x400 * Math::log_10_base2() + 1.0));
 00005037  B8 00000400			mov	EAX,000000400h
 0000503C  50				push	EAX
 0000503D  E8 00000000 E		call	 Math_log_10_base2
 00005042  9B DB E2			fclex
 00005045  50				push	EAX
 00005046  52				push	EDX 
 00005047  DD 04 24			fld	qword ptr [ESP]
 0000504A  59				pop	ECX
 0000504B  59				pop	ECX 
 0000504C  E8 00000000 E		call	 FloatingPoint_FromInt
 00005051  50				push	EAX
 00005052  52				push	EDX 
 00005053  DC 0C 24			fmul	qword ptr [ESP]
 00005056  DD 1C 24			fstp	qword ptr [ESP]
 00005059  D9 E8			fld1
 0000505B  DC 04 24			fadd	qword ptr [ESP]
 0000505E  DD 1C 24			fstp	qword ptr [ESP]
 00005061  E8 00000000 E		call	 Math_Round
 00005066  50				push	EAX
 00005067  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000506D  E8 FFFFBFAB			call	 UnitTesting_Rnd

				;{1264}:Console::WriteLn("Pseudo-Random Integer values:");
 00005072  8D 05 00000B9A R		lea	EAX,OFFSET $S001252
 00005078  6A 00			push	000000000h
 0000507A  50				push	EAX 
 0000507B  E8 00000000 E		call	 Console_WriteString
 00005080  E8 00000000 E		call	 Console_WriteCrLf 

				;{1265}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextInt());
 00005085  8D 05 000001BE R		lea	EAX,OFFSET $S001253
 0000508B  6A 00			push	000000000h
 0000508D  50				push	EAX 
 0000508E  E8 00000000 E		call	 Console_WriteString
 00005093  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005099  E8 FFFFBF6C			call	 UnitTesting_Rnd_NextInt
 0000509E  50				push	EAX 
 0000509F  52				push	EDX 
 000050A0  E8 00000000 E		call	 Console_WriteDouble 
 000050A5  E8 00000000 E		call	 Console_WriteCrLf 

				;{1266}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextInt());
 000050AA  8D 05 0000024E R		lea	EAX,OFFSET $S001254
 000050B0  6A 00			push	000000000h
 000050B2  50				push	EAX 
 000050B3  E8 00000000 E		call	 Console_WriteString
 000050B8  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000050BE  E8 FFFFBF47			call	 UnitTesting_Rnd_NextInt
 000050C3  50				push	EAX 
 000050C4  52				push	EDX 
 000050C5  E8 00000000 E		call	 Console_WriteDouble 
 000050CA  E8 00000000 E		call	 Console_WriteCrLf 

				;{1267}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextInt());
 000050CF  8D 05 000002DE R		lea	EAX,OFFSET $S001255
 000050D5  6A 00			push	000000000h
 000050D7  50				push	EAX 
 000050D8  E8 00000000 E		call	 Console_WriteString
 000050DD  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000050E3  E8 FFFFBF22			call	 UnitTesting_Rnd_NextInt
 000050E8  50				push	EAX 
 000050E9  52				push	EDX 
 000050EA  E8 00000000 E		call	 Console_WriteDouble 
 000050EF  E8 00000000 E		call	 Console_WriteCrLf 

				;{1268}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextInt());
 000050F4  8D 05 0000036A R		lea	EAX,OFFSET $S001256
 000050FA  6A 00			push	000000000h
 000050FC  50				push	EAX 
 000050FD  E8 00000000 E		call	 Console_WriteString
 00005102  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005108  E8 FFFFBEFD			call	 UnitTesting_Rnd_NextInt
 0000510D  50				push	EAX 
 0000510E  52				push	EDX 
 0000510F  E8 00000000 E		call	 Console_WriteDouble 
 00005114  E8 00000000 E		call	 Console_WriteCrLf 

				;{1269}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextInt());
 00005119  8D 05 000003F6 R		lea	EAX,OFFSET $S001257
 0000511F  6A 00			push	000000000h
 00005121  50				push	EAX 
 00005122  E8 00000000 E		call	 Console_WriteString
 00005127  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000512D  E8 FFFFBED8			call	 UnitTesting_Rnd_NextInt
 00005132  50				push	EAX 
 00005133  52				push	EDX 
 00005134  E8 00000000 E		call	 Console_WriteDouble 
 00005139  E8 00000000 E		call	 Console_WriteCrLf 

				;{1270}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextInt());
 0000513E  8D 05 00000411 R		lea	EAX,OFFSET $S001258
 00005144  6A 00			push	000000000h
 00005146  50				push	EAX 
 00005147  E8 00000000 E		call	 Console_WriteString
 0000514C  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005152  E8 FFFFBEB3			call	 UnitTesting_Rnd_NextInt
 00005157  50				push	EAX 
 00005158  52				push	EDX 
 00005159  E8 00000000 E		call	 Console_WriteDouble 
 0000515E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1272}:_BlockRndDoubles: Console::WriteLn("Pseudo-Random Double values:");
 00005163			_BlockRndDoubles:

				;{1274}:Console::WriteLn("Pseudo-Random Double values:");
 00005163  8D 05 00000B7D R		lea	EAX,OFFSET $S001260
 00005169  6A 00			push	000000000h
 0000516B  50				push	EAX 
 0000516C  E8 00000000 E		call	 Console_WriteString
 00005171  E8 00000000 E		call	 Console_WriteCrLf 

				;{1275}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextDbl());
 00005176  8D 05 000001BE R		lea	EAX,OFFSET $S001253
 0000517C  6A 00			push	000000000h
 0000517E  50				push	EAX 
 0000517F  E8 00000000 E		call	 Console_WriteString
 00005184  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000518A  E8 FFFFBE68			call	 UnitTesting_Rnd_NextDbl
 0000518F  50				push	EAX 
 00005190  52				push	EDX 
 00005191  E8 00000000 E		call	 Console_WriteDouble 
 00005196  E8 00000000 E		call	 Console_WriteCrLf 

				;{1276}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextDbl());
 0000519B  8D 05 0000024E R		lea	EAX,OFFSET $S001254
 000051A1  6A 00			push	000000000h
 000051A3  50				push	EAX 
 000051A4  E8 00000000 E		call	 Console_WriteString
 000051A9  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051AF  E8 FFFFBE43			call	 UnitTesting_Rnd_NextDbl
 000051B4  50				push	EAX 
 000051B5  52				push	EDX 
 000051B6  E8 00000000 E		call	 Console_WriteDouble 
 000051BB  E8 00000000 E		call	 Console_WriteCrLf 

				;{1277}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextDbl());
 000051C0  8D 05 000002DE R		lea	EAX,OFFSET $S001255
 000051C6  6A 00			push	000000000h
 000051C8  50				push	EAX 
 000051C9  E8 00000000 E		call	 Console_WriteString
 000051CE  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051D4  E8 FFFFBE1E			call	 UnitTesting_Rnd_NextDbl
 000051D9  50				push	EAX 
 000051DA  52				push	EDX 
 000051DB  E8 00000000 E		call	 Console_WriteDouble 
 000051E0  E8 00000000 E		call	 Console_WriteCrLf 

				;{1278}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextDbl());
 000051E5  8D 05 0000036A R		lea	EAX,OFFSET $S001256
 000051EB  6A 00			push	000000000h
 000051ED  50				push	EAX 
 000051EE  E8 00000000 E		call	 Console_WriteString
 000051F3  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051F9  E8 FFFFBDF9			call	 UnitTesting_Rnd_NextDbl
 000051FE  50				push	EAX 
 000051FF  52				push	EDX 
 00005200  E8 00000000 E		call	 Console_WriteDouble 
 00005205  E8 00000000 E		call	 Console_WriteCrLf 

				;{1279}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextDbl());
 0000520A  8D 05 000003F6 R		lea	EAX,OFFSET $S001257
 00005210  6A 00			push	000000000h
 00005212  50				push	EAX 
 00005213  E8 00000000 E		call	 Console_WriteString
 00005218  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000521E  E8 FFFFBDD4			call	 UnitTesting_Rnd_NextDbl
 00005223  50				push	EAX 
 00005224  52				push	EDX 
 00005225  E8 00000000 E		call	 Console_WriteDouble 
 0000522A  E8 00000000 E		call	 Console_WriteCrLf 

				;{1280}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextDbl());
 0000522F  8D 05 00000411 R		lea	EAX,OFFSET $S001258
 00005235  6A 00			push	000000000h
 00005237  50				push	EAX 
 00005238  E8 00000000 E		call	 Console_WriteString
 0000523D  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005243  E8 FFFFBDAF			call	 UnitTesting_Rnd_NextDbl
 00005248  50				push	EAX 
 00005249  52				push	EDX 
 0000524A  E8 00000000 E		call	 Console_WriteDouble 
 0000524F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1285}:res= 0.0;
 00005254  D9 EE			fldz
 00005256  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1287}:srv;
 0000525C  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 00005262  E8 FFFFF00E			call	 UnitTesting_TestVirtuals_SimpleRV

				;{1289}:res= srv.Sample();
 00005267  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 0000526D  8B 11			mov	EDX,dword ptr [ECX]
 0000526F  FF 12			call	dword ptr [EDX]
 00005271  50				push	EAX
 00005272  52				push	EDX 
 00005273  DD C0			ffree	st
 00005275  DD 04 24			fld	qword ptr [ESP]
 00005278  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1290}:Console::WriteLn("(1)A simple random variable has : ", res, " as its value.");
 0000527E  5A				pop	EDX
 0000527F  58				pop	EAX 
 00005280  8D 05 000001D9 R		lea	EAX,OFFSET $S001263
 00005286  6A 00			push	000000000h
 00005288  50				push	EAX 
 00005289  E8 00000000 E		call	 Console_WriteString
 0000528E  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005294  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 0000529A  50				push	EAX 
 0000529B  52				push	EDX 
 0000529C  E8 00000000 E		call	 Console_WriteDouble 
 000052A1  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 000052A7  6A 00			push	000000000h 
 000052A9  50				push	EAX 
 000052AA  E8 00000000 E		call	 Console_WriteString 
 000052AF  E8 00000000 E		call	 Console_WriteCrLf 

				;{1291}:res= srv.Sample();
 000052B4  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 000052BA  8B 11			mov	EDX,dword ptr [ECX]
 000052BC  FF 12			call	dword ptr [EDX]
 000052BE  50				push	EAX
 000052BF  52				push	EDX 
 000052C0  DD C0			ffree	st
 000052C2  DD 04 24			fld	qword ptr [ESP]
 000052C5  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1292}:Console::WriteLn("(2)A simple random variable has : ", res, " as its value.");
 000052CB  5A				pop	EDX
 000052CC  58				pop	EAX 
 000052CD  8D 05 00000269 R		lea	EAX,OFFSET $S001265
 000052D3  6A 00			push	000000000h
 000052D5  50				push	EAX 
 000052D6  E8 00000000 E		call	 Console_WriteString
 000052DB  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000052E1  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000052E7  50				push	EAX 
 000052E8  52				push	EDX 
 000052E9  E8 00000000 E		call	 Console_WriteDouble 
 000052EE  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 000052F4  6A 00			push	000000000h 
 000052F6  50				push	EAX 
 000052F7  E8 00000000 E		call	 Console_WriteString 
 000052FC  E8 00000000 E		call	 Console_WriteCrLf 

				;{1293}:res= srv.Sample();
 00005301  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 00005307  8B 11			mov	EDX,dword ptr [ECX]
 00005309  FF 12			call	dword ptr [EDX]
 0000530B  50				push	EAX
 0000530C  52				push	EDX 
 0000530D  DD C0			ffree	st
 0000530F  DD 04 24			fld	qword ptr [ESP]
 00005312  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1294}:Console::WriteLn("(3)A simple random variable has : ", res, " as its value.");
 00005318  5A				pop	EDX
 00005319  58				pop	EAX 
 0000531A  8D 05 000002F9 R		lea	EAX,OFFSET $S001266
 00005320  6A 00			push	000000000h
 00005322  50				push	EAX 
 00005323  E8 00000000 E		call	 Console_WriteString
 00005328  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000532E  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005334  50				push	EAX 
 00005335  52				push	EDX 
 00005336  E8 00000000 E		call	 Console_WriteDouble 
 0000533B  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 00005341  6A 00			push	000000000h 
 00005343  50				push	EAX 
 00005344  E8 00000000 E		call	 Console_WriteString 
 00005349  E8 00000000 E		call	 Console_WriteCrLf 

				;{1295}:res= srv.Sample();
 0000534E  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 00005354  8B 11			mov	EDX,dword ptr [ECX]
 00005356  FF 12			call	dword ptr [EDX]
 00005358  50				push	EAX
 00005359  52				push	EDX 
 0000535A  DD C0			ffree	st
 0000535C  DD 04 24			fld	qword ptr [ESP]
 0000535F  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1296}:Console::WriteLn("(4)A simple random variable has : ", res, " as its value.");
 00005365  5A				pop	EDX
 00005366  58				pop	EAX 
 00005367  8D 05 00000385 R		lea	EAX,OFFSET $S001267
 0000536D  6A 00			push	000000000h
 0000536F  50				push	EAX 
 00005370  E8 00000000 E		call	 Console_WriteString
 00005375  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000537B  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005381  50				push	EAX 
 00005382  52				push	EDX 
 00005383  E8 00000000 E		call	 Console_WriteDouble 
 00005388  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 0000538E  6A 00			push	000000000h 
 00005390  50				push	EAX 
 00005391  E8 00000000 E		call	 Console_WriteString 
 00005396  E8 00000000 E		call	 Console_WriteCrLf 

				;{1297}:Console::WriteLn("my name is", srv.Name());
 0000539B  8D 05 00000FCB R		lea	EAX,OFFSET $S001268
 000053A1  6A 00			push	000000000h
 000053A3  50				push	EAX 
 000053A4  E8 00000000 E		call	 Console_WriteString
 000053A9  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 000053AF  8B 11			mov	EDX,dword ptr [ECX]
 000053B1  FF 52 04			call	dword ptr [EDX+0004h]
 000053B4  6A 00			push	000000000h 
 000053B6  50				push	EAX 
 000053B7  E8 00000000 E		call	 Console_WriteString 
 000053BC  E8 00000000 E		call	 Console_WriteCrLf 

				;{1299}:res= 1.0;
 000053C1  D9 E8			fld1
 000053C3  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1301}:urv(Math::log_e_base2(), Math::log_2_base_e());
 000053C9  E8 00000000 E		call	 Math_log_2_base_e
 000053CE  50				push	EAX 
 000053CF  52				push	EDX 
 000053D0  E8 00000000 E		call	 Math_log_e_base2
 000053D5  50				push	EAX
 000053D6  52				push	EDX 
 000053D7  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000053DD  E8 FFFFEF5C			call	 UnitTesting_TestVirtuals_UniformRV

				;{1303}:res= urv.Sample();
 000053E2  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000053E8  8B 11			mov	EDX,dword ptr [ECX]
 000053EA  FF 12			call	dword ptr [EDX]
 000053EC  50				push	EAX
 000053ED  52				push	EDX 
 000053EE  DD C0			ffree	st
 000053F0  DD 04 24			fld	qword ptr [ESP]
 000053F3  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1304}:Console::WriteLn("(1)An uniform random variable has : ", res, " as its value.");
 000053F9  5A				pop	EDX
 000053FA  58				pop	EAX 
 000053FB  8D 05 00000225 R		lea	EAX,OFFSET $S001270
 00005401  6A 00			push	000000000h
 00005403  50				push	EAX 
 00005404  E8 00000000 E		call	 Console_WriteString
 00005409  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000540F  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005415  50				push	EAX 
 00005416  52				push	EDX 
 00005417  E8 00000000 E		call	 Console_WriteDouble 
 0000541C  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 00005422  6A 00			push	000000000h 
 00005424  50				push	EAX 
 00005425  E8 00000000 E		call	 Console_WriteString 
 0000542A  E8 00000000 E		call	 Console_WriteCrLf 

				;{1305}:res= urv.Sample();
 0000542F  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 00005435  8B 11			mov	EDX,dword ptr [ECX]
 00005437  FF 12			call	dword ptr [EDX]
 00005439  50				push	EAX
 0000543A  52				push	EDX 
 0000543B  DD C0			ffree	st
 0000543D  DD 04 24			fld	qword ptr [ESP]
 00005440  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1306}:Console::WriteLn("(2)An uniform random variable has : ", res, " as its value.");
 00005446  5A				pop	EDX
 00005447  58				pop	EAX 
 00005448  8D 05 000002B5 R		lea	EAX,OFFSET $S001271
 0000544E  6A 00			push	000000000h
 00005450  50				push	EAX 
 00005451  E8 00000000 E		call	 Console_WriteString
 00005456  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000545C  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005462  50				push	EAX 
 00005463  52				push	EDX 
 00005464  E8 00000000 E		call	 Console_WriteDouble 
 00005469  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 0000546F  6A 00			push	000000000h 
 00005471  50				push	EAX 
 00005472  E8 00000000 E		call	 Console_WriteString 
 00005477  E8 00000000 E		call	 Console_WriteCrLf 

				;{1307}:res= urv.Sample();
 0000547C  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 00005482  8B 11			mov	EDX,dword ptr [ECX]
 00005484  FF 12			call	dword ptr [EDX]
 00005486  50				push	EAX
 00005487  52				push	EDX 
 00005488  DD C0			ffree	st
 0000548A  DD 04 24			fld	qword ptr [ESP]
 0000548D  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1308}:Console::WriteLn("(3)An uniform random variable has : ", res, " as its value.");
 00005493  5A				pop	EDX
 00005494  58				pop	EAX 
 00005495  8D 05 00000345 R		lea	EAX,OFFSET $S001272
 0000549B  6A 00			push	000000000h
 0000549D  50				push	EAX 
 0000549E  E8 00000000 E		call	 Console_WriteString
 000054A3  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000054A9  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000054AF  50				push	EAX 
 000054B0  52				push	EDX 
 000054B1  E8 00000000 E		call	 Console_WriteDouble 
 000054B6  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 000054BC  6A 00			push	000000000h 
 000054BE  50				push	EAX 
 000054BF  E8 00000000 E		call	 Console_WriteString 
 000054C4  E8 00000000 E		call	 Console_WriteCrLf 

				;{1309}:res= urv.Sample();
 000054C9  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000054CF  8B 11			mov	EDX,dword ptr [ECX]
 000054D1  FF 12			call	dword ptr [EDX]
 000054D3  50				push	EAX
 000054D4  52				push	EDX 
 000054D5  DD C0			ffree	st
 000054D7  DD 04 24			fld	qword ptr [ESP]
 000054DA  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1310}:Console::WriteLn("(4)An uniform random variable has : ", res, " as its value.");
 000054E0  5A				pop	EDX
 000054E1  58				pop	EAX 
 000054E2  8D 05 000003D1 R		lea	EAX,OFFSET $S001273
 000054E8  6A 00			push	000000000h
 000054EA  50				push	EAX 
 000054EB  E8 00000000 E		call	 Console_WriteString
 000054F0  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000054F6  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000054FC  50				push	EAX 
 000054FD  52				push	EDX 
 000054FE  E8 00000000 E		call	 Console_WriteDouble 
 00005503  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 00005509  6A 00			push	000000000h 
 0000550B  50				push	EAX 
 0000550C  E8 00000000 E		call	 Console_WriteString 
 00005511  E8 00000000 E		call	 Console_WriteCrLf 

				;{1311}:Console::WriteLn("my name is", urv.Name());
 00005516  8D 05 00000FCB R		lea	EAX,OFFSET $S001268
 0000551C  6A 00			push	000000000h
 0000551E  50				push	EAX 
 0000551F  E8 00000000 E		call	 Console_WriteString
 00005524  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 0000552A  8B 11			mov	EDX,dword ptr [ECX]
 0000552C  FF 52 04			call	dword ptr [EDX+0004h]
 0000552F  6A 00			push	000000000h 
 00005531  50				push	EAX 
 00005532  E8 00000000 E		call	 Console_WriteString 
 00005537  E8 00000000 E		call	 Console_WriteCrLf 

				;{1313}:res= 0.0;
 0000553C  D9 EE			fldz
 0000553E  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1315}:erv(Math::pi());
 00005544  E8 00000000 E		call	 Math_pi
 00005549  50				push	EAX
 0000554A  52				push	EDX 
 0000554B  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005551  E8 FFFFEC9B			call	 UnitTesting_TestVirtuals_ExponentialRV

				;{1317}:res= erv.Sample();
 00005556  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 0000555C  8B 11			mov	EDX,dword ptr [ECX]
 0000555E  FF 12			call	dword ptr [EDX]
 00005560  50				push	EAX
 00005561  52				push	EDX 
 00005562  DD C0			ffree	st
 00005564  DD 04 24			fld	qword ptr [ESP]
 00005567  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1318}:Console::WriteLn("(1)An exponential random variable has : ", res, " as its value.");
 0000556D  5A				pop	EDX
 0000556E  58				pop	EAX 
 0000556F  8D 05 000001FC R		lea	EAX,OFFSET $S001275
 00005575  6A 00			push	000000000h
 00005577  50				push	EAX 
 00005578  E8 00000000 E		call	 Console_WriteString
 0000557D  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005583  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005589  50				push	EAX 
 0000558A  52				push	EDX 
 0000558B  E8 00000000 E		call	 Console_WriteDouble 
 00005590  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 00005596  6A 00			push	000000000h 
 00005598  50				push	EAX 
 00005599  E8 00000000 E		call	 Console_WriteString 
 0000559E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1319}:res= erv.Sample();
 000055A3  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 000055A9  8B 11			mov	EDX,dword ptr [ECX]
 000055AB  FF 12			call	dword ptr [EDX]
 000055AD  50				push	EAX
 000055AE  52				push	EDX 
 000055AF  DD C0			ffree	st
 000055B1  DD 04 24			fld	qword ptr [ESP]
 000055B4  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1320}:Console::WriteLn("(2)An exponential random variable has : ", res, " as its value.");
 000055BA  5A				pop	EDX
 000055BB  58				pop	EAX 
 000055BC  8D 05 0000028C R		lea	EAX,OFFSET $S001276
 000055C2  6A 00			push	000000000h
 000055C4  50				push	EAX 
 000055C5  E8 00000000 E		call	 Console_WriteString
 000055CA  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000055D0  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000055D6  50				push	EAX 
 000055D7  52				push	EDX 
 000055D8  E8 00000000 E		call	 Console_WriteDouble 
 000055DD  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 000055E3  6A 00			push	000000000h 
 000055E5  50				push	EAX 
 000055E6  E8 00000000 E		call	 Console_WriteString 
 000055EB  E8 00000000 E		call	 Console_WriteCrLf 

				;{1321}:res= erv.Sample();
 000055F0  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 000055F6  8B 11			mov	EDX,dword ptr [ECX]
 000055F8  FF 12			call	dword ptr [EDX]
 000055FA  50				push	EAX
 000055FB  52				push	EDX 
 000055FC  DD C0			ffree	st
 000055FE  DD 04 24			fld	qword ptr [ESP]
 00005601  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1322}:Console::WriteLn("(3)An exponential random variable has : ", res, " as its value.");
 00005607  5A				pop	EDX
 00005608  58				pop	EAX 
 00005609  8D 05 0000031C R		lea	EAX,OFFSET $S001277
 0000560F  6A 00			push	000000000h
 00005611  50				push	EAX 
 00005612  E8 00000000 E		call	 Console_WriteString
 00005617  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000561D  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005623  50				push	EAX 
 00005624  52				push	EDX 
 00005625  E8 00000000 E		call	 Console_WriteDouble 
 0000562A  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 00005630  6A 00			push	000000000h 
 00005632  50				push	EAX 
 00005633  E8 00000000 E		call	 Console_WriteString 
 00005638  E8 00000000 E		call	 Console_WriteCrLf 

				;{1323}:res= erv.Sample();
 0000563D  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005643  8B 11			mov	EDX,dword ptr [ECX]
 00005645  FF 12			call	dword ptr [EDX]
 00005647  50				push	EAX
 00005648  52				push	EDX 
 00005649  DD C0			ffree	st
 0000564B  DD 04 24			fld	qword ptr [ESP]
 0000564E  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1324}:Console::WriteLn("(4)An exponential random variable has : ", res, " as its value.");
 00005654  5A				pop	EDX
 00005655  58				pop	EAX 
 00005656  8D 05 000003A8 R		lea	EAX,OFFSET $S001278
 0000565C  6A 00			push	000000000h
 0000565E  50				push	EAX 
 0000565F  E8 00000000 E		call	 Console_WriteString
 00005664  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000566A  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005670  50				push	EAX 
 00005671  52				push	EDX 
 00005672  E8 00000000 E		call	 Console_WriteDouble 
 00005677  8D 05 00000141 R		lea	EAX,OFFSET $S001264
 0000567D  6A 00			push	000000000h 
 0000567F  50				push	EAX 
 00005680  E8 00000000 E		call	 Console_WriteString 
 00005685  E8 00000000 E		call	 Console_WriteCrLf 

				;{1325}:Console::WriteLn("my name is", erv.Name());
 0000568A  8D 05 00000FCB R		lea	EAX,OFFSET $S001268
 00005690  6A 00			push	000000000h
 00005692  50				push	EAX 
 00005693  E8 00000000 E		call	 Console_WriteString
 00005698  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 0000569E  8B 11			mov	EDX,dword ptr [ECX]
 000056A0  FF 52 04			call	dword ptr [EDX+0004h]
 000056A3  6A 00			push	000000000h 
 000056A5  50				push	EAX 
 000056A6  E8 00000000 E		call	 Console_WriteString 
 000056AB  E8 00000000 E		call	 Console_WriteCrLf 

				;{1329}:UnitTesting::TestSwitch::RunTest(UnitTesting::TestSwitch::open);
 000056B0  B8 00000001			mov	EAX,000000001h
 000056B5  50				push	EAX
 000056B6  E8 FFFFE9E7			call	 UnitTesting_TestSwitch_RunTest

				;{1332}:obj;
 000056BB  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056C1  E8 FFFFB079			call	 UnitTesting_Circle

				;{1334}:obj.Radius= 115.456;
 000056C6  BA 1A9FBE77			mov	EDX,01A9FBE77h
 000056CB  B8 405CDD2F			mov	EAX,0405CDD2Fh 
 000056D0  50				push	EAX
 000056D1  52				push	EDX 
 000056D2  DD C0			ffree	st
 000056D4  DD 04 24			fld	qword ptr [ESP]
 000056D7  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056DD  E8 FFFFB027			call	 UnitTesting_Circle_put_Radius

				;{1338}:Console::WriteLn("Circle.Radius = ", obj.Radius);
 000056E2  8D 05 000007F1 R		lea	EAX,OFFSET $S001282
 000056E8  6A 00			push	000000000h
 000056EA  50				push	EAX 
 000056EB  E8 00000000 E		call	 Console_WriteString
 000056F0  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056F6  E8 FFFFAFF7			call	 UnitTesting_Circle_get_Radius
 000056FB  50				push	EAX 
 000056FC  52				push	EDX 
 000056FD  E8 00000000 E		call	 Console_WriteDouble 
 00005702  E8 00000000 E		call	 Console_WriteCrLf 

				;{1340}:area= obj.ComputeArea();
 00005707  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 0000570D  8B 11			mov	EDX,dword ptr [ECX]
 0000570F  FF 52 04			call	dword ptr [EDX+0004h]
 00005712  50				push	EAX
 00005713  52				push	EDX 
 00005714  DD C0			ffree	st
 00005716  DD 04 24			fld	qword ptr [ESP]
 00005719  DD 9D FFFFFEEC		fstp	qword ptr [EBP-0114h]

				;{1342}:Console::WriteLn("Circle.Area = ", area);
 0000571F  5A				pop	EDX
 00005720  58				pop	EAX 
 00005721  8D 05 000007E2 R		lea	EAX,OFFSET $S001284
 00005727  6A 00			push	000000000h
 00005729  50				push	EAX 
 0000572A  E8 00000000 E		call	 Console_WriteString
 0000572F  8B 95 FFFFFEEC		mov	EDX,dword ptr [EBP-0114h]
 00005735  8B 85 FFFFFEF0		mov	EAX,dword ptr [EBP-0110h] 
 0000573B  50				push	EAX 
 0000573C  52				push	EDX 
 0000573D  E8 00000000 E		call	 Console_WriteDouble 
 00005742  E8 00000000 E		call	 Console_WriteCrLf 

				;{1345}:obj2= obj;
 00005747  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 0000574D  E8 FFFFAFED			call	 UnitTesting_Circle
 00005752  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 00005758  8B F1			mov	ESI,ECX
 0000575A  8D 9D FFFFFEE0		lea	EBX,dword ptr [EBP-0120h]
 00005760  8B FB			mov	EDI,EBX 
 00005762  B9 0000000C			mov	ECX,00000000Ch 
 00005767  FC				cld	
 00005768  F3/ A4			rep movsb	

				;{1347}:what= (area == obj2.ComputeArea());
 0000576A  8B 95 FFFFFEEC		mov	EDX,dword ptr [EBP-0114h]
 00005770  8B 85 FFFFFEF0		mov	EAX,dword ptr [EBP-0110h] 
 00005776  50				push	EAX
 00005777  52				push	EDX 
 00005778  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 0000577E  8B 11			mov	EDX,dword ptr [ECX]
 00005780  FF 52 04			call	dword ptr [EDX+0004h]
 00005783  50				push	EAX
 00005784  52				push	EDX 
 00005785  E8 00000000 E		call	 FloatingPoint_Compare
 0000578A  83 F8 00			cmp	EAX,000000000h
 0000578D  F7 D8			neg	EAX
 0000578F  0F 94 C0			setz	AL
 00005792  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1349}:Console::WriteLn("what must be true = ", what);
 00005795  8D 05 0000115E R		lea	EAX,OFFSET $S001286
 0000579B  6A 00			push	000000000h
 0000579D  50				push	EAX 
 0000579E  E8 00000000 E		call	 Console_WriteString
 000057A3  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 000057A7  50				push	EAX 
 000057A8  E8 00000000 E		call	 Console_WriteBoolean 
 000057AD  E8 00000000 E		call	 Console_WriteCrLf 

				;{1351}:if(obj == obj2)
 000057B2  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000057B8  51				push	ECX
 000057B9  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 000057BF  5F				pop	EDI
 000057C0  8B F1			mov	ESI,ECX
 000057C2  B9 0000000C			mov	ECX,00000000Ch 
 000057C7  FC				cld	
 000057C8  F3/ A6			repe cmpsb	
 000057CA  0F 94 C0			setz	AL
 000057CD  84 C0			test	AL,AL
 000057CF  74 13			jz	OFFSET $L001675
				;{

				;{1353}:Console::WriteLn("obj==obj2");
 000057D1  8D 05 00001038 R		lea	EAX,OFFSET $S001287
 000057D7  6A 00			push	000000000h
 000057D9  50				push	EAX 
 000057DA  E8 00000000 E		call	 Console_WriteString
 000057DF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000057E4			$L001675:

				;{1356}:sq;
 000057E4  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 000057EA  E8 FFFFC069			call	 UnitTesting_Square

				;{1358}:sq.Width= 500.456;
 000057EF  BA C6A7EF9E			mov	EDX,0C6A7EF9Eh
 000057F4  B8 407F474B			mov	EAX,0407F474Bh 
 000057F9  50				push	EAX
 000057FA  52				push	EDX 
 000057FB  DD C0			ffree	st
 000057FD  DD 04 24			fld	qword ptr [ESP]
 00005800  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005806  E8 FFFFC089			call	 UnitTesting_Square_put_Width

				;{1359}:sq.Height= 1045.4564;
 0000580B  BA 5A858794			mov	EDX,05A858794h
 00005810  B8 409055D3			mov	EAX,0409055D3h 
 00005815  50				push	EAX
 00005816  52				push	EDX 
 00005817  DD C0			ffree	st
 00005819  DD 04 24			fld	qword ptr [ESP]
 0000581C  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005822  E8 FFFFBFE7			call	 UnitTesting_Square_put_Height

				;{1361}:sq.ComputeArea();
 00005827  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 0000582D  8B 11			mov	EDX,dword ptr [ECX]
 0000582F  FF 52 04			call	dword ptr [EDX+0004h]

				;{1363}:Console::WriteLn("sq.Width = ", sq.Width, ", sq.Height = ", sq.Height, ", area = ", sq.ComputeArea());
 00005832  8D 05 0000105C R		lea	EAX,OFFSET $S001291
 00005838  6A 00			push	000000000h
 0000583A  50				push	EAX 
 0000583B  E8 00000000 E		call	 Console_WriteString
 00005840  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005846  E8 FFFFC032			call	 UnitTesting_Square_get_Width
 0000584B  50				push	EAX 
 0000584C  52				push	EDX 
 0000584D  E8 00000000 E		call	 Console_WriteDouble 
 00005852  8D 05 00000730 R		lea	EAX,OFFSET $S001292
 00005858  6A 00			push	000000000h 
 0000585A  50				push	EAX 
 0000585B  E8 00000000 E		call	 Console_WriteString 
 00005860  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005866  E8 FFFFBF8C			call	 UnitTesting_Square_get_Height
 0000586B  50				push	EAX 
 0000586C  52				push	EDX 
 0000586D  E8 00000000 E		call	 Console_WriteDouble 
 00005872  8D 05 00000726 R		lea	EAX,OFFSET $S001293
 00005878  6A 00			push	000000000h 
 0000587A  50				push	EAX 
 0000587B  E8 00000000 E		call	 Console_WriteString 
 00005880  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005886  8B 11			mov	EDX,dword ptr [ECX]
 00005888  FF 52 04			call	dword ptr [EDX+0004h]
 0000588B  50				push	EAX 
 0000588C  52				push	EDX 
 0000588D  E8 00000000 E		call	 Console_WriteDouble 
 00005892  E8 00000000 E		call	 Console_WriteCrLf 

				;{1365}:tri;
 00005897  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 0000589D  E8 FFFFEC72			call	 UnitTesting_Triangle

				;{1367}:tri.Base= 450.4564;
 000058A2  BA 6A161E50			mov	EDX,06A161E50h
 000058A7  B8 407C274D			mov	EAX,0407C274Dh 
 000058AC  50				push	EAX
 000058AD  52				push	EDX 
 000058AE  DD C0			ffree	st
 000058B0  DD 04 24			fld	qword ptr [ESP]
 000058B3  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058B9  E8 FFFFEB1A			call	 UnitTesting_Triangle_put_Base

				;{1368}:tri.High= 4572.4564;
 000058BE  BA D6A161E5			mov	EDX,0D6A161E5h
 000058C3  B8 40B1DC74			mov	EAX,040B1DC74h 
 000058C8  50				push	EAX
 000058C9  52				push	EDX 
 000058CA  DD C0			ffree	st
 000058CC  DD 04 24			fld	qword ptr [ESP]
 000058CF  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058D5  E8 FFFFEBF0			call	 UnitTesting_Triangle_put_High

				;{1370}:tri.ComputeArea();
 000058DA  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058E0  8B 11			mov	EDX,dword ptr [ECX]
 000058E2  FF 52 04			call	dword ptr [EDX+0004h]

				;{1372}:Console::WriteLn("tri.Base = ", tri.Base, ", tri.High = ", tri.High, ", area = ", tri.ComputeArea());
 000058E5  8D 05 00001109 R		lea	EAX,OFFSET $S001297
 000058EB  6A 00			push	000000000h
 000058ED  50				push	EAX 
 000058EE  E8 00000000 E		call	 Console_WriteString
 000058F3  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058F9  E8 FFFFEAC3			call	 UnitTesting_Triangle_get_Base
 000058FE  50				push	EAX 
 000058FF  52				push	EDX 
 00005900  E8 00000000 E		call	 Console_WriteDouble 
 00005905  8D 05 0000073F R		lea	EAX,OFFSET $S001298
 0000590B  6A 00			push	000000000h 
 0000590D  50				push	EAX 
 0000590E  E8 00000000 E		call	 Console_WriteString 
 00005913  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00005919  E8 FFFFEB95			call	 UnitTesting_Triangle_get_High
 0000591E  50				push	EAX 
 0000591F  52				push	EDX 
 00005920  E8 00000000 E		call	 Console_WriteDouble 
 00005925  8D 05 00000726 R		lea	EAX,OFFSET $S001293
 0000592B  6A 00			push	000000000h 
 0000592D  50				push	EAX 
 0000592E  E8 00000000 E		call	 Console_WriteString 
 00005933  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00005939  8B 11			mov	EDX,dword ptr [ECX]
 0000593B  FF 52 04			call	dword ptr [EDX+0004h]
 0000593E  50				push	EAX 
 0000593F  52				push	EDX 
 00005940  E8 00000000 E		call	 Console_WriteDouble 
 00005945  E8 00000000 E		call	 Console_WriteCrLf 

				;{1376}:Console::WriteLn("I'm tired of waiting!!!");
 0000594A  8D 05 00000AA9 R		lea	EAX,OFFSET $S001300
 00005950  6A 00			push	000000000h
 00005952  50				push	EAX 
 00005953  E8 00000000 E		call	 Console_WriteString
 00005958  E8 00000000 E		call	 Console_WriteCrLf 

				;{1377}:cant;
 0000595D  8D 8D FFFFFEB4		lea	ECX,dword ptr [EBP-014Ch]
 00005963  E8 FFFFE90D			call	 UnitTesting_TestVirtuals_SimpleRV

				;{1379}:Console::WriteLn("My Name is: ", cant.Name());
 00005968  8D 05 00000B08 R		lea	EAX,OFFSET $S001302
 0000596E  6A 00			push	000000000h
 00005970  50				push	EAX 
 00005971  E8 00000000 E		call	 Console_WriteString
 00005976  8D 8D FFFFFEB4		lea	ECX,dword ptr [EBP-014Ch]
 0000597C  8B 11			mov	EDX,dword ptr [ECX]
 0000597E  FF 52 04			call	dword ptr [EDX+0004h]
 00005981  6A 00			push	000000000h 
 00005983  50				push	EAX 
 00005984  E8 00000000 E		call	 Console_WriteString 
 00005989  E8 00000000 E		call	 Console_WriteCrLf 

				;{1381}:if(false == bUnattended)
 0000598E  33 C0			xor	EAX,EAX
 00005990  50				push	EAX
 00005991  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 00005995  5A				pop	EDX
 00005996  38 C2			cmp	DL,AL
 00005998  0F 94 C0			setz	AL
 0000599B  84 C0			test	AL,AL
 0000599D  74 0F			jz	OFFSET $L001677

				;{1382}:hello.ShowHello("H++ Unit Testing : Third Phase");
 0000599F  8D 05 00000A2F R		lea	EAX,OFFSET $S001303
 000059A5  50				push	EAX
 000059A6  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000059A9  E8 FFFFB19B			call	 UnitTesting_HelloWorld_ShowHello
 000059AE			$L001677:

				;{1384}:xtarget, ;
 000059AE  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 000059B4  E8 FFFFD4C4			call	 UnitTesting_TestIntegers

				;{1385}:ysource;
 000059B9  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059BF  E8 FFFFD4B9			call	 UnitTesting_TestIntegers

				;{1387}:ysource.Width= 0x666;
 000059C4  B8 00000666			mov	EAX,000000666h
 000059C9  50				push	EAX
 000059CA  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059D0  E8 FFFFD224			call	 UnitTesting_TestIntegers_put_Width

				;{1388}:ysource.Height= 0x777;
 000059D5  B8 00000777			mov	EAX,000000777h
 000059DA  50				push	EAX
 000059DB  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059E1  E8 FFFFD17E			call	 UnitTesting_TestIntegers_put_Height

				;{1390}:Console::WriteLn("ysource.Width = ", ysource.Width, ", ysource.Height = ", ysource.Height);
 000059E6  8D 05 000011C7 R		lea	EAX,OFFSET $S001308
 000059EC  6A 00			push	000000000h
 000059EE  50				push	EAX 
 000059EF  E8 00000000 E		call	 Console_WriteString
 000059F4  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059FA  E8 FFFFD1E7			call	 UnitTesting_TestIntegers_get_Width
 000059FF  50				push	EAX 
 00005A00  E8 00000000 E		call	 Console_WriteInteger 
 00005A05  8D 05 0000074D R		lea	EAX,OFFSET $S001309
 00005A0B  6A 00			push	000000000h 
 00005A0D  50				push	EAX 
 00005A0E  E8 00000000 E		call	 Console_WriteString 
 00005A13  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 00005A19  E8 FFFFD132			call	 UnitTesting_TestIntegers_get_Height
 00005A1E  50				push	EAX 
 00005A1F  E8 00000000 E		call	 Console_WriteInteger 
 00005A24  E8 00000000 E		call	 Console_WriteCrLf 

				;try
 00005A29  54				push	ESP ;pPrevESP
 00005A2A  55				push	EBP ;pPrevEBP
 00005A2B  68 00005A54 R		push	OFFSET __except_handlerXXX001680 
					assume FS:nothing
 00005A30  64: FF 35			push	dword ptr  FS:[0] 
	   00000000
 00005A37  64: 89 25			mov	dword ptr  FS:[0],ESP
	   00000000
 00005A3E  CC				int	000000003h ;User breakpoint

				;{1395}:Console::WriteLn("This line will never be executed!");
 00005A3F  8D 05 00000D5E R		lea	EAX,OFFSET $S001310
 00005A45  6A 00			push	000000000h
 00005A47  50				push	EAX 
 00005A48  E8 00000000 E		call	 Console_WriteString
 00005A4D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00005A52  EB 3E			jmp	OFFSET $L001679
 00005A54			__except_handlerXXX001680:
 00005A54  8B 5C 24 04			mov	EBX,dword ptr [ESP+0004h] ;_ExceptionRecord
 00005A58  8B 0B			mov	ECX,dword ptr [EBX] ;_ExceptionRecord->ExceptionCode // The reason the exception occurred.
 00005A5A  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 00005A61  8B 23			mov	ESP,dword ptr [EBX] 
 00005A63  64: 8F 05			pop	dword ptr  FS:[0]
	   00000000
 00005A6A  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00005A6E  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP

				;{1395}:(System::Exception::BREAKPOINT);
 00005A72  B8 80000003			mov	EAX,080000003h
 00005A77  3B C1			cmp	EAX,ECX
 00005A79  75 15			jnz	OFFSET $L001683

				;{1399}:Console::WriteLn("**A breakpoint was catched!**");
 00005A7B  8D 05 0000065E R		lea	EAX,OFFSET $S001311
 00005A81  6A 00			push	000000000h
 00005A83  50				push	EAX 
 00005A84  E8 00000000 E		call	 Console_WriteString
 00005A89  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00005A8E  EB 18			jmp	OFFSET $L001682 
 00005A90			$L001683:
 00005A90  EB 16			jmp	OFFSET $L001682 
 00005A92			$L001679:
 00005A92  64: 8B 25			mov	ESP,dword ptr  FS:[0] 
	   00000000
 00005A99  64: 8F 05			pop	dword ptr  FS:[0] 
	   00000000
 00005AA0  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00005AA4  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 00005AA8			$L001682:

				;{1403}:xtarget= ysource;
 00005AA8  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 00005AAE  8B F1			mov	ESI,ECX
 00005AB0  8D 9D FFFFFE84		lea	EBX,dword ptr [EBP-017Ch]
 00005AB6  8B FB			mov	EDI,EBX 
 00005AB8  B9 00000030			mov	ECX,000000030h 
 00005ABD  FC				cld	
 00005ABE  F3/ A4			rep movsb	

				;{1405}:Console::WriteLn("(copied)xtarget.Width = ", xtarget.Width, ", (copied)xtarget.Height = ", xtarget.Height);
 00005AC0  8D 05 0000044F R		lea	EAX,OFFSET $S001312
 00005AC6  6A 00			push	000000000h
 00005AC8  50				push	EAX 
 00005AC9  E8 00000000 E		call	 Console_WriteString
 00005ACE  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 00005AD4  E8 FFFFD10D			call	 UnitTesting_TestIntegers_get_Width
 00005AD9  50				push	EAX 
 00005ADA  E8 00000000 E		call	 Console_WriteInteger 
 00005ADF  8D 05 000006FF R		lea	EAX,OFFSET $S001313
 00005AE5  6A 00			push	000000000h 
 00005AE7  50				push	EAX 
 00005AE8  E8 00000000 E		call	 Console_WriteString 
 00005AED  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 00005AF3  E8 FFFFD058			call	 UnitTesting_TestIntegers_get_Height
 00005AF8  50				push	EAX 
 00005AF9  E8 00000000 E		call	 Console_WriteInteger 
 00005AFE  E8 00000000 E		call	 Console_WriteCrLf 

				;{1407}:val1= 5, val2= 3;
 00005B03  B8 00000005			mov	EAX,000000005h
 00005B08  89 45 90			mov	dword ptr [EBP-0070h],EAX
 00005B0B  B8 00000003			mov	EAX,000000003h
 00005B10  89 45 8C			mov	dword ptr [EBP-0074h],EAX

				;{1409}:UnitTesting::Integers_Inline::Test(void;
 00005B13  E8 FFFFB074			call	 UnitTesting_Integers_Inline_Test

				;{1411}:Console::WriteLn("SummationSeries::ComputeRenderGamma() series: ");
 00005B18  8D 05 00000BE9 R		lea	EAX,OFFSET $S001314
 00005B1E  6A 00			push	000000000h
 00005B20  50				push	EAX 
 00005B21  E8 00000000 E		call	 Console_WriteString
 00005B26  E8 00000000 E		call	 Console_WriteCrLf 

				;{1412}:UnitTesting::SummationSeries::ComputeRenderGamma(void;
 00005B2B  E8 FFFFBE31			call	 UnitTesting_SummationSeries_ComputeRenderGamma

				;{1414}:Console::WriteLn("Degrees to Radians of ", 90, " is = ", Math::DegreesToRadians(90.0), " Radians.");
 00005B30  8D 05 000008AA R		lea	EAX,OFFSET $S001315
 00005B36  6A 00			push	000000000h
 00005B38  50				push	EAX 
 00005B39  E8 00000000 E		call	 Console_WriteString
 00005B3E  B8 0000005A			mov	EAX,00000005Ah
 00005B43  50				push	EAX 
 00005B44  E8 00000000 E		call	 Console_WriteInteger 
 00005B49  8D 05 00000150 R		lea	EAX,OFFSET $S001317
 00005B4F  6A 00			push	000000000h 
 00005B51  50				push	EAX 
 00005B52  E8 00000000 E		call	 Console_WriteString 
 00005B57  33 D2			xor	EDX,EDX
 00005B59  B8 40568000			mov	EAX,040568000h
 00005B5E  50				push	EAX
 00005B5F  52				push	EDX 
 00005B60  E8 FFFFA49B			call	 Math_DegreesToRadians
 00005B65  50				push	EAX 
 00005B66  52				push	EDX 
 00005B67  E8 00000000 E		call	 Console_WriteDouble 
 00005B6C  8D 05 00000137 R		lea	EAX,OFFSET $S001319
 00005B72  6A 00			push	000000000h 
 00005B74  50				push	EAX 
 00005B75  E8 00000000 E		call	 Console_WriteString 
 00005B7A  E8 00000000 E		call	 Console_WriteCrLf 

				;{1415}:Console::WriteLn("Radians to Degrees of ", 1.57079, " is = ", Math::RadiansToDegrees(1.57079), " Degrees.");
 00005B7F  8D 05 00000BB8 R		lea	EAX,OFFSET $S001320
 00005B85  6A 00			push	000000000h
 00005B87  50				push	EAX 
 00005B88  E8 00000000 E		call	 Console_WriteString
 00005B8D  BA B1EE2436			mov	EDX,0B1EE2436h
 00005B92  B8 3FF921F4			mov	EAX,03FF921F4h 
 00005B97  50				push	EAX 
 00005B98  52				push	EDX 
 00005B99  E8 00000000 E		call	 Console_WriteDouble 
 00005B9E  8D 05 00000150 R		lea	EAX,OFFSET $S001317
 00005BA4  6A 00			push	000000000h 
 00005BA6  50				push	EAX 
 00005BA7  E8 00000000 E		call	 Console_WriteString 
 00005BAC  BA B1EE2436			mov	EDX,0B1EE2436h
 00005BB1  B8 3FF921F4			mov	EAX,03FF921F4h 
 00005BB6  50				push	EAX
 00005BB7  52				push	EDX 
 00005BB8  E8 FFFFAA0A			call	 Math_RadiansToDegrees
 00005BBD  50				push	EAX 
 00005BBE  52				push	EDX 
 00005BBF  E8 00000000 E		call	 Console_WriteDouble 
 00005BC4  8D 05 0000012D R		lea	EAX,OFFSET $S001322
 00005BCA  6A 00			push	000000000h 
 00005BCC  50				push	EAX 
 00005BCD  E8 00000000 E		call	 Console_WriteString 
 00005BD2  E8 00000000 E		call	 Console_WriteCrLf 

				;{1418}:p= new double;
 00005BD7  6A 08			push	000000008h
 00005BD9  E8 00000000 E		call	 System_Memory_New
 00005BDE  85 C0			test	EAX,EAX
 00005BE0  74 12			jz	 $L001684
 00005BE2  8B F0			mov	ESI,EAX
 00005BE4  8D 3E			lea	EDI,dword ptr [ESI]
 00005BE6  B9 00000002			mov	ECX,000000002h 
 00005BEB  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00005BF0  F3/ AB			rep stos	dword ptr [EDI]
 00005BF2  EB 02			jmp	 $L001685
 00005BF4			$L001684:
 00005BF4  33 F6			xor	ESI,ESI
 00005BF6			$L001685:
 00005BF6  89 B5 FFFFFE50		mov	dword ptr [EBP-01B0h],ESI 

				;{1421}:*p= 3.141516927;
 00005BFC  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C02  50				push	EAX
 00005C03  BA A06A5D05			mov	EDX,0A06A5D05h
 00005C08  B8 400921D3			mov	EAX,0400921D3h 
 00005C0D  5B				pop	EBX
 00005C0E  89 13			mov	dword ptr [EBX],EDX
 00005C10  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{1423}:Console::WriteLn("*p (3.1415...)= ", *p);
 00005C13  8D 05 000006EB R		lea	EAX,OFFSET $S001325
 00005C19  6A 00			push	000000000h
 00005C1B  50				push	EAX 
 00005C1C  E8 00000000 E		call	 Console_WriteString
 00005C21  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C27  8B 10			mov	EDX,dword ptr [EAX]
 00005C29  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00005C2C  50				push	EAX 
 00005C2D  52				push	EDX 
 00005C2E  E8 00000000 E		call	 Console_WriteDouble 
 00005C33  E8 00000000 E		call	 Console_WriteCrLf 

				;{1425}:res= *p;
 00005C38  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C3E  8B 10			mov	EDX,dword ptr [EAX]
 00005C40  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00005C43  50				push	EAX
 00005C44  52				push	EDX 
 00005C45  DD C0			ffree	st
 00005C47  DD 04 24			fld	qword ptr [ESP]
 00005C4A  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1427}:Console::WriteLn("res (3.1415...)= ", res);
 00005C50  5A				pop	EDX
 00005C51  58				pop	EAX 
 00005C52  8D 05 0000104A R		lea	EAX,OFFSET $S001326
 00005C58  6A 00			push	000000000h
 00005C5A  50				push	EAX 
 00005C5B  E8 00000000 E		call	 Console_WriteString
 00005C60  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005C66  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005C6C  50				push	EAX 
 00005C6D  52				push	EDX 
 00005C6E  E8 00000000 E		call	 Console_WriteDouble 
 00005C73  E8 00000000 E		call	 Console_WriteCrLf 

				;{1429}:destroy p;
 00005C78  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C7E  85 C0			test	EAX,EAX
 00005C80  74 06			jz	OFFSET $L001686
 00005C82  50				push	EAX
 00005C83  E8 00000000 E		call	 System_Memory_Destroy
 00005C88			$L001686:

				;{1439}:fpTester_ptr= new UnitTesting::TestFloatingPoint();
 00005C88  6A 01			push	000000001h
 00005C8A  E8 00000000 E		call	 System_Memory_New
 00005C8F  85 C0			test	EAX,EAX
 00005C91  74 04			jz	 $L001687
 00005C93  8B F0			mov	ESI,EAX
 00005C95  EB 02			jmp	 $L001688
 00005C97			$L001687:
 00005C97  33 F6			xor	ESI,ESI
 00005C99			$L001688:
 00005C99  89 B5 FFFFFE4C		mov	dword ptr [EBP-01B4h],ESI 
 00005C9F  8B CE			mov	ECX,ESI
 00005CA1  E8 FFFFCD0D			call	 UnitTesting_TestFloatingPoint
 00005CA6  8B C6			mov	EAX,ESI 

				;{1441}:_pow= fpTester_ptr.Power(2.0, 64);
 00005CA8  B8 00000040			mov	EAX,000000040h
 00005CAD  50				push	EAX 
 00005CAE  33 D2			xor	EDX,EDX
 00005CB0  B8 40000000			mov	EAX,040000000h
 00005CB5  50				push	EAX
 00005CB6  52				push	EDX 
 00005CB7  8B 8D FFFFFE4C		mov	ECX,dword ptr [EBP-436]
 00005CBD  E8 FFFFCC18			call	 UnitTesting_TestFloatingPoint_Power
 00005CC2  50				push	EAX
 00005CC3  52				push	EDX 
 00005CC4  DD C0			ffree	st
 00005CC6  DD 04 24			fld	qword ptr [ESP]
 00005CC9  DD 5D 80			fstp	qword ptr [EBP-0080h]

				;{1443}:destroy fpTester_ptr;
 00005CCC  5A				pop	EDX
 00005CCD  58				pop	EAX 
 00005CCE  8B 8D FFFFFE4C		mov	ECX,dword ptr [EBP-436]
 00005CD4  8B F1			mov	ESI,ECX
 00005CD6  85 C9			test	ECX,ECX
 00005CD8  74 05			jz	OFFSET $L001690
 00005CDA  E8 FFFFCBD0			call	 UnitTesting_TestFloatingPoint_Destructor
 00005CDF			$L001690:
 00005CDF  56				push	ESI
 00005CE0  E8 00000000 E		call	 System_Memory_Destroy

				;{1446}:iptr= new int[10];
 00005CE5  B8 0000000A			mov	EAX,00000000Ah
 00005CEA  6B C0 04			imul	EAX,000000004h
 00005CED  50				push	EAX
 00005CEE  8B D8			mov	EBX,EAX
 00005CF0  E8 00000000 E		call	 System_Memory_New
 00005CF5  85 C0			test	EAX,EAX
 00005CF7  74 0F			jz	 $L001691
 00005CF9  8B F0			mov	ESI,EAX 
 00005CFB  8D 3E			lea	EDI,dword ptr [ESI]
 00005CFD  8B CB			mov	ECX,EBX 
 00005CFF  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00005D04  F3/ AA			rep stos	byte ptr [EDI]
 00005D06  EB 02			jmp	 $L001692
 00005D08			$L001691:
 00005D08  33 F6			xor	ESI,ESI
 00005D0A			$L001692:
 00005D0A  89 B5 FFFFFE48		mov	dword ptr [EBP-01B8h],ESI 

				;{1448}:iptr[0]= 145;
 00005D10  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D16  50				push	EAX
 00005D17  33 C0			xor	EAX,EAX
 00005D19  5E				pop	ESI
 00005D1A  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D1D  50				push	EAX
 00005D1E  B8 00000091			mov	EAX,000000091h
 00005D23  5B				pop	EBX
 00005D24  89 03			mov	dword ptr [EBX],EAX

				;{1449}:iptr[9]= 541;
 00005D26  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D2C  50				push	EAX
 00005D2D  B8 00000009			mov	EAX,000000009h
 00005D32  5E				pop	ESI
 00005D33  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D36  50				push	EAX
 00005D37  B8 0000021D			mov	EAX,00000021Dh
 00005D3C  5B				pop	EBX
 00005D3D  89 03			mov	dword ptr [EBX],EAX

				;{1450}:iptr[6]= 774;
 00005D3F  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D45  50				push	EAX
 00005D46  B8 00000006			mov	EAX,000000006h
 00005D4B  5E				pop	ESI
 00005D4C  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D4F  50				push	EAX
 00005D50  B8 00000306			mov	EAX,000000306h
 00005D55  5B				pop	EBX
 00005D56  89 03			mov	dword ptr [EBX],EAX

				;{1451}:iptr[7]= 991;
 00005D58  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D5E  50				push	EAX
 00005D5F  B8 00000007			mov	EAX,000000007h
 00005D64  5E				pop	ESI
 00005D65  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D68  50				push	EAX
 00005D69  B8 000003DF			mov	EAX,0000003DFh
 00005D6E  5B				pop	EBX
 00005D6F  89 03			mov	dword ptr [EBX],EAX

				;{1452}:iptr[2]= 123;
 00005D71  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D77  50				push	EAX
 00005D78  B8 00000002			mov	EAX,000000002h
 00005D7D  5E				pop	ESI
 00005D7E  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D81  50				push	EAX
 00005D82  B8 0000007B			mov	EAX,00000007Bh
 00005D87  5B				pop	EBX
 00005D88  89 03			mov	dword ptr [EBX],EAX

				;{1453}:iptr[1]= 667;
 00005D8A  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D90  50				push	EAX
 00005D91  B8 00000001			mov	EAX,000000001h
 00005D96  5E				pop	ESI
 00005D97  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D9A  50				push	EAX
 00005D9B  B8 0000029B			mov	EAX,00000029Bh
 00005DA0  5B				pop	EBX
 00005DA1  89 03			mov	dword ptr [EBX],EAX

				;{1455}:Console::WriteLn("iptr[0] == 145 == ", iptr[0]);
 00005DA3  8D 05 00000F54 R		lea	EAX,OFFSET $S001336
 00005DA9  6A 00			push	000000000h
 00005DAB  50				push	EAX 
 00005DAC  E8 00000000 E		call	 Console_WriteString
 00005DB1  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005DB7  50				push	EAX
 00005DB8  33 C0			xor	EAX,EAX
 00005DBA  5E				pop	ESI
 00005DBB  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005DBE  50				push	EAX 
 00005DBF  E8 00000000 E		call	 Console_WriteInteger 
 00005DC4  E8 00000000 E		call	 Console_WriteCrLf 

				;{1456}:Console::WriteLn("iptr[9] == 541 == ", iptr[9]);
 00005DC9  8D 05 00000FB3 R		lea	EAX,OFFSET $S001337
 00005DCF  6A 00			push	000000000h
 00005DD1  50				push	EAX 
 00005DD2  E8 00000000 E		call	 Console_WriteString
 00005DD7  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005DDD  50				push	EAX
 00005DDE  B8 00000009			mov	EAX,000000009h
 00005DE3  5E				pop	ESI
 00005DE4  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005DE7  50				push	EAX 
 00005DE8  E8 00000000 E		call	 Console_WriteInteger 
 00005DED  E8 00000000 E		call	 Console_WriteCrLf 

				;{1457}:Console::WriteLn("iptr[7] == 991 == ", iptr[7]);
 00005DF2  8D 05 00000FA0 R		lea	EAX,OFFSET $S001338
 00005DF8  6A 00			push	000000000h
 00005DFA  50				push	EAX 
 00005DFB  E8 00000000 E		call	 Console_WriteString
 00005E00  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E06  50				push	EAX
 00005E07  B8 00000007			mov	EAX,000000007h
 00005E0C  5E				pop	ESI
 00005E0D  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E10  50				push	EAX 
 00005E11  E8 00000000 E		call	 Console_WriteInteger 
 00005E16  E8 00000000 E		call	 Console_WriteCrLf 

				;{1458}:Console::WriteLn("iptr[2] == 123 == ", iptr[2]);
 00005E1B  8D 05 00000F7A R		lea	EAX,OFFSET $S001339
 00005E21  6A 00			push	000000000h
 00005E23  50				push	EAX 
 00005E24  E8 00000000 E		call	 Console_WriteString
 00005E29  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E2F  50				push	EAX
 00005E30  B8 00000002			mov	EAX,000000002h
 00005E35  5E				pop	ESI
 00005E36  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E39  50				push	EAX 
 00005E3A  E8 00000000 E		call	 Console_WriteInteger 
 00005E3F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1459}:Console::WriteLn("iptr[1] == 667 == ", iptr[1]);
 00005E44  8D 05 00000F67 R		lea	EAX,OFFSET $S001340
 00005E4A  6A 00			push	000000000h
 00005E4C  50				push	EAX 
 00005E4D  E8 00000000 E		call	 Console_WriteString
 00005E52  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E58  50				push	EAX
 00005E59  B8 00000001			mov	EAX,000000001h
 00005E5E  5E				pop	ESI
 00005E5F  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E62  50				push	EAX 
 00005E63  E8 00000000 E		call	 Console_WriteInteger 
 00005E68  E8 00000000 E		call	 Console_WriteCrLf 

				;{1460}:Console::WriteLn("iptr[6] == 774 == ", iptr[6]);
 00005E6D  8D 05 00000F8D R		lea	EAX,OFFSET $S001341
 00005E73  6A 00			push	000000000h
 00005E75  50				push	EAX 
 00005E76  E8 00000000 E		call	 Console_WriteString
 00005E7B  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E81  50				push	EAX
 00005E82  B8 00000006			mov	EAX,000000006h
 00005E87  5E				pop	ESI
 00005E88  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E8B  50				push	EAX 
 00005E8C  E8 00000000 E		call	 Console_WriteInteger 
 00005E91  E8 00000000 E		call	 Console_WriteCrLf 

				;{1462}:destroy iptr;
 00005E96  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E9C  85 C0			test	EAX,EAX
 00005E9E  74 06			jz	OFFSET $L001693
 00005EA0  50				push	EAX
 00005EA1  E8 00000000 E		call	 System_Memory_Destroy
 00005EA6			$L001693:

				;{1464}:iptr= null;
 00005EA6  33 C0			xor	EAX,EAX
 00005EA8  8D 9D FFFFFE48		lea	EBX,dword ptr [EBP-01B8h]
 00005EAE  89 03			mov	dword ptr [EBX],EAX

				;{1466}:yes;
 00005EB0  8D 85 FFFFFCB8		lea	EAX,dword ptr [EBP-0348h]

				;{1467}:yes[0][0]= 145;
 00005EB6  33 C0			xor	EAX,EAX
 00005EB8  6B C0 28			imul	EAX,EAX,000000028h
 00005EBB  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005EC2  52				push	EDX
 00005EC3  33 C0			xor	EAX,EAX
 00005EC5  5E				pop	ESI
 00005EC6  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005EC9  50				push	EAX
 00005ECA  B8 00000091			mov	EAX,000000091h
 00005ECF  5B				pop	EBX
 00005ED0  89 03			mov	dword ptr [EBX],EAX

				;{1468}:yes[1][9]= 541;
 00005ED2  B8 00000001			mov	EAX,000000001h
 00005ED7  6B C0 28			imul	EAX,EAX,000000028h
 00005EDA  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005EE1  52				push	EDX
 00005EE2  B8 00000009			mov	EAX,000000009h
 00005EE7  5E				pop	ESI
 00005EE8  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005EEB  50				push	EAX
 00005EEC  B8 0000021D			mov	EAX,00000021Dh
 00005EF1  5B				pop	EBX
 00005EF2  89 03			mov	dword ptr [EBX],EAX

				;{1469}:yes[2][7]= 334;
 00005EF4  B8 00000002			mov	EAX,000000002h
 00005EF9  6B C0 28			imul	EAX,EAX,000000028h
 00005EFC  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F03  52				push	EDX
 00005F04  B8 00000007			mov	EAX,000000007h
 00005F09  5E				pop	ESI
 00005F0A  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005F0D  50				push	EAX
 00005F0E  B8 0000014E			mov	EAX,00000014Eh
 00005F13  5B				pop	EBX
 00005F14  89 03			mov	dword ptr [EBX],EAX

				;{1470}:yes[3][9]= 123;
 00005F16  B8 00000003			mov	EAX,000000003h
 00005F1B  6B C0 28			imul	EAX,EAX,000000028h
 00005F1E  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F25  52				push	EDX
 00005F26  B8 00000009			mov	EAX,000000009h
 00005F2B  5E				pop	ESI
 00005F2C  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005F2F  50				push	EAX
 00005F30  B8 0000007B			mov	EAX,00000007Bh
 00005F35  5B				pop	EBX
 00005F36  89 03			mov	dword ptr [EBX],EAX

				;{1472}:Console::WriteLn("yes[0][0] == 145 == ", yes[0][0]);
 00005F38  8D 05 00001173 R		lea	EAX,OFFSET $S001344
 00005F3E  6A 00			push	000000000h
 00005F40  50				push	EAX 
 00005F41  E8 00000000 E		call	 Console_WriteString
 00005F46  33 C0			xor	EAX,EAX
 00005F48  6B C0 28			imul	EAX,EAX,000000028h
 00005F4B  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F52  52				push	EDX
 00005F53  33 C0			xor	EAX,EAX
 00005F55  5E				pop	ESI
 00005F56  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005F59  50				push	EAX 
 00005F5A  E8 00000000 E		call	 Console_WriteInteger 
 00005F5F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1473}:Console::WriteLn("yes[1][9] == 541 == ", yes[1][9]);
 00005F64  8D 05 00001188 R		lea	EAX,OFFSET $S001345
 00005F6A  6A 00			push	000000000h
 00005F6C  50				push	EAX 
 00005F6D  E8 00000000 E		call	 Console_WriteString
 00005F72  B8 00000001			mov	EAX,000000001h
 00005F77  6B C0 28			imul	EAX,EAX,000000028h
 00005F7A  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F81  52				push	EDX
 00005F82  B8 00000009			mov	EAX,000000009h
 00005F87  5E				pop	ESI
 00005F88  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005F8B  50				push	EAX 
 00005F8C  E8 00000000 E		call	 Console_WriteInteger 
 00005F91  E8 00000000 E		call	 Console_WriteCrLf 

				;{1474}:Console::WriteLn("yes[2][7] == 334 == ", yes[2][7]);
 00005F96  8D 05 0000119D R		lea	EAX,OFFSET $S001346
 00005F9C  6A 00			push	000000000h
 00005F9E  50				push	EAX 
 00005F9F  E8 00000000 E		call	 Console_WriteString
 00005FA4  B8 00000002			mov	EAX,000000002h
 00005FA9  6B C0 28			imul	EAX,EAX,000000028h
 00005FAC  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005FB3  52				push	EDX
 00005FB4  B8 00000007			mov	EAX,000000007h
 00005FB9  5E				pop	ESI
 00005FBA  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005FBD  50				push	EAX 
 00005FBE  E8 00000000 E		call	 Console_WriteInteger 
 00005FC3  E8 00000000 E		call	 Console_WriteCrLf 

				;{1475}:Console::WriteLn("yes[3][9] == 123 == ", yes[3][9]);
 00005FC8  8D 05 000011B2 R		lea	EAX,OFFSET $S001347
 00005FCE  6A 00			push	000000000h
 00005FD0  50				push	EAX 
 00005FD1  E8 00000000 E		call	 Console_WriteString
 00005FD6  B8 00000003			mov	EAX,000000003h
 00005FDB  6B C0 28			imul	EAX,EAX,000000028h
 00005FDE  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005FE5  52				push	EDX
 00005FE6  B8 00000009			mov	EAX,000000009h
 00005FEB  5E				pop	ESI
 00005FEC  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005FEF  50				push	EAX 
 00005FF0  E8 00000000 E		call	 Console_WriteInteger 
 00005FF5  E8 00000000 E		call	 Console_WriteCrLf 

				;{1477}:numbers;
 00005FFA  8D 85 FFFFFC68		lea	EAX,dword ptr [EBP-0398h]

				;{1481}:numbers[0]= Math::pi();
 00006000  33 C0			xor	EAX,EAX
 00006002  6B C0 08			imul	EAX,EAX,000000008h
 00006005  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 0000600C  50				push	EAX
 0000600D  E8 00000000 E		call	 Math_pi
 00006012  50				push	EAX
 00006013  52				push	EDX 
 00006014  DD C0			ffree	st
 00006016  DD 04 24			fld	qword ptr [ESP]
 00006019  5A				pop	EDX
 0000601A  58				pop	EAX 
 0000601B  5B				pop	EBX
 0000601C  DD 1B			fstp	qword ptr [EBX]

				;{1482}:numbers[1]= Math::pi() * 2.1;
 0000601E  B8 00000001			mov	EAX,000000001h
 00006023  6B C0 08			imul	EAX,EAX,000000008h
 00006026  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 0000602D  50				push	EAX
 0000602E  E8 00000000 E		call	 Math_pi
 00006033  50				push	EAX
 00006034  52				push	EDX 
 00006035  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 0000603A  B8 4000CCCC			mov	EAX,04000CCCCh 
 0000603F  9B DB E2			fclex
 00006042  50				push	EAX
 00006043  52				push	EDX 
 00006044  DD 04 24			fld	qword ptr [ESP]
 00006047  59				pop	ECX
 00006048  59				pop	ECX 
 00006049  DC 0C 24			fmul	qword ptr [ESP]
 0000604C  DD 1C 24			fstp	qword ptr [ESP]
 0000604F  DD C0			ffree	st
 00006051  DD 04 24			fld	qword ptr [ESP]
 00006054  5A				pop	EDX
 00006055  58				pop	EAX 
 00006056  5B				pop	EBX
 00006057  DD 1B			fstp	qword ptr [EBX]

				;{1483}:numbers[2]= Math::pi() * 4.1;
 00006059  B8 00000002			mov	EAX,000000002h
 0000605E  6B C0 08			imul	EAX,EAX,000000008h
 00006061  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006068  50				push	EAX
 00006069  E8 00000000 E		call	 Math_pi
 0000606E  50				push	EAX
 0000606F  52				push	EDX 
 00006070  BA 66666667			mov	EDX,066666667h
 00006075  B8 40106666			mov	EAX,040106666h 
 0000607A  9B DB E2			fclex
 0000607D  50				push	EAX
 0000607E  52				push	EDX 
 0000607F  DD 04 24			fld	qword ptr [ESP]
 00006082  59				pop	ECX
 00006083  59				pop	ECX 
 00006084  DC 0C 24			fmul	qword ptr [ESP]
 00006087  DD 1C 24			fstp	qword ptr [ESP]
 0000608A  DD C0			ffree	st
 0000608C  DD 04 24			fld	qword ptr [ESP]
 0000608F  5A				pop	EDX
 00006090  58				pop	EAX 
 00006091  5B				pop	EBX
 00006092  DD 1B			fstp	qword ptr [EBX]

				;{1484}:numbers[3]= Math::pi() * 8.1;
 00006094  B8 00000003			mov	EAX,000000003h
 00006099  6B C0 08			imul	EAX,EAX,000000008h
 0000609C  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000060A3  50				push	EAX
 000060A4  E8 00000000 E		call	 Math_pi
 000060A9  50				push	EAX
 000060AA  52				push	EDX 
 000060AB  BA 33333333			mov	EDX,033333333h
 000060B0  B8 40203333			mov	EAX,040203333h 
 000060B5  9B DB E2			fclex
 000060B8  50				push	EAX
 000060B9  52				push	EDX 
 000060BA  DD 04 24			fld	qword ptr [ESP]
 000060BD  59				pop	ECX
 000060BE  59				pop	ECX 
 000060BF  DC 0C 24			fmul	qword ptr [ESP]
 000060C2  DD 1C 24			fstp	qword ptr [ESP]
 000060C5  DD C0			ffree	st
 000060C7  DD 04 24			fld	qword ptr [ESP]
 000060CA  5A				pop	EDX
 000060CB  58				pop	EAX 
 000060CC  5B				pop	EBX
 000060CD  DD 1B			fstp	qword ptr [EBX]

				;{1485}:numbers[4]= Math::pi() * 16.1;
 000060CF  B8 00000004			mov	EAX,000000004h
 000060D4  6B C0 08			imul	EAX,EAX,000000008h
 000060D7  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000060DE  50				push	EAX
 000060DF  E8 00000000 E		call	 Math_pi
 000060E4  50				push	EAX
 000060E5  52				push	EDX 
 000060E6  BA 9999999A			mov	EDX,09999999Ah
 000060EB  B8 40301999			mov	EAX,040301999h 
 000060F0  9B DB E2			fclex
 000060F3  50				push	EAX
 000060F4  52				push	EDX 
 000060F5  DD 04 24			fld	qword ptr [ESP]
 000060F8  59				pop	ECX
 000060F9  59				pop	ECX 
 000060FA  DC 0C 24			fmul	qword ptr [ESP]
 000060FD  DD 1C 24			fstp	qword ptr [ESP]
 00006100  DD C0			ffree	st
 00006102  DD 04 24			fld	qword ptr [ESP]
 00006105  5A				pop	EDX
 00006106  58				pop	EAX 
 00006107  5B				pop	EBX
 00006108  DD 1B			fstp	qword ptr [EBX]

				;{1486}:numbers[5]= Math::pi() * 32.1;
 0000610A  B8 00000005			mov	EAX,000000005h
 0000610F  6B C0 08			imul	EAX,EAX,000000008h
 00006112  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006119  50				push	EAX
 0000611A  E8 00000000 E		call	 Math_pi
 0000611F  50				push	EAX
 00006120  52				push	EDX 
 00006121  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 00006126  B8 40400CCC			mov	EAX,040400CCCh 
 0000612B  9B DB E2			fclex
 0000612E  50				push	EAX
 0000612F  52				push	EDX 
 00006130  DD 04 24			fld	qword ptr [ESP]
 00006133  59				pop	ECX
 00006134  59				pop	ECX 
 00006135  DC 0C 24			fmul	qword ptr [ESP]
 00006138  DD 1C 24			fstp	qword ptr [ESP]
 0000613B  DD C0			ffree	st
 0000613D  DD 04 24			fld	qword ptr [ESP]
 00006140  5A				pop	EDX
 00006141  58				pop	EAX 
 00006142  5B				pop	EBX
 00006143  DD 1B			fstp	qword ptr [EBX]

				;{1487}:numbers[6]= Math::pi() * 64.1;
 00006145  B8 00000006			mov	EAX,000000006h
 0000614A  6B C0 08			imul	EAX,EAX,000000008h
 0000614D  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006154  50				push	EAX
 00006155  E8 00000000 E		call	 Math_pi
 0000615A  50				push	EAX
 0000615B  52				push	EDX 
 0000615C  BA 66666667			mov	EDX,066666667h
 00006161  B8 40500666			mov	EAX,040500666h 
 00006166  9B DB E2			fclex
 00006169  50				push	EAX
 0000616A  52				push	EDX 
 0000616B  DD 04 24			fld	qword ptr [ESP]
 0000616E  59				pop	ECX
 0000616F  59				pop	ECX 
 00006170  DC 0C 24			fmul	qword ptr [ESP]
 00006173  DD 1C 24			fstp	qword ptr [ESP]
 00006176  DD C0			ffree	st
 00006178  DD 04 24			fld	qword ptr [ESP]
 0000617B  5A				pop	EDX
 0000617C  58				pop	EAX 
 0000617D  5B				pop	EBX
 0000617E  DD 1B			fstp	qword ptr [EBX]

				;{1488}:numbers[7]= Math::pi() * 128.1;
 00006180  B8 00000007			mov	EAX,000000007h
 00006185  6B C0 08			imul	EAX,EAX,000000008h
 00006188  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 0000618F  50				push	EAX
 00006190  E8 00000000 E		call	 Math_pi
 00006195  50				push	EAX
 00006196  52				push	EDX 
 00006197  BA 33333333			mov	EDX,033333333h
 0000619C  B8 40600333			mov	EAX,040600333h 
 000061A1  9B DB E2			fclex
 000061A4  50				push	EAX
 000061A5  52				push	EDX 
 000061A6  DD 04 24			fld	qword ptr [ESP]
 000061A9  59				pop	ECX
 000061AA  59				pop	ECX 
 000061AB  DC 0C 24			fmul	qword ptr [ESP]
 000061AE  DD 1C 24			fstp	qword ptr [ESP]
 000061B1  DD C0			ffree	st
 000061B3  DD 04 24			fld	qword ptr [ESP]
 000061B6  5A				pop	EDX
 000061B7  58				pop	EAX 
 000061B8  5B				pop	EBX
 000061B9  DD 1B			fstp	qword ptr [EBX]

				;{1489}:numbers[8]= Math::pi() * 256.1;
 000061BB  B8 00000008			mov	EAX,000000008h
 000061C0  6B C0 08			imul	EAX,EAX,000000008h
 000061C3  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000061CA  50				push	EAX
 000061CB  E8 00000000 E		call	 Math_pi
 000061D0  50				push	EAX
 000061D1  52				push	EDX 
 000061D2  BA 9999999A			mov	EDX,09999999Ah
 000061D7  B8 40700199			mov	EAX,040700199h 
 000061DC  9B DB E2			fclex
 000061DF  50				push	EAX
 000061E0  52				push	EDX 
 000061E1  DD 04 24			fld	qword ptr [ESP]
 000061E4  59				pop	ECX
 000061E5  59				pop	ECX 
 000061E6  DC 0C 24			fmul	qword ptr [ESP]
 000061E9  DD 1C 24			fstp	qword ptr [ESP]
 000061EC  DD C0			ffree	st
 000061EE  DD 04 24			fld	qword ptr [ESP]
 000061F1  5A				pop	EDX
 000061F2  58				pop	EAX 
 000061F3  5B				pop	EBX
 000061F4  DD 1B			fstp	qword ptr [EBX]

				;{1490}:numbers[9]= Math::pi() * 512.1;
 000061F6  B8 00000009			mov	EAX,000000009h
 000061FB  6B C0 08			imul	EAX,EAX,000000008h
 000061FE  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006205  50				push	EAX
 00006206  E8 00000000 E		call	 Math_pi
 0000620B  50				push	EAX
 0000620C  52				push	EDX 
 0000620D  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 00006212  B8 408000CC			mov	EAX,0408000CCh 
 00006217  9B DB E2			fclex
 0000621A  50				push	EAX
 0000621B  52				push	EDX 
 0000621C  DD 04 24			fld	qword ptr [ESP]
 0000621F  59				pop	ECX
 00006220  59				pop	ECX 
 00006221  DC 0C 24			fmul	qword ptr [ESP]
 00006224  DD 1C 24			fstp	qword ptr [ESP]
 00006227  DD C0			ffree	st
 00006229  DD 04 24			fld	qword ptr [ESP]
 0000622C  5A				pop	EDX
 0000622D  58				pop	EAX 
 0000622E  5B				pop	EBX
 0000622F  DD 1B			fstp	qword ptr [EBX]

				;{1492}:sz= sizeof (numbers) / sizeof (double);
 00006231  B8 00000050			mov	EAX,000000050h
 00006236  50				push	EAX
 00006237  B8 00000008			mov	EAX,000000008h
 0000623C  9B DB E2			fclex
 0000623F  50				push	EAX
 00006240  E8 00000000 E		call	 FloatingPoint_FromInt
 00006245  50				push	EAX
 00006246  52				push	EDX 
 00006247  DD 04 24			fld	qword ptr [ESP]
 0000624A  59				pop	ECX
 0000624B  59				pop	ECX 
 0000624C  E8 00000000 E		call	 FloatingPoint_FromInt
 00006251  50				push	EAX
 00006252  52				push	EDX 
 00006253  DC 3C 24			fdivr	qword ptr [ESP]
 00006256  DD 1C 24			fstp	qword ptr [ESP]
 00006259  E8 00000000 E		call	 FloatingPoint_ToInt
 0000625E  89 85 FFFFFC64		mov	dword ptr [EBP-039Ch],EAX

				;{1494}:for(index= 0; index < sz; index++ )
 00006264  33 C0			xor	EAX,EAX
 00006266  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006269  EB 06			jmp	OFFSET $L001694
 0000626B			$L001695:
 0000626B  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 0000626E  FF 45 A8			inc	dword ptr [EBP-88]
 00006271			$L001694:
 00006271  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006274  50				push	EAX
 00006275  8B 85 FFFFFC64		mov	EAX,dword ptr [EBP-039Ch]
 0000627B  5A				pop	EDX
 0000627C  3B D0			cmp	EDX,EAX
 0000627E  0F 9C C0			setl	AL
 00006281  84 C0			test	AL,AL
 00006283  74 4A			jz	OFFSET $L001696
				;{

				;{1496}:Console::WriteLn("numbers[", index, "] = ", numbers[index]);
 00006285  8D 05 0000102F R		lea	EAX,OFFSET $S001356
 0000628B  6A 00			push	000000000h
 0000628D  50				push	EAX 
 0000628E  E8 00000000 E		call	 Console_WriteString
 00006293  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006296  50				push	EAX 
 00006297  E8 00000000 E		call	 Console_WriteInteger 
 0000629C  8D 05 00000DC1 R		lea	EAX,OFFSET $S001165
 000062A2  6A 00			push	000000000h 
 000062A4  50				push	EAX 
 000062A5  E8 00000000 E		call	 Console_WriteString 
 000062AA  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 000062AD  6B C0 08			imul	EAX,EAX,000000008h
 000062B0  8B 94 28			mov	EDX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000062B7  83 C0 04			add	EAX,000000004h ;low part
 000062BA  8B 84 28			mov	EAX,dword ptr [EBP+EAX-0398h] 
	   FFFFFC68
 000062C1  50				push	EAX 
 000062C2  52				push	EDX 
 000062C3  E8 00000000 E		call	 Console_WriteDouble 
 000062C8  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000062CD  EB 9C			jmp	OFFSET $L001695 
 000062CF			$L001696:

				;{1500}:objs;
 000062CF  8D 85 FFFFFC40		lea	EAX,dword ptr [EBP-03C0h]
 000062D5  8B F0			mov	ESI,EAX
 000062D7  8B DE			mov	EBX,ESI
 000062D9  8B CB			mov	ECX,EBX 
 000062DB  E8 FFFFA45F			call	 UnitTesting_Circle
 000062E0  83 C3 0C			add	EBX,00000000Ch
 000062E3  8B CB			mov	ECX,EBX 
 000062E5  E8 FFFFA455			call	 UnitTesting_Circle
 000062EA  83 C3 0C			add	EBX,00000000Ch 
 000062ED  8B CB			mov	ECX,EBX 
 000062EF  E8 FFFFA44B			call	 UnitTesting_Circle

				;{1502}:objs[1].Radius= Math::pi();
 000062F4  B8 00000001			mov	EAX,000000001h
 000062F9  6B C0 0C			imul	EAX,EAX,00000000Ch
 000062FC  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006303  51				push	ECX
 00006304  E8 00000000 E		call	 Math_pi
 00006309  50				push	EAX
 0000630A  52				push	EDX 
 0000630B  DD C0			ffree	st
 0000630D  DD 04 24			fld	qword ptr [ESP]
 00006310  5A				pop	EDX
 00006311  58				pop	EAX 
 00006312  59				pop	ECX
 00006313  50				push	EAX
 00006314  52				push	EDX 
 00006315  E8 FFFFA3EF			call	 UnitTesting_Circle_put_Radius

				;{1504}:objs[1].Draw();
 0000631A  B8 00000001			mov	EAX,000000001h
 0000631F  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006322  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006329  8B 11			mov	EDX,dword ptr [ECX]
 0000632B  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{1506}:Console::WriteLn("Circle[1].Radius = 3.14 = ", objs[1].Radius);
 0000632E  8D 05 00000835 R		lea	EAX,OFFSET $S001358
 00006334  6A 00			push	000000000h
 00006336  50				push	EAX 
 00006337  E8 00000000 E		call	 Console_WriteString
 0000633C  B8 00000001			mov	EAX,000000001h
 00006341  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006344  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000634B  E8 FFFFA3A2			call	 UnitTesting_Circle_get_Radius
 00006350  50				push	EAX 
 00006351  52				push	EDX 
 00006352  E8 00000000 E		call	 Console_WriteDouble 
 00006357  E8 00000000 E		call	 Console_WriteCrLf 

				;{1508}:objs[2]= objs[1];
 0000635C  B8 00000002			mov	EAX,000000002h
 00006361  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006364  8D 84 28			lea	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000636B  50				push	EAX
 0000636C  B8 00000001			mov	EAX,000000001h
 00006371  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006374  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000637B  8B 84 28			mov	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006382  8B F1			mov	ESI,ECX
 00006384  5F				pop	EDI
 00006385  B9 0000000C			mov	ECX,00000000Ch 
 0000638A  FC				cld	
 0000638B  F3/ A4			rep movsb	

				;{1510}:Console::WriteLn("Circle[2].Radius = 3.14 = ", objs[2].Radius);
 0000638D  8D 05 00000850 R		lea	EAX,OFFSET $S001359
 00006393  6A 00			push	000000000h
 00006395  50				push	EAX 
 00006396  E8 00000000 E		call	 Console_WriteString
 0000639B  B8 00000002			mov	EAX,000000002h
 000063A0  6B C0 0C			imul	EAX,EAX,00000000Ch
 000063A3  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000063AA  E8 FFFFA343			call	 UnitTesting_Circle_get_Radius
 000063AF  50				push	EAX 
 000063B0  52				push	EDX 
 000063B1  E8 00000000 E		call	 Console_WriteDouble 
 000063B6  E8 00000000 E		call	 Console_WriteCrLf 

				;{1512}:dest;
 000063BB  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 000063C1  E8 FFFFA379			call	 UnitTesting_Circle

				;{1514}:dest= objs[1];
 000063C6  B8 00000001			mov	EAX,000000001h
 000063CB  6B C0 0C			imul	EAX,EAX,00000000Ch
 000063CE  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000063D5  8B 84 28			mov	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000063DC  8B F1			mov	ESI,ECX
 000063DE  8D 9D FFFFFC34		lea	EBX,dword ptr [EBP-03CCh]
 000063E4  8B FB			mov	EDI,EBX 
 000063E6  B9 0000000C			mov	ECX,00000000Ch 
 000063EB  FC				cld	
 000063EC  F3/ A4			rep movsb	

				;{1516}:Console::WriteLn("Circle.Radius = 3.14 = ", dest.Radius);
 000063EE  8D 05 00000802 R		lea	EAX,OFFSET $S001361
 000063F4  6A 00			push	000000000h
 000063F6  50				push	EAX 
 000063F7  E8 00000000 E		call	 Console_WriteString
 000063FC  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 00006402  E8 FFFFA2EB			call	 UnitTesting_Circle_get_Radius
 00006407  50				push	EAX 
 00006408  52				push	EDX 
 00006409  E8 00000000 E		call	 Console_WriteDouble 
 0000640E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1518}:objs[0]= dest;
 00006413  33 C0			xor	EAX,EAX
 00006415  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006418  8D 84 28			lea	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000641F  50				push	EAX
 00006420  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 00006426  8B F1			mov	ESI,ECX
 00006428  5F				pop	EDI
 00006429  B9 0000000C			mov	ECX,00000000Ch 
 0000642E  FC				cld	
 0000642F  F3/ A4			rep movsb	

				;{1520}:Console::WriteLn("Circle[0].Radius = 3.14 = ", objs[0].Radius);
 00006431  8D 05 0000081A R		lea	EAX,OFFSET $S001362
 00006437  6A 00			push	000000000h
 00006439  50				push	EAX 
 0000643A  E8 00000000 E		call	 Console_WriteString
 0000643F  33 C0			xor	EAX,EAX
 00006441  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006444  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000644B  E8 FFFFA2A2			call	 UnitTesting_Circle_get_Radius
 00006450  50				push	EAX 
 00006451  52				push	EDX 
 00006452  E8 00000000 E		call	 Console_WriteDouble 
 00006457  E8 00000000 E		call	 Console_WriteCrLf 

				;{1522}:xptr= null;
 0000645C  33 C0			xor	EAX,EAX
 0000645E  8D 9D FFFFFC30		lea	EBX,dword ptr [EBP-03D0h]
 00006464  89 03			mov	dword ptr [EBX],EAX

				;{1524}:xptr= new int;
 00006466  6A 04			push	000000004h
 00006468  E8 00000000 E		call	 System_Memory_New
 0000646D  85 C0			test	EAX,EAX
 0000646F  74 12			jz	 $L001697
 00006471  8B F0			mov	ESI,EAX
 00006473  8D 3E			lea	EDI,dword ptr [ESI]
 00006475  B9 00000001			mov	ECX,000000001h 
 0000647A  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000647F  F3/ AB			rep stos	dword ptr [EDI]
 00006481  EB 02			jmp	 $L001698
 00006483			$L001697:
 00006483  33 F6			xor	ESI,ESI
 00006485			$L001698:
 00006485  89 B5 FFFFFC30		mov	dword ptr [EBP-03D0h],ESI 

				;{1526}:if(false == bUnattended)
 0000648B  33 C0			xor	EAX,EAX
 0000648D  50				push	EAX
 0000648E  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 00006492  5A				pop	EDX
 00006493  38 C2			cmp	DL,AL
 00006495  0F 94 C0			setz	AL
 00006498  84 C0			test	AL,AL
 0000649A  74 0F			jz	OFFSET $L001699

				;{1527}:hello.ShowHello("H++ Unit Testing : Fourth Phase");
 0000649C  8D 05 000009EF R		lea	EAX,OFFSET $S001364
 000064A2  50				push	EAX
 000064A3  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000064A6  E8 FFFFA69E			call	 UnitTesting_HelloWorld_ShowHello
 000064AB			$L001699:

				;{1531}:npi= sizeof (UnitTesting::misc1::pi);
 000064AB  B8 00000008			mov	EAX,000000008h
 000064B0  89 85 FFFFFC2C		mov	dword ptr [EBP-03D4h],EAX

				;{1533}:npi= sizeof UnitTesting::misc1::pi;
 000064B6  B8 00000008			mov	EAX,000000008h
 000064BB  89 85 FFFFFC2C		mov	dword ptr [EBP-03D4h],EAX

				;{1535}:nint= sizeof (int), ndbl= sizeof (double), ni64= sizeof Int64, ntit= sizeof (UnitTesting::TestIntegers), nptr= sizeof (p), narr= sizeof (iptr), nar2= sizeof (array1), nar3= sizeof (UnitTesting::misc1::array);
 000064C1  B8 00000004			mov	EAX,000000004h
 000064C6  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX
 000064CC  B8 00000008			mov	EAX,000000008h
 000064D1  89 85 FFFFFC24		mov	dword ptr [EBP-03DCh],EAX
 000064D7  B8 00000008			mov	EAX,000000008h
 000064DC  89 85 FFFFFC20		mov	dword ptr [EBP-03E0h],EAX
 000064E2  B8 00000030			mov	EAX,000000030h
 000064E7  89 85 FFFFFC1C		mov	dword ptr [EBP-03E4h],EAX
 000064ED  B8 00000004			mov	EAX,000000004h
 000064F2  89 85 FFFFFC18		mov	dword ptr [EBP-03E8h],EAX
 000064F8  B8 00000004			mov	EAX,000000004h
 000064FD  89 85 FFFFFC14		mov	dword ptr [EBP-03ECh],EAX
 00006503  B8 00000050			mov	EAX,000000050h
 00006508  89 85 FFFFFC10		mov	dword ptr [EBP-03F0h],EAX
 0000650E  B8 00000050			mov	EAX,SIZEOF UnitTesting_misc1_array
 00006513  89 85 FFFFFC0C		mov	dword ptr [EBP-03F4h],EAX

				;{1544}:nint= sizeof int + sizeof double;
 00006519  B8 00000004			mov	EAX,000000004h
 0000651E  50				push	EAX
 0000651F  B8 00000008			mov	EAX,000000008h
 00006524  5A				pop	EDX
 00006525  03 C2			add	EAX,EDX
 00006527  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX

				;{1546}:nint= sizeof (int) + sizeof (Int64);
 0000652D  B8 00000004			mov	EAX,000000004h
 00006532  50				push	EAX
 00006533  B8 00000008			mov	EAX,000000008h
 00006538  5A				pop	EDX
 00006539  03 C2			add	EAX,EDX
 0000653B  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX

				;{1548}:if(nint >= ndbl && ni64 < ntit)
 00006541  8B 85 FFFFFC28		mov	EAX,dword ptr [EBP-03D8h]
 00006547  50				push	EAX
 00006548  8B 85 FFFFFC24		mov	EAX,dword ptr [EBP-03DCh]
 0000654E  5A				pop	EDX
 0000654F  3B D0			cmp	EDX,EAX
 00006551  0F 9D C0			setge	AL
 00006554  84 C0			test	AL,AL
 00006556  74 13			jz	OFFSET $L001703
 00006558  8B 85 FFFFFC20		mov	EAX,dword ptr [EBP-03E0h]
 0000655E  50				push	EAX
 0000655F  8B 85 FFFFFC1C		mov	EAX,dword ptr [EBP-03E4h]
 00006565  5A				pop	EDX
 00006566  3B D0			cmp	EDX,EAX
 00006568  0F 9C C0			setl	AL
 0000656B			$L001703:
 0000656B  84 C0			test	AL,AL
 0000656D  74 13			jz	OFFSET $L001701
				;{

				;{1550}:Console::WriteLn("This is getting complex and better each time!");
 0000656F  8D 05 00000D30 R		lea	EAX,OFFSET $S001374
 00006575  6A 00			push	000000000h
 00006577  50				push	EAX 
 00006578  E8 00000000 E		call	 Console_WriteString
 0000657D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006582			$L001701:

				;{1553}:destroy xptr;
 00006582  8B 85 FFFFFC30		mov	EAX,dword ptr [EBP-976]
 00006588  85 C0			test	EAX,EAX
 0000658A  74 06			jz	OFFSET $L001704
 0000658C  50				push	EAX
 0000658D  E8 00000000 E		call	 System_Memory_Destroy
 00006592			$L001704:

				;{1555}:ii2ptr= null;
 00006592  33 C0			xor	EAX,EAX
 00006594  8D 9D FFFFFC08		lea	EBX,dword ptr [EBP-03F8h]
 0000659A  89 03			mov	dword ptr [EBX],EAX

				;{1557}:xptr= xptr + 1;
 0000659C  8B 85 FFFFFC30		mov	EAX,dword ptr [EBP-976]
 000065A2  50				push	EAX
 000065A3  B8 00000001			mov	EAX,000000001h
 000065A8  5A				pop	EDX
 000065A9  03 C2			add	EAX,EDX
 000065AB  8D 9D FFFFFC30		lea	EBX,dword ptr [EBP-03D0h]
 000065B1  89 03			mov	dword ptr [EBX],EAX

				;{1560}:name1= "Harold", name2= "Harold L.", name3= "Harold L. Marzan", name4= name1;
 000065B3  8D 05 00000A71 R		lea	EAX,OFFSET $S001377
 000065B9  89 85 FFFFFC04		mov	dword ptr [EBP-03FCh],EAX
 000065BF  8D 05 00000A67 R		lea	EAX,OFFSET $S001379
 000065C5  89 85 FFFFFC00		mov	dword ptr [EBP-0400h],EAX
 000065CB  8D 05 00000A56 R		lea	EAX,OFFSET $S001167
 000065D1  89 85 FFFFFBFC		mov	dword ptr [EBP-0404h],EAX
 000065D7  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 000065DD  89 85 FFFFFBF8		mov	dword ptr [EBP-0408h],EAX

				;{1565}:if(name1 <= name2)
 000065E3  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 000065E9  50				push	EAX
 000065EA  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 000065F0  5F				pop	EDI
 000065F1  8B F0			mov	ESI,EAX
 000065F3  50				push	EAX
 000065F4  E8 00000000 E		call	 StringHandling_StringLength
 000065F9  50				push	EAX 
 000065FA  56				push	ESI 
 000065FB  57				push	EDI 
 000065FC  E8 00000000 E		call	 StringHandling_StringCompare 
 00006601  83 F8 00			cmp	EAX,000000000h
 00006604  0F 9E C0			setle	AL
 00006607  84 C0			test	AL,AL
 00006609  74 13			jz	OFFSET $L001705
				;{

				;{1567}:Console::WriteLn("name1 =< name2");
 0000660B  8D 05 00000FF5 R		lea	EAX,OFFSET $S001382
 00006611  6A 00			push	000000000h
 00006613  50				push	EAX 
 00006614  E8 00000000 E		call	 Console_WriteString
 00006619  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000661E			$L001705:

				;{1569}:if(StringHandling::StringLength(name3) > StringHandling::StringLength(name2))
 0000661E  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006624  50				push	EAX
 00006625  E8 00000000 E		call	 StringHandling_StringLength
 0000662A  50				push	EAX
 0000662B  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 00006631  50				push	EAX
 00006632  E8 00000000 E		call	 StringHandling_StringLength
 00006637  5A				pop	EDX
 00006638  3B D0			cmp	EDX,EAX
 0000663A  0F 9F C0			setg	AL
 0000663D  84 C0			test	AL,AL
 0000663F  74 13			jz	OFFSET $L001707
				;{

				;{1571}:Console::WriteLn("name3.length > name2.length");
 00006641  8D 05 00001013 R		lea	EAX,OFFSET $S001383
 00006647  6A 00			push	000000000h
 00006649  50				push	EAX 
 0000664A  E8 00000000 E		call	 Console_WriteString
 0000664F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006654			$L001707:

				;{1574}:if(name2 <= name3)
 00006654  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 0000665A  50				push	EAX
 0000665B  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006661  5F				pop	EDI
 00006662  8B F0			mov	ESI,EAX
 00006664  50				push	EAX
 00006665  E8 00000000 E		call	 StringHandling_StringLength
 0000666A  50				push	EAX 
 0000666B  56				push	ESI 
 0000666C  57				push	EDI 
 0000666D  E8 00000000 E		call	 StringHandling_StringCompare 
 00006672  83 F8 00			cmp	EAX,000000000h
 00006675  0F 9E C0			setle	AL
 00006678  84 C0			test	AL,AL
 0000667A  74 13			jz	OFFSET $L001709
				;{

				;{1576}:Console::WriteLn("name2 <= name3");
 0000667C  8D 05 00001004 R		lea	EAX,OFFSET $S001384
 00006682  6A 00			push	000000000h
 00006684  50				push	EAX 
 00006685  E8 00000000 E		call	 Console_WriteString
 0000668A  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000668F			$L001709:

				;{1580}:if(!(name3 < name2))
 0000668F  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006695  50				push	EAX
 00006696  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 0000669C  5F				pop	EDI
 0000669D  8B F0			mov	ESI,EAX
 0000669F  50				push	EAX
 000066A0  E8 00000000 E		call	 StringHandling_StringLength
 000066A5  50				push	EAX 
 000066A6  56				push	ESI 
 000066A7  57				push	EDI 
 000066A8  E8 00000000 E		call	 StringHandling_StringCompare 
 000066AD  83 F8 00			cmp	EAX,000000000h
 000066B0  0F 9C C0			setl	AL
 000066B3  F7 D8			neg	EAX
 000066B5  F7 D0			not	EAX
 000066B7  84 C0			test	AL,AL
 000066B9  74 13			jz	OFFSET $L001711
				;{

				;{1582}:Console::WriteLn("!(name3 < name2)");
 000066BB  8D 05 0000016D R		lea	EAX,OFFSET $S001385
 000066C1  6A 00			push	000000000h
 000066C3  50				push	EAX 
 000066C4  E8 00000000 E		call	 Console_WriteString
 000066C9  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000066CE			$L001711:

				;{1585}:if(false == !(name2 < name3))
 000066CE  33 C0			xor	EAX,EAX
 000066D0  50				push	EAX
 000066D1  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 000066D7  50				push	EAX
 000066D8  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 000066DE  5F				pop	EDI
 000066DF  8B F0			mov	ESI,EAX
 000066E1  50				push	EAX
 000066E2  E8 00000000 E		call	 StringHandling_StringLength
 000066E7  50				push	EAX 
 000066E8  56				push	ESI 
 000066E9  57				push	EDI 
 000066EA  E8 00000000 E		call	 StringHandling_StringCompare 
 000066EF  83 F8 00			cmp	EAX,000000000h
 000066F2  0F 9C C0			setl	AL
 000066F5  F7 D8			neg	EAX
 000066F7  F7 D0			not	EAX
 000066F9  5A				pop	EDX
 000066FA  38 C2			cmp	DL,AL
 000066FC  0F 94 C0			setz	AL
 000066FF  84 C0			test	AL,AL
 00006701  74 13			jz	OFFSET $L001713
				;{

				;{1587}:Console::WriteLn("false==!(name2 < name3)");
 00006703  8D 05 00000F3C R		lea	EAX,OFFSET $S001386
 00006709  6A 00			push	000000000h
 0000670B  50				push	EAX 
 0000670C  E8 00000000 E		call	 Console_WriteString
 00006711  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006716			$L001713:

				;{1590}:if(name1 == name4)
 00006716  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 0000671C  50				push	EAX
 0000671D  8B 85 FFFFFBF8		mov	EAX,dword ptr [EBP-0408h]
 00006723  5F				pop	EDI
 00006724  8B F0			mov	ESI,EAX
 00006726  50				push	EAX
 00006727  E8 00000000 E		call	 StringHandling_StringLength
 0000672C  50				push	EAX 
 0000672D  56				push	ESI 
 0000672E  57				push	EDI 
 0000672F  E8 00000000 E		call	 StringHandling_StringCompare 
 00006734  83 F8 00			cmp	EAX,000000000h
 00006737  0F 94 C0			setz	AL
 0000673A  84 C0			test	AL,AL
 0000673C  74 13			jz	OFFSET $L001715
				;{

				;{1592}:Console::WriteLn("It's working as designed!");
 0000673E  8D 05 00000AD3 R		lea	EAX,OFFSET $S001387
 00006744  6A 00			push	000000000h
 00006746  50				push	EAX 
 00006747  E8 00000000 E		call	 Console_WriteString
 0000674C  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006751			$L001715:

				;{1595}:if(name1 == name3)
 00006751  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 00006757  50				push	EAX
 00006758  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 0000675E  5F				pop	EDI
 0000675F  8B F0			mov	ESI,EAX
 00006761  50				push	EAX
 00006762  E8 00000000 E		call	 StringHandling_StringLength
 00006767  50				push	EAX 
 00006768  56				push	ESI 
 00006769  57				push	EDI 
 0000676A  E8 00000000 E		call	 StringHandling_StringCompare 
 0000676F  83 F8 00			cmp	EAX,000000000h
 00006772  0F 94 C0			setz	AL
 00006775  84 C0			test	AL,AL
 00006777  74 13			jz	OFFSET $L001717
				;{

				;{1597}:Console::WriteLn("I should never get here!");
 00006779  8D 05 00000A90 R		lea	EAX,OFFSET $S001388
 0000677F  6A 00			push	000000000h
 00006781  50				push	EAX 
 00006782  E8 00000000 E		call	 Console_WriteString
 00006787  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000678C			$L001717:

				;{1600}:if(name1 != name3)
 0000678C  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 00006792  50				push	EAX
 00006793  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006799  5F				pop	EDI
 0000679A  8B F0			mov	ESI,EAX
 0000679C  50				push	EAX
 0000679D  E8 00000000 E		call	 StringHandling_StringLength
 000067A2  50				push	EAX 
 000067A3  56				push	ESI 
 000067A4  57				push	EDI 
 000067A5  E8 00000000 E		call	 StringHandling_StringCompare 
 000067AA  83 F8 00			cmp	EAX,000000000h
 000067AD  0F 95 C0			setnz	AL
 000067B0  84 C0			test	AL,AL
 000067B2  74 13			jz	OFFSET $L001719
				;{

				;{1602}:Console::WriteLn("Yes (name1 != name3)!");
 000067B4  8D 05 00000D89 R		lea	EAX,OFFSET $S001389
 000067BA  6A 00			push	000000000h
 000067BC  50				push	EAX 
 000067BD  E8 00000000 E		call	 Console_WriteString
 000067C2  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000067C7			$L001719:

				;{1606}:UnitTesting::TestIntegers::bigValue*= 4;
 000067C7  B8 00000004			mov	EAX,000000004h
 000067CC  99				cdq	
 000067CD  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 000067D3  52				push	EDX
 000067D4  50				push	EAX 
 000067D5  DF 2C 24			fild	qword ptr [ESP]
 000067D8  DF 2B			fild	qword ptr [EBX]
 000067DA  D8 C9			fmul	st,st(1)
 000067DC  DF 3C 24			fistp	qword ptr [ESP]
 000067DF  58				pop	EAX
 000067E0  5A				pop	EDX 
 000067E1  89 53 04			mov	dword ptr [EBX+4],EDX
 000067E4  89 03			mov	dword ptr [EBX],EAX 

				;{1609}:UnitTesting::TestIntegers::bigValue/= 4;
 000067E6  B8 00000004			mov	EAX,000000004h
 000067EB  99				cdq	
 000067EC  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 000067F2  52				push	EDX
 000067F3  50				push	EAX 
 000067F4  DF 2C 24			fild	qword ptr [ESP]
 000067F7  DF 2B			fild	qword ptr [EBX]
 000067F9  D8 F1			fdiv	st,st(1)
 000067FB  D9 FC			frndint
 000067FD  DF 3C 24			fistp	qword ptr [ESP]
 00006800  58				pop	EAX
 00006801  5A				pop	EDX 
 00006802  89 53 04			mov	dword ptr [EBX+4],EDX
 00006805  89 03			mov	dword ptr [EBX],EAX 

				;{1612}:UnitTesting::TestIntegers::bigValue+= 1024;
 00006807  B8 00000400			mov	EAX,000000400h
 0000680C  F8				clc	
 0000680D  99				cdq	
 0000680E  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 00006814  01 03			add	dword ptr [EBX],EAX
 00006816  11 53 04			adc	dword ptr [EBX+4],EDX

				;{1615}:UnitTesting::TestIntegers::bigValue-= 1024;
 00006819  B8 00000400			mov	EAX,000000400h
 0000681E  F8				clc	
 0000681F  99				cdq	
 00006820  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 00006826  29 03			sub	dword ptr [EBX],EAX
 00006828  19 53 04			sbb	dword ptr [EBX+4],EDX

				;{1618}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Circle");
 0000682B  8D 05 000007DB R		lea	EAX,OFFSET $S000670
 00006831  50				push	EAX
 00006832  E8 FFFFAA4D			call	 UnitTesting_ShapeFactoryCreator_Create
 00006837  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 0000683D  89 03			mov	dword ptr [EBX],EAX

				;{1620}:obj_ptr.Draw();
 0000683F  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006845  8B 11			mov	EDX,dword ptr [ECX]
 00006847  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{1622}:visitor;

				;{1623}:visitor.Visit(obj_ptr);
 0000684A  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 00006850  50				push	EAX
 00006851  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 00006857  E8 FFFFDCDD			call	 UnitTesting_Visitor_Visit

				;{1625}:circl= dynamic_cast(obj_ptr);
 0000685C  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 00006862  8D 9D FFFFFBEC		lea	EBX,dword ptr [EBP-0414h]
 00006868  89 03			mov	dword ptr [EBX],EAX

				;{1627}:circl= dynamic_cast(UnitTesting::Circle, obj_ptr);
 0000686A  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 00006870  8D 9D FFFFFBEC		lea	EBX,dword ptr [EBP-0414h]
 00006876  89 03			mov	dword ptr [EBX],EAX

				;{1632}:circl.DrawSphere();
 00006878  8B 8D FFFFFBEC		mov	ECX,dword ptr [EBP-1044]
 0000687E  8B 11			mov	EDX,dword ptr [ECX]
 00006880  FF 52 14			call	dword ptr [EDX+0014h]

				;{1634}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 00006883  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006889  8B F1			mov	ESI,ECX
 0000688B  85 C9			test	ECX,ECX
 0000688D  74 05			jz	OFFSET $L001722
 0000688F  8B 01			mov	EAX,dword ptr [ECX] 
 00006891  FF 50 10			call	dword ptr [EAX+0010h]
 00006894			$L001722:
 00006894  56				push	ESI
 00006895  E8 00000000 E		call	 System_Memory_Destroy

				;{1638}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Square");
 0000689A  8D 05 00000BE2 R		lea	EAX,OFFSET $S000696
 000068A0  50				push	EAX
 000068A1  E8 FFFFA9DE			call	 UnitTesting_ShapeFactoryCreator_Create
 000068A6  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 000068AC  89 03			mov	dword ptr [EBX],EAX

				;{1639}:visitor.Visit(obj_ptr);
 000068AE  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 000068B4  50				push	EAX
 000068B5  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 000068BB  E8 FFFFDC79			call	 UnitTesting_Visitor_Visit

				;{1641}:destroy obj_ptr;
 000068C0  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 000068C6  8B F1			mov	ESI,ECX
 000068C8  85 C9			test	ECX,ECX
 000068CA  74 05			jz	OFFSET $L001724
 000068CC  8B 01			mov	EAX,dword ptr [ECX] 
 000068CE  FF 50 10			call	dword ptr [EAX+0010h]
 000068D1			$L001724:
 000068D1  56				push	ESI
 000068D2  E8 00000000 E		call	 System_Memory_Destroy

				;{1643}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Triangle");
 000068D7  8D 05 00000D80 R		lea	EAX,OFFSET $S000716
 000068DD  50				push	EAX
 000068DE  E8 FFFFA9A1			call	 UnitTesting_ShapeFactoryCreator_Create
 000068E3  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 000068E9  89 03			mov	dword ptr [EBX],EAX

				;{1644}:visitor.Visit(obj_ptr);
 000068EB  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 000068F1  50				push	EAX
 000068F2  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 000068F8  E8 FFFFDC3C			call	 UnitTesting_Visitor_Visit

				;{1646}:destroy obj_ptr;
 000068FD  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006903  8B F1			mov	ESI,ECX
 00006905  85 C9			test	ECX,ECX
 00006907  74 05			jz	OFFSET $L001726
 00006909  8B 01			mov	EAX,dword ptr [ECX] 
 0000690B  FF 50 10			call	dword ptr [EAX+0010h]
 0000690E			$L001726:
 0000690E  56				push	ESI
 0000690F  E8 00000000 E		call	 System_Memory_Destroy

				;{1649}:testProp;
 00006914  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 0000691A  E8 FFFFD6BE			call	 UnitTesting_TestProperties

				;{1651}:shapes= new UnitTesting::Circle[20];
 0000691F  B8 00000014			mov	EAX,000000014h
 00006924  6B C0 0C			imul	EAX,00000000Ch
 00006927  8D 58 04			lea	EBX,dword ptr [EAX+4]
 0000692A  53				push	EBX
 0000692B  8B D8			mov	EBX,EAX
 0000692D  E8 00000000 E		call	 System_Memory_New
 00006932  85 C0			test	EAX,EAX
 00006934  74 14			jz	 $L001727
 00006936  8B F0			mov	ESI,EAX 
 00006938  8D 3E			lea	EDI,dword ptr [ESI]
 0000693A  8B CB			mov	ECX,EBX 
 0000693C  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00006941  F3/ AA			rep stos	byte ptr [EDI]
 00006943  89 1E			mov	dword ptr [ESI],EBX 
 00006945  83 C6 04			add	ESI,000000004h
 00006948  EB 02			jmp	 $L001728
 0000694A			$L001727:
 0000694A  33 F6			xor	ESI,ESI
 0000694C			$L001728:
 0000694C  89 B5 FFFFFB9C		mov	dword ptr [EBP-0464h],ESI 
 00006952  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00006955  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00006958  8B DE			mov	EBX,ESI 
 0000695A			$L001729:
 0000695A  8B CB			mov	ECX,EBX 
 0000695C  E8 FFFF9DDE			call	 UnitTesting_Circle
 00006961  83 C3 0C			add	EBX,00000000Ch 
 00006964  3B DF			cmp	EBX,EDI
 00006966  75 F2			jnz	OFFSET $L001729
 00006968  8B C6			mov	EAX,ESI 

				;{1652}:testProp.Shapes= shapes;
 0000696A  8B 85 FFFFFB9C		mov	EAX,dword ptr [EBP-1124]
 00006970  50				push	EAX
 00006971  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 00006977  E8 FFFFD2A6			call	 UnitTesting_TestProperties_put_Shapes

				;{1654}:sorter;

				;{1655}:n= 10;
 0000697C  B8 0000000A			mov	EAX,00000000Ah
 00006981  89 45 AC			mov	dword ptr [EBP-0054h],EAX

				;{1656}:array= new UnitTesting::DoubleProxy[n];
 00006984  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006987  6B C0 0C			imul	EAX,00000000Ch
 0000698A  8D 58 04			lea	EBX,dword ptr [EAX+4]
 0000698D  53				push	EBX
 0000698E  8B D8			mov	EBX,EAX
 00006990  E8 00000000 E		call	 System_Memory_New
 00006995  85 C0			test	EAX,EAX
 00006997  74 14			jz	 $L001730
 00006999  8B F0			mov	ESI,EAX 
 0000699B  8D 3E			lea	EDI,dword ptr [ESI]
 0000699D  8B CB			mov	ECX,EBX 
 0000699F  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000069A4  F3/ AA			rep stos	byte ptr [EDI]
 000069A6  89 1E			mov	dword ptr [ESI],EBX 
 000069A8  83 C6 04			add	ESI,000000004h
 000069AB  EB 02			jmp	 $L001731
 000069AD			$L001730:
 000069AD  33 F6			xor	ESI,ESI
 000069AF			$L001731:
 000069AF  89 B5 FFFFFB94		mov	dword ptr [EBP-046Ch],ESI 
 000069B5  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 000069B8  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000069BB  8B DE			mov	EBX,ESI 
 000069BD			$L001732:
 000069BD  8B CB			mov	ECX,EBX 
 000069BF  E8 FFFF9E32			call	 UnitTesting_DoubleProxy
 000069C4  83 C3 0C			add	EBX,00000000Ch 
 000069C7  3B DF			cmp	EBX,EDI
 000069C9  75 F2			jnz	OFFSET $L001732
 000069CB  8B C6			mov	EAX,ESI 

				;{1658}:array[0].val= 19.2;
 000069CD  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 000069D3  50				push	EAX
 000069D4  33 C0			xor	EAX,EAX
 000069D6  5E				pop	ESI
 000069D7  6B C0 0C			imul	EAX,00000000Ch
 000069DA  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000069DD  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000069E0  50				push	EAX
 000069E1  BA 33333334			mov	EDX,033333334h
 000069E6  B8 40333333			mov	EAX,040333333h 
 000069EB  50				push	EAX
 000069EC  52				push	EDX 
 000069ED  DD C0			ffree	st
 000069EF  DD 04 24			fld	qword ptr [ESP]
 000069F2  5A				pop	EDX
 000069F3  58				pop	EAX 
 000069F4  5B				pop	EBX
 000069F5  DD 1B			fstp	qword ptr [EBX]

				;{1659}:array[1].val= 3.2345;
 000069F7  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 000069FD  50				push	EAX
 000069FE  B8 00000001			mov	EAX,000000001h
 00006A03  5E				pop	ESI
 00006A04  6B C0 0C			imul	EAX,00000000Ch
 00006A07  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A0A  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A0D  50				push	EAX
 00006A0E  BA 89374BC7			mov	EDX,089374BC7h
 00006A13  B8 4009E041			mov	EAX,04009E041h 
 00006A18  50				push	EAX
 00006A19  52				push	EDX 
 00006A1A  DD C0			ffree	st
 00006A1C  DD 04 24			fld	qword ptr [ESP]
 00006A1F  5A				pop	EDX
 00006A20  58				pop	EAX 
 00006A21  5B				pop	EBX
 00006A22  DD 1B			fstp	qword ptr [EBX]

				;{1660}:array[2].val= 6.3456;
 00006A24  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A2A  50				push	EAX
 00006A2B  B8 00000002			mov	EAX,000000002h
 00006A30  5E				pop	ESI
 00006A31  6B C0 0C			imul	EAX,00000000Ch
 00006A34  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A37  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A3A  50				push	EAX
 00006A3B  BA F765FD8B			mov	EDX,0F765FD8Bh
 00006A40  B8 401961E4			mov	EAX,0401961E4h 
 00006A45  50				push	EAX
 00006A46  52				push	EDX 
 00006A47  DD C0			ffree	st
 00006A49  DD 04 24			fld	qword ptr [ESP]
 00006A4C  5A				pop	EDX
 00006A4D  58				pop	EAX 
 00006A4E  5B				pop	EBX
 00006A4F  DD 1B			fstp	qword ptr [EBX]

				;{1661}:array[3].val= 11.5676;
 00006A51  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A57  50				push	EAX
 00006A58  B8 00000003			mov	EAX,000000003h
 00006A5D  5E				pop	ESI
 00006A5E  6B C0 0C			imul	EAX,00000000Ch
 00006A61  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A64  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A67  50				push	EAX
 00006A68  BA 779A6B51			mov	EDX,0779A6B51h
 00006A6D  B8 4027229C			mov	EAX,04027229Ch 
 00006A72  50				push	EAX
 00006A73  52				push	EDX 
 00006A74  DD C0			ffree	st
 00006A76  DD 04 24			fld	qword ptr [ESP]
 00006A79  5A				pop	EDX
 00006A7A  58				pop	EAX 
 00006A7B  5B				pop	EBX
 00006A7C  DD 1B			fstp	qword ptr [EBX]

				;{1662}:array[4].val= 7.2345;
 00006A7E  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A84  50				push	EAX
 00006A85  B8 00000004			mov	EAX,000000004h
 00006A8A  5E				pop	ESI
 00006A8B  6B C0 0C			imul	EAX,00000000Ch
 00006A8E  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A91  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A94  50				push	EAX
 00006A95  BA C49BA5E4			mov	EDX,0C49BA5E4h
 00006A9A  B8 401CF020			mov	EAX,0401CF020h 
 00006A9F  50				push	EAX
 00006AA0  52				push	EDX 
 00006AA1  DD C0			ffree	st
 00006AA3  DD 04 24			fld	qword ptr [ESP]
 00006AA6  5A				pop	EDX
 00006AA7  58				pop	EAX 
 00006AA8  5B				pop	EBX
 00006AA9  DD 1B			fstp	qword ptr [EBX]

				;{1663}:array[5].val= 12.4567;
 00006AAB  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006AB1  50				push	EAX
 00006AB2  B8 00000005			mov	EAX,000000005h
 00006AB7  5E				pop	ESI
 00006AB8  6B C0 0C			imul	EAX,00000000Ch
 00006ABB  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006ABE  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006AC1  50				push	EAX
 00006AC2  BA 95182A9A			mov	EDX,095182A9Ah
 00006AC7  B8 4028E9D4			mov	EAX,04028E9D4h 
 00006ACC  50				push	EAX
 00006ACD  52				push	EDX 
 00006ACE  DD C0			ffree	st
 00006AD0  DD 04 24			fld	qword ptr [ESP]
 00006AD3  5A				pop	EDX
 00006AD4  58				pop	EAX 
 00006AD5  5B				pop	EBX
 00006AD6  DD 1B			fstp	qword ptr [EBX]

				;{1664}:array[6].val= 9.2345;
 00006AD8  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006ADE  50				push	EAX
 00006ADF  B8 00000006			mov	EAX,000000006h
 00006AE4  5E				pop	ESI
 00006AE5  6B C0 0C			imul	EAX,00000000Ch
 00006AE8  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006AEB  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006AEE  50				push	EAX
 00006AEF  BA 624DD2F2			mov	EDX,0624DD2F2h
 00006AF4  B8 40227810			mov	EAX,040227810h 
 00006AF9  50				push	EAX
 00006AFA  52				push	EDX 
 00006AFB  DD C0			ffree	st
 00006AFD  DD 04 24			fld	qword ptr [ESP]
 00006B00  5A				pop	EDX
 00006B01  58				pop	EAX 
 00006B02  5B				pop	EBX
 00006B03  DD 1B			fstp	qword ptr [EBX]

				;{1665}:array[7].val= 15.123;
 00006B05  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006B0B  50				push	EAX
 00006B0C  B8 00000007			mov	EAX,000000007h
 00006B11  5E				pop	ESI
 00006B12  6B C0 0C			imul	EAX,00000000Ch
 00006B15  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006B18  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006B1B  50				push	EAX
 00006B1C  BA DB22D0E6			mov	EDX,0DB22D0E6h
 00006B21  B8 402E3EF9			mov	EAX,0402E3EF9h 
 00006B26  50				push	EAX
 00006B27  52				push	EDX 
 00006B28  DD C0			ffree	st
 00006B2A  DD 04 24			fld	qword ptr [ESP]
 00006B2D  5A				pop	EDX
 00006B2E  58				pop	EAX 
 00006B2F  5B				pop	EBX
 00006B30  DD 1B			fstp	qword ptr [EBX]

				;{1666}:array[8].val= 1.2;
 00006B32  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006B38  50				push	EAX
 00006B39  B8 00000008			mov	EAX,000000008h
 00006B3E  5E				pop	ESI
 00006B3F  6B C0 0C			imul	EAX,00000000Ch
 00006B42  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006B45  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006B48  50				push	EAX
 00006B49  BA 33333334			mov	EDX,033333334h
 00006B4E  B8 3FF33333			mov	EAX,03FF33333h 
 00006B53  50				push	EAX
 00006B54  52				push	EDX 
 00006B55  DD C0			ffree	st
 00006B57  DD 04 24			fld	qword ptr [ESP]
 00006B5A  5A				pop	EDX
 00006B5B  58				pop	EAX 
 00006B5C  5B				pop	EBX
 00006B5D  DD 1B			fstp	qword ptr [EBX]

				;{1667}:array[9].val= 18.1234;
 00006B5F  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006B65  50				push	EAX
 00006B66  B8 00000009			mov	EAX,000000009h
 00006B6B  5E				pop	ESI
 00006B6C  6B C0 0C			imul	EAX,00000000Ch
 00006B6F  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006B72  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006B75  50				push	EAX
 00006B76  BA 2474538F			mov	EDX,02474538Fh
 00006B7B  B8 40321F97			mov	EAX,040321F97h 
 00006B80  50				push	EAX
 00006B81  52				push	EDX 
 00006B82  DD C0			ffree	st
 00006B84  DD 04 24			fld	qword ptr [ESP]
 00006B87  5A				pop	EDX
 00006B88  58				pop	EAX 
 00006B89  5B				pop	EBX
 00006B8A  DD 1B			fstp	qword ptr [EBX]

				;{1669}:for(index= 0; index < n; index++ )
 00006B8C  33 C0			xor	EAX,EAX
 00006B8E  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006B91  EB 06			jmp	OFFSET $L001733
 00006B93			$L001734:
 00006B93  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006B96  FF 45 A8			inc	dword ptr [EBP-88]
 00006B99			$L001733:
 00006B99  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006B9C  50				push	EAX
 00006B9D  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006BA0  5A				pop	EDX
 00006BA1  3B D0			cmp	EDX,EAX
 00006BA3  0F 9C C0			setl	AL
 00006BA6  84 C0			test	AL,AL
 00006BA8  74 4A			jz	OFFSET $L001735

				;{1670}:Console::WriteLn("array[", index, "]= ", array[index].val);
 00006BAA  8D 05 00000E81 R		lea	EAX,OFFSET $S001408
 00006BB0  6A 00			push	000000000h
 00006BB2  50				push	EAX 
 00006BB3  E8 00000000 E		call	 Console_WriteString
 00006BB8  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006BBB  50				push	EAX 
 00006BBC  E8 00000000 E		call	 Console_WriteInteger 
 00006BC1  8D 05 00000DCC R		lea	EAX,OFFSET $S001201
 00006BC7  6A 00			push	000000000h 
 00006BC9  50				push	EAX 
 00006BCA  E8 00000000 E		call	 Console_WriteString 
 00006BCF  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006BD5  50				push	EAX
 00006BD6  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006BD9  5E				pop	ESI
 00006BDA  6B C0 0C			imul	EAX,00000000Ch
 00006BDD  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006BE0  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00006BE3  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00006BE6  50				push	EAX 
 00006BE7  52				push	EDX 
 00006BE8  E8 00000000 E		call	 Console_WriteDouble 
 00006BED  E8 00000000 E		call	 Console_WriteCrLf 
 00006BF2  EB 9F			jmp	OFFSET $L001734 
 00006BF4			$L001735:

				;{1672}:sorter.PrintObject(array[9]);
 00006BF4  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006BFA  50				push	EAX
 00006BFB  B8 00000009			mov	EAX,000000009h
 00006C00  5E				pop	ESI
 00006C01  6B C0 0C			imul	EAX,00000000Ch
 00006C04  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006C07  51				push	ECX
 00006C08  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006C0E  E8 FFFFA7FE			call	 UnitTesting_SortDoubleProxy_PrintObject

				;{1674}:swapper;
 00006C13  8D 8D FFFFFB90		lea	ECX,dword ptr [EBP-0470h]
 00006C19  E8 FFFF9EA2			call	 UnitTesting_DoubleSwapper

				;{1676}:sorter.Sort(array, n, swapper);
 00006C1E  8D 85 FFFFFB90		lea	EAX,dword ptr [EBP-0470h]
 00006C24  50				push	EAX
 00006C25  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006C28  50				push	EAX 
 00006C29  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006C2F  50				push	EAX
 00006C30  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006C36  E8 FFFFA826			call	 UnitTesting_SortDoubleProxy_Sort

				;{1678}:sorter.SortEx(array, n, swapper);
 00006C3B  8D 85 FFFFFB90		lea	EAX,dword ptr [EBP-0470h]
 00006C41  50				push	EAX
 00006C42  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006C45  50				push	EAX 
 00006C46  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006C4C  50				push	EAX
 00006C4D  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006C53  E8 FFFFA9E5			call	 UnitTesting_SortDoubleProxy_SortEx

				;{1680}:Console::WriteLn("Now sorted:");
 00006C58  8D 05 00000B22 R		lea	EAX,OFFSET $S001410
 00006C5E  6A 00			push	000000000h
 00006C60  50				push	EAX 
 00006C61  E8 00000000 E		call	 Console_WriteString
 00006C66  E8 00000000 E		call	 Console_WriteCrLf 

				;{1682}:for(index= 0; index < n; index++ )
 00006C6B  33 C0			xor	EAX,EAX
 00006C6D  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006C70  EB 06			jmp	OFFSET $L001736
 00006C72			$L001737:
 00006C72  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006C75  FF 45 A8			inc	dword ptr [EBP-88]
 00006C78			$L001736:
 00006C78  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006C7B  50				push	EAX
 00006C7C  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006C7F  5A				pop	EDX
 00006C80  3B D0			cmp	EDX,EAX
 00006C82  0F 9C C0			setl	AL
 00006C85  84 C0			test	AL,AL
 00006C87  74 4A			jz	OFFSET $L001738

				;{1683}:Console::WriteLn("array[", index, "]= ", array[index].val);
 00006C89  8D 05 00000E81 R		lea	EAX,OFFSET $S001408
 00006C8F  6A 00			push	000000000h
 00006C91  50				push	EAX 
 00006C92  E8 00000000 E		call	 Console_WriteString
 00006C97  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006C9A  50				push	EAX 
 00006C9B  E8 00000000 E		call	 Console_WriteInteger 
 00006CA0  8D 05 00000DCC R		lea	EAX,OFFSET $S001201
 00006CA6  6A 00			push	000000000h 
 00006CA8  50				push	EAX 
 00006CA9  E8 00000000 E		call	 Console_WriteString 
 00006CAE  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006CB4  50				push	EAX
 00006CB5  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006CB8  5E				pop	ESI
 00006CB9  6B C0 0C			imul	EAX,00000000Ch
 00006CBC  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006CBF  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00006CC2  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00006CC5  50				push	EAX 
 00006CC6  52				push	EDX 
 00006CC7  E8 00000000 E		call	 Console_WriteDouble 
 00006CCC  E8 00000000 E		call	 Console_WriteCrLf 
 00006CD1  EB 9F			jmp	OFFSET $L001737 
 00006CD3			$L001738:

				;{1685}:sorter.PrintObject(array[9]);
 00006CD3  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006CD9  50				push	EAX
 00006CDA  B8 00000009			mov	EAX,000000009h
 00006CDF  5E				pop	ESI
 00006CE0  6B C0 0C			imul	EAX,00000000Ch
 00006CE3  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006CE6  51				push	ECX
 00006CE7  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006CED  E8 FFFFA71F			call	 UnitTesting_SortDoubleProxy_PrintObject

				;{1687}:destroy []array;
 00006CF2  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006CF8  85 C0			test	EAX,EAX
 00006CFA  74 25			jz	OFFSET $L001739
 00006CFC  8B F0			mov	ESI,EAX
 00006CFE  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00006D01  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00006D04  8B DE			mov	EBX,ESI 
 00006D06			$L001740:
 00006D06  8B CB			mov	ECX,EBX 
 00006D08  85 C9			test	ECX,ECX
 00006D0A  74 05			jz	OFFSET $L001741
 00006D0C  8B 01			mov	EAX,dword ptr [ECX]
 00006D0E  FF 50 0C			call	dword ptr [EAX+000Ch]
 00006D11			$L001741:
 00006D11  83 C3 0C			add	EBX,00000000Ch
 00006D14  3B DF			cmp	EBX,EDI
 00006D16  75 EE			jnz	OFFSET $L001740

 00006D18  83 C6 FC			add	ESI,0FFFFFFFCh
 00006D1B  56				push	ESI
 00006D1C  E8 00000000 E		call	 System_Memory_Destroy
 00006D21			$L001739:

				;{1690}:arr;
 00006D21  8D 85 FFFFFB40		lea	EAX,dword ptr [EBP-04C0h]

				;{1694}:arr[0]= 19.2;
 00006D27  33 C0			xor	EAX,EAX
 00006D29  6B C0 08			imul	EAX,EAX,000000008h
 00006D2C  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D33  50				push	EAX
 00006D34  BA 33333334			mov	EDX,033333334h
 00006D39  B8 40333333			mov	EAX,040333333h 
 00006D3E  50				push	EAX
 00006D3F  52				push	EDX 
 00006D40  DD C0			ffree	st
 00006D42  DD 04 24			fld	qword ptr [ESP]
 00006D45  5A				pop	EDX
 00006D46  58				pop	EAX 
 00006D47  5B				pop	EBX
 00006D48  DD 1B			fstp	qword ptr [EBX]

				;{1695}:arr[1]= 3.2345;
 00006D4A  B8 00000001			mov	EAX,000000001h
 00006D4F  6B C0 08			imul	EAX,EAX,000000008h
 00006D52  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D59  50				push	EAX
 00006D5A  BA 89374BC7			mov	EDX,089374BC7h
 00006D5F  B8 4009E041			mov	EAX,04009E041h 
 00006D64  50				push	EAX
 00006D65  52				push	EDX 
 00006D66  DD C0			ffree	st
 00006D68  DD 04 24			fld	qword ptr [ESP]
 00006D6B  5A				pop	EDX
 00006D6C  58				pop	EAX 
 00006D6D  5B				pop	EBX
 00006D6E  DD 1B			fstp	qword ptr [EBX]

				;{1696}:arr[2]= 6.3456;
 00006D70  B8 00000002			mov	EAX,000000002h
 00006D75  6B C0 08			imul	EAX,EAX,000000008h
 00006D78  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D7F  50				push	EAX
 00006D80  BA F765FD8B			mov	EDX,0F765FD8Bh
 00006D85  B8 401961E4			mov	EAX,0401961E4h 
 00006D8A  50				push	EAX
 00006D8B  52				push	EDX 
 00006D8C  DD C0			ffree	st
 00006D8E  DD 04 24			fld	qword ptr [ESP]
 00006D91  5A				pop	EDX
 00006D92  58				pop	EAX 
 00006D93  5B				pop	EBX
 00006D94  DD 1B			fstp	qword ptr [EBX]

				;{1697}:arr[3]= 11.5676;
 00006D96  B8 00000003			mov	EAX,000000003h
 00006D9B  6B C0 08			imul	EAX,EAX,000000008h
 00006D9E  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DA5  50				push	EAX
 00006DA6  BA 779A6B51			mov	EDX,0779A6B51h
 00006DAB  B8 4027229C			mov	EAX,04027229Ch 
 00006DB0  50				push	EAX
 00006DB1  52				push	EDX 
 00006DB2  DD C0			ffree	st
 00006DB4  DD 04 24			fld	qword ptr [ESP]
 00006DB7  5A				pop	EDX
 00006DB8  58				pop	EAX 
 00006DB9  5B				pop	EBX
 00006DBA  DD 1B			fstp	qword ptr [EBX]

				;{1698}:arr[4]= 7.2345;
 00006DBC  B8 00000004			mov	EAX,000000004h
 00006DC1  6B C0 08			imul	EAX,EAX,000000008h
 00006DC4  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DCB  50				push	EAX
 00006DCC  BA C49BA5E4			mov	EDX,0C49BA5E4h
 00006DD1  B8 401CF020			mov	EAX,0401CF020h 
 00006DD6  50				push	EAX
 00006DD7  52				push	EDX 
 00006DD8  DD C0			ffree	st
 00006DDA  DD 04 24			fld	qword ptr [ESP]
 00006DDD  5A				pop	EDX
 00006DDE  58				pop	EAX 
 00006DDF  5B				pop	EBX
 00006DE0  DD 1B			fstp	qword ptr [EBX]

				;{1699}:arr[5]= 12.4567;
 00006DE2  B8 00000005			mov	EAX,000000005h
 00006DE7  6B C0 08			imul	EAX,EAX,000000008h
 00006DEA  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DF1  50				push	EAX
 00006DF2  BA 95182A9A			mov	EDX,095182A9Ah
 00006DF7  B8 4028E9D4			mov	EAX,04028E9D4h 
 00006DFC  50				push	EAX
 00006DFD  52				push	EDX 
 00006DFE  DD C0			ffree	st
 00006E00  DD 04 24			fld	qword ptr [ESP]
 00006E03  5A				pop	EDX
 00006E04  58				pop	EAX 
 00006E05  5B				pop	EBX
 00006E06  DD 1B			fstp	qword ptr [EBX]

				;{1700}:arr[6]= 9.2345;
 00006E08  B8 00000006			mov	EAX,000000006h
 00006E0D  6B C0 08			imul	EAX,EAX,000000008h
 00006E10  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E17  50				push	EAX
 00006E18  BA 624DD2F2			mov	EDX,0624DD2F2h
 00006E1D  B8 40227810			mov	EAX,040227810h 
 00006E22  50				push	EAX
 00006E23  52				push	EDX 
 00006E24  DD C0			ffree	st
 00006E26  DD 04 24			fld	qword ptr [ESP]
 00006E29  5A				pop	EDX
 00006E2A  58				pop	EAX 
 00006E2B  5B				pop	EBX
 00006E2C  DD 1B			fstp	qword ptr [EBX]

				;{1701}:arr[7]= 15.123;
 00006E2E  B8 00000007			mov	EAX,000000007h
 00006E33  6B C0 08			imul	EAX,EAX,000000008h
 00006E36  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E3D  50				push	EAX
 00006E3E  BA DB22D0E6			mov	EDX,0DB22D0E6h
 00006E43  B8 402E3EF9			mov	EAX,0402E3EF9h 
 00006E48  50				push	EAX
 00006E49  52				push	EDX 
 00006E4A  DD C0			ffree	st
 00006E4C  DD 04 24			fld	qword ptr [ESP]
 00006E4F  5A				pop	EDX
 00006E50  58				pop	EAX 
 00006E51  5B				pop	EBX
 00006E52  DD 1B			fstp	qword ptr [EBX]

				;{1702}:arr[8]= 1.2;
 00006E54  B8 00000008			mov	EAX,000000008h
 00006E59  6B C0 08			imul	EAX,EAX,000000008h
 00006E5C  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E63  50				push	EAX
 00006E64  BA 33333334			mov	EDX,033333334h
 00006E69  B8 3FF33333			mov	EAX,03FF33333h 
 00006E6E  50				push	EAX
 00006E6F  52				push	EDX 
 00006E70  DD C0			ffree	st
 00006E72  DD 04 24			fld	qword ptr [ESP]
 00006E75  5A				pop	EDX
 00006E76  58				pop	EAX 
 00006E77  5B				pop	EBX
 00006E78  DD 1B			fstp	qword ptr [EBX]

				;{1703}:arr[9]= 18.1234;
 00006E7A  B8 00000009			mov	EAX,000000009h
 00006E7F  6B C0 08			imul	EAX,EAX,000000008h
 00006E82  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E89  50				push	EAX
 00006E8A  BA 2474538F			mov	EDX,02474538Fh
 00006E8F  B8 40321F97			mov	EAX,040321F97h 
 00006E94  50				push	EAX
 00006E95  52				push	EDX 
 00006E96  DD C0			ffree	st
 00006E98  DD 04 24			fld	qword ptr [ESP]
 00006E9B  5A				pop	EDX
 00006E9C  58				pop	EAX 
 00006E9D  5B				pop	EBX
 00006E9E  DD 1B			fstp	qword ptr [EBX]

				;{1705}:for(index= 0; index < nn; index++ )
 00006EA0  33 C0			xor	EAX,EAX
 00006EA2  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006EA5  EB 06			jmp	OFFSET $L001742
 00006EA7			$L001743:
 00006EA7  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006EAA  FF 45 A8			inc	dword ptr [EBP-88]
 00006EAD			$L001742:
 00006EAD  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006EB0  50				push	EAX
 00006EB1  B8 0000000A			mov	EAX,00000000Ah
 00006EB6  5A				pop	EDX
 00006EB7  3B D0			cmp	EDX,EAX
 00006EB9  0F 9C C0			setl	AL
 00006EBC  84 C0			test	AL,AL
 00006EBE  74 4A			jz	OFFSET $L001744

				;{1706}:Console::WriteLn("array[", index, "]= ", arr[index]);
 00006EC0  8D 05 00000E81 R		lea	EAX,OFFSET $S001408
 00006EC6  6A 00			push	000000000h
 00006EC8  50				push	EAX 
 00006EC9  E8 00000000 E		call	 Console_WriteString
 00006ECE  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006ED1  50				push	EAX 
 00006ED2  E8 00000000 E		call	 Console_WriteInteger 
 00006ED7  8D 05 00000DCC R		lea	EAX,OFFSET $S001201
 00006EDD  6A 00			push	000000000h 
 00006EDF  50				push	EAX 
 00006EE0  E8 00000000 E		call	 Console_WriteString 
 00006EE5  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006EE8  6B C0 08			imul	EAX,EAX,000000008h
 00006EEB  8B 94 28			mov	EDX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006EF2  83 C0 04			add	EAX,000000004h ;low part
 00006EF5  8B 84 28			mov	EAX,dword ptr [EBP+EAX-04C0h] 
	   FFFFFB40
 00006EFC  50				push	EAX 
 00006EFD  52				push	EDX 
 00006EFE  E8 00000000 E		call	 Console_WriteDouble 
 00006F03  E8 00000000 E		call	 Console_WriteCrLf 
 00006F08  EB 9D			jmp	OFFSET $L001743 
 00006F0A			$L001744:

				;{1708}:sorter.Sort2(arr, n);
 00006F0A  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006F0D  50	push	EAX 
 00006F0E  8D 85 FFFFFB40		lea	EAX,dword ptr [EBP-04C0h]
 00006F14  50				push	EAX
 00006F15  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006F1B  E8 FFFFA627			call	 UnitTesting_SortDoubleProxy_Sort2

				;{1710}:Console::WriteLn("Now sorted:");
 00006F20  8D 05 00000B22 R		lea	EAX,OFFSET $S001410
 00006F26  6A 00			push	000000000h
 00006F28  50				push	EAX 
 00006F29  E8 00000000 E		call	 Console_WriteString
 00006F2E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1712}:for(index= 0; index < nn; index++ )
 00006F33  33 C0			xor	EAX,EAX
 00006F35  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006F38  EB 06			jmp	OFFSET $L001745
 00006F3A			$L001746:
 00006F3A  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006F3D  FF 45 A8			inc	dword ptr [EBP-88]
 00006F40			$L001745:
 00006F40  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006F43  50				push	EAX
 00006F44  B8 0000000A			mov	EAX,00000000Ah
 00006F49  5A				pop	EDX
 00006F4A  3B D0			cmp	EDX,EAX
 00006F4C  0F 9C C0			setl	AL
 00006F4F  84 C0			test	AL,AL
 00006F51  74 4A			jz	OFFSET $L001747

				;{1713}:Console::WriteLn("array[", index, "]= ", arr[index]);
 00006F53  8D 05 00000E81 R		lea	EAX,OFFSET $S001408
 00006F59  6A 00			push	000000000h
 00006F5B  50				push	EAX 
 00006F5C  E8 00000000 E		call	 Console_WriteString
 00006F61  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006F64  50				push	EAX 
 00006F65  E8 00000000 E		call	 Console_WriteInteger 
 00006F6A  8D 05 00000DCC R		lea	EAX,OFFSET $S001201
 00006F70  6A 00			push	000000000h 
 00006F72  50				push	EAX 
 00006F73  E8 00000000 E		call	 Console_WriteString 
 00006F78  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006F7B  6B C0 08			imul	EAX,EAX,000000008h
 00006F7E  8B 94 28			mov	EDX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006F85  83 C0 04			add	EAX,000000004h ;low part
 00006F88  8B 84 28			mov	EAX,dword ptr [EBP+EAX-04C0h] 
	   FFFFFB40
 00006F8F  50				push	EAX 
 00006F90  52				push	EDX 
 00006F91  E8 00000000 E		call	 Console_WriteDouble 
 00006F96  E8 00000000 E		call	 Console_WriteCrLf 
 00006F9B  EB 9D			jmp	OFFSET $L001746 
 00006F9D			$L001747:

				;{1716}:Console::WriteLn("\nComputing the PI constant...\n");
 00006F9D  8D 05 00000D9F R		lea	EAX,OFFSET $S001413
 00006FA3  6A 00			push	000000000h
 00006FA5  50				push	EAX 
 00006FA6  E8 00000000 E		call	 Console_WriteString
 00006FAB  E8 00000000 E		call	 Console_WriteCrLf 

				;{1717}:PI= UnitTesting::MonteCarlo::PI(10000000);
 00006FB0  B8 00989680			mov	EAX,000989680h
 00006FB5  50				push	EAX
 00006FB6  E8 FFFF9C97			call	 UnitTesting_MonteCarlo_PI
 00006FBB  50				push	EAX
 00006FBC  52				push	EDX 
 00006FBD  DD C0			ffree	st
 00006FBF  DD 04 24			fld	qword ptr [ESP]
 00006FC2  DD 9D FFFFFB38		fstp	qword ptr [EBP-04C8h]

				;{1718}:Console::WriteLn("The PI value = ", PI, "\n\n");
 00006FC8  5A				pop	EDX
 00006FC9  58				pop	EAX 
 00006FCA  8D 05 00000C90 R		lea	EAX,OFFSET $S001416
 00006FD0  6A 00			push	000000000h
 00006FD2  50				push	EAX 
 00006FD3  E8 00000000 E		call	 Console_WriteString
 00006FD8  8B 95 FFFFFB38		mov	EDX,dword ptr [EBP-04C8h]
 00006FDE  8B 85 FFFFFB3C		mov	EAX,dword ptr [EBP-04C4h] 
 00006FE4  50				push	EAX 
 00006FE5  52				push	EDX 
 00006FE6  E8 00000000 E		call	 Console_WriteDouble 
 00006FEB  8D 05 00000DBE R		lea	EAX,OFFSET $S001417
 00006FF1  6A 00			push	000000000h 
 00006FF3  50				push	EAX 
 00006FF4  E8 00000000 E		call	 Console_WriteString 
 00006FF9  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006FFE			$L001196:
 00006FFE  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 00007004  8B 41 48			mov	EAX,dword ptr [ECX+0048h]
 00007007  FF 10			call	dword ptr [EAX]
 00007009			$L001750:
 00007009  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 0000700F  8B 01			mov	EAX,dword ptr [ECX]
 00007011  FF 50 10			call	dword ptr [EAX+0010h]
 00007014			$L001752:
 00007014  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 0000701A  8B 01			mov	EAX,dword ptr [ECX]
 0000701C  FF 50 10			call	dword ptr [EAX+0010h]
 0000701F			$L001757:
 0000701F  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00007025  8B 01			mov	EAX,dword ptr [ECX]
 00007027  FF 50 10			call	dword ptr [EAX+0010h]
 0000702A			$L001758:
 0000702A  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 00007030  8B 01			mov	EAX,dword ptr [ECX]
 00007032  FF 50 10			call	dword ptr [EAX+0010h]
 00007035			$L001759:
 00007035  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 0000703B  8B 01			mov	EAX,dword ptr [ECX]
 0000703D  FF 50 10			call	dword ptr [EAX+0010h]
 00007040			$L001760:
 00007040  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00007043  E8 FFFFB867			call	 UnitTesting_TestFloatingPoint_Destructor
 00007048			$L001765:
 00007048  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 0000704B  E8 FFFF9AAE			call	 UnitTesting_HelloWorld_Destructor
 00007050			$L001767:

 00007050  5F				pop	EDI
 00007051  5E				pop	ESI 
 00007052  5B				pop	EBX 
 00007053  C9				leave	
 00007054  C2 0008			retn	000000008h
 00007057			UnitTesting_Test1_TestRunner_main ENDP

 00007057			__System_Hpp_Runtime_Init PROC

 00007057  55				push	EBP
 00007058  8B EC			mov	EBP,ESP
 0000705A  51				push	ECX 
 0000705B  53				push	EBX 
 0000705C  56				push	ESI 
 0000705D  57				push	EDI 
 0000705E  E8 00000000 E		call	 GetVersion
 00007063  A3 000011D8 R		mov	 __osver,EAX ;os version
 00007068  A1 000011D8 R		mov	EAX, __osver 
 0000706D  C1 E8 08			shr	EAX,000000008h
 00007070  25 000000FF			and	EAX,0000000FFh
 00007075  A3 000011DC R		mov	 __winminor,EAX ;windows minor
 0000707A  8B 0D 000011D8 R		mov	ECX, __osver 
 00007080  81 E1 000000FF		and	ECX,0000000FFh 
 00007086  89 0D 000011E0 R		mov	 __winmajor,ECX ;windows major
 0000708C  8B 15 000011E0 R		mov	EDX,dword ptr __winmajor 
 00007092  C1 E2 08			shl	EDX,000000008h
 00007095  03 15 000011DC R		add	EDX,dword ptr __winminor
 0000709B  89 15 000011E4 R		mov	dword ptr __winver,EDX ;windows version
 000070A1  A1 000011D8 R		mov	EAX, __osver 
 000070A6  C1 E8 10			shr	EAX,000000010h 
 000070A9  25 0000FFFF			and	EAX,00000FFFFh 
 000070AE  A3 000011D8 R		mov	 __osver,EAX 
 000070B3  8D 1D 0000120C R		lea	EBX,dword ptr ___argc
 000070B9  53				push	EBX
 000070BA  E8 00000000 E		call	 System_GetCommandLineArgv 
 000070BF  A3 00001208 R		mov	dword ptr ___argv,EAX 
 000070C4  50				push	EAX 
 000070C5  8B 0D 0000120C R		mov	ECX,dword ptr ___argc 
 000070CB  51				push	ECX 
 000070CC  E8 FFFFD81A			call	 UnitTesting_Test1_TestRunner_main ;user entry point (stdcall calling convention)
 000070D1  50				push	EAX 
 000070D2  A1 00001208 R		mov	EAX,dword ptr ___argv 
 000070D7  50				push	EAX 
 000070D8  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 000070DD  50				push	EAX 
 000070DE  E8 00000000 E		call	 System_Memory_Free 
 000070E3  E8 00000000 E		call	 System_Exit 

 000070E8  5F				pop	EDI
 000070E9  5E				pop	ESI 
 000070EA  5B				pop	EBX 
 000070EB  C9				leave	
 000070EC  C3				ret	
 000070ED			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 00000000 0000072C R		@@class_vptr_vtbl@@__UnitTesting_Circle	DWORD	OFFSET UnitTesting_Circle_Type,
	   00000640 R
	   000006DE R
	   000006A0 R
	   00000675 R
	   000006BF R
										OFFSET UnitTesting_Circle_ComputeArea,
										OFFSET UnitTesting_Circle_Name,
										OFFSET UnitTesting_Circle_Draw,
										OFFSET UnitTesting_Circle_Destructor,
										OFFSET UnitTesting_Circle_DrawSphere

 00000018 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Shape	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 0000002C 00000880 R		@@class_vptr_vtbl@@__UnitTesting_DoubleProxy	DWORD	OFFSET UnitTesting_DoubleProxy_lessThan,
	   0000082E R
	   00000783 R
	   00000764 R
										OFFSET UnitTesting_DoubleProxy_isEqual,
										OFFSET UnitTesting_DoubleProxy_Swap,
										OFFSET UnitTesting_DoubleProxy_Destructor

 0000003C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_SimpleObject	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   000013DD R
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET UnitTesting_SimpleObject_Destructor

 0000004C 000009EE R		@@class_vptr_vtbl@@__UnitTesting_DoubleSwapper	DWORD	OFFSET UnitTesting_DoubleSwapper_lessThan,
	   000008D2 R
	   00000A48 R
	   00000951 R
										OFFSET UnitTesting_DoubleSwapper_Swap,
										OFFSET UnitTesting_DoubleSwapper_lessThanEx,
										OFFSET UnitTesting_DoubleSwapper_SwapEx

 0000005C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_SwapperObject	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 0000006C 00000ADD R		@@class_vptr_vtbl@@__UnitTesting_HObject	DWORD	OFFSET UnitTesting_HObject_Destructor

 00000070 00000D63 R		@@class_vptr_vtbl@@__UnitTesting_Objects_Array	DWORD	OFFSET UnitTesting_Objects_Array_Destructor,
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall

 0000007C 00000D63 R		@@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles	DWORD	OFFSET UnitTesting_Objects_Array_Destructor,
	   00000ECE R
	   00000DCB R
										OFFSET UnitTesting_Objects_ArrayOfAutomobiles_getAt,
										OFFSET UnitTesting_Objects_ArrayOfAutomobiles_Swap

 00000088 00000EF2 R		@@class_vptr_vtbl@@__UnitTesting_Objects_Automobile	DWORD	OFFSET UnitTesting_Objects_Automobile_Compare

 0000008C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject	DWORD	OFFSET __purecall

 00000090 00001845 R		@@class_vptr_vtbl@@__UnitTesting_Square	DWORD	OFFSET UnitTesting_Square_Type,
	   0000175C R
	   00001831 R
	   000017B9 R
	   0000178E R
										OFFSET UnitTesting_Square_ComputeArea,
										OFFSET UnitTesting_Square_Name,
										OFFSET UnitTesting_Square_Draw,
										OFFSET UnitTesting_Square_Destructor

 000000A4 00003B66 R		@@class_vptr_vtbl@@__UnitTesting_TestProperties	DWORD	OFFSET UnitTesting_TestProperties_Destructor

 000000A8 000041B3 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV	DWORD	OFFSET UnitTesting_TestVirtuals_ExponentialRV_Sample,
	   0000419F R
										OFFSET UnitTesting_TestVirtuals_ExponentialRV_Name

 000000B0 00000000 E		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable	DWORD	OFFSET __purecall,
	   00004225 R
										OFFSET UnitTesting_TestVirtuals_RandomVariable_Name

 000000B8 00004262 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV	DWORD	OFFSET UnitTesting_TestVirtuals_SimpleRV_Sample,
	   0000424E R
										OFFSET UnitTesting_TestVirtuals_SimpleRV_Name

 000000C0 000042A6 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV	DWORD	OFFSET UnitTesting_TestVirtuals_UniformRV_Sample,
	   00004292 R
										OFFSET UnitTesting_TestVirtuals_UniformRV_Name

 000000C8 00004501 R		@@class_vptr_vtbl@@__UnitTesting_Triangle	DWORD	OFFSET UnitTesting_Triangle_Type,
	   000043FB R
	   000044ED R
	   00004475 R
	   00004448 R
	   00004494 R
										OFFSET UnitTesting_Triangle_ComputeArea,
										OFFSET UnitTesting_Triangle_Name,
										OFFSET UnitTesting_Triangle_Draw,
										OFFSET UnitTesting_Triangle_Destructor,
										OFFSET UnitTesting_Triangle_DrawPiramid

 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh
 = 00000001			UnitTesting_TestSwitch_open	=	000000001h
 = 00000002			UnitTesting_TestSwitch_close	=	000000002h
 = 00000003			UnitTesting_TestSwitch_write	=	000000003h
 = 00000004			UnitTesting_TestSwitch_read	=	000000004h
 = 0000000A			UnitTesting_ten	=	00000000Ah
 = FFFFFFF6			UnitTesting_minusten	=	0FFFFFFF6h
 = 00000064			UnitTesting_hundred	=	000000064h
 = 00000050			UnitTesting_max_length	=	000000050h
 000000E0			UnitTesting_max_64	QWORD	00000000002893052h
	   0000000002893052
 000000E8			UnitTesting_max_64_neg	QWORD	0FFFFFFFFFD76CFAEh
	   FFFFFFFFFD76CFAE
 000000F0			UnitTesting_misc1_pi	REAL8	3.141593
	   400921FB82C2BD7F
 000000F8 400D8794		UnitTesting_misc1_e	REAL4	2.211400
 = 0000000A			UnitTesting_misc1_ten_plus	=	00000000Ah
 = 00000061			UnitTesting_misc1_ch1	=	'a'
 = 0000007A			UnitTesting_misc1_ch2	=	'z'
 000000FC 68 65 6C 6C 6F	UnitTesting_misc1_hello	BYTE "hello, world.",0
	   2C 20 77 6F 72
	   6C 64 2E 00
 0000010A 68 75 6D 61 6E	UnitTesting_misc1_hell	BYTE "human",0
	   00
 00000110 6D 69 73 74 61	UnitTesting_misc1_boy	BYTE "mistakes",0
	   6B 65 73 00
 00000119			UnitTesting_misc1_dX	REAL8	4.990000
	   4013F5C28F5C28F6
 00000121			UnitTesting_misc1_dY	REAL8	9.456700
	   4022E9D495182A99

 00000129 20 3D 20 00		$S001224 		BYTE 	" = ",0
 0000012D 20 44 65 67 72	$S001322 		BYTE 	" Degrees.",0
	   65 65 73 2E 00
 00000137 20 52 61 64 69	$S001319 		BYTE 	" Radians.",0
	   61 6E 73 2E 00
 00000141 20 61 73 20 69	$S001264 		BYTE 	" as its value.",0
	   74 73 20 76 61
	   6C 75 65 2E 00
 00000150 20 69 73 20 3D	$S001317 		BYTE 	" is = ",0
	   20 00
 00000157 20 6A 20 3D 20	$S000982 		BYTE 	" j = (4 + (--j))%4 ==",0
	   28 34 20 2B 20
	   28 2D 2D 6A 29
	   29 25 34 20 3D
	   3D 00
 0000016D 21 28 6E 61 6D	$S001385 		BYTE 	"!(name3 < name2)",0
	   65 33 20 3C 20
	   6E 61 6D 65 32
	   29 00
 0000017E 28 2A 29 20 74	$S001082 		BYTE 	"(*) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 00000192 28 2B 29 20 74	$S001072 		BYTE 	"(+) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000001A6 28 2D 29 20 74	$S001077 		BYTE 	"(-) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000001BA 28 31 29 00		$S001148 		BYTE 	"(1)",0
 000001BE 28 31 29 41 20	$S001253 		BYTE 	"(1)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 000001D9 28 31 29 41 20	$S001263 		BYTE 	"(1)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000001FC 28 31 29 41 6E	$S001275 		BYTE 	"(1)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 00000225 28 31 29 41 6E	$S001270 		BYTE 	"(1)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 0000024A 28 32 29 00		$S001150 		BYTE 	"(2)",0
 0000024E 28 32 29 41 20	$S001254 		BYTE 	"(2)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000269 28 32 29 41 20	$S001265 		BYTE 	"(2)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 0000028C 28 32 29 41 6E	$S001276 		BYTE 	"(2)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000002B5 28 32 29 41 6E	$S001271 		BYTE 	"(2)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 000002DA 28 33 29 00		$S001151 		BYTE 	"(3)",0
 000002DE 28 33 29 41 20	$S001255 		BYTE 	"(3)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 000002F9 28 33 29 41 20	$S001266 		BYTE 	"(3)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 0000031C 28 33 29 41 6E	$S001277 		BYTE 	"(3)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 00000345 28 33 29 41 6E	$S001272 		BYTE 	"(3)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 0000036A 28 34 29 41 20	$S001256 		BYTE 	"(4)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000385 28 34 29 41 20	$S001267 		BYTE 	"(4)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000003A8 28 34 29 41 6E	$S001278 		BYTE 	"(4)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000003D1 28 34 29 41 6E	$S001273 		BYTE 	"(4)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 000003F6 28 35 29 41 20	$S001257 		BYTE 	"(5)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000411 28 36 29 41 20	$S001258 		BYTE 	"(6)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000042C 28 61 20 3D 20	$S001047 		BYTE 	"(a = l * w * 0.9) = ",0
	   6C 20 2A 20 77
	   20 2A 20 30 2E
	   39 29 20 3D 20
	   00
 00000441 28 61 20 3D 20	$S001040 		BYTE 	"(a = l * w) =",0
	   6C 20 2A 20 77
	   29 20 3D 00
 0000044F 28 63 6F 70 69	$S001312 		BYTE 	"(copied)xtarget.Width = ",0
	   65 64 29 78 74
	   61 72 67 65 74
	   2E 57 69 64 74
	   68 20 3D 20 00
 00000468 28 64 69 76 29	$S001087 		BYTE 	"(div) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 0000047E 28 64 6F 75 62	$S001231 		BYTE 	"(double)the area is: ",0
	   6C 65 29 74 68
	   65 20 61 72 65
	   61 20 69 73 3A
	   20 00
 00000494 28 69 6E 74 29	$S001230 		BYTE 	"(int)the area is: ",0
	   74 68 65 20 61
	   72 65 61 20 69
	   73 3A 20 00
 000004A7 28 6D 6F 64 29	$S001092 		BYTE 	"(mod) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000004BD 28 6E 6F 6E 65	$S000547 		BYTE 	"(none)",0
	   29 00
 000004C4 28 72 6F 75 6E	$S001097 		BYTE 	"(round(/)) the result is: ",0
	   64 28 2F 29 29
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000004DF 28 77 68 61 74	$S001006 		BYTE 	"(what = (result==1024)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 31 30 32
	   34 29 29 20 09
	   3D 20 00
 000004FB 28 77 68 61 74	$S001004 		BYTE 	"(what = (result==1365.0)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 31 33 36
	   35 2E 30 29 29
	   20 09 3D 20 00
 00000519 28 77 68 61 74	$S001016 		BYTE 	"(what = (result==33335)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 33 33 33
	   33 35 29 29 20
	   09 3D 20 00
 00000536 28 77 68 61 74	$S001014 		BYTE 	"(what = (result==50000)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 35 30 30
	   30 30 29 29 20
	   09 3D 20 00
 00000553 28 77 68 61 74	$S001018 		BYTE 	"(what = disc==0.0) 		= ",0
	   20 3D 20 64 69
	   73 63 3D 3D 30
	   2E 30 29 20 09
	   09 3D 20 00
 0000056B 28 77 68 61 74	$S001012 		BYTE 	"(what = result==0xC3500h) 	= ",0
	   20 3D 20 72 65
	   73 75 6C 74 3D
	   3D 30 78 43 33
	   35 30 30 68 29
	   20 09 3D 20 00
 00000589 28 77 68 61 74	$S001241 		BYTE 	"(what = val1 == 0x78000000) = ",0
	   20 3D 20 76 61
	   6C 31 20 3D 3D
	   20 30 78 37 38
	   30 30 30 30 30
	   30 29 20 3D 20
	   00
 000005A8 28 77 68 61 74	$S000996 		BYTE 	"(what = x == 68) 		= ",0
	   20 3D 20 78 20
	   3D 3D 20 36 38
	   29 20 09 09 3D
	   20 00
 000005BE 28 77 68 61 74	$S001021 		BYTE 	"(what = x1==-2.0) 		= ",0
	   20 3D 20 78 31
	   3D 3D 2D 32 2E
	   30 29 20 09 09
	   3D 20 00
 000005D5 28 77 68 61 74	$S001023 		BYTE 	"(what = x2==-2.0) 		= ",0
	   20 3D 20 78 32
	   3D 3D 2D 32 2E
	   30 29 20 09 09
	   3D 20 00
 000005EC 28 77 68 61 74	$S000990 		BYTE 	"(what = x==0x10h)		= ",0
	   20 3D 20 78 3D
	   3D 30 78 31 30
	   68 29 09 09 3D
	   20 00
 00000602 28 77 68 61 74	$S000998 		BYTE 	"(what = x==0x4000) 		= ",0
	   20 3D 20 78 3D
	   3D 30 78 34 30
	   30 30 29 20 09
	   09 3D 20 00
 0000061A 28 77 68 61 74	$S000992 		BYTE 	"(what = x==1)			= ",0
	   20 3D 20 78 3D
	   3D 31 29 09 09
	   09 3D 20 00
 0000062D 28 77 68 61 74	$S001000 		BYTE 	"(what = x==4096) 		= ",0
	   20 3D 20 78 3D
	   3D 34 30 39 36
	   29 20 09 09 3D
	   20 00
 00000643 28 77 68 61 74	$S001002 		BYTE 	"(what = y==1365) 		= ",0
	   20 3D 20 79 3D
	   3D 31 33 36 35
	   29 20 09 09 3D
	   20 00
 00000659 29 20 3D 20 00	$S001247 		BYTE 	") = ",0
 0000065E 2A 2A 41 20 62	$S001311 		BYTE 	"**A breakpoint was catched!**",0
	   72 65 61 6B 70
	   6F 69 6E 74 20
	   77 61 73 20 63
	   61 74 63 68 65
	   64 21 2A 2A 00
 0000067C 2A 2A 42 65 66	$S000914 		BYTE 	"**Before destroying all object in shapes1:",0
	   6F 72 65 20 64
	   65 73 74 72 6F
	   79 69 6E 67 20
	   61 6C 6C 20 6F
	   62 6A 65 63 74
	   20 69 6E 20 73
	   68 61 70 65 73
	   31 3A 00
 000006A7 2A 2A 42 65 66	$S000915 		BYTE 	"**Before destroying all object in shapes2:",0
	   6F 72 65 20 64
	   65 73 74 72 6F
	   79 69 6E 67 20
	   61 6C 6C 20 6F
	   62 6A 65 63 74
	   20 69 6E 20 73
	   68 61 70 65 73
	   32 3A 00
 000006D2 2A 2A 56 69 73	$S000740 		BYTE 	"**Visited object name = ",0
	   69 74 65 64 20
	   6F 62 6A 65 63
	   74 20 6E 61 6D
	   65 20 3D 20 00
 000006EB 2A 70 20 28 33	$S001325 		BYTE 	"*p (3.1415...)= ",0
	   2E 31 34 31 35
	   2E 2E 2E 29 3D
	   20 00
 000006FC 2C 20 00		$S001184 		BYTE 	", ",0
 000006FF 2C 20 28 63 6F	$S001313 		BYTE 	", (copied)xtarget.Height = ",0
	   70 69 65 64 29
	   78 74 61 72 67
	   65 74 2E 48 65
	   69 67 68 74 20
	   3D 20 00
 0000071B 2C 20 61 6E 64	$S000627 		BYTE 	", and b = ",0
	   20 62 20 3D 20
	   00
 00000726 2C 20 61 72 65	$S001293 		BYTE 	", area = ",0
	   61 20 3D 20 00
 00000730 2C 20 73 71 2E	$S001292 		BYTE 	", sq.Height = ",0
	   48 65 69 67 68
	   74 20 3D 20 00
 0000073F 2C 20 74 72 69	$S001298 		BYTE 	", tri.High = ",0
	   2E 48 69 67 68
	   20 3D 20 00
 0000074D 2C 20 79 73 6F	$S001309 		BYTE 	", ysource.Height = ",0
	   75 72 63 65 2E
	   48 65 69 67 68
	   74 20 3D 20 00
 00000761 2F 53 69 6C 65	$S001203 		BYTE 	"/Silent",0
	   6E 74 00
 00000769 41 20 64 6F 75	$S000874 		BYTE 	"A double proxy = ",0
	   62 6C 65 20 70
	   72 6F 78 79 20
	   3D 20 00
 0000077B 41 20 73 69 6D	$S000552 		BYTE 	"A simple variable",0
	   70 6C 65 20 76
	   61 72 69 61 62
	   6C 65 00
 0000078D 41 6E 20 65 78	$S000580 		BYTE 	"An exponential variable",0
	   70 6F 6E 65 6E
	   74 69 61 6C 20
	   76 61 72 69 61
	   62 6C 65 00
 000007A5 41 6E 20 75 6E	$S000570 		BYTE 	"An uniform variable",0
	   69 66 6F 72 6D
	   20 76 61 72 69
	   61 62 6C 65 00
 000007B9 41 72 67 75 6D	$S001200 		BYTE 	"Argument: [",0
	   65 6E 74 3A 20
	   5B 00
 000007C5 43 68 61 72 20	$S001183 		BYTE 	"Char at [",0
	   61 74 20 5B 00
 000007CF 43 68 61 72 20	$S001141 		BYTE 	"Char at i:[",0
	   61 74 20 69 3A
	   5B 00
 000007DB 43 69 72 63 6C	$S000670 		BYTE 	"Circle",0
	   65 00
 000007E2 43 69 72 63 6C	$S001284 		BYTE 	"Circle.Area = ",0
	   65 2E 41 72 65
	   61 20 3D 20 00
 000007F1 43 69 72 63 6C	$S001282 		BYTE 	"Circle.Radius = ",0
	   65 2E 52 61 64
	   69 75 73 20 3D
	   20 00
 00000802 43 69 72 63 6C	$S001361 		BYTE 	"Circle.Radius = 3.14 = ",0
	   65 2E 52 61 64
	   69 75 73 20 3D
	   20 33 2E 31 34
	   20 3D 20 00
 0000081A 43 69 72 63 6C	$S001362 		BYTE 	"Circle[0].Radius = 3.14 = ",0
	   65 5B 30 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 00000835 43 69 72 63 6C	$S001358 		BYTE 	"Circle[1].Radius = 3.14 = ",0
	   65 5B 31 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 00000850 43 69 72 63 6C	$S001359 		BYTE 	"Circle[2].Radius = 3.14 = ",0
	   65 5B 32 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 0000086B 43 6C 6F 73 69	$S000640 		BYTE 	"Closing file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 0000087B 43 6F 6E 73 74	$S000794 		BYTE 	"Constructing a Double Proxy...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   44 6F 75 62 6C
	   65 20 50 72 6F
	   78 79 2E 2E 2E
	   00
 0000089A 43 75 72 72 65	$S001219 		BYTE 	"Current Index :",0
	   6E 74 20 49 6E
	   64 65 78 20 3A
	   00
 000008AA 44 65 67 72 65	$S001315 		BYTE 	"Degrees to Radians of ",0
	   65 73 20 74 6F
	   20 52 61 64 69
	   61 6E 73 20 6F
	   66 20 00
 000008C1 44 65 73 74 72	$S000806 		BYTE 	"Destroying a Double Proxy object...",0
	   6F 79 69 6E 67
	   20 61 20 44 6F
	   75 62 6C 65 20
	   50 72 6F 78 79
	   20 6F 62 6A 65
	   63 74 2E 2E 2E
	   00
 000008E5 44 65 73 74 72	$S000789 		BYTE 	"Destroying a Simple Object...",0
	   6F 79 69 6E 67
	   20 61 20 53 69
	   6D 70 6C 65 20
	   4F 62 6A 65 63
	   74 2E 2E 2E 00
 00000903 44 6F 20 36 2C	$S000645 		BYTE 	"Do 6, then finish",0
	   20 74 68 65 6E
	   20 66 69 6E 69
	   73 68 00
 00000915 44 6F 20 52 65	$S000642 		BYTE 	"Do Read from file...",0
	   61 64 20 66 72
	   6F 6D 20 66 69
	   6C 65 2E 2E 2E
	   00
 0000092A 44 6F 20 57 72	$S000641 		BYTE 	"Do Write to file...",0
	   69 74 65 20 74
	   6F 20 66 69 6C
	   65 2E 2E 2E 00
 0000093E 44 6F 20 66 6F	$S000643 		BYTE 	"Do for 5 and follow to 6",0
	   72 20 35 20 61
	   6E 64 20 66 6F
	   6C 6C 6F 77 20
	   74 6F 20 36 00
 00000957 44 72 61 77 69	$S000672 		BYTE 	"Drawing a Circle!",0
	   6E 67 20 61 20
	   43 69 72 63 6C
	   65 21 00
 00000969 44 72 61 77 69	$S000700 		BYTE 	"Drawing a Cube!",0
	   6E 67 20 61 20
	   43 75 62 65 21
	   00
 00000979 44 72 61 77 69	$S000723 		BYTE 	"Drawing a Piramid!",0
	   6E 67 20 61 20
	   50 69 72 61 6D
	   69 64 21 00
 0000098C 44 72 61 77 69	$S000677 		BYTE 	"Drawing a Sphere!",0
	   6E 67 20 61 20
	   53 70 68 65 72
	   65 21 00
 0000099E 44 72 61 77 69	$S000698 		BYTE 	"Drawing a Square!",0
	   6E 67 20 61 20
	   53 71 75 61 72
	   65 21 00
 000009B0 44 72 61 77 69	$S000718 		BYTE 	"Drawing a Triangle!",0
	   6E 67 20 61 20
	   54 72 69 61 6E
	   67 6C 65 21 00
 000009C4 46 61 63 74 6F	$S001223 		BYTE 	"Factorial of ",0
	   72 69 61 6C 20
	   6F 66 20 00
 000009D2 47 61 6D 6D 61	$S000616 		BYTE 	"Gamma y = ",0
	   20 79 20 3D 20
	   00
 000009DD 48 2B 2B 20 46	$S000924 		BYTE 	"H++ First program",0
	   69 72 73 74 20
	   70 72 6F 67 72
	   61 6D 00
 000009EF 48 2B 2B 20 55	$S001364 		BYTE 	"H++ Unit Testing : Fourth Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 46
	   6F 75 72 74 68
	   20 50 68 61 73
	   65 00
 00000A0F 48 2B 2B 20 55	$S001242 		BYTE 	"H++ Unit Testing : Second Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 53
	   65 63 6F 6E 64
	   20 50 68 61 73
	   65 00
 00000A2F 48 2B 2B 20 55	$S001303 		BYTE 	"H++ Unit Testing : Third Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 54
	   68 69 72 64 20
	   50 68 61 73 65
	   00
 00000A4E 48 61 72 6F 6C	$S001190 		BYTE 	"Harold ",0
	   64 20 00
 00000A56 48 61 72 6F 6C	$S001167 		BYTE 	"Harold L. Marzan",0
	   64 20 4C 2E 20
	   4D 61 72 7A 61
	   6E 00
 00000A67 48 61 72 6F 6C	$S001379 		BYTE 	"Harold L.",0
	   64 20 4C 2E 00
 00000A71 48 61 72 6F 6C	$S001377 		BYTE 	"Harold",0
	   64 00
 00000A78 48 65 6C 6C 6F	$S001208 		BYTE 	"Hello World from H++!!!",0
	   20 57 6F 72 6C
	   64 20 66 72 6F
	   6D 20 48 2B 2B
	   21 21 21 00
 00000A90 49 20 73 68 6F	$S001388 		BYTE 	"I should never get here!",0
	   75 6C 64 20 6E
	   65 76 65 72 20
	   67 65 74 20 68
	   65 72 65 21 00
 00000AA9 49 27 6D 20 74	$S001300 		BYTE 	"I'm tired of waiting!!!",0
	   69 72 65 64 20
	   6F 66 20 77 61
	   69 74 69 6E 67
	   21 21 21 00
 00000AC1 49 6E 76 61 6C	$S000646 		BYTE 	"Invalid Option : ",0
	   69 64 20 4F 70
	   74 69 6F 6E 20
	   3A 20 00
 00000AD3 49 74 27 73 20	$S001387 		BYTE 	"It's working as designed!",0
	   77 6F 72 6B 69
	   6E 67 20 61 73
	   20 64 65 73 69
	   67 6E 65 64 21
	   00
 00000AED 4C 61 77 72 65	$S001191 		BYTE 	"Lawrence ",0
	   6E 63 65 20 00
 00000AF7 4D 61 72 7A 61	$S001192 		BYTE 	"Marzan ",0
	   6E 20 00
 00000AFF 4D 65 72 63 61	$S001193 		BYTE 	"Mercado.",0
	   64 6F 2E 00
 00000B08 4D 79 20 4E 61	$S001302 		BYTE 	"My Name is: ",0
	   6D 65 20 69 73
	   3A 20 00
 00000B15 4D 79 20 6E 61	$S001176 		BYTE 	"My name is :",0
	   6D 65 20 69 73
	   20 3A 00
 00000B22 4E 6F 77 20 73	$S001410 		BYTE 	"Now sorted:",0
	   6F 72 74 65 64
	   3A 00
 00000B2E 4F 6F 70 73 21	$S001143 		BYTE 	"Oops! there was a serious bug in this code!",0
	   20 74 68 65 72
	   65 20 77 61 73
	   20 61 20 73 65
	   72 69 6F 75 73
	   20 62 75 67 20
	   69 6E 20 74 68
	   69 73 20 63 6F
	   64 65 21 00
 00000B5A 4F 70 65 6E 69	$S000639 		BYTE 	"Opening file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 00000B6A 50 61 72 74 69	$S000615 		BYTE 	"Partial results = ",0
	   61 6C 20 72 65
	   73 75 6C 74 73
	   20 3D 20 00
 00000B7D 50 73 65 75 64	$S001260 		BYTE 	"Pseudo-Random Double values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 44
	   6F 75 62 6C 65
	   20 76 61 6C 75
	   65 73 3A 00
 00000B9A 50 73 65 75 64	$S001252 		BYTE 	"Pseudo-Random Integer values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 49
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 73 3A 00
 00000BB8 52 61 64 69 61	$S001320 		BYTE 	"Radians to Degrees of ",0
	   6E 73 20 74 6F
	   20 44 65 67 72
	   65 65 73 20 6F
	   66 20 00
 00000BCF 52 65 73 75 6C	$S001250 		BYTE 	"Result for array1[",0
	   74 20 66 6F 72
	   20 61 72 72 61
	   79 31 5B 00
 00000BE2 53 71 75 61 72	$S000696 		BYTE 	"Square",0
	   65 00
 00000BE9 53 75 6D 6D 61	$S001314 		BYTE 	"SummationSeries::ComputeRenderGamma() series: ",0
	   74 69 6F 6E 53
	   65 72 69 65 73
	   3A 3A 43 6F 6D
	   70 75 74 65 52
	   65 6E 64 65 72
	   47 61 6D 6D 61
	   28 29 20 73 65
	   72 69 65 73 3A
	   20 00
 00000C18 53 77 61 70 69	$S001110 		BYTE 	"Swaping values...",0
	   6E 67 20 76 61
	   6C 75 65 73 2E
	   2E 2E 00
 00000C2A 54 65 72 6E 61	$S001054 		BYTE 	"Ternary (false ) = ",0
	   72 79 20 28 66
	   61 6C 73 65 20
	   29 20 3D 20 00
 00000C3E 54 65 72 6E 61	$S001053 		BYTE 	"Ternary (true) = ",0
	   72 79 20 28 74
	   72 75 65 29 20
	   3D 20 00
 00000C50 54 65 73 74 69	$S001188 		BYTE 	"Testing!!!",0
	   6E 67 21 21 21
	   00
 00000C5B 54 68 65 20 48	$S000918 		BYTE 	"The HelloWorld constructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   63 6F 6E 73 74
	   72 75 63 74 6F
	   72 00
 00000C76 54 68 65 20 48	$S000926 		BYTE 	"The HelloWorld destructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   64 65 73 74 72
	   75 63 74 6F 72
	   00
 00000C90 54 68 65 20 50	$S001416 		BYTE 	"The PI value = ",0
	   49 20 76 61 6C
	   75 65 20 3D 20
	   00
 00000CA0 54 68 65 20 6D	$S000629 		BYTE 	"The max value is = ",0
	   61 78 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000CB4 54 68 65 20 6D	$S000631 		BYTE 	"The min value is = ",0
	   69 6E 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000CC8 54 68 65 20 76	$S001228 		BYTE 	"The value of myRef1 must be 65536 ==",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   52 65 66 31 20
	   6D 75 73 74 20
	   62 65 20 36 35
	   35 33 36 20 3D
	   3D 00
 00000CED 54 68 65 20 76	$S001229 		BYTE 	"The value of myVar1 is not 65536 but zero (0) == ",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   56 61 72 31 20
	   69 73 20 6E 6F
	   74 20 36 35 35
	   33 36 20 62 75
	   74 20 7A 65 72
	   6F 20 28 30 29
	   20 3D 3D 20 00
 00000D1F 54 68 65 20 76	$S000626 		BYTE 	"The values: a = ",0
	   61 6C 75 65 73
	   3A 20 61 20 3D
	   20 00
 00000D30 54 68 69 73 20	$S001374 		BYTE 	"This is getting complex and better each time!",0
	   69 73 20 67 65
	   74 74 69 6E 67
	   20 63 6F 6D 70
	   6C 65 78 20 61
	   6E 64 20 62 65
	   74 74 65 72 20
	   65 61 63 68 20
	   74 69 6D 65 21
	   00
 00000D5E 54 68 69 73 20	$S001310 		BYTE 	"This line will never be executed!",0
	   6C 69 6E 65 20
	   77 69 6C 6C 20
	   6E 65 76 65 72
	   20 62 65 20 65
	   78 65 63 75 74
	   65 64 21 00
 00000D80 54 72 69 61 6E	$S000716 		BYTE 	"Triangle",0
	   67 6C 65 00
 00000D89 59 65 73 20 28	$S001389 		BYTE 	"Yes (name1 != name3)!",0
	   6E 61 6D 65 31
	   20 21 3D 20 6E
	   61 6D 65 33 29
	   21 00
 00000D9F 0A 43 6F 6D 70	$S001413 		BYTE 	0Ah,"Computing the PI constant...",0Ah,0
	   75 74 69 6E 67
	   20 74 68 65 20
	   50 49 20 63 6F
	   6E 73 74 61 6E
	   74 2E 2E 2E 0A
	   00
 00000DBE 0A 0A 00		$S001417 		BYTE 	0Ah,0Ah,0
 00000DC1 5D 20 3D 20 00	$S001165 		BYTE 	"] = ",0
 00000DC6 5D 20 3D 3D 20	$S001142 		BYTE 	"] == ",0
	   00
 00000DCC 5D 3D 20 00		$S001201 		BYTE 	"]= ",0
 00000DD0 5D 3D 00		$S001185 		BYTE 	"]=",0
 00000DD3 61 72 72 61 79	$S001154 		BYTE 	"array2[3].my_array1[0] (double)== 9.99 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 31 5B
	   30 5D 20 28 64
	   6F 75 62 6C 65
	   29 3D 3D 20 39
	   2E 39 39 20 3D
	   3D 20 00
 00000DFE 61 72 72 61 79	$S001155 		BYTE 	"array2[3].my_array1[1] (double)== 3.1415927 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 31 5B
	   31 5D 20 28 64
	   6F 75 62 6C 65
	   29 3D 3D 20 33
	   2E 31 34 31 35
	   39 32 37 20 3D
	   3D 20 00
 00000E2E 61 72 72 61 79	$S001156 		BYTE 	"array2[3].my_array2[0] (int)== 10 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 32 5B
	   30 5D 20 28 69
	   6E 74 29 3D 3D
	   20 31 30 20 3D
	   3D 20 00
 00000E54 61 72 72 61 79	$S001157 		BYTE 	"array2[3].my_array2[1] (int)== 3 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 32 5B
	   31 5D 20 28 69
	   6E 74 29 3D 3D
	   20 33 20 3D 3D
	   20 00
 00000E79 61 72 72 61 79	$S001164 		BYTE 	"array4[",0
	   34 5B 00
 00000E81 61 72 72 61 79	$S001408 		BYTE 	"array[",0
	   5B 00
 00000E88 63 6F 6E 73 74	$S001117 		BYTE 	"constructing a TestFloatingPoint() object...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   54 65 73 74 46
	   6C 6F 61 74 69
	   6E 67 50 6F 69
	   6E 74 28 29 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000EB5 64 65 73 74 72	$S000675 		BYTE 	"destroying a Circle object...",0
	   6F 79 69 6E 67
	   20 61 20 43 69
	   72 63 6C 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000ED3 64 65 73 74 72	$S000684 		BYTE 	"destroying a Square object...",0
	   6F 79 69 6E 67
	   20 61 20 53 71
	   75 61 72 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000EF1 64 65 73 74 72	$S001119 		BYTE 	"destroying a TestFloatingPoint() object...",0
	   6F 79 69 6E 67
	   20 61 20 54 65
	   73 74 46 6C 6F
	   61 74 69 6E 67
	   50 6F 69 6E 74
	   28 29 20 6F 62
	   6A 65 63 74 2E
	   2E 2E 00
 00000F1C 64 65 73 74 72	$S000721 		BYTE 	"destroying a Triangle object...",0
	   6F 79 69 6E 67
	   20 61 20 54 72
	   69 61 6E 67 6C
	   65 20 6F 62 6A
	   65 63 74 2E 2E
	   2E 00
 00000F3C 66 61 6C 73 65	$S001386 		BYTE 	"false==!(name2 < name3)",0
	   3D 3D 21 28 6E
	   61 6D 65 32 20
	   3C 20 6E 61 6D
	   65 33 29 00
 00000F54 69 70 74 72 5B	$S001336 		BYTE 	"iptr[0] == 145 == ",0
	   30 5D 20 3D 3D
	   20 31 34 35 20
	   3D 3D 20 00
 00000F67 69 70 74 72 5B	$S001340 		BYTE 	"iptr[1] == 667 == ",0
	   31 5D 20 3D 3D
	   20 36 36 37 20
	   3D 3D 20 00
 00000F7A 69 70 74 72 5B	$S001339 		BYTE 	"iptr[2] == 123 == ",0
	   32 5D 20 3D 3D
	   20 31 32 33 20
	   3D 3D 20 00
 00000F8D 69 70 74 72 5B	$S001341 		BYTE 	"iptr[6] == 774 == ",0
	   36 5D 20 3D 3D
	   20 37 37 34 20
	   3D 3D 20 00
 00000FA0 69 70 74 72 5B	$S001338 		BYTE 	"iptr[7] == 991 == ",0
	   37 5D 20 3D 3D
	   20 39 39 31 20
	   3D 3D 20 00
 00000FB3 69 70 74 72 5B	$S001337 		BYTE 	"iptr[9] == 541 == ",0
	   39 5D 20 3D 3D
	   20 35 34 31 20
	   3D 3D 20 00
 00000FC6 6C 20 3D 20 00	$S001038 		BYTE 	"l = ",0
 00000FCB 6D 79 20 6E 61	$S001268 		BYTE 	"my name is",0
	   6D 65 20 69 73
	   00
 00000FD6 6E 41 72 65 61	$S001214 		BYTE 	"nArea = ",0
	   20 3D 20 00
 00000FDF 6E 41 72 65 61	$S001149 		BYTE 	"nArea = 100 * 200 == ",0
	   20 3D 20 31 30
	   30 20 2A 20 32
	   30 30 20 3D 3D
	   20 00
 00000FF5 6E 61 6D 65 31	$S001382 		BYTE 	"name1 =< name2",0
	   20 3D 3C 20 6E
	   61 6D 65 32 00
 00001004 6E 61 6D 65 32	$S001384 		BYTE 	"name2 <= name3",0
	   20 3C 3D 20 6E
	   61 6D 65 33 00
 00001013 6E 61 6D 65 33	$S001383 		BYTE 	"name3.length > name2.length",0
	   2E 6C 65 6E 67
	   74 68 20 3E 20
	   6E 61 6D 65 32
	   2E 6C 65 6E 67
	   74 68 00
 0000102F 6E 75 6D 62 65	$S001356 		BYTE 	"numbers[",0
	   72 73 5B 00
 00001038 6F 62 6A 3D 3D	$S001287 		BYTE 	"obj==obj2",0
	   6F 62 6A 32 00
 00001042 70 6F 77 28 32	$S001246 		BYTE 	"pow(2, ",0
	   2C 20 00
 0000104A 72 65 73 20 28	$S001326 		BYTE 	"res (3.1415...)= ",0
	   33 2E 31 34 31
	   35 2E 2E 2E 29
	   3D 20 00
 0000105C 73 71 2E 57 69	$S001291 		BYTE 	"sq.Width = ",0
	   64 74 68 20 3D
	   20 00
 00001068 74 68 65 20 76	$S001028 		BYTE 	"the value is (3): ",0
	   61 6C 75 65 20
	   69 73 20 28 33
	   29 3A 20 00
 0000107B 74 68 65 20 76	$S001027 		BYTE 	"the value is (5): ",0
	   61 6C 75 65 20
	   69 73 20 28 35
	   29 3A 20 00
 0000108E 74 68 65 20 76	$S001025 		BYTE 	"the value of x is (1): ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 20 28 31
	   29 3A 20 00
 000010A6 74 68 65 20 76	$S001026 		BYTE 	"the value of x is (2): ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 20 28 32
	   29 3A 20 00
 000010BE 74 68 65 20 76	$S001024 		BYTE 	"the value of x is: ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 3A 20 00
 000010D2 74 68 69 73 20	$S000921 		BYTE 	"this is what I have to say for the first time in H++ :",0
	   69 73 20 77 68
	   61 74 20 49 20
	   68 61 76 65 20
	   74 6F 20 73 61
	   79 20 66 6F 72
	   20 74 68 65 20
	   66 69 72 73 74
	   20 74 69 6D 65
	   20 69 6E 20 48
	   2B 2B 20 3A 00
 00001109 74 72 69 2E 42	$S001297 		BYTE 	"tri.Base = ",0
	   61 73 65 20 3D
	   20 00
 00001115 74 79 70 65 20	$S000734 		BYTE 	"type == stCircle",0
	   3D 3D 20 73 74
	   43 69 72 63 6C
	   65 00
 00001126 74 79 70 65 20	$S000736 		BYTE 	"type == stSquare",0
	   3D 3D 20 73 74
	   53 71 75 61 72
	   65 00
 00001137 74 79 70 65 20	$S000738 		BYTE 	"type == stTriangle",0
	   3D 3D 20 73 74
	   54 72 69 61 6E
	   67 6C 65 00
 0000114A 77 20 3D 20 00	$S001039 		BYTE 	"w = ",0
 0000114F 77 68 61 74 20$S001237 		BYTE 	"what == True ?",0
	   3D 3D 20 54 72
	   75 65 20 3F 00
 0000115E 77 68 61 74 20	$S001286 		BYTE 	"what must be true = ",0
	   6D 75 73 74 20
	   62 65 20 74 72
	   75 65 20 3D 20
	   00
 00001173 79 65 73 5B 30	$S001344 		BYTE 	"yes[0][0] == 145 == ",0
	   5D 5B 30 5D 20
	   3D 3D 20 31 34
	   35 20 3D 3D 20
	   00
 00001188 79 65 73 5B 31	$S001345 		BYTE 	"yes[1][9] == 541 == ",0
	   5D 5B 39 5D 20
	   3D 3D 20 35 34
	   31 20 3D 3D 20
	   00
 0000119D 79 65 73 5B 32	$S001346 		BYTE 	"yes[2][7] == 334 == ",0
	   5D 5B 37 5D 20
	   3D 3D 20 33 33
	   34 20 3D 3D 20
	   00
 000011B2 79 65 73 5B 33	$S001347 		BYTE 	"yes[3][9] == 123 == ",0
	   5D 5B 39 5D 20
	   3D 3D 20 31 32
	   33 20 3D 3D 20
	   00
 000011C7 79 73 6F 75 72	$S001308 		BYTE 	"ysource.Width = ",0
	   63 65 2E 57 69
	   64 74 68 20 3D
	   20 00

 000011D8 00000000		__osver 		DWORD 	0;Windows OS version
 000011DC 00000000		__winminor 		DWORD 	0;Windows minor version
 000011E0 00000000		__winmajor 		DWORD 	0;Windows major version
 000011E4 00000000		__winver 		DWORD 	0;Windows version
 000011E8  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00001208 00000000		___argv 		DWORD 	0;Array of argument values
 0000120C 00000000		___argc 		DWORD 	0;Argument count
 00001210 00000000		UnitTesting_Rnd_seed	 DWORD	0
 00001214 00000000		UnitTesting_Rnd_a	 DWORD	0
 00001218 00000000		UnitTesting_Rnd_m	 DWORD	0
 0000121C 00000000		UnitTesting_Rnd_q	 DWORD	0
 00001220 00000000		UnitTesting_Rnd_r	 DWORD	0
 00001224  0000000A [		UnitTesting_misc1_array	 REAL8 00000000Ah DUP(?) 
	    0000000000000000
	   ]
 00001274			UnitTesting_TestIntegers_bigValue	 DQ	0
	   0000000000000000
 0000127C  00000004 [		UnitTesting_array3	 BYTE 000000004h DUP(?) 
	    00
	   ]
 00001280  00000004 [		UnitTesting_array4	 REAL8 000000004h DUP(?) 
	    0000000000000000
	   ]

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/28/13 13:50:53
unittesting1.hpp					     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000012A0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000070ED Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004A Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000A8 _TEXT	Length= 00000060 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00000101 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004A _TEXT	Length= 0000005E Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 000000A1 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 00000108 _TEXT	Length= 00000084 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 00000185 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 0000018C _TEXT	Length= 0000005E Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 000001E3 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001EA _TEXT	Length= 00000060 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 00000243 _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 0000024A _TEXT	Length= 00000084 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 000002C7 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000335 _TEXT	Length= 0000009D Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 000003CB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002CE _TEXT	Length= 00000067 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 0000032E _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003D2 _TEXT	Length= 00000084 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 0000044F _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 00000456 _TEXT	Length= 00000088 Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 000004D7 _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004DE _TEXT	Length= 00000065 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 0000053C _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 00000543 _TEXT	Length= 00000084 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 000005C0 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005C7 _TEXT	Length= 0000004A Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 0000060A _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnitTesting_Circle_Circumference .	P Near	 00000611 _TEXT	Length= 0000002F Public STDCALL
  $L000667 . . . . . . . . . . .	L Near	 0000063B _TEXT	
UnitTesting_Circle_ComputeArea .	P Near	 00000640 _TEXT	Length= 00000035 Public STDCALL
  $L000673 . . . . . . . . . . .	L Near	 00000670 _TEXT	
UnitTesting_Circle_Destructor  .	P Near	 00000675 _TEXT	Length= 0000002B Public STDCALL
  $L000674 . . . . . . . . . . .	L Near	 0000069B _TEXT	
UnitTesting_Circle_DrawSphere  .	P Near	 000006BF _TEXT	Length= 0000001F Public STDCALL
  $L000676 . . . . . . . . . . .	L Near	 000006D9 _TEXT	
UnitTesting_Circle_Draw  . . . .	P Near	 000006A0 _TEXT	Length= 0000001F Public STDCALL
  $L000671 . . . . . . . . . . .	L Near	 000006BA _TEXT	
UnitTesting_Circle_Name  . . . .	P Near	 000006DE _TEXT	Length= 00000014 Public STDCALL
  $L000669 . . . . . . . . . . .	L Near	 000006ED _TEXT	
UnitTesting_Circle_Type  . . . .	P Near	 0000072C _TEXT	Length= 00000013 Public STDCALL
  $L000668 . . . . . . . . . . .	L Near	 0000073A _TEXT	
UnitTesting_Circle_get_Radius  .	P Near	 000006F2 _TEXT	Length= 00000017 Public STDCALL
  $L000664 . . . . . . . . . . .	L Near	 00000704 _TEXT	
UnitTesting_Circle_put_Radius  .	P Near	 00000709 _TEXT	Length= 00000023 Public STDCALL
  $L000665 . . . . . . . . . . .	L Near	 00000723 _TEXT	
UnitTesting_Circle . . . . . . .	P Near	 0000073F _TEXT	Length= 00000025 Public STDCALL
UnitTesting_DoubleProxy_Destructor .	P Near	 00000764 _TEXT	Length= 0000001F Public STDCALL
  $L000805 . . . . . . . . . . .	L Near	 0000077E _TEXT	
UnitTesting_DoubleProxy_Swap . .	P Near	 00000783 _TEXT	Length= 00000073 Public STDCALL
  $L000801 . . . . . . . . . . .	L Near	 000007EF _TEXT	
UnitTesting_DoubleProxy_isEqual 	P Near	 0000082E _TEXT	Length= 00000052 Public STDCALL
  $L000798 . . . . . . . . . . .	L Near	 00000879 _TEXT	
UnitTesting_DoubleProxy_lessThan .	P Near	 00000880 _TEXT	Length= 00000052 Public STDCALL
  $L000795 . . . . . . . . . . .	L Near	 000008CB _TEXT	
UnitTesting_DoubleProxy  . . . .	P Near	 000007F6 _TEXT	Length= 00000038 Public STDCALL
UnitTesting_DoubleSwapper_SwapEx .	P Near	 00000951 _TEXT	Length= 0000009D Public STDCALL
  $L000842 . . . . . . . . . . .	L Near	 000009E7 _TEXT	
UnitTesting_DoubleSwapper_Swap .	P Near	 000008D2 _TEXT	Length= 0000007F Public STDCALL
  $L000830 . . . . . . . . . . .	L Near	 0000094A _TEXT	
UnitTesting_DoubleSwapper_lessThanEx .	P Near	 00000A48 _TEXT	Length= 00000078 Public STDCALL
  $L000836 . . . . . . . . . . .	L Near	 00000AB9 _TEXT	
UnitTesting_DoubleSwapper_lessThan .	P Near	 000009EE _TEXT	Length= 0000005A Public STDCALL
  $L000825 . . . . . . . . . . .	L Near	 00000A41 _TEXT	
UnitTesting_DoubleSwapper  . . .	P Near	 00000AC0 _TEXT	Length= 0000001D Public STDCALL
UnitTesting_HObject_Destructor .	P Near	 00000ADD _TEXT	Length= 0000000C Public STDCALL
  $L000877 . . . . . . . . . . .	L Near	 00000AE4 _TEXT	
UnitTesting_HObject  . . . . . .	P Near	 00000AE9 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_HelloWorld_Destructor 	P Near	 00000AFE _TEXT	Length= 0000001F Public STDCALL
  $L000925 . . . . . . . . . . .	L Near	 00000B18 _TEXT	
UnitTesting_HelloWorld_SayHello 	P Near	 00000B1D _TEXT	Length= 0000002C Public STDCALL
  $L000919 . . . . . . . . . . .	L Near	 00000B42 _TEXT	
UnitTesting_HelloWorld_ShowHello .	P Near	 00000B49 _TEXT	Length= 00000024 Public STDCALL
  $L000922 . . . . . . . . . . .	L Near	 00000B66 _TEXT	
UnitTesting_HelloWorld . . . . .	P Near	 00000B6D _TEXT	Length= 0000001F Public STDCALL
UnitTesting_Integers_Inline_Test .	P Near	 00000B8C _TEXT	Length= 000000C6 Public STDCALL
  $L000621 . . . . . . . . . . .	L Near	 00000C4D _TEXT	
UnitTesting_MonteCarlo_PI  . . .	P Near	 00000C52 _TEXT	Length= 00000111 Public STDCALL
  $L001420 . . . . . . . . . . .	L Near	 00000C76 _TEXT	
  $L001419 . . . . . . . . . . .	L Near	 00000C7C _TEXT	
  $L001422 . . . . . . . . . . .	L Near	 00000D18 _TEXT	
  $L001421 . . . . . . . . . . .	L Near	 00000D1D _TEXT	
  $L000880 . . . . . . . . . . .	L Near	 00000D5C _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles_Swap  P Near   00000DCB _TEXT	Length= 00000095 Public STDCALL
  $L000776 . . . . . . . . . . .	L Near	 00000E59 _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles_getAt . P Near   00000ECE _TEXT	Length= 00000024 Public STDCALL
  $L000774 . . . . . . . . . . .	L Near	 00000EEB _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles . P Near	  00000E60 _TEXT	Length= 0000006E Public STDCALL
  $L001431 . . . . . . . . . . .	L Near	 00000EA8 _TEXT	
  $L001432 . . . . . . . . . . .	L Near	 00000EAA _TEXT	
  $L001433 . . . . . . . . . . .	L Near	 00000EB7 _TEXT	
UnitTesting_Objects_Array_Destructor .	P Near	 00000D63 _TEXT	Length= 00000036 Public STDCALL
  $L001426 . . . . . . . . . . .	L Near	 00000D94 _TEXT	
  $L001424 . . . . . . . . . . .	L Near	 00000D94 _TEXT	
  $L000763 . . . . . . . . . . .	L Near	 00000D94 _TEXT	
UnitTesting_Objects_Array_get_length .	P Near	 00000D99 _TEXT	Length= 00000014 Public STDCALL
  $L000762 . . . . . . . . . . .	L Near	 00000DA8 _TEXT	
UnitTesting_Objects_Array  . . .	P Near	 00000DAD _TEXT	Length= 0000001E Public STDCALL
UnitTesting_Objects_Automobile_Compare . P Near	  00000EF2 _TEXT	Length= 00000091 Public STDCALL
  $L001434 . . . . . . . . . . .	L Near	 00000F4A _TEXT	
  $L001436 . . . . . . . . . . .	L Near	 00000F78 _TEXT	
  $L001435 . . . . . . . . . . .	L Near	 00000F78 _TEXT	
  $L000754 . . . . . . . . . . .	L Near	 00000F7C _TEXT	
UnitTesting_Objects_Automobile_get_Speed . P Near   00000F83 _TEXT	Length= 00000017 Public STDCALL
  $L000751 . . . . . . . . . . .	L Near	 00000F95 _TEXT	
UnitTesting_Objects_Automobile_put_Speed . P Near   00000F9A _TEXT	Length= 00000023 Public STDCALL
  $L000752 . . . . . . . . . . .	L Near	 00000FB4 _TEXT	
UnitTesting_Objects_Automobile .	P Near	 00000FBD _TEXT	Length= 00000025 Public STDCALL
UnitTesting_Objects_ProxyObject 	P Near	 00000FE2 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Rnd_NextDblEx  . . .	P Near	 00001051 _TEXT	Length= 000000F9 Public STDCALL
  $L001439 . . . . . . . . . . .	L Near	 0000110A _TEXT	
  $L001440 . . . . . . . . . . .	L Near	 0000110C _TEXT	
  $L000537 . . . . . . . . . . .	L Near	 00001145 _TEXT	
UnitTesting_Rnd_NextDbl  . . . .	P Near	 00000FF7 _TEXT	Length= 00000013 Public STDCALL
  $L000540 . . . . . . . . . . .	L Near	 00001005 _TEXT	
UnitTesting_Rnd_NextIntEx  . . .	P Near	 0000114A _TEXT	Length= 000000AD Public STDCALL
  $L001441 . . . . . . . . . . .	L Near	 000011C7 _TEXT	
  $L001442 . . . . . . . . . . .	L Near	 000011C9 _TEXT	
  $L000539 . . . . . . . . . . .	L Near	 000011F2 _TEXT	
UnitTesting_Rnd_NextInt  . . . .	P Near	 0000100A _TEXT	Length= 00000013 Public STDCALL
  $L000541 . . . . . . . . . . .	L Near	 00001018 _TEXT	
UnitTesting_Rnd_setSeed  . . . .	P Near	 0000103B _TEXT	Length= 00000016 Public STDCALL
  $L000535 . . . . . . . . . . .	L Near	 0000104A _TEXT	
UnitTesting_Rnd  . . . . . . . .	P Near	 0000101D _TEXT	Length= 0000001E Public STDCALL
UnitTesting_ShapeFactoryCreator_Create . P Near	  00001284 _TEXT	Length= 00000159 Public STDCALL
  $L001453 . . . . . . . . . . .	L Near	 000012B9 _TEXT	
  $L001454 . . . . . . . . . . .	L Near	 000012BB _TEXT	
  $L001456 . . . . . . . . . . .	L Near	 000012D5 _TEXT	
  $L001459 . . . . . . . . . . .	L Near	 0000131D _TEXT	
  $L001460 . . . . . . . . . . .	L Near	 0000131F _TEXT	
  $L001457 . . . . . . . . . . .	L Near	 00001332 _TEXT	
  $L001463 . . . . . . . . . . .	L Near	 00001374 _TEXT	
  $L001464 . . . . . . . . . . .	L Near	 00001376 _TEXT	
  $L001461 . . . . . . . . . . .	L Near	 00001383 _TEXT	
  $L001467 . . . . . . . . . . .	L Near	 000013C5 _TEXT	
  $L001468 . . . . . . . . . . .	L Near	 000013C7 _TEXT	
  $L001465 . . . . . . . . . . .	L Near	 000013D2 _TEXT	
  $L001462 . . . . . . . . . . .	L Near	 000013D2 _TEXT	
  $L001458 . . . . . . . . . . .	L Near	 000013D2 _TEXT	
  $L000726 . . . . . . . . . . .	L Near	 000013D6 _TEXT	
UnitTesting_ShapeFactoryCreator_Destructor . P Near   0000120C _TEXT	Length= 00000064 Public STDCALL
  $L001447 . . . . . . . . . . .	L Near	 00001239 _TEXT	
  $L001444 . . . . . . . . . . .	L Near	 0000123F _TEXT	
  $L001451 . . . . . . . . . . .	L Near	 00001265 _TEXT	
  $L001448 . . . . . . . . . . .	L Near	 0000126B _TEXT	
  $L000729 . . . . . . . . . . .	L Near	 0000126B _TEXT	
UnitTesting_ShapeFactoryCreator 	P Near	 00001270 _TEXT	Length= 00000014 Public STDCALL
UnitTesting_Shape  . . . . . . .	P Near	 000011F7 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_SimpleObject_Destructor 	P Near	 000013DD _TEXT	Length= 0000001F Public STDCALL
  $L000788 . . . . . . . . . . .	L Near	 000013F7 _TEXT	
UnitTesting_SimpleObject . . . .	P Near	 000013FC _TEXT	Length= 00000015 Public STDCALL
UnitTesting_SortDoubleProxy_PrintObject  P Near	  00001411 _TEXT	Length= 00000050 Public STDCALL
  $L000871 . . . . . . . . . . .	L Near	 0000145A _TEXT	
UnitTesting_SortDoubleProxy_Sort2 	P Near	 00001547 _TEXT	Length= 000000F6 Public STDCALL
  $L001479 . . . . . . . . . . .	L Near	 0000156F _TEXT	
  $L001478 . . . . . . . . . . .	L Near	 00001575 _TEXT	
  $L001482 . . . . . . . . . . .	L Near	 0000159D _TEXT	
  $L001481 . . . . . . . . . . .	L Near	 000015A3 _TEXT	
  $L001484 . . . . . . . . . . .	L Near	 0000162C _TEXT	
  $L001483 . . . . . . . . . . .	L Near	 00001631 _TEXT	
  $L001480 . . . . . . . . . . .	L Near	 00001636 _TEXT	
  $L000860 . . . . . . . . . . .	L Near	 00001636 _TEXT	
UnitTesting_SortDoubleProxy_SortEx .	P Near	 0000163D _TEXT	Length= 000000B8 Public STDCALL
  $L001487 . . . . . . . . . . .	L Near	 00001665 _TEXT	
  $L001486 . . . . . . . . . . .	L Near	 0000166B _TEXT	
  $L001490 . . . . . . . . . . .	L Near	 0000168F _TEXT	
  $L001489 . . . . . . . . . . .	L Near	 00001695 _TEXT	
  $L001492 . . . . . . . . . . .	L Near	 000016E7 _TEXT	
  $L001491 . . . . . . . . . . .	L Near	 000016E9 _TEXT	
  $L001488 . . . . . . . . . . .	L Near	 000016EE _TEXT	
  $L000865 . . . . . . . . . . .	L Near	 000016EE _TEXT	
UnitTesting_SortDoubleProxy_Sort .	P Near	 00001461 _TEXT	Length= 000000E6 Public STDCALL
  $L001471 . . . . . . . . . . .	L Near	 00001489 _TEXT	
  $L001470 . . . . . . . . . . .	L Near	 0000148F _TEXT	
  $L001474 . . . . . . . . . . .	L Near	 000014B7 _TEXT	
  $L001473 . . . . . . . . . . .	L Near	 000014BD _TEXT	
  $L001476 . . . . . . . . . . .	L Near	 00001536 _TEXT	
  $L001475 . . . . . . . . . . .	L Near	 0000153B _TEXT	
  $L001472 . . . . . . . . . . .	L Near	 00001540 _TEXT	
  $L000850 . . . . . . . . . . .	L Near	 00001540 _TEXT	
UnitTesting_SortDoubleProxy_Swap .	P Near	 000016F5 _TEXT	Length= 00000067 Public STDCALL
  $L000856 . . . . . . . . . . .	L Near	 00001753 _TEXT	
UnitTesting_Square_ComputeArea .	P Near	 0000175C _TEXT	Length= 00000032 Public STDCALL
  $L000693 . . . . . . . . . . .	L Near	 00001789 _TEXT	
UnitTesting_Square_Destructor  .	P Near	 0000178E _TEXT	Length= 0000002B Public STDCALL
  $L000683 . . . . . . . . . . .	L Near	 000017B4 _TEXT	
UnitTesting_Square_DrawCube  . .	P Near	 000017D8 _TEXT	Length= 0000001F Public STDCALL
  $L000699 . . . . . . . . . . .	L Near	 000017F2 _TEXT	
UnitTesting_Square_Draw  . . . .	P Near	 000017B9 _TEXT	Length= 0000001F Public STDCALL
  $L000697 . . . . . . . . . . .	L Near	 000017D3 _TEXT	
UnitTesting_Square_Name  . . . .	P Near	 00001831 _TEXT	Length= 00000014 Public STDCALL
  $L000695 . . . . . . . . . . .	L Near	 00001840 _TEXT	
UnitTesting_Square_Type  . . . .	P Near	 00001845 _TEXT	Length= 00000013 Public STDCALL
  $L000694 . . . . . . . . . . .	L Near	 00001853 _TEXT	
UnitTesting_Square_get_Height  .	P Near	 000017F7 _TEXT	Length= 00000017 Public STDCALL
  $L000690 . . . . . . . . . . .	L Near	 00001809 _TEXT	
UnitTesting_Square_get_Width . .	P Near	 0000187D _TEXT	Length= 00000017 Public STDCALL
  $L000686 . . . . . . . . . . .	L Near	 0000188F _TEXT	
UnitTesting_Square_put_Height  .	P Near	 0000180E _TEXT	Length= 00000023 Public STDCALL
  $L000691 . . . . . . . . . . .	L Near	 00001828 _TEXT	
UnitTesting_Square_put_Width . .	P Near	 00001894 _TEXT	Length= 00000023 Public STDCALL
  $L000687 . . . . . . . . . . .	L Near	 000018AE _TEXT	
UnitTesting_Square . . . . . . .	P Near	 00001858 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_SummationSeries_Ackermman 	P Near	 000018B7 _TEXT	Length= 000000AA Public STDCALL
  $L001496 . . . . . . . . . . .	L Near	 000018DA _TEXT	
  $L001494 . . . . . . . . . . .	L Near	 000018EC _TEXT	
  $L001499 . . . . . . . . . . .	L Near	 0000190B _TEXT	
  $L001497 . . . . . . . . . . .	L Near	 0000192B _TEXT	
  $L001498 . . . . . . . . . . .	L Near	 0000195A _TEXT	
  $L001495 . . . . . . . . . . .	L Near	 0000195A _TEXT	
  $L000617 . . . . . . . . . . .	L Near	 0000195A _TEXT	
UnitTesting_SummationSeries_ComputeRenderGamma . P Near	  00001961 _TEXT	Length= 00000100 Public STDCALL
  $L001501 . . . . . . . . . . .	L Near	 0000198D _TEXT	
  $L001500 . . . . . . . . . . .	L Near	 00001993 _TEXT	
  $L001502 . . . . . . . . . . .	L Near	 00001A3C _TEXT	
  $L000610 . . . . . . . . . . .	L Near	 00001A5C _TEXT	
UnitTesting_SummationSeries_GeometricSeriesClosedSum . P Near   00001A61 _TEXT	Length= 00000079 Public STDCALL
  $L000607 . . . . . . . . . . .	L Near	 00001AD3 _TEXT	
UnitTesting_SummationSeries_GeometricSeriesSum . P Near	  00001ADA _TEXT	Length= 00000096 Public STDCALL
  $L001504 . . . . . . . . . . .	L Near	 00001B12 _TEXT	
  $L001503 . . . . . . . . . . .	L Near	 00001B18 _TEXT	
  $L001507 . . . . . . . . . . .	L Near	 00001B38 _TEXT	
  $L001506 . . . . . . . . . . .	L Near	 00001B3E _TEXT	
  $L001508 . . . . . . . . . . .	L Near	 00001B5B _TEXT	
  $L001505 . . . . . . . . . . .	L Near	 00001B64 _TEXT	
  $L000586 . . . . . . . . . . .	L Near	 00001B69 _TEXT	
UnitTesting_SummationSeries_Horner_GeometricSeriesSum  P Near   00001B70 _TEXT	Length= 00000061 Public STDCALL
  $L001510 . . . . . . . . . . .	L Near	 00001B94 _TEXT	
  $L001509 . . . . . . . . . . .	L Near	 00001B9A _TEXT	
  $L001511 . . . . . . . . . . .	L Near	 00001BC5 _TEXT	
  $L000602 . . . . . . . . . . .	L Near	 00001BCA _TEXT	
UnitTesting_SummationSeries_Horner_Horner  P Near   00001BD1 _TEXT	Length= 0000007A Public STDCALL
  $L001513 . . . . . . . . . . .	L Near	 00001C0C _TEXT	
  $L001512 . . . . . . . . . . .	L Near	 00001C12 _TEXT	
  $L001514 . . . . . . . . . . .	L Near	 00001C3F _TEXT	
  $L000596 . . . . . . . . . . .	L Near	 00001C44 _TEXT	
UnitTesting_SummationSeries_SimpleSum 	P Near	 00001C4B _TEXT	Length= 00000053 Public STDCALL
  $L001516 . . . . . . . . . . .	L Near	 00001C72 _TEXT	
  $L001515 . . . . . . . . . . .	L Near	 00001C78 _TEXT	
  $L001517 . . . . . . . . . . .	L Near	 00001C92 _TEXT	
  $L000582 . . . . . . . . . . .	L Near	 00001C97 _TEXT	
UnitTesting_SwapperObject  . . .	P Near	 00001C9E _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Test1_TestRunner_main 	P Near	 000048EB _TEXT	Length= 0000276C Public STDCALL
  $L001647 . . . . . . . . . . .	L Near	 00004910 _TEXT	
  $L001646 . . . . . . . . . . .	L Near	 00004916 _TEXT	
  $L001648 . . . . . . . . . . .	L Near	 00004968 _TEXT	
  $L001649 . . . . . . . . . . .	L Near	 000049A8 _TEXT	
  $L001650 . . . . . . . . . . .	L Near	 000049D2 _TEXT	
  __HELLO_PART . . . . . . . . .	L Near	 000049D5 _TEXT	
  $L001651 . . . . . . . . . . .	L Near	 00004A0F _TEXT	
  $L001654 . . . . . . . . . . .	L Near	 00004AF9 _TEXT	
  $L001653 . . . . . . . . . . .	L Near	 00004AFF _TEXT	
  $L001655 . . . . . . . . . . .	L Near	 00004B30 _TEXT	
  $L001657 . . . . . . . . . . .	L Near	 00004B32 _TEXT	
  $L001656 . . . . . . . . . . .	L Near	 00004B32 _TEXT	
  $L001659 . . . . . . . . . . .	L Near	 00004B47 _TEXT	
  $L001658 . . . . . . . . . . .	L Near	 00004B49 _TEXT	
  __CALC_FACTORIAL . . . . . . .	L Near	 00004B5C _TEXT	
  $L001661 . . . . . . . . . . .	L Near	 00004BB6 _TEXT	
  __END_FACTORIAL  . . . . . . .	L Near	 00004BB8 _TEXT	
  $L001663 . . . . . . . . . . .	L Near	 00004D46 _TEXT	
  $L001664 . . . . . . . . . . .	L Near	 00004D98 _TEXT	
  $L001665 . . . . . . . . . . .	L Near	 00004DEA _TEXT	
  $L001666 . . . . . . . . . . .	L Near	 00004E3C _TEXT	
  $L001667 . . . . . . . . . . .	L Near	 00004ED6 _TEXT	
  $L001670 . . . . . . . . . . .	L Near	 00004EE5 _TEXT	
  $L001669 . . . . . . . . . . .	L Near	 00004EEB _TEXT	
  $L001671 . . . . . . . . . . .	L Near	 00004F58 _TEXT	
  $L001673 . . . . . . . . . . .	L Near	 00004F65 _TEXT	
  $L001672 . . . . . . . . . . .	L Near	 00004F65 _TEXT	
  $L001674 . . . . . . . . . . .	L Near	 00005032 _TEXT	
  _BlockRndDoubles . . . . . . .	L Near	 00005163 _TEXT	
  $L001675 . . . . . . . . . . .	L Near	 000057E4 _TEXT	
  $L001677 . . . . . . . . . . .	L Near	 000059AE _TEXT	
  __except_handlerXXX001680  . .	L Near	 00005A54 _TEXT	
  $L001683 . . . . . . . . . . .	L Near	 00005A90 _TEXT	
  $L001679 . . . . . . . . . . .	L Near	 00005A92 _TEXT	
  $L001682 . . . . . . . . . . .	L Near	 00005AA8 _TEXT	
  $L001684 . . . . . . . . . . .	L Near	 00005BF4 _TEXT	
  $L001685 . . . . . . . . . . .	L Near	 00005BF6 _TEXT	
  $L001686 . . . . . . . . . . .	L Near	 00005C88 _TEXT	
  $L001687 . . . . . . . . . . .	L Near	 00005C97 _TEXT	
  $L001688 . . . . . . . . . . .	L Near	 00005C99 _TEXT	
  $L001690 . . . . . . . . . . .	L Near	 00005CDF _TEXT	
  $L001691 . . . . . . . . . . .	L Near	 00005D08 _TEXT	
  $L001692 . . . . . . . . . . .	L Near	 00005D0A _TEXT	
  $L001693 . . . . . . . . . . .	L Near	 00005EA6 _TEXT	
  $L001695 . . . . . . . . . . .	L Near	 0000626B _TEXT	
  $L001694 . . . . . . . . . . .	L Near	 00006271 _TEXT	
  $L001696 . . . . . . . . . . .	L Near	 000062CF _TEXT	
  $L001697 . . . . . . . . . . .	L Near	 00006483 _TEXT	
  $L001698 . . . . . . . . . . .	L Near	 00006485 _TEXT	
  $L001699 . . . . . . . . . . .	L Near	 000064AB _TEXT	
  $L001703 . . . . . . . . . . .	L Near	 0000656B _TEXT	
  $L001701 . . . . . . . . . . .	L Near	 00006582 _TEXT	
  $L001704 . . . . . . . . . . .	L Near	 00006592 _TEXT	
  $L001705 . . . . . . . . . . .	L Near	 0000661E _TEXT	
  $L001707 . . . . . . . . . . .	L Near	 00006654 _TEXT	
  $L001709 . . . . . . . . . . .	L Near	 0000668F _TEXT	
  $L001711 . . . . . . . . . . .	L Near	 000066CE _TEXT	
  $L001713 . . . . . . . . . . .	L Near	 00006716 _TEXT	
  $L001715 . . . . . . . . . . .	L Near	 00006751 _TEXT	
  $L001717 . . . . . . . . . . .	L Near	 0000678C _TEXT	
  $L001719 . . . . . . . . . . .	L Near	 000067C7 _TEXT	
  $L001722 . . . . . . . . . . .	L Near	 00006894 _TEXT	
  $L001724 . . . . . . . . . . .	L Near	 000068D1 _TEXT	
  $L001726 . . . . . . . . . . .	L Near	 0000690E _TEXT	
  $L001727 . . . . . . . . . . .	L Near	 0000694A _TEXT	
  $L001728 . . . . . . . . . . .	L Near	 0000694C _TEXT	
  $L001729 . . . . . . . . . . .	L Near	 0000695A _TEXT	
  $L001730 . . . . . . . . . . .	L Near	 000069AD _TEXT	
  $L001731 . . . . . . . . . . .	L Near	 000069AF _TEXT	
  $L001732 . . . . . . . . . . .	L Near	 000069BD _TEXT	
  $L001734 . . . . . . . . . . .	L Near	 00006B93 _TEXT	
  $L001733 . . . . . . . . . . .	L Near	 00006B99 _TEXT	
  $L001735 . . . . . . . . . . .	L Near	 00006BF4 _TEXT	
  $L001737 . . . . . . . . . . .	L Near	 00006C72 _TEXT	
  $L001736 . . . . . . . . . . .	L Near	 00006C78 _TEXT	
  $L001738 . . . . . . . . . . .	L Near	 00006CD3 _TEXT	
  $L001740 . . . . . . . . . . .	L Near	 00006D06 _TEXT	
  $L001741 . . . . . . . . . . .	L Near	 00006D11 _TEXT	
  $L001739 . . . . . . . . . . .	L Near	 00006D21 _TEXT	
  $L001743 . . . . . . . . . . .	L Near	 00006EA7 _TEXT	
  $L001742 . . . . . . . . . . .	L Near	 00006EAD _TEXT	
  $L001744 . . . . . . . . . . .	L Near	 00006F0A _TEXT	
  $L001746 . . . . . . . . . . .	L Near	 00006F3A _TEXT	
  $L001745 . . . . . . . . . . .	L Near	 00006F40 _TEXT	
  $L001747 . . . . . . . . . . .	L Near	 00006F9D _TEXT	
  $L001196 . . . . . . . . . . .	L Near	 00006FFE _TEXT	
  $L001750 . . . . . . . . . . .	L Near	 00007009 _TEXT	
  $L001752 . . . . . . . . . . .	L Near	 00007014 _TEXT	
  $L001757 . . . . . . . . . . .	L Near	 0000701F _TEXT	
  $L001758 . . . . . . . . . . .	L Near	 0000702A _TEXT	
  $L001759 . . . . . . . . . . .	L Near	 00007035 _TEXT	
  $L001760 . . . . . . . . . . .	L Near	 00007040 _TEXT	
  $L001765 . . . . . . . . . . .	L Near	 00007048 _TEXT	
  $L001767 . . . . . . . . . . .	L Near	 00007050 _TEXT	
UnitTesting_TestArrays_DoTest  .	P Near	 00001CE8 _TEXT	Length= 00000A43 Public STDCALL
  $L001521 . . . . . . . . . . .	L Near	 0000222E _TEXT	
  $L001520 . . . . . . . . . . .	L Near	 0000223A _TEXT	
  $L001522 . . . . . . . . . . .	L Near	 000022A0 _TEXT	
  $L001524 . . . . . . . . . . .	L Near	 00002549 _TEXT	
  $L001523 . . . . . . . . . . .	L Near	 00002555 _TEXT	
  $L001525 . . . . . . . . . . .	L Near	 000025D8 _TEXT	
  $L001527 . . . . . . . . . . .	L Near	 00002694 _TEXT	
  $L001526 . . . . . . . . . . .	L Near	 000026A0 _TEXT	
  $L001528 . . . . . . . . . . .	L Near	 000026E5 _TEXT	
  $L001144 . . . . . . . . . . .	L Near	 0000271E _TEXT	
UnitTesting_TestArrays_get_Name 	P Near	 00001CB3 _TEXT	Length= 00000013 Public STDCALL
  $L001134 . . . . . . . . . . .	L Near	 00001CC1 _TEXT	
UnitTesting_TestArrays_printChars 	P Near	 0000272B _TEXT	Length= 00000105 Public STDCALL
  $L001536 . . . . . . . . . . .	L Near	 0000275F _TEXT	
  $L001535 . . . . . . . . . . .	L Near	 00002765 _TEXT	
  $L001537 . . . . . . . . . . .	L Near	 000027B5 _TEXT	
  __except_handlerXXX001532  . .	L Near	 000027B7 _TEXT	
  $L001538 . . . . . . . . . . .	L Near	 000027F3 _TEXT	
  $L001539 . . . . . . . . . . .	L Near	 00002811 _TEXT	
  $L001531 . . . . . . . . . . .	L Near	 00002813 _TEXT	
  $L001534 . . . . . . . . . . .	L Near	 00002829 _TEXT	
  $L001137 . . . . . . . . . . .	L Near	 00002829 _TEXT	
UnitTesting_TestArrays_put_Name 	P Near	 00001CC6 _TEXT	Length= 00000016 Public STDCALL
  $L001135 . . . . . . . . . . .	L Near	 00001CD5 _TEXT	
UnitTesting_TestArrays . . . . .	P Near	 00001CDC _TEXT	Length= 0000000C Public STDCALL
UnitTesting_TestFloatingPoint_Area .	P Near	 00002830 _TEXT	Length= 0000007F Public STDCALL
  $L001126 . . . . . . . . . . .	L Near	 000028A8 _TEXT	
UnitTesting_TestFloatingPoint_Destructor . P Near   000028AF _TEXT	Length= 0000002B Public STDCALL
  $L001118 . . . . . . . . . . .	L Near	 000028D5 _TEXT	
UnitTesting_TestFloatingPoint_Power 	P Near	 000028DA _TEXT	Length= 000000D9 Public STDCALL
  $L001540 . . . . . . . . . . .	L Near	 00002901 _TEXT	
  $L001542 . . . . . . . . . . .	L Near	 00002959 _TEXT	
  $L001543 . . . . . . . . . . .	L Near	 000029AC _TEXT	
  $L001120 . . . . . . . . . . .	L Near	 000029AC _TEXT	
UnitTesting_TestFloatingPoint_speed 	P Near	 000029CB _TEXT	Length= 00000030 Public STDCALL
  $L001123 . . . . . . . . . . .	L Near	 000029F4 _TEXT	
UnitTesting_TestFloatingPoint  .	P Near	 000029B3 _TEXT	Length= 00000018 Public STDCALL
UnitTesting_TestIntegers_Calc1 .	P Near	 000029FB _TEXT	Length= 000000A2 Public STDCALL
  $L001055 . . . . . . . . . . .	L Near	 00002A96 _TEXT	
UnitTesting_TestIntegers_Calc2 .	P Near	 00002A9D _TEXT	Length= 0000006C Public STDCALL
  $L001063 . . . . . . . . . . .	L Near	 00002B02 _TEXT	
UnitTesting_TestIntegers_Factorial .	P Near	 00002B09 _TEXT	Length= 00000047 Public STDCALL
  $L001544 . . . . . . . . . . .	L Near	 00002B27 _TEXT	
  $L001545 . . . . . . . . . . .	L Near	 00002B49 _TEXT	
  $L001105 . . . . . . . . . . .	L Near	 00002B49 _TEXT	
UnitTesting_TestIntegers_SwapDebug .	P Near	 00002BBE _TEXT	Length= 00000028 Public STDCALL
  $L001107 . . . . . . . . . . .	L Near	 00002BDF _TEXT	
UnitTesting_TestIntegers_Swap  .	P Near	 00002B7B _TEXT	Length= 00000043 Public STDCALL
  $L001059 . . . . . . . . . . .	L Near	 00002BB7 _TEXT	
UnitTesting_TestIntegers_TestExpressions . P Near   00002E91 _TEXT	Length= 00000CD5 Public STDCALL
  $L001547 . . . . . . . . . . .	L Near	 00002F07 _TEXT	
  $L001549 . . . . . . . . . . .	L Near	 00002F66 _TEXT	
  $L001548 . . . . . . . . . . .	L Near	 00002F8B _TEXT	
  $L001551 . . . . . . . . . . .	L Near	 00002F9D _TEXT	
  $L001554 . . . . . . . . . . .	L Near	 00002FED _TEXT	
  $L001552 . . . . . . . . . . .	L Near	 00002FED _TEXT	
  $L001553 . . . . . . . . . . .	L Near	 00002FFD _TEXT	
  $L001558 . . . . . . . . . . .	L Near	 000039B3 _TEXT	
  $L001556 . . . . . . . . . . .	L Near	 000039B5 _TEXT	
  $L001557 . . . . . . . . . . .	L Near	 000039EF _TEXT	
  $L001561 . . . . . . . . . . .	L Near	 00003A57 _TEXT	
  $L001559 . . . . . . . . . . .	L Near	 00003A59 _TEXT	
  $L001560 . . . . . . . . . . .	L Near	 00003A9B _TEXT	
  $L001564 . . . . . . . . . . .	L Near	 00003AF2 _TEXT	
  $L001562 . . . . . . . . . . .	L Near	 00003AF4 _TEXT	
  $L001563 . . . . . . . . . . .	L Near	 00003B3F _TEXT	
  $L000974 . . . . . . . . . . .	L Near	 00003B61 _TEXT	
UnitTesting_TestIntegers_add . .	P Near	 00002C0F _TEXT	Length= 0000003D Public STDCALL
  $L001068 . . . . . . . . . . .	L Near	 00002C45 _TEXT	
UnitTesting_TestIntegers_divide2 .	P Near	 00002C8D _TEXT	Length= 0000005C Public STDCALL
  $L001093 . . . . . . . . . . .	L Near	 00002CE2 _TEXT	
UnitTesting_TestIntegers_divide 	P Near	 00002C4C _TEXT	Length= 00000041 Public STDCALL
  $L001083 . . . . . . . . . . .	L Near	 00002C86 _TEXT	
UnitTesting_TestIntegers_getArea2 	P Near	 00002D0D _TEXT	Length= 00000034 Public STDCALL
  $L000971 . . . . . . . . . . .	L Near	 00002D3C _TEXT	
UnitTesting_TestIntegers_getArea .	P Near	 00002CE9 _TEXT	Length= 00000024 Public STDCALL
  $L000970 . . . . . . . . . . .	L Near	 00002D08 _TEXT	
UnitTesting_TestIntegers_get_Height 	P Near	 00002B50 _TEXT	Length= 00000014 Public STDCALL
  $L000967 . . . . . . . . . . .	L Near	 00002B5F _TEXT	
UnitTesting_TestIntegers_get_Width .	P Near	 00002BE6 _TEXT	Length= 00000013 Public STDCALL
  $L000963 . . . . . . . . . . .	L Near	 00002BF4 _TEXT	
UnitTesting_TestIntegers_modulus .	P Near	 00002D41 _TEXT	Length= 00000043 Public STDCALL
  $L001088 . . . . . . . . . . .	L Near	 00002D7D _TEXT	
UnitTesting_TestIntegers_multiple_assignments  P Near   00002D84 _TEXT	Length= 0000007B Public STDCALL
  $L001098 . . . . . . . . . . .	L Near	 00002DF8 _TEXT	
UnitTesting_TestIntegers_multiply 	P Near	 00002DFF _TEXT	Length= 0000003F Public STDCALL
  $L001078 . . . . . . . . . . .	L Near	 00002E37 _TEXT	
UnitTesting_TestIntegers_put_Height 	P Near	 00002B64 _TEXT	Length= 00000017 Public STDCALL
  $L000968 . . . . . . . . . . .	L Near	 00002B74 _TEXT	
UnitTesting_TestIntegers_put_Width .	P Near	 00002BF9 _TEXT	Length= 00000016 Public STDCALL
  $L000964 . . . . . . . . . . .	L Near	 00002C08 _TEXT	
UnitTesting_TestIntegers_subs  .	P Near	 00002E3E _TEXT	Length= 0000003F Public STDCALL
  $L001073 . . . . . . . . . . .	L Near	 00002E76 _TEXT	
UnitTesting_TestIntegers . . . .	P Near	 00002E7D _TEXT	Length= 00000014 Public STDCALL
UnitTesting_TestProperties_Destructor 	P Near	 00003B66 _TEXT	Length= 000000A7 Public STDCALL
  $L001568 . . . . . . . . . . .	L Near	 00003BA9 _TEXT	
  $L001569 . . . . . . . . . . .	L Near	 00003BB4 _TEXT	
  $L001567 . . . . . . . . . . .	L Near	 00003BC4 _TEXT	
  $L001565 . . . . . . . . . . .	L Near	 00003BC4 _TEXT	
  $L001571 . . . . . . . . . . .	L Near	 00003BED _TEXT	
  $L001572 . . . . . . . . . . .	L Near	 00003BF8 _TEXT	
  $L001570 . . . . . . . . . . .	L Near	 00003C08 _TEXT	
  $L000911 . . . . . . . . . . .	L Near	 00003C08 _TEXT	
UnitTesting_TestProperties_get_Shapes 	P Near	 00003C0D _TEXT	Length= 00000015 Public STDCALL
  $L000900 . . . . . . . . . . .	L Near	 00003C1D _TEXT	
UnitTesting_TestProperties_node_Destructor . P Near   00003FFB _TEXT	Length= 00000093 Public STDCALL
  $L001607 . . . . . . . . . . .	L Near	 00004028 _TEXT	
  $L001604 . . . . . . . . . . .	L Near	 0000402E _TEXT	
  $L001611 . . . . . . . . . . .	L Near	 00004056 _TEXT	
  $L001608 . . . . . . . . . . .	L Near	 0000405C _TEXT	
  $L001615 . . . . . . . . . . .	L Near	 00004083 _TEXT	
  $L001612 . . . . . . . . . . .	L Near	 00004089 _TEXT	
  $L000893 . . . . . . . . . . .	L Near	 00004089 _TEXT	
UnitTesting_TestProperties_node 	P Near	 0000408E _TEXT	Length= 00000014 Public STDCALL
UnitTesting_TestProperties_put_Shapes 	P Near	 00003C22 _TEXT	Length= 000003BB Public STDCALL
  $L001573 . . . . . . . . . . .	L Near	 00003C77 _TEXT	
  $L001574 . . . . . . . . . . .	L Near	 00003C79 _TEXT	
  $L001575 . . . . . . . . . . .	L Near	 00003CA9 _TEXT	
  $L001576 . . . . . . . . . . .	L Near	 00003CAB _TEXT	
  $L001577 . . . . . . . . . . .	L Near	 00003CDB _TEXT	
  $L001578 . . . . . . . . . . .	L Near	 00003CDD _TEXT	
  $L001580 . . . . . . . . . . .	L Near	 00003D03 _TEXT	
  $L001581 . . . . . . . . . . .	L Near	 00003D49 _TEXT	
  $L001582 . . . . . . . . . . .	L Near	 00003D4B _TEXT	
  $L001584 . . . . . . . . . . .	L Near	 00003D72 _TEXT	
  $L001585 . . . . . . . . . . .	L Near	 00003DAC _TEXT	
  $L001586 . . . . . . . . . . .	L Near	 00003DAE _TEXT	
  $L001590 . . . . . . . . . . .	L Near	 00003EA4 _TEXT	
  $L001591 . . . . . . . . . . .	L Near	 00003EAF _TEXT	
  $L001589 . . . . . . . . . . .	L Near	 00003EBF _TEXT	
  $L001587 . . . . . . . . . . .	L Near	 00003EBF _TEXT	
  $L001592 . . . . . . . . . . .	L Near	 00003ED9 _TEXT	
  $L001594 . . . . . . . . . . .	L Near	 00003F16 _TEXT	
  $L001593 . . . . . . . . . . .	L Near	 00003F22 _TEXT	
  $L001595 . . . . . . . . . . .	L Near	 00003F4F _TEXT	
  $L001596 . . . . . . . . . . .	L Near	 00003F7A _TEXT	
  $L001597 . . . . . . . . . . .	L Near	 00003F7C _TEXT	
  $L001598 . . . . . . . . . . .	L Near	 00003F8A _TEXT	
  $L000901 . . . . . . . . . . .	L Near	 00003FAF _TEXT	
  $L001600 . . . . . . . . . . .	L Near	 00003FBC _TEXT	
  $L001601 . . . . . . . . . . .	L Near	 00003FC7 _TEXT	
  $L001602 . . . . . . . . . . .	L Near	 00003FD6 _TEXT	
UnitTesting_TestProperties . . .	P Near	 00003FDD _TEXT	Length= 0000001E Public STDCALL
UnitTesting_TestSwitch_RunTest .	P Near	 000040A2 _TEXT	Length= 000000E6 Public STDCALL
  $L001617 . . . . . . . . . . .	L Near	 000040E6 _TEXT	
  $L001618 . . . . . . . . . . .	L Near	 000040FE _TEXT	
  $L001619 . . . . . . . . . . .	L Near	 00004113 _TEXT	
  $L001620 . . . . . . . . . . .	L Near	 00004128 _TEXT	
  $L001621 . . . . . . . . . . .	L Near	 0000413D _TEXT	
  $L001622 . . . . . . . . . . .	L Near	 00004150 _TEXT	
  $L001623 . . . . . . . . . . .	L Near	 00004165 _TEXT	
  $L001616 . . . . . . . . . . .	L Near	 00004181 _TEXT	
  $L000637 . . . . . . . . . . .	L Near	 00004181 _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Name  P Near   0000419F _TEXT	Length= 00000014 Public STDCALL
  $L000579 . . . . . . . . . . .	L Near	 000041AE _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Sample  P Near   000041B3 _TEXT	Length= 0000003E Public STDCALL
  $L000578 . . . . . . . . . . .	L Near	 000041EC _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_get_MU  P Near   00004188 _TEXT	Length= 00000017 Public STDCALL
  $L000575 . . . . . . . . . . .	L Near	 0000419A _TEXT	
UnitTesting_TestVirtuals_ExponentialRV . P Near	  000041F1 _TEXT	Length= 00000034 Public STDCALL
UnitTesting_TestVirtuals_RandomVariable_Name . P Near   00004225 _TEXT	Length= 00000014 Public STDCALL
  $L000546 . . . . . . . . . . .	L Near	 00004234 _TEXT	
UnitTesting_TestVirtuals_RandomVariable  P Near	  00004239 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_TestVirtuals_SimpleRV_Name . P Near	  0000424E _TEXT	Length= 00000014 Public STDCALL
  $L000551 . . . . . . . . . . .	L Near	 0000425D _TEXT	
UnitTesting_TestVirtuals_SimpleRV_Sample . P Near   00004262 _TEXT	Length= 00000013 Public STDCALL
  $L000550 . . . . . . . . . . .	L Near	 00004270 _TEXT	
UnitTesting_TestVirtuals_SimpleRV 	P Near	 00004275 _TEXT	Length= 0000001D Public STDCALL
UnitTesting_TestVirtuals_UniformRV_Name  P Near	  00004292 _TEXT	Length= 00000014 Public STDCALL
  $L000569 . . . . . . . . . . .	L Near	 000042A1 _TEXT	
UnitTesting_TestVirtuals_UniformRV_Sample  P Near   000042A6 _TEXT	Length= 0000005E Public STDCALL
  $L000568 . . . . . . . . . . .	L Near	 000042FF _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_U . P Near   00004304 _TEXT	Length= 00000017 Public STDCALL
  $L000558 . . . . . . . . . . .	L Near	 00004316 _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_V . P Near   00004387 _TEXT	Length= 00000017 Public STDCALL
  $L000562 . . . . . . . . . . .	L Near	 00004399 _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_U . P Near   0000431B _TEXT	Length= 00000023 Public STDCALL
  $L000559 . . . . . . . . . . .	L Near	 00004335 _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_V . P Near   0000439E _TEXT	Length= 00000023 Public STDCALL
  $L000563 . . . . . . . . . . .	L Near	 000043B8 _TEXT	
UnitTesting_TestVirtuals_UniformRV .	P Near	 0000433E _TEXT	Length= 00000049 Public STDCALL
UnitTesting_Triangle_ComputeArea .	P Near	 000043FB _TEXT	Length= 0000004D Public STDCALL
  $L000719 . . . . . . . . . . .	L Near	 00004443 _TEXT	
UnitTesting_Triangle_Destructor 	P Near	 00004448 _TEXT	Length= 0000002D Public STDCALL
  $L000720 . . . . . . . . . . .	L Near	 00004470 _TEXT	
UnitTesting_Triangle_DrawPiramid .	P Near	 00004494 _TEXT	Length= 0000001F Public STDCALL
  $L000722 . . . . . . . . . . .	L Near	 000044AE _TEXT	
UnitTesting_Triangle_Draw  . . .	P Near	 00004475 _TEXT	Length= 0000001F Public STDCALL
  $L000717 . . . . . . . . . . .	L Near	 0000448F _TEXT	
UnitTesting_Triangle_Name  . . .	P Near	 000044ED _TEXT	Length= 00000014 Public STDCALL
  $L000715 . . . . . . . . . . .	L Near	 000044FC _TEXT	
UnitTesting_Triangle_Type  . . .	P Near	 00004501 _TEXT	Length= 00000013 Public STDCALL
  $L000714 . . . . . . . . . . .	L Near	 0000450F _TEXT	
UnitTesting_Triangle_get_Base  .	P Near	 000043C1 _TEXT	Length= 00000017 Public STDCALL
  $L000707 . . . . . . . . . . .	L Near	 000043D3 _TEXT	
UnitTesting_Triangle_get_High  .	P Near	 000044B3 _TEXT	Length= 00000017 Public STDCALL
  $L000711 . . . . . . . . . . .	L Near	 000044C5 _TEXT	
UnitTesting_Triangle_put_Base  .	P Near	 000043D8 _TEXT	Length= 00000023 Public STDCALL
  $L000708 . . . . . . . . . . .	L Near	 000043F2 _TEXT	
UnitTesting_Triangle_put_High  .	P Near	 000044CA _TEXT	Length= 00000023 Public STDCALL
  $L000712 . . . . . . . . . . .	L Near	 000044E4 _TEXT	
UnitTesting_Triangle . . . . . .	P Near	 00004514 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_Visitor_Visit  . . .	P Near	 00004539 _TEXT	Length= 00000140 Public STDCALL
  $L001627 . . . . . . . . . . .	L Near	 0000458F _TEXT	
  $L001628 . . . . . . . . . . .	L Near	 000045BE _TEXT	
  $L001629 . . . . . . . . . . .	L Near	 000045ED _TEXT	
  $L001630 . . . . . . . . . . .	L Near	 0000461C _TEXT	
  $L001626 . . . . . . . . . . .	L Near	 0000461D _TEXT	
  $L001631 . . . . . . . . . . .	L Near	 00004637 _TEXT	
  $L001633 . . . . . . . . . . .	L Near	 0000464F _TEXT	
  $L000731 . . . . . . . . . . .	L Near	 00004672 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00007057 _TEXT	Length= 00000096 Public STDCALL
__member_Init@UnitTesting_Circle .	P Near	 00004679 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_DoubleProxy 	P Near	 00004690 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_Objects_Array  P Near	  000046A7 _TEXT	Length= 0000001E Public STDCALL
__member_Init@UnitTesting_Objects_Automobile . P Near   000046C5 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_Rnd  .	P Near	 000046DC _TEXT	Length= 00000041 Public STDCALL
__member_Init@UnitTesting_ShapeFactoryCreator  P Near   0000471D _TEXT	Length= 0000003C Public STDCALL
  $L001635 . . . . . . . . . . .	L Near	 00004744 _TEXT	
  $L001636 . . . . . . . . . . .	L Near	 00004746 _TEXT	
__member_Init@UnitTesting_Square .	P Near	 00004759 _TEXT	Length= 0000001F Public STDCALL
__member_Init@UnitTesting_TestIntegers . P Near	  00004778 _TEXT	Length= 0000003F Public STDCALL
__member_Init@UnitTesting_TestProperties_node  P Near   000048A6 _TEXT	Length= 00000026 Public STDCALL
__member_Init@UnitTesting_TestProperties . P Near   000047B7 _TEXT	Length= 000000EF Public STDCALL
  $L001637 . . . . . . . . . . .	L Near	 000047EC _TEXT	
  $L001638 . . . . . . . . . . .	L Near	 000047EE _TEXT	
  $L001639 . . . . . . . . . . .	L Near	 000047FB _TEXT	
  $L001640 . . . . . . . . . . .	L Near	 00004836 _TEXT	
  $L001641 . . . . . . . . . . .	L Near	 00004838 _TEXT	
  $L001642 . . . . . . . . . . .	L Near	 00004846 _TEXT	
  $L001643 . . . . . . . . . . .	L Near	 00004881 _TEXT	
  $L001644 . . . . . . . . . . .	L Near	 00004883 _TEXT	
  $L001645 . . . . . . . . . . .	L Near	 00004891 _TEXT	
__member_Init@UnitTesting_Triangle .	P Near	 000048CC _TEXT	Length= 0000001F Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000547 . . . . . . . . . . . .	Byte	 000004BD _DATA	
$S000552 . . . . . . . . . . . .	Byte	 0000077B _DATA	
$S000570 . . . . . . . . . . . .	Byte	 000007A5 _DATA	
$S000580 . . . . . . . . . . . .	Byte	 0000078D _DATA	
$S000615 . . . . . . . . . . . .	Byte	 00000B6A _DATA	
$S000616 . . . . . . . . . . . .	Byte	 000009D2 _DATA	
$S000626 . . . . . . . . . . . .	Byte	 00000D1F _DATA	
$S000627 . . . . . . . . . . . .	Byte	 0000071B _DATA	
$S000629 . . . . . . . . . . . .	Byte	 00000CA0 _DATA	
$S000631 . . . . . . . . . . . .	Byte	 00000CB4 _DATA	
$S000639 . . . . . . . . . . . .	Byte	 00000B5A _DATA	
$S000640 . . . . . . . . . . . .	Byte	 0000086B _DATA	
$S000641 . . . . . . . . . . . .	Byte	 0000092A _DATA	
$S000642 . . . . . . . . . . . .	Byte	 00000915 _DATA	
$S000643 . . . . . . . . . . . .	Byte	 0000093E _DATA	
$S000645 . . . . . . . . . . . .	Byte	 00000903 _DATA	
$S000646 . . . . . . . . . . . .	Byte	 00000AC1 _DATA	
$S000670 . . . . . . . . . . . .	Byte	 000007DB _DATA	
$S000672 . . . . . . . . . . . .	Byte	 00000957 _DATA	
$S000675 . . . . . . . . . . . .	Byte	 00000EB5 _DATA	
$S000677 . . . . . . . . . . . .	Byte	 0000098C _DATA	
$S000684 . . . . . . . . . . . .	Byte	 00000ED3 _DATA	
$S000696 . . . . . . . . . . . .	Byte	 00000BE2 _DATA	
$S000698 . . . . . . . . . . . .	Byte	 0000099E _DATA	
$S000700 . . . . . . . . . . . .	Byte	 00000969 _DATA	
$S000716 . . . . . . . . . . . .	Byte	 00000D80 _DATA	
$S000718 . . . . . . . . . . . .	Byte	 000009B0 _DATA	
$S000721 . . . . . . . . . . . .	Byte	 00000F1C _DATA	
$S000723 . . . . . . . . . . . .	Byte	 00000979 _DATA	
$S000734 . . . . . . . . . . . .	Byte	 00001115 _DATA	
$S000736 . . . . . . . . . . . .	Byte	 00001126 _DATA	
$S000738 . . . . . . . . . . . .	Byte	 00001137 _DATA	
$S000740 . . . . . . . . . . . .	Byte	 000006D2 _DATA	
$S000789 . . . . . . . . . . . .	Byte	 000008E5 _DATA	
$S000794 . . . . . . . . . . . .	Byte	 0000087B _DATA	
$S000806 . . . . . . . . . . . .	Byte	 000008C1 _DATA	
$S000874 . . . . . . . . . . . .	Byte	 00000769 _DATA	
$S000914 . . . . . . . . . . . .	Byte	 0000067C _DATA	
$S000915 . . . . . . . . . . . .	Byte	 000006A7 _DATA	
$S000918 . . . . . . . . . . . .	Byte	 00000C5B _DATA	
$S000921 . . . . . . . . . . . .	Byte	 000010D2 _DATA	
$S000924 . . . . . . . . . . . .	Byte	 000009DD _DATA	
$S000926 . . . . . . . . . . . .	Byte	 00000C76 _DATA	
$S000982 . . . . . . . . . . . .	Byte	 00000157 _DATA	
$S000990 . . . . . . . . . . . .	Byte	 000005EC _DATA	
$S000992 . . . . . . . . . . . .	Byte	 0000061A _DATA	
$S000996 . . . . . . . . . . . .	Byte	 000005A8 _DATA	
$S000998 . . . . . . . . . . . .	Byte	 00000602 _DATA	
$S001000 . . . . . . . . . . . .	Byte	 0000062D _DATA	
$S001002 . . . . . . . . . . . .	Byte	 00000643 _DATA	
$S001004 . . . . . . . . . . . .	Byte	 000004FB _DATA	
$S001006 . . . . . . . . . . . .	Byte	 000004DF _DATA	
$S001012 . . . . . . . . . . . .	Byte	 0000056B _DATA	
$S001014 . . . . . . . . . . . .	Byte	 00000536 _DATA	
$S001016 . . . . . . . . . . . .	Byte	 00000519 _DATA	
$S001018 . . . . . . . . . . . .	Byte	 00000553 _DATA	
$S001021 . . . . . . . . . . . .	Byte	 000005BE _DATA	
$S001023 . . . . . . . . . . . .	Byte	 000005D5 _DATA	
$S001024 . . . . . . . . . . . .	Byte	 000010BE _DATA	
$S001025 . . . . . . . . . . . .	Byte	 0000108E _DATA	
$S001026 . . . . . . . . . . . .	Byte	 000010A6 _DATA	
$S001027 . . . . . . . . . . . .	Byte	 0000107B _DATA	
$S001028 . . . . . . . . . . . .	Byte	 00001068 _DATA	
$S001038 . . . . . . . . . . . .	Byte	 00000FC6 _DATA	
$S001039 . . . . . . . . . . . .	Byte	 0000114A _DATA	
$S001040 . . . . . . . . . . . .	Byte	 00000441 _DATA	
$S001047 . . . . . . . . . . . .	Byte	 0000042C _DATA	
$S001053 . . . . . . . . . . . .	Byte	 00000C3E _DATA	
$S001054 . . . . . . . . . . . .	Byte	 00000C2A _DATA	
$S001072 . . . . . . . . . . . .	Byte	 00000192 _DATA	
$S001077 . . . . . . . . . . . .	Byte	 000001A6 _DATA	
$S001082 . . . . . . . . . . . .	Byte	 0000017E _DATA	
$S001087 . . . . . . . . . . . .	Byte	 00000468 _DATA	
$S001092 . . . . . . . . . . . .	Byte	 000004A7 _DATA	
$S001097 . . . . . . . . . . . .	Byte	 000004C4 _DATA	
$S001110 . . . . . . . . . . . .	Byte	 00000C18 _DATA	
$S001117 . . . . . . . . . . . .	Byte	 00000E88 _DATA	
$S001119 . . . . . . . . . . . .	Byte	 00000EF1 _DATA	
$S001141 . . . . . . . . . . . .	Byte	 000007CF _DATA	
$S001142 . . . . . . . . . . . .	Byte	 00000DC6 _DATA	
$S001143 . . . . . . . . . . . .	Byte	 00000B2E _DATA	
$S001148 . . . . . . . . . . . .	Byte	 000001BA _DATA	
$S001149 . . . . . . . . . . . .	Byte	 00000FDF _DATA	
$S001150 . . . . . . . . . . . .	Byte	 0000024A _DATA	
$S001151 . . . . . . . . . . . .	Byte	 000002DA _DATA	
$S001154 . . . . . . . . . . . .	Byte	 00000DD3 _DATA	
$S001155 . . . . . . . . . . . .	Byte	 00000DFE _DATA	
$S001156 . . . . . . . . . . . .	Byte	 00000E2E _DATA	
$S001157 . . . . . . . . . . . .	Byte	 00000E54 _DATA	
$S001164 . . . . . . . . . . . .	Byte	 00000E79 _DATA	
$S001165 . . . . . . . . . . . .	Byte	 00000DC1 _DATA	
$S001167 . . . . . . . . . . . .	Byte	 00000A56 _DATA	
$S001176 . . . . . . . . . . . .	Byte	 00000B15 _DATA	
$S001183 . . . . . . . . . . . .	Byte	 000007C5 _DATA	
$S001184 . . . . . . . . . . . .	Byte	 000006FC _DATA	
$S001185 . . . . . . . . . . . .	Byte	 00000DD0 _DATA	
$S001188 . . . . . . . . . . . .	Byte	 00000C50 _DATA	
$S001190 . . . . . . . . . . . .	Byte	 00000A4E _DATA	
$S001191 . . . . . . . . . . . .	Byte	 00000AED _DATA	
$S001192 . . . . . . . . . . . .	Byte	 00000AF7 _DATA	
$S001193 . . . . . . . . . . . .	Byte	 00000AFF _DATA	
$S001200 . . . . . . . . . . . .	Byte	 000007B9 _DATA	
$S001201 . . . . . . . . . . . .	Byte	 00000DCC _DATA	
$S001203 . . . . . . . . . . . .	Byte	 00000761 _DATA	
$S001208 . . . . . . . . . . . .	Byte	 00000A78 _DATA	
$S001214 . . . . . . . . . . . .	Byte	 00000FD6 _DATA	
$S001219 . . . . . . . . . . . .	Byte	 0000089A _DATA	
$S001223 . . . . . . . . . . . .	Byte	 000009C4 _DATA	
$S001224 . . . . . . . . . . . .	Byte	 00000129 _DATA	
$S001228 . . . . . . . . . . . .	Byte	 00000CC8 _DATA	
$S001229 . . . . . . . . . . . .	Byte	 00000CED _DATA	
$S001230 . . . . . . . . . . . .	Byte	 00000494 _DATA	
$S001231 . . . . . . . . . . . .	Byte	 0000047E _DATA	
$S001237 . . . . . . . . . . . .	Byte	 0000114F _DATA	
$S001241 . . . . . . . . . . . .	Byte	 00000589 _DATA	
$S001242 . . . . . . . . . . . .	Byte	 00000A0F _DATA	
$S001246 . . . . . . . . . . . .	Byte	 00001042 _DATA	
$S001247 . . . . . . . . . . . .	Byte	 00000659 _DATA	
$S001250 . . . . . . . . . . . .	Byte	 00000BCF _DATA	
$S001252 . . . . . . . . . . . .	Byte	 00000B9A _DATA	
$S001253 . . . . . . . . . . . .	Byte	 000001BE _DATA	
$S001254 . . . . . . . . . . . .	Byte	 0000024E _DATA	
$S001255 . . . . . . . . . . . .	Byte	 000002DE _DATA	
$S001256 . . . . . . . . . . . .	Byte	 0000036A _DATA	
$S001257 . . . . . . . . . . . .	Byte	 000003F6 _DATA	
$S001258 . . . . . . . . . . . .	Byte	 00000411 _DATA	
$S001260 . . . . . . . . . . . .	Byte	 00000B7D _DATA	
$S001263 . . . . . . . . . . . .	Byte	 000001D9 _DATA	
$S001264 . . . . . . . . . . . .	Byte	 00000141 _DATA	
$S001265 . . . . . . . . . . . .	Byte	 00000269 _DATA	
$S001266 . . . . . . . . . . . .	Byte	 000002F9 _DATA	
$S001267 . . . . . . . . . . . .	Byte	 00000385 _DATA	
$S001268 . . . . . . . . . . . .	Byte	 00000FCB _DATA	
$S001270 . . . . . . . . . . . .	Byte	 00000225 _DATA	
$S001271 . . . . . . . . . . . .	Byte	 000002B5 _DATA	
$S001272 . . . . . . . . . . . .	Byte	 00000345 _DATA	
$S001273 . . . . . . . . . . . .	Byte	 000003D1 _DATA	
$S001275 . . . . . . . . . . . .	Byte	 000001FC _DATA	
$S001276 . . . . . . . . . . . .	Byte	 0000028C _DATA	
$S001277 . . . . . . . . . . . .	Byte	 0000031C _DATA	
$S001278 . . . . . . . . . . . .	Byte	 000003A8 _DATA	
$S001282 . . . . . . . . . . . .	Byte	 000007F1 _DATA	
$S001284 . . . . . . . . . . . .	Byte	 000007E2 _DATA	
$S001286 . . . . . . . . . . . .	Byte	 0000115E _DATA	
$S001287 . . . . . . . . . . . .	Byte	 00001038 _DATA	
$S001291 . . . . . . . . . . . .	Byte	 0000105C _DATA	
$S001292 . . . . . . . . . . . .	Byte	 00000730 _DATA	
$S001293 . . . . . . . . . . . .	Byte	 00000726 _DATA	
$S001297 . . . . . . . . . . . .	Byte	 00001109 _DATA	
$S001298 . . . . . . . . . . . .	Byte	 0000073F _DATA	
$S001300 . . . . . . . . . . . .	Byte	 00000AA9 _DATA	
$S001302 . . . . . . . . . . . .	Byte	 00000B08 _DATA	
$S001303 . . . . . . . . . . . .	Byte	 00000A2F _DATA	
$S001308 . . . . . . . . . . . .	Byte	 000011C7 _DATA	
$S001309 . . . . . . . . . . . .	Byte	 0000074D _DATA	
$S001310 . . . . . . . . . . . .	Byte	 00000D5E _DATA	
$S001311 . . . . . . . . . . . .	Byte	 0000065E _DATA	
$S001312 . . . . . . . . . . . .	Byte	 0000044F _DATA	
$S001313 . . . . . . . . . . . .	Byte	 000006FF _DATA	
$S001314 . . . . . . . . . . . .	Byte	 00000BE9 _DATA	
$S001315 . . . . . . . . . . . .	Byte	 000008AA _DATA	
$S001317 . . . . . . . . . . . .	Byte	 00000150 _DATA	
$S001319 . . . . . . . . . . . .	Byte	 00000137 _DATA	
$S001320 . . . . . . . . . . . .	Byte	 00000BB8 _DATA	
$S001322 . . . . . . . . . . . .	Byte	 0000012D _DATA	
$S001325 . . . . . . . . . . . .	Byte	 000006EB _DATA	
$S001326 . . . . . . . . . . . .	Byte	 0000104A _DATA	
$S001336 . . . . . . . . . . . .	Byte	 00000F54 _DATA	
$S001337 . . . . . . . . . . . .	Byte	 00000FB3 _DATA	
$S001338 . . . . . . . . . . . .	Byte	 00000FA0 _DATA	
$S001339 . . . . . . . . . . . .	Byte	 00000F7A _DATA	
$S001340 . . . . . . . . . . . .	Byte	 00000F67 _DATA	
$S001341 . . . . . . . . . . . .	Byte	 00000F8D _DATA	
$S001344 . . . . . . . . . . . .	Byte	 00001173 _DATA	
$S001345 . . . . . . . . . . . .	Byte	 00001188 _DATA	
$S001346 . . . . . . . . . . . .	Byte	 0000119D _DATA	
$S001347 . . . . . . . . . . . .	Byte	 000011B2 _DATA	
$S001356 . . . . . . . . . . . .	Byte	 0000102F _DATA	
$S001358 . . . . . . . . . . . .	Byte	 00000835 _DATA	
$S001359 . . . . . . . . . . . .	Byte	 00000850 _DATA	
$S001361 . . . . . . . . . . . .	Byte	 00000802 _DATA	
$S001362 . . . . . . . . . . . .	Byte	 0000081A _DATA	
$S001364 . . . . . . . . . . . .	Byte	 000009EF _DATA	
$S001374 . . . . . . . . . . . .	Byte	 00000D30 _DATA	
$S001377 . . . . . . . . . . . .	Byte	 00000A71 _DATA	
$S001379 . . . . . . . . . . . .	Byte	 00000A67 _DATA	
$S001382 . . . . . . . . . . . .	Byte	 00000FF5 _DATA	
$S001383 . . . . . . . . . . . .	Byte	 00001013 _DATA	
$S001384 . . . . . . . . . . . .	Byte	 00001004 _DATA	
$S001385 . . . . . . . . . . . .	Byte	 0000016D _DATA	
$S001386 . . . . . . . . . . . .	Byte	 00000F3C _DATA	
$S001387 . . . . . . . . . . . .	Byte	 00000AD3 _DATA	
$S001388 . . . . . . . . . . . .	Byte	 00000A90 _DATA	
$S001389 . . . . . . . . . . . .	Byte	 00000D89 _DATA	
$S001408 . . . . . . . . . . . .	Byte	 00000E81 _DATA	
$S001410 . . . . . . . . . . . .	Byte	 00000B22 _DATA	
$S001413 . . . . . . . . . . . .	Byte	 00000D9F _DATA	
$S001416 . . . . . . . . . . . .	Byte	 00000C90 _DATA	
$S001417 . . . . . . . . . . . .	Byte	 00000DBE _DATA	
@@class_vptr_vtbl@@__UnitTesting_Circle  DWord	  00000000 _DATA	
@@class_vptr_vtbl@@__UnitTesting_DoubleProxy . DWord    0000002C _DATA	
@@class_vptr_vtbl@@__UnitTesting_DoubleSwapper . DWord	  0000004C _DATA	
@@class_vptr_vtbl@@__UnitTesting_HObject . DWord    0000006C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles  DWord    0000007C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_Array . DWord	  00000070 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_Automobile  DWord    00000088 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject . DWord    0000008C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Shape . DWord	  00000018 _DATA	
@@class_vptr_vtbl@@__UnitTesting_SimpleObject  DWord    0000003C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Square  DWord	  00000090 _DATA	
@@class_vptr_vtbl@@__UnitTesting_SwapperObject . DWord	  0000005C _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestProperties  DWord	  000000A4 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV  DWord    000000A8 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable . DWord    000000B0 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV . DWord	  000000B8 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV  DWord	  000000C0 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Triangle  DWord    000000C8 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UnitTesting_Rnd_a  . . . . . . .	DWord	 00001214 _DATA	
UnitTesting_Rnd_m  . . . . . . .	DWord	 00001218 _DATA	
UnitTesting_Rnd_q  . . . . . . .	DWord	 0000121C _DATA	
UnitTesting_Rnd_r  . . . . . . .	DWord	 00001220 _DATA	
UnitTesting_Rnd_seed . . . . . .	DWord	 00001210 _DATA	
UnitTesting_TestIntegers_bigValue 	QWord	 00001274 _DATA	
UnitTesting_TestSwitch_close . .	Number	 00000002h   
UnitTesting_TestSwitch_open  . .	Number	 00000001h   
UnitTesting_TestSwitch_read  . .	Number	 00000004h   
UnitTesting_TestSwitch_write . .	Number	 00000003h   
UnitTesting_array3 . . . . . . .	Byte	 0000127C _DATA	
UnitTesting_array4 . . . . . . .	QWord	 00001280 _DATA	
UnitTesting_hundred  . . . . . .	Number	 00000064h   
UnitTesting_max_64_neg . . . . .	QWord	 000000E8 _DATA	
UnitTesting_max_64 . . . . . . .	QWord	 000000E0 _DATA	
UnitTesting_max_length . . . . .	Number	 00000050h   
UnitTesting_minusten . . . . . .	Number	 FFFFFFF6h   
UnitTesting_misc1_array  . . . .	QWord	 00001224 _DATA	
UnitTesting_misc1_boy  . . . . .	Byte	 00000110 _DATA	
UnitTesting_misc1_ch1  . . . . .	Number	 00000061h   
UnitTesting_misc1_ch2  . . . . .	Number	 0000007Ah   
UnitTesting_misc1_dX . . . . . .	QWord	 00000119 _DATA	
UnitTesting_misc1_dY . . . . . .	QWord	 00000121 _DATA	
UnitTesting_misc1_e  . . . . . .	DWord	 000000F8 _DATA	
UnitTesting_misc1_hello  . . . .	Byte	 000000FC _DATA	
UnitTesting_misc1_hell . . . . .	Byte	 0000010A _DATA	
UnitTesting_misc1_pi . . . . . .	QWord	 000000F0 _DATA	
UnitTesting_misc1_ten_plus . . .	Number	 0000000Ah   
UnitTesting_ten  . . . . . . . .	Number	 0000000Ah   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 0000120C _DATA	
___argv  . . . . . . . . . . . .	DWord	 00001208 _DATA	
__computer . . . . . . . . . . .	Byte	 000011E8 _DATA	
__osver  . . . . . . . . . . . .	DWord	 000011D8 _DATA	
__winmajor . . . . . . . . . . .	DWord	 000011E0 _DATA	
__winminor . . . . . . . . . . .	DWord	 000011DC _DATA	
__winver . . . . . . . . . . . .	DWord	 000011E4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
