Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:12:31
testhelloworld.hpp					     Page 1 - 1


				TITLE	 testhelloworld.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000469
				;}
 00000043			$L000469:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  8B E5			mov	ESP,EBP
 00000048  5D				pop	EBP 
 00000049  C2 0008			retn	000000008h
 0000004C			Math_DegreesToRadians ENDP

 0000004C			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004C  55				push	EBP
 0000004D  8B EC			mov	EBP,ESP
 0000004F  51				push	ECX 
 00000050  53				push	EBX 
 00000051  56				push	ESI 
 00000052  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000053  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000056  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000059  50				push	EAX
 0000005A  52				push	EDX 
 0000005B  E8 00000000 E		call	 Math_Exp
 00000060  50				push	EAX
 00000061  52				push	EDX 
 00000062  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000065  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000068  50				push	EAX
 00000069  52				push	EDX 
 0000006A  DD 04 24			fld	qword ptr [ESP]
 0000006D  D9 E0			fchs
 0000006F  DD 1C 24			fstp	qword ptr [ESP]
 00000072  E8 00000000 E		call	 Math_Exp
 00000077  50				push	EAX
 00000078  52				push	EDX 
 00000079  DD 04 24			fld	qword ptr [ESP]
 0000007C  59				pop	ECX
 0000007D  59				pop	ECX 
 0000007E  DC 04 24			fadd	qword ptr [ESP]
 00000081  DD 1C 24			fstp	qword ptr [ESP]
 00000084  B8 00000002			mov	EAX,000000002h
 00000089  9B DB E2			fclex
 0000008C  50				push	EAX
 0000008D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000092  50				push	EAX
 00000093  52				push	EDX 
 00000094  DD 04 24			fld	qword ptr [ESP]
 00000097  59				pop	ECX
 00000098  59				pop	ECX 
 00000099  DC 3C 24			fdivr	qword ptr [ESP]
 0000009C  DD 1C 24			fstp	qword ptr [ESP]
 0000009F  5A				pop	EDX
 000000A0  58				pop	EAX 
 000000A1  EB 00			jmp	OFFSET $L000486
				;}
 000000A3			$L000486:

 000000A3  5F				pop	EDI
 000000A4  5E				pop	ESI 
 000000A5  5B				pop	EBX 
 000000A6  8B E5			mov	ESP,EBP
 000000A8  5D				pop	EBP 
 000000A9  C2 0008			retn	000000008h
 000000AC			Math_Hyperbolic_HCos ENDP

 000000AC			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000AC  55				push	EBP
 000000AD  8B EC			mov	EBP,ESP
 000000AF  51				push	ECX 
 000000B0  53				push	EBX 
 000000B1  56				push	ESI 
 000000B2  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000B3  B8 00000002			mov	EAX,000000002h
 000000B8  50				push	EAX
 000000B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BF  50				push	EAX
 000000C0  52				push	EDX 
 000000C1  E8 00000000 E		call	 Math_Exp
 000000C6  50				push	EAX
 000000C7  52				push	EDX 
 000000C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CE  50				push	EAX
 000000CF  52				push	EDX 
 000000D0  DD 04 24			fld	qword ptr [ESP]
 000000D3  D9 E0			fchs
 000000D5  DD 1C 24			fstp	qword ptr [ESP]
 000000D8  E8 00000000 E		call	 Math_Exp
 000000DD  50				push	EAX
 000000DE  52				push	EDX 
 000000DF  DD 04 24			fld	qword ptr [ESP]
 000000E2  59				pop	ECX
 000000E3  59				pop	ECX 
 000000E4  DD 04 24			fld	qword ptr [ESP]
 000000E7  D8 E1			fsub	st,st(1)
 000000E9  DD 1C 24			fstp	qword ptr [ESP]
 000000EC  9B DB E2			fclex
 000000EF  DD 04 24			fld	qword ptr [ESP]
 000000F2  59				pop	ECX
 000000F3  59				pop	ECX 
 000000F4  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F9  50				push	EAX
 000000FA  52				push	EDX 
 000000FB  DC 3C 24			fdivr	qword ptr [ESP]
 000000FE  DD 1C 24			fstp	qword ptr [ESP]
 00000101  5A				pop	EDX
 00000102  58				pop	EAX 
 00000103  EB 00			jmp	OFFSET $L000492
				;}
 00000105			$L000492:

 00000105  5F				pop	EDI
 00000106  5E				pop	ESI 
 00000107  5B				pop	EBX 
 00000108  8B E5			mov	ESP,EBP
 0000010A  5D				pop	EBP 
 0000010B  C2 0008			retn	000000008h
 0000010E			Math_Hyperbolic_HCosec ENDP

 0000010E			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000010E  55				push	EBP
 0000010F  8B EC			mov	EBP,ESP
 00000111  51				push	ECX 
 00000112  53				push	EBX 
 00000113  56				push	ESI 
 00000114  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000115  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000118  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000011B  50				push	EAX
 0000011C  52				push	EDX 
 0000011D  E8 00000000 E		call	 Math_Exp
 00000122  50				push	EAX
 00000123  52				push	EDX 
 00000124  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000127  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000012A  50				push	EAX
 0000012B  52				push	EDX 
 0000012C  DD 04 24			fld	qword ptr [ESP]
 0000012F  D9 E0			fchs
 00000131  DD 1C 24			fstp	qword ptr [ESP]
 00000134  E8 00000000 E		call	 Math_Exp
 00000139  50				push	EAX
 0000013A  52				push	EDX 
 0000013B  DD 04 24			fld	qword ptr [ESP]
 0000013E  59				pop	ECX
 0000013F  59				pop	ECX 
 00000140  DC 04 24			fadd	qword ptr [ESP]
 00000143  DD 1C 24			fstp	qword ptr [ESP]
 00000146  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000149  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000014C  50				push	EAX
 0000014D  52				push	EDX 
 0000014E  E8 00000000 E		call	 Math_Exp
 00000153  50				push	EAX
 00000154  52				push	EDX 
 00000155  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000158  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000015B  50				push	EAX
 0000015C  52				push	EDX 
 0000015D  DD 04 24			fld	qword ptr [ESP]
 00000160  D9 E0			fchs
 00000162  DD 1C 24			fstp	qword ptr [ESP]
 00000165  E8 00000000 E		call	 Math_Exp
 0000016A  50				push	EAX
 0000016B  52				push	EDX 
 0000016C  DD 04 24			fld	qword ptr [ESP]
 0000016F  59				pop	ECX
 00000170  59				pop	ECX 
 00000171  DD 04 24			fld	qword ptr [ESP]
 00000174  D8 E1			fsub	st,st(1)
 00000176  DD 1C 24			fstp	qword ptr [ESP]
 00000179  9B DB E2			fclex
 0000017C  DD 04 24			fld	qword ptr [ESP]
 0000017F  59				pop	ECX
 00000180  59				pop	ECX 
 00000181  DC 3C 24			fdivr	qword ptr [ESP]
 00000184  DD 1C 24			fstp	qword ptr [ESP]
 00000187  5A				pop	EDX
 00000188  58				pop	EAX 
 00000189  EB 00			jmp	OFFSET $L000494
				;}
 0000018B			$L000494:

 0000018B  5F				pop	EDI
 0000018C  5E				pop	ESI 
 0000018D  5B				pop	EBX 
 0000018E  8B E5			mov	ESP,EBP
 00000190  5D				pop	EBP 
 00000191  C2 0008			retn	000000008h
 00000194			Math_Hyperbolic_HCotan ENDP

 00000194			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00000194  55				push	EBP
 00000195  8B EC			mov	EBP,ESP
 00000197  51				push	ECX 
 00000198  53				push	EBX 
 00000199  56				push	ESI 
 0000019A  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 0000019B  B8 00000002			mov	EAX,000000002h
 000001A0  50				push	EAX
 000001A1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001A4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001A7  50				push	EAX
 000001A8  52				push	EDX 
 000001A9  E8 00000000 E		call	 Math_Exp
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001B3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001B6  50				push	EAX
 000001B7  52				push	EDX 
 000001B8  DD 04 24			fld	qword ptr [ESP]
 000001BB  D9 E0			fchs
 000001BD  DD 1C 24			fstp	qword ptr [ESP]
 000001C0  E8 00000000 E		call	 Math_Exp
 000001C5  50				push	EAX
 000001C6  52				push	EDX 
 000001C7  DD 04 24			fld	qword ptr [ESP]
 000001CA  59				pop	ECX
 000001CB  59				pop	ECX 
 000001CC  DC 04 24			fadd	qword ptr [ESP]
 000001CF  DD 1C 24			fstp	qword ptr [ESP]
 000001D2  9B DB E2			fclex
 000001D5  DD 04 24			fld	qword ptr [ESP]
 000001D8  59				pop	ECX
 000001D9  59				pop	ECX 
 000001DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000001DF  50				push	EAX
 000001E0  52				push	EDX 
 000001E1  DC 3C 24			fdivr	qword ptr [ESP]
 000001E4  DD 1C 24			fstp	qword ptr [ESP]
 000001E7  5A				pop	EDX
 000001E8  58				pop	EAX 
 000001E9  EB 00			jmp	OFFSET $L000490
				;}
 000001EB			$L000490:

 000001EB  5F				pop	EDI
 000001EC  5E				pop	ESI 
 000001ED  5B				pop	EBX 
 000001EE  8B E5			mov	ESP,EBP
 000001F0  5D				pop	EBP 
 000001F1  C2 0008			retn	000000008h
 000001F4			Math_Hyperbolic_HSec ENDP

 000001F4			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001F4  55				push	EBP
 000001F5  8B EC			mov	EBP,ESP
 000001F7  51				push	ECX 
 000001F8  53				push	EBX 
 000001F9  56				push	ESI 
 000001FA  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000201  50				push	EAX
 00000202  52				push	EDX 
 00000203  E8 00000000 E		call	 Math_Exp
 00000208  50				push	EAX
 00000209  52				push	EDX 
 0000020A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000020D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000210  50				push	EAX
 00000211  52				push	EDX 
 00000212  DD 04 24			fld	qword ptr [ESP]
 00000215  D9 E0			fchs
 00000217  DD 1C 24			fstp	qword ptr [ESP]
 0000021A  E8 00000000 E		call	 Math_Exp
 0000021F  50				push	EAX
 00000220  52				push	EDX 
 00000221  DD 04 24			fld	qword ptr [ESP]
 00000224  59				pop	ECX
 00000225  59				pop	ECX 
 00000226  DD 04 24			fld	qword ptr [ESP]
 00000229  D8 E1			fsub	st,st(1)
 0000022B  DD 1C 24			fstp	qword ptr [ESP]
 0000022E  B8 00000002			mov	EAX,000000002h
 00000233  9B DB E2			fclex
 00000236  50				push	EAX
 00000237  E8 00000000 E		call	 FloatingPoint_FromInt
 0000023C  50				push	EAX
 0000023D  52				push	EDX 
 0000023E  DD 04 24			fld	qword ptr [ESP]
 00000241  59				pop	ECX
 00000242  59				pop	ECX 
 00000243  DC 3C 24			fdivr	qword ptr [ESP]
 00000246  DD 1C 24			fstp	qword ptr [ESP]
 00000249  5A				pop	EDX
 0000024A  58				pop	EAX 
 0000024B  EB 00			jmp	OFFSET $L000483
				;}
 0000024D			$L000483:

 0000024D  5F				pop	EDI
 0000024E  5E				pop	ESI 
 0000024F  5B				pop	EBX 
 00000250  8B E5			mov	ESP,EBP
 00000252  5D				pop	EBP 
 00000253  C2 0008			retn	000000008h
 00000256			Math_Hyperbolic_HSin ENDP

 00000256			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 00000256  55				push	EBP
 00000257  8B EC			mov	EBP,ESP
 00000259  51				push	ECX 
 0000025A  53				push	EBX 
 0000025B  56				push	ESI 
 0000025C  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 0000025D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000260  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000263  50				push	EAX
 00000264  52				push	EDX 
 00000265  E8 00000000 E		call	 Math_Exp
 0000026A  50				push	EAX
 0000026B  52				push	EDX 
 0000026C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000026F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000272  50				push	EAX
 00000273  52				push	EDX 
 00000274  DD 04 24			fld	qword ptr [ESP]
 00000277  D9 E0			fchs
 00000279  DD 1C 24			fstp	qword ptr [ESP]
 0000027C  E8 00000000 E		call	 Math_Exp
 00000281  50				push	EAX
 00000282  52				push	EDX 
 00000283  DD 04 24			fld	qword ptr [ESP]
 00000286  59				pop	ECX
 00000287  59				pop	ECX 
 00000288  DD 04 24			fld	qword ptr [ESP]
 0000028B  D8 E1			fsub	st,st(1)
 0000028D  DD 1C 24			fstp	qword ptr [ESP]
 00000290  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000293  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000296  50				push	EAX
 00000297  52				push	EDX 
 00000298  E8 00000000 E		call	 Math_Exp
 0000029D  50				push	EAX
 0000029E  52				push	EDX 
 0000029F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002A2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002A5  50				push	EAX
 000002A6  52				push	EDX 
 000002A7  DD 04 24			fld	qword ptr [ESP]
 000002AA  D9 E0			fchs
 000002AC  DD 1C 24			fstp	qword ptr [ESP]
 000002AF  E8 00000000 E		call	 Math_Exp
 000002B4  50				push	EAX
 000002B5  52				push	EDX 
 000002B6  DD 04 24			fld	qword ptr [ESP]
 000002B9  59				pop	ECX
 000002BA  59				pop	ECX 
 000002BB  DC 04 24			fadd	qword ptr [ESP]
 000002BE  DD 1C 24			fstp	qword ptr [ESP]
 000002C1  9B DB E2			fclex
 000002C4  DD 04 24			fld	qword ptr [ESP]
 000002C7  59				pop	ECX
 000002C8  59				pop	ECX 
 000002C9  DC 3C 24			fdivr	qword ptr [ESP]
 000002CC  DD 1C 24			fstp	qword ptr [ESP]
 000002CF  5A				pop	EDX
 000002D0  58				pop	EAX 
 000002D1  EB 00			jmp	OFFSET $L000488
				;}
 000002D3			$L000488:

 000002D3  5F				pop	EDI
 000002D4  5E				pop	ESI 
 000002D5  5B				pop	EBX 
 000002D6  8B E5			mov	ESP,EBP
 000002D8  5D				pop	EBP 
 000002D9  C2 0008			retn	000000008h
 000002DC			Math_Hyperbolic_HTan ENDP

 000002DC			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002DC  55				push	EBP
 000002DD  8B EC			mov	EBP,ESP
 000002DF  51				push	ECX 
 000002E0  53				push	EBX 
 000002E1  56				push	ESI 
 000002E2  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 000002E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E9  50				push	EAX
 000002EA  52				push	EDX 
 000002EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F1  50				push	EAX
 000002F2  52				push	EDX 
 000002F3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002F6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F9  9B DB E2			fclex
 000002FC  50				push	EAX
 000002FD  52				push	EDX 
 000002FE  DD 04 24			fld	qword ptr [ESP]
 00000301  59				pop	ECX
 00000302  59				pop	ECX 
 00000303  DC 0C 24			fmul	qword ptr [ESP]
 00000306  DD 1C 24			fstp	qword ptr [ESP]
 00000309  B8 00000001			mov	EAX,000000001h
 0000030E  50				push	EAX
 0000030F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000314  50				push	EAX
 00000315  52				push	EDX 
 00000316  DD 04 24			fld	qword ptr [ESP]
 00000319  59				pop	ECX
 0000031A  59				pop	ECX 
 0000031B  DD 04 24			fld	qword ptr [ESP]
 0000031E  D8 E1			fsub	st,st(1)
 00000320  DD 1C 24			fstp	qword ptr [ESP]
 00000323  E8 00000000 E		call	 Math_Sqrt
 00000328  50				push	EAX
 00000329  52				push	EDX 
 0000032A  DD 04 24			fld	qword ptr [ESP]
 0000032D  59				pop	ECX
 0000032E  59				pop	ECX 
 0000032F  DC 04 24			fadd	qword ptr [ESP]
 00000332  DD 1C 24			fstp	qword ptr [ESP]
 00000335  E8 00000000 E		call	 Math_Ln
 0000033A  EB 00			jmp	OFFSET $L000500
				;}
 0000033C			$L000500:

 0000033C  5F				pop	EDI
 0000033D  5E				pop	ESI 
 0000033E  5B				pop	EBX 
 0000033F  8B E5			mov	ESP,EBP
 00000341  5D				pop	EBP 
 00000342  C2 0008			retn	000000008h
 00000345			Math_Hyperbolic_Inverse_HArccos ENDP

 00000345			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000345  55				push	EBP
 00000346  8B EC			mov	EBP,ESP
 00000348  51				push	ECX 
 00000349  53				push	EBX 
 0000034A  56				push	ESI 
 0000034B  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000034C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000352  50				push	EAX
 00000353  52				push	EDX 
 00000354  E8 00000000 E		call	 Math_Sign
 00000359  50				push	EAX
 0000035A  52				push	EDX 
 0000035B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000035E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000361  50				push	EAX
 00000362  52				push	EDX 
 00000363  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000366  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000369  9B DB E2			fclex
 0000036C  50				push	EAX
 0000036D  52				push	EDX 
 0000036E  DD 04 24			fld	qword ptr [ESP]
 00000371  59				pop	ECX
 00000372  59				pop	ECX 
 00000373  DC 0C 24			fmul	qword ptr [ESP]
 00000376  DD 1C 24			fstp	qword ptr [ESP]
 00000379  B8 00000001			mov	EAX,000000001h
 0000037E  50				push	EAX
 0000037F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000384  50				push	EAX
 00000385  52				push	EDX 
 00000386  DD 04 24			fld	qword ptr [ESP]
 00000389  59				pop	ECX
 0000038A  59				pop	ECX 
 0000038B  DC 04 24			fadd	qword ptr [ESP]
 0000038E  DD 1C 24			fstp	qword ptr [ESP]
 00000391  E8 00000000 E		call	 Math_Sqrt
 00000396  9B DB E2			fclex
 00000399  50				push	EAX
 0000039A  52				push	EDX 
 0000039B  DD 04 24			fld	qword ptr [ESP]
 0000039E  59				pop	ECX
 0000039F  59				pop	ECX 
 000003A0  DC 0C 24			fmul	qword ptr [ESP]
 000003A3  DD 1C 24			fstp	qword ptr [ESP]
 000003A6  B8 00000001			mov	EAX,000000001h
 000003AB  50				push	EAX
 000003AC  E8 00000000 E		call	 FloatingPoint_FromInt
 000003B1  50				push	EAX
 000003B2  52				push	EDX 
 000003B3  DD 04 24			fld	qword ptr [ESP]
 000003B6  59				pop	ECX
 000003B7  59				pop	ECX 
 000003B8  DC 04 24			fadd	qword ptr [ESP]
 000003BB  DD 1C 24			fstp	qword ptr [ESP]
 000003BE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003C1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003C4  9B DB E2			fclex
 000003C7  50				push	EAX
 000003C8  52				push	EDX 
 000003C9  DD 04 24			fld	qword ptr [ESP]
 000003CC  59				pop	ECX
 000003CD  59				pop	ECX 
 000003CE  DC 3C 24			fdivr	qword ptr [ESP]
 000003D1  DD 1C 24			fstp	qword ptr [ESP]
 000003D4  E8 00000000 E		call	 Math_Ln
 000003D9  EB 00			jmp	OFFSET $L000506
				;}
 000003DB			$L000506:

 000003DB  5F				pop	EDI
 000003DC  5E				pop	ESI 
 000003DD  5B				pop	EBX 
 000003DE  8B E5			mov	ESP,EBP
 000003E0  5D				pop	EBP 
 000003E1  C2 0008			retn	000000008h
 000003E4			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003E4			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003E4  55				push	EBP
 000003E5  8B EC			mov	EBP,ESP
 000003E7  51				push	ECX 
 000003E8  53				push	EBX 
 000003E9  56				push	ESI 
 000003EA  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 000003EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003F1  50				push	EAX
 000003F2  52				push	EDX 
 000003F3  B8 00000001			mov	EAX,000000001h
 000003F8  50				push	EAX
 000003F9  E8 00000000 E		call	 FloatingPoint_FromInt
 000003FE  50				push	EAX
 000003FF  52				push	EDX 
 00000400  DD 04 24			fld	qword ptr [ESP]
 00000403  59				pop	ECX
 00000404  59				pop	ECX 
 00000405  DC 04 24			fadd	qword ptr [ESP]
 00000408  DD 1C 24			fstp	qword ptr [ESP]
 0000040B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000040E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000411  50				push	EAX
 00000412  52				push	EDX 
 00000413  B8 00000001			mov	EAX,000000001h
 00000418  50				push	EAX
 00000419  E8 00000000 E		call	 FloatingPoint_FromInt
 0000041E  50				push	EAX
 0000041F  52				push	EDX 
 00000420  DD 04 24			fld	qword ptr [ESP]
 00000423  59				pop	ECX
 00000424  59				pop	ECX 
 00000425  DD 04 24			fld	qword ptr [ESP]
 00000428  D8 E1			fsub	st,st(1)
 0000042A  DD 1C 24			fstp	qword ptr [ESP]
 0000042D  9B DB E2			fclex
 00000430  DD 04 24			fld	qword ptr [ESP]
 00000433  59				pop	ECX
 00000434  59				pop	ECX 
 00000435  DC 3C 24			fdivr	qword ptr [ESP]
 00000438  DD 1C 24			fstp	qword ptr [ESP]
 0000043B  E8 00000000 E		call	 Math_Ln
 00000440  50				push	EAX
 00000441  52				push	EDX 
 00000442  B8 00000002			mov	EAX,000000002h
 00000447  9B DB E2			fclex
 0000044A  50				push	EAX
 0000044B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000450  50				push	EAX
 00000451  52				push	EDX 
 00000452  DD 04 24			fld	qword ptr [ESP]
 00000455  59				pop	ECX
 00000456  59				pop	ECX 
 00000457  DC 3C 24			fdivr	qword ptr [ESP]
 0000045A  DD 1C 24			fstp	qword ptr [ESP]
 0000045D  5A				pop	EDX
 0000045E  58				pop	EAX 
 0000045F  EB 00			jmp	OFFSET $L000508
				;}
 00000461			$L000508:

 00000461  5F				pop	EDI
 00000462  5E				pop	ESI 
 00000463  5B				pop	EBX 
 00000464  8B E5			mov	ESP,EBP
 00000466  5D				pop	EBP 
 00000467  C2 0008			retn	000000008h
 0000046A			Math_Hyperbolic_Inverse_HArccotan ENDP

 0000046A			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 0000046A  55				push	EBP
 0000046B  8B EC			mov	EBP,ESP
 0000046D  51				push	ECX 
 0000046E  53				push	EBX 
 0000046F  56				push	ESI 
 00000470  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 00000471  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000474  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000477  50				push	EAX
 00000478  52				push	EDX 
 00000479  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000047C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000047F  9B DB E2			fclex
 00000482  50				push	EAX
 00000483  52				push	EDX 
 00000484  DD 04 24			fld	qword ptr [ESP]
 00000487  59				pop	ECX
 00000488  59				pop	ECX 
 00000489  DC 0C 24			fmul	qword ptr [ESP]
 0000048C  DD 1C 24			fstp	qword ptr [ESP]
 0000048F  DD 04 24			fld	qword ptr [ESP]
 00000492  D9 E0			fchs
 00000494  DD 1C 24			fstp	qword ptr [ESP]
 00000497  B8 00000001			mov	EAX,000000001h
 0000049C  50				push	EAX
 0000049D  E8 00000000 E		call	 FloatingPoint_FromInt
 000004A2  50				push	EAX
 000004A3  52				push	EDX 
 000004A4  DD 04 24			fld	qword ptr [ESP]
 000004A7  59				pop	ECX
 000004A8  59				pop	ECX 
 000004A9  DC 04 24			fadd	qword ptr [ESP]
 000004AC  DD 1C 24			fstp	qword ptr [ESP]
 000004AF  E8 00000000 E		call	 Math_Sqrt
 000004B4  50				push	EAX
 000004B5  52				push	EDX 
 000004B6  B8 00000001			mov	EAX,000000001h
 000004BB  50				push	EAX
 000004BC  E8 00000000 E		call	 FloatingPoint_FromInt
 000004C1  50				push	EAX
 000004C2  52				push	EDX 
 000004C3  DD 04 24			fld	qword ptr [ESP]
 000004C6  59				pop	ECX
 000004C7  59				pop	ECX 
 000004C8  DC 04 24			fadd	qword ptr [ESP]
 000004CB  DD 1C 24			fstp	qword ptr [ESP]
 000004CE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004D1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004D4  9B DB E2			fclex
 000004D7  50				push	EAX
 000004D8  52				push	EDX 
 000004D9  DD 04 24			fld	qword ptr [ESP]
 000004DC  59				pop	ECX
 000004DD  59				pop	ECX 
 000004DE  DC 3C 24			fdivr	qword ptr [ESP]
 000004E1  DD 1C 24			fstp	qword ptr [ESP]
 000004E4  E8 00000000 E		call	 Math_Ln
 000004E9  EB 00			jmp	OFFSET $L000504
				;}
 000004EB			$L000504:

 000004EB  5F				pop	EDI
 000004EC  5E				pop	ESI 
 000004ED  5B				pop	EBX 
 000004EE  8B E5			mov	ESP,EBP
 000004F0  5D				pop	EBP 
 000004F1  C2 0008			retn	000000008h
 000004F4			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004F4			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004F4  55				push	EBP
 000004F5  8B EC			mov	EBP,ESP
 000004F7  51				push	ECX 
 000004F8  53				push	EBX 
 000004F9  56				push	ESI 
 000004FA  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 000004FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000501  50				push	EAX
 00000502  52				push	EDX 
 00000503  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000506  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000509  50				push	EAX
 0000050A  52				push	EDX 
 0000050B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000050E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000511  9B DB E2			fclex
 00000514  50				push	EAX
 00000515  52				push	EDX 
 00000516  DD 04 24			fld	qword ptr [ESP]
 00000519  59				pop	ECX
 0000051A  59				pop	ECX 
 0000051B  DC 0C 24			fmul	qword ptr [ESP]
 0000051E  DD 1C 24			fstp	qword ptr [ESP]
 00000521  B8 00000001			mov	EAX,000000001h
 00000526  50				push	EAX
 00000527  E8 00000000 E		call	 FloatingPoint_FromInt
 0000052C  50				push	EAX
 0000052D  52				push	EDX 
 0000052E  DD 04 24			fld	qword ptr [ESP]
 00000531  59				pop	ECX
 00000532  59				pop	ECX 
 00000533  DC 04 24			fadd	qword ptr [ESP]
 00000536  DD 1C 24			fstp	qword ptr [ESP]
 00000539  E8 00000000 E		call	 Math_Sqrt
 0000053E  50				push	EAX
 0000053F  52				push	EDX 
 00000540  DD 04 24			fld	qword ptr [ESP]
 00000543  59				pop	ECX
 00000544  59				pop	ECX 
 00000545  DC 04 24			fadd	qword ptr [ESP]
 00000548  DD 1C 24			fstp	qword ptr [ESP]
 0000054B  E8 00000000 E		call	 Math_Ln
 00000550  EB 00			jmp	OFFSET $L000497
				;}
 00000552			$L000497:

 00000552  5F				pop	EDI
 00000553  5E				pop	ESI 
 00000554  5B				pop	EBX 
 00000555  8B E5			mov	ESP,EBP
 00000557  5D				pop	EBP 
 00000558  C2 0008			retn	000000008h
 0000055B			Math_Hyperbolic_Inverse_HArcsin ENDP

 0000055B			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 0000055B  55				push	EBP
 0000055C  8B EC			mov	EBP,ESP
 0000055E  51				push	ECX 
 0000055F  53				push	EBX 
 00000560  56				push	ESI 
 00000561  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 00000562  B8 00000001			mov	EAX,000000001h
 00000567  50				push	EAX
 00000568  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000056B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000056E  50				push	EAX
 0000056F  52				push	EDX 
 00000570  DD 04 24			fld	qword ptr [ESP]
 00000573  59				pop	ECX
 00000574  59				pop	ECX 
 00000575  E8 00000000 E		call	 FloatingPoint_FromInt
 0000057A  50				push	EAX
 0000057B  52				push	EDX 
 0000057C  DC 04 24			fadd	qword ptr [ESP]
 0000057F  DD 1C 24			fstp	qword ptr [ESP]
 00000582  B8 00000001			mov	EAX,000000001h
 00000587  50				push	EAX
 00000588  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000058B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000058E  50				push	EAX
 0000058F  52				push	EDX 
 00000590  DD 04 24			fld	qword ptr [ESP]
 00000593  59				pop	ECX
 00000594  59				pop	ECX 
 00000595  E8 00000000 E		call	 FloatingPoint_FromInt
 0000059A  50				push	EAX
 0000059B  52				push	EDX 
 0000059C  DD 04 24			fld	qword ptr [ESP]
 0000059F  D8 E1			fsub	st,st(1)
 000005A1  DD 1C 24			fstp	qword ptr [ESP]
 000005A4  9B DB E2			fclex
 000005A7  DD 04 24			fld	qword ptr [ESP]
 000005AA  59				pop	ECX
 000005AB  59				pop	ECX 
 000005AC  DC 3C 24			fdivr	qword ptr [ESP]
 000005AF  DD 1C 24			fstp	qword ptr [ESP]
 000005B2  E8 00000000 E		call	 Math_Ln
 000005B7  50				push	EAX
 000005B8  52				push	EDX 
 000005B9  B8 00000002			mov	EAX,000000002h
 000005BE  9B DB E2			fclex
 000005C1  50				push	EAX
 000005C2  E8 00000000 E		call	 FloatingPoint_FromInt
 000005C7  50				push	EAX
 000005C8  52				push	EDX 
 000005C9  DD 04 24			fld	qword ptr [ESP]
 000005CC  59				pop	ECX
 000005CD  59				pop	ECX 
 000005CE  DC 3C 24			fdivr	qword ptr [ESP]
 000005D1  DD 1C 24			fstp	qword ptr [ESP]
 000005D4  5A				pop	EDX
 000005D5  58				pop	EAX 
 000005D6  EB 00			jmp	OFFSET $L000502
				;}
 000005D8			$L000502:

 000005D8  5F				pop	EDI
 000005D9  5E				pop	ESI 
 000005DA  5B				pop	EBX 
 000005DB  8B E5			mov	ESP,EBP
 000005DD  5D				pop	EBP 
 000005DE  C2 0008			retn	000000008h
 000005E1			Math_Hyperbolic_Inverse_HArctan ENDP

 000005E1			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005E1  55				push	EBP
 000005E2  8B EC			mov	EBP,ESP
 000005E4  51				push	ECX 
 000005E5  53				push	EBX 
 000005E6  56				push	ESI 
 000005E7  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 000005E8  B8 000000B4			mov	EAX,0000000B4h
 000005ED  50				push	EAX
 000005EE  E8 00000000 E		call	 Math_pi
 000005F3  9B DB E2			fclex
 000005F6  50				push	EAX
 000005F7  52				push	EDX 
 000005F8  DD 04 24			fld	qword ptr [ESP]
 000005FB  59				pop	ECX
 000005FC  59				pop	ECX 
 000005FD  E8 00000000 E		call	 FloatingPoint_FromInt
 00000602  50				push	EAX
 00000603  52				push	EDX 
 00000604  DC 3C 24			fdivr	qword ptr [ESP]
 00000607  DD 1C 24			fstp	qword ptr [ESP]
 0000060A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000060D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000610  9B DB E2			fclex
 00000613  50				push	EAX
 00000614  52				push	EDX 
 00000615  DD 04 24			fld	qword ptr [ESP]
 00000618  59				pop	ECX
 00000619  59				pop	ECX 
 0000061A  DC 0C 24			fmul	qword ptr [ESP]
 0000061D  DD 1C 24			fstp	qword ptr [ESP]
 00000620  5A				pop	EDX
 00000621  58				pop	EAX 
 00000622  EB 00			jmp	OFFSET $L000466
				;}
 00000624			$L000466:

 00000624  5F				pop	EDI
 00000625  5E				pop	ESI 
 00000626  5B				pop	EBX 
 00000627  8B E5			mov	ESP,EBP
 00000629  5D				pop	EBP 
 0000062A  C2 0008			retn	000000008h
 0000062D			Math_RadiansToDegrees ENDP

 0000062D			Test_HelloWorld_Hello1 PROC NEAR 
				;void Hello1(int i, int ref j);
 0000062D  55				push	EBP
 0000062E  8B EC			mov	EBP,ESP
 00000630  83 EC 3C			sub	ESP,00000003Ch
 00000633  53				push	EBX 
 00000634  56				push	ESI 
 00000635  57				push	EDI 
 00000636  89 4D C4			mov	dword ptr [EBP-003Ch],ECX
				;{

				;{21}:result_time= 0;
 00000639  33 C0			xor	EAX,EAX
 0000063B  50				push	EAX
 0000063C  DB 04 24			fild	dword ptr [ESP]
 0000063F  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{23}:a= 1;
 00000642  58				pop	EAX
 00000643  B8 00000001			mov	EAX,000000001h
 00000648  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{24}:b= 4;
 0000064B  B8 00000004			mov	EAX,000000004h
 00000650  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{25}:c= 4;
 00000653  B8 00000004			mov	EAX,000000004h
 00000658  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{27}:disc= 0.0;
 0000065B  D9 EE			fldz
 0000065D  DD 5D E4			fstp	qword ptr [EBP-001Ch]

				;{29}:uno= 1.0;
 00000660  D9 E8			fld1
 00000662  DD 5D DC	fstp	qword ptr [EBP-0024h]

				;{31}:uno= 7.14 * 1.0;
 00000665  BA 28F5C290			mov	EDX,028F5C290h
 0000066A  B8 401C8F5C			mov	EAX,0401C8F5Ch 
 0000066F  50				push	EAX
 00000670  52				push	EDX 
 00000671  D9 E8			fld1
 00000673  9B DB E2			fclex
 00000676  DC 0C 24			fmul	qword ptr [ESP]
 00000679  DD 1C 24			fstp	qword ptr [ESP]
 0000067C  DD C0			ffree	st
 0000067E  DD 04 24			fld	qword ptr [ESP]
 00000681  DD 5D DC			fstp	qword ptr [EBP-0024h]

				;{33}:uno= 7.14 * (-1.0);
 00000684  5A				pop	EDX
 00000685  58				pop	EAX 
 00000686  BA 28F5C290			mov	EDX,028F5C290h
 0000068B  B8 401C8F5C			mov	EAX,0401C8F5Ch 
 00000690  50				push	EAX
 00000691  52				push	EDX 
 00000692  D9 E8			fld1
 00000694  D9 E0			fchs
 00000696  9B DB E2			fclex
 00000699  DC 0C 24			fmul	qword ptr [ESP]
 0000069C  DD 1C 24			fstp	qword ptr [ESP]
 0000069F  DD C0			ffree	st
 000006A1  DD 04 24			fld	qword ptr [ESP]
 000006A4  DD 5D DC			fstp	qword ptr [EBP-0024h]

				;{35}:speed= 120;
 000006A7  5A				pop	EDX
 000006A8  58				pop	EAX 
 000006A9  B8 00000078			mov	EAX,000000078h
 000006AE  89 45 D8			mov	dword ptr [EBP-0028h],EAX

				;{36}:distance= 144;
 000006B1  B8 00000090			mov	EAX,000000090h
 000006B6  50				push	EAX
 000006B7  DB 04 24			fild	dword ptr [ESP]
 000006BA  DD 5D D0			fstp	qword ptr [EBP-0030h]

				;{39}:result_time= distance / speed;
 000006BD  58				pop	EAX
 000006BE  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 000006C1  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 000006C4  50				push	EAX
 000006C5  52				push	EDX 
 000006C6  8B 45 D8			mov	EAX,dword ptr [EBP-0028h]
 000006C9  9B DB E2			fclex
 000006CC  50				push	EAX
 000006CD  E8 00000000 E		call	 FloatingPoint_FromInt
 000006D2  50				push	EAX
 000006D3  52				push	EDX 
 000006D4  DD 04 24			fld	qword ptr [ESP]
 000006D7  59				pop	ECX
 000006D8  59				pop	ECX 
 000006D9  DC 3C 24			fdivr	qword ptr [ESP]
 000006DC  DD 1C 24			fstp	qword ptr [ESP]
 000006DF  DD C0			ffree	st
 000006E1  DD 04 24			fld	qword ptr [ESP]
 000006E4  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{41}:dSpeed= distance / result_time;
 000006E7  5A				pop	EDX
 000006E8  58				pop	EAX 
 000006E9  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 000006EC  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 000006EF  50				push	EAX
 000006F0  52				push	EDX 
 000006F1  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000006F4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000006F7  9B DB E2			fclex
 000006FA  50				push	EAX
 000006FB  52				push	EDX 
 000006FC  DD 04 24			fld	qword ptr [ESP]
 000006FF  59				pop	ECX
 00000700  59				pop	ECX 
 00000701  DC 3C 24			fdivr	qword ptr [ESP]
 00000704  DD 1C 24			fstp	qword ptr [ESP]
 00000707  DD C0			ffree	st
 00000709  DD 04 24			fld	qword ptr [ESP]
 0000070C  DD 5D C8			fstp	qword ptr [EBP-0038h]

				;{45}:(result_time= distance / dSpeed, dSpeed= distance / result_time, disc= Math::Sqr(b) - 4 * a * c);
 0000070F  5A				pop	EDX
 00000710  58				pop	EAX 
 00000711  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 00000714  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 00000717  50				push	EAX
 00000718  52				push	EDX 
 00000719  8B 55 C8			mov	EDX,dword ptr [EBP-0038h]
 0000071C  8B 45 CC			mov	EAX,dword ptr [EBP-0034h] 
 0000071F  9B DB E2			fclex
 00000722  50				push	EAX
 00000723  52				push	EDX 
 00000724  DD 04 24			fld	qword ptr [ESP]
 00000727  59				pop	ECX
 00000728  59				pop	ECX 
 00000729  DC 3C 24			fdivr	qword ptr [ESP]
 0000072C  DD 1C 24			fstp	qword ptr [ESP]
 0000072F  DD C0			ffree	st
 00000731  DD 04 24			fld	qword ptr [ESP]
 00000734  DD 5D F8			fstp	qword ptr [EBP-0008h]
 00000737  5A				pop	EDX
 00000738  58				pop	EAX 
 00000739  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 0000073C  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 0000073F  50				push	EAX
 00000740  52				push	EDX 
 00000741  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000744  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000747  9B DB E2			fclex
 0000074A  50				push	EAX
 0000074B  52				push	EDX 
 0000074C  DD 04 24			fld	qword ptr [ESP]
 0000074F  59				pop	ECX
 00000750  59				pop	ECX 
 00000751  DC 3C 24			fdivr	qword ptr [ESP]
 00000754  DD 1C 24			fstp	qword ptr [ESP]
 00000757  DD C0			ffree	st
 00000759  DD 04 24			fld	qword ptr [ESP]
 0000075C  DD 5D C8			fstp	qword ptr [EBP-0038h]
 0000075F  5A				pop	EDX
 00000760  58				pop	EAX 
 00000761  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000764  50				push	EAX
 00000765  E8 00000000 E		call	 FloatingPoint_FromInt
 0000076A  50				push	EAX
 0000076B  52				push	EDX 
 0000076C  E8 00000000 E		call	 Math_Sqr
 00000771  50				push	EAX
 00000772  52				push	EDX 
 00000773  B8 00000004			mov	EAX,000000004h
 00000778  50				push	EAX
 00000779  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 0000077C  59				pop	ECX
 0000077D  33 D2			xor	EDX,EDX
 0000077F  0F AF C1			imul	EAX,ECX
 00000782  50				push	EAX
 00000783  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000786  59				pop	ECX 
 00000787  99				cdq	
 00000788  0F AF C1			imul	EAX,ECX 
 0000078B  50				push	EAX
 0000078C  E8 00000000 E		call	 FloatingPoint_FromInt
 00000791  50				push	EAX
 00000792  52				push	EDX 
 00000793  DD 04 24			fld	qword ptr [ESP]
 00000796  59				pop	ECX
 00000797  59				pop	ECX 
 00000798  DD 04 24			fld	qword ptr [ESP]
 0000079B  D8 E1			fsub	st,st(1)
 0000079D  DD 1C 24			fstp	qword ptr [ESP]
 000007A0  DD C0			ffree	st
 000007A2  DD 04 24			fld	qword ptr [ESP]
 000007A5  DD 5D E4			fstp	qword ptr [EBP-001Ch]

				;{47}:Console::WriteLn("The resultant time is t = ", result_time);
 000007A8  5A				pop	EDX
 000007A9  58				pop	EAX 
 000007AA  8D 05 000000FB R		lea	EAX,OFFSET $S000552
 000007B0  6A 00			push	000000000h
 000007B2  50				push	EAX 
 000007B3  E8 00000000 E		call	 Console_WriteString
 000007B8  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000007BB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000007BE  50				push	EAX 
 000007BF  52				push	EDX 
 000007C0  E8 00000000 E		call	 Console_WriteDouble 
 000007C5  E8 00000000 E		call	 Console_WriteCrLf 

				;{48}:Console::WriteLn("The resultant speed is s = ", dSpeed);
 000007CA  8D 05 000000DF R		lea	EAX,OFFSET $S000553
 000007D0  6A 00			push	000000000h
 000007D2  50				push	EAX 
 000007D3  E8 00000000 E		call	 Console_WriteString
 000007D8  8B 55 C8			mov	EDX,dword ptr [EBP-0038h]
 000007DB  8B 45 CC			mov	EAX,dword ptr [EBP-0034h] 
 000007DE  50				push	EAX 
 000007DF  52				push	EDX 
 000007E0  E8 00000000 E		call	 Console_WriteDouble 
 000007E5  E8 00000000 E		call	 Console_WriteCrLf 

				;{49}:Console::WriteLn("The resultant discriminant is s = ", disc);
 000007EA  8D 05 000000BC R		lea	EAX,OFFSET $S000554
 000007F0  6A 00			push	000000000h
 000007F2  50				push	EAX 
 000007F3  E8 00000000 E		call	 Console_WriteString
 000007F8  8B 55 E4			mov	EDX,dword ptr [EBP-001Ch]
 000007FB  8B 45 E8			mov	EAX,dword ptr [EBP-0018h] 
 000007FE  50				push	EAX 
 000007FF  52				push	EDX 
 00000800  E8 00000000 E		call	 Console_WriteDouble 
 00000805  E8 00000000 E		call	 Console_WriteCrLf 

				;{52}:j= i div 2;
 0000080A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000080D  50				push	EAX
 0000080E  B8 00000002			mov	EAX,000000002h
 00000813  8B C8			mov	ECX,EAX
 00000815  58				pop	EAX
 00000816  33 D2			xor	EDX,EDX
 00000818  F7 F9			idiv	ECX
 0000081A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000081D  89 03			mov	dword ptr [EBX],EAX

				;{53}:Console::WriteLn("Here, we have j = ", j);
 0000081F  8D 05 00000041 R		lea	EAX,OFFSET $S000555
 00000825  6A 00			push	000000000h
 00000827  50				push	EAX 
 00000828  E8 00000000 E		call	 Console_WriteString
 0000082D  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00000830  8B C3			mov	EAX,EBX 
 00000832  8B 03			mov	EAX,dword ptr [EBX]
 00000834  50				push	EAX 
 00000835  E8 00000000 E		call	 Console_WriteInteger 
 0000083A  E8 00000000 E		call	 Console_WriteCrLf 

				;{59}:Test::HelloWorld::dXVal= Hello2(i, j, 3.14);
 0000083F  BA 51EB851F			mov	EDX,051EB851Fh
 00000844  B8 40091EB8			mov	EAX,040091EB8h 
 00000849  50				push	EAX 
 0000084A  52				push	EDX 
 0000084B  FF 75 0C			push	dword ptr [EBP+000Ch]
 0000084E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000851  50				push	EAX
 00000852  8B 4D C4			mov	ECX,dword ptr [EBP-003Ch]
 00000855  E8 0000006C			call	 Test_HelloWorld_Hello2
 0000085A  50				push	EAX
 0000085B  52				push	EDX 
 0000085C  DD C0			ffree	st
 0000085E  DD 04 24			fld	qword ptr [ESP]
 00000861  89 15 00000198 R		mov	dword ptr Test_HelloWorld_dXVal,EDX
 00000867  A3 0000019C R		mov	dword ptr [Test_HelloWorld_dXVal+4],EAX 

				;{60}:Test::dYVal= Hello2(i, j, 3.14);
 0000086C  5A				pop	EDX
 0000086D  58				pop	EAX 
 0000086E  BA 51EB851F			mov	EDX,051EB851Fh
 00000873  B8 40091EB8			mov	EAX,040091EB8h 
 00000878  50				push	EAX 
 00000879  52				push	EDX 
 0000087A  FF 75 0C			push	dword ptr [EBP+000Ch]
 0000087D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000880  50				push	EAX
 00000881  8B 4D C4			mov	ECX,dword ptr [EBP-003Ch]
 00000884  E8 0000003D			call	 Test_HelloWorld_Hello2
 00000889  50				push	EAX
 0000088A  52				push	EDX 
 0000088B  DD C0			ffree	st
 0000088D  DD 04 24			fld	qword ptr [ESP]
 00000890  89 15 00000190 R		mov	dword ptr Test_dYVal,EDX
 00000896  A3 00000194 R		mov	dword ptr [Test_dYVal+4],EAX 

				;{61}:Console::WriteLn("Here, now we have j = ", j);
 0000089B  5A				pop	EDX
 0000089C  58				pop	EAX 
 0000089D  8D 05 0000002A R		lea	EAX,OFFSET $S000557
 000008A3  6A 00			push	000000000h
 000008A5  50				push	EAX 
 000008A6  E8 00000000 E		call	 Console_WriteString
 000008AB  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000008AE  8B C3			mov	EAX,EBX 
 000008B0  8B 03			mov	EAX,dword ptr [EBX]
 000008B2  50				push	EAX 
 000008B3  E8 00000000 E		call	 Console_WriteInteger 
 000008B8  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000008BD			$L000534:

 000008BD  5F				pop	EDI
 000008BE  5E				pop	ESI 
 000008BF  5B				pop	EBX 
 000008C0  8B E5			mov	ESP,EBP
 000008C2  5D				pop	EBP 
 000008C3  C2 0008			retn	000000008h
 000008C6			Test_HelloWorld_Hello1 ENDP

 000008C6			Test_HelloWorld_Hello2 PROC NEAR 
				;double Hello2(int i, int ref j, double dYVal);
 000008C6  55				push	EBP
 000008C7  8B EC			mov	EBP,ESP
 000008C9  51				push	ECX 
 000008CA  53				push	EBX 
 000008CB  56				push	ESI 
 000008CC  57				push	EDI 
				;{

				;{13}:j= 5;
 000008CD  B8 00000005			mov	EAX,000000005h
 000008D2  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000008D5  89 03			mov	dword ptr [EBX],EAX

				;{14}:return (i + dYVal + 0.5)
 000008D7  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008DA  50				push	EAX
 000008DB  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 000008DE  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 000008E1  50				push	EAX
 000008E2  52				push	EDX 
 000008E3  DD 04 24			fld	qword ptr [ESP]
 000008E6  59				pop	ECX
 000008E7  59				pop	ECX 
 000008E8  E8 00000000 E		call	 FloatingPoint_FromInt
 000008ED  50				push	EAX
 000008EE  52				push	EDX 
 000008EF  DC 04 24			fadd	qword ptr [ESP]
 000008F2  DD 1C 24			fstp	qword ptr [ESP]
 000008F5  33 D2			xor	EDX,EDX
 000008F7  B8 3FE00000			mov	EAX,03FE00000h
 000008FC  50				push	EAX
 000008FD  52				push	EDX 
 000008FE  DD 04 24			fld	qword ptr [ESP]
 00000901  59				pop	ECX 
 00000902  59				pop	ECX 
 00000903  DC 04 24			fadd	qword ptr [ESP]
 00000906  DD 1C 24			fstp	qword ptr [ESP]
 00000909  5A				pop	EDX
 0000090A  58				pop	EAX 
 0000090B  EB 00			jmp	OFFSET $L000528
				;}
 0000090D			$L000528:

 0000090D  5F				pop	EDI
 0000090E  5E				pop	ESI 
 0000090F  5B				pop	EBX 
 00000910  8B E5			mov	ESP,EBP
 00000912  5D				pop	EBP 
 00000913  C2 0010			retn	000000010h
 00000916			Test_HelloWorld_Hello2 ENDP

 00000916			Test_HelloWorld PROC NEAR 
				;void Test::HelloWorld(void);
 00000916  55				push	EBP
 00000917  8B EC			mov	EBP,ESP
 00000919  51				push	ECX 
 0000091A  53				push	EBX 
 0000091B  56				push	ESI 
 0000091C  57				push	EDI 
 0000091D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000920  E8 00000007			call	 __member_Init@Test_HelloWorld

 00000925  5F				pop	EDI
 00000926  5E				pop	ESI 
 00000927  5B				pop	EBX 
 00000928  8B E5			mov	ESP,EBP
 0000092A  5D				pop	EBP 
 0000092B  C3				ret	
 0000092C			Test_HelloWorld ENDP

 0000092C			__member_Init@Test_HelloWorld PROC NEAR

 0000092C  55				push	EBP
 0000092D  8B EC			mov	EBP,ESP
 0000092F  51				push	ECX 
 00000930  53				push	EBX 
 00000931  56				push	ESI 
 00000932  57				push	EDI 
 00000933  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:Test::HelloWorld::dXVal= 0.0;
 00000936  D9 EE			fldz
 00000938  DD 1D 00000198 R		fstp	qword ptr Test_HelloWorld_dXVal

 0000093E  5F				pop	EDI
 0000093F  5E				pop	ESI 
 00000940  5B				pop	EBX 
 00000941  8B E5			mov	ESP,EBP
 00000943  5D				pop	EBP 
 00000944  C3				ret	
 00000945			__member_Init@Test_HelloWorld ENDP
 00000945			Test_HelloWorld_main PROC NEAR 
				;void Test::HelloWorld::main(int argc, string string [] argv);
 00000945  55				push	EBP
 00000946  8B EC			mov	EBP,ESP
 00000948  83 EC 08			sub	ESP,000000008h
 0000094B  53				push	EBX 
 0000094C  56				push	ESI 
 0000094D  57				push	EDI 
				;{

				;{71}:Console::WriteLn("Number of Parameters = ", argc);
 0000094E  8D 05 00000094 R		lea	EAX,OFFSET $S000561
 00000954  6A 00			push	000000000h
 00000956  50				push	EAX 
 00000957  E8 00000000 E		call	 Console_WriteString
 0000095C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000095F  50				push	EAX 
 00000960  E8 00000000 E		call	 Console_WriteInteger 
 00000965  E8 00000000 E		call	 Console_WriteCrLf 

				;{72}:for(index= 0; index < argc; index++ )
 0000096A  33 C0			xor	EAX,EAX
 0000096C  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000096F  EB 06			jmp	OFFSET $L000573
 00000971			$L000574:
 00000971  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00000974  FF 45 FC			inc	dword ptr [EBP-4]
 00000977			$L000573:
 00000977  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000097A  50				push	EAX
 0000097B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000097E  5A				pop	EDX
 0000097F  3B D0			cmp	EDX,EAX
 00000981  0F 9C C0			setl	AL
 00000984  84 C0			test	AL,AL
 00000986  74 41			jz	OFFSET $L000575
				;{

				;{74}:Console::WriteLn("Parameter argv[", index, "]= ", argv[index]);
 00000988  8D 05 000000AC R		lea	EAX,OFFSET $S000563
 0000098E  6A 00			push	000000000h
 00000990  50				push	EAX 
 00000991  E8 00000000 E		call	 Console_WriteString
 00000996  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000999  50				push	EAX 
 0000099A  E8 00000000 E		call	 Console_WriteInteger 
 0000099F  8D 05 00000150 R		lea	EAX,OFFSET $S000564
 000009A5  6A 00			push	000000000h 
 000009A7  50				push	EAX 
 000009A8  E8 00000000 E		call	 Console_WriteString 
 000009AD  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000009B0  8B C3			mov	EAX,EBX 
 000009B2  50				push	EAX
 000009B3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000009B6  5E				pop	ESI
 000009B7  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 000009BA  6A 00	push	000000000h 
 000009BC  50				push	EAX 
 000009BD  E8 00000000 E		call	 Console_WriteString 
 000009C2  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000009C7  EB A8			jmp	OFFSET $L000574 
 000009C9			$L000575:

				;{77}:System::ShowMessage("This is my first H++ program; so I must say 'Hello World'", "Hello World", System::IconInformation);
 000009C9  B8 00000040			mov	EAX,000000040h
 000009CE  50				push	EAX 
 000009CF  8D 05 0000001E R		lea	EAX,OFFSET $S000566
 000009D5  50				push	EAX 
 000009D6  8D 05 00000116 R		lea	EAX,OFFSET $S000565
 000009DC  50				push	EAX
 000009DD  E8 00000000 E		call	 System_ShowMessage

				;{80}:Test::nVal= 1;
 000009E2  B8 00000001			mov	EAX,000000001h
 000009E7  A3 0000018C R		mov	 Test_nVal,EAX

				;{81}:Console::WriteLn("Initially, the value of nVal is = ", Test::nVal);
 000009EC  8D 05 00000054 R		lea	EAX,OFFSET $S000567
 000009F2  6A 00			push	000000000h
 000009F4  50				push	EAX 
 000009F5  E8 00000000 E		call	 Console_WriteString
 000009FA  A1 0000018C R		mov	EAX, Test_nVal
 000009FF  50				push	EAX 
 00000A00  E8 00000000 E		call	 Console_WriteInteger 
 00000A05  E8 00000000 E		call	 Console_WriteCrLf 

				;{84}:hello;
 00000A0A  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00000A0D  E8 FFFFFF04			call	 Test_HelloWorld

				;{85}:hello.Hello1(7, Test::nVal);
 00000A12  8D 05 0000018C R		lea	EAX,OFFSET Test_nVal
 00000A18  50				push	EAX
 00000A19  B8 00000007			mov	EAX,000000007h
 00000A1E  50				push	EAX
 00000A1F  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00000A22  E8 FFFFFC06			call	 Test_HelloWorld_Hello1

				;{87}:Console::WriteLn("Now, the value of nVal is = ", Test::nVal, " and the value of dXVal is = ", Test::HelloWorld::dXVal);
 00000A27  8D 05 00000077 R		lea	EAX,OFFSET $S000570
 00000A2D  6A 00			push	000000000h
 00000A2F  50				push	EAX 
 00000A30  E8 00000000 E		call	 Console_WriteString
 00000A35  A1 0000018C R		mov	EAX, Test_nVal
 00000A3A  50				push	EAX 
 00000A3B  E8 00000000 E		call	 Console_WriteInteger 
 00000A40  8D 05 00000000 R		lea	EAX,OFFSET $S000571
 00000A46  6A 00			push	000000000h 
 00000A48  50				push	EAX 
 00000A49  E8 00000000 E		call	 Console_WriteString 
 00000A4E  8D 1D 00000198 R		lea	EBX,OFFSET Test_HelloWorld_dXVal
 00000A54  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00000A57  8B 13			mov	EDX,dword ptr [EBX] 
 00000A59  50				push	EAX 
 00000A5A  52				push	EDX 
 00000A5B  E8 00000000 E		call	 Console_WriteDouble 
 00000A60  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000A65			$L000558:

 00000A65  5F				pop	EDI
 00000A66  5E				pop	ESI 
 00000A67  5B				pop	EBX 
 00000A68  8B E5			mov	ESP,EBP
 00000A6A  5D				pop	EBP 
 00000A6B  C2 0008			retn	000000008h
 00000A6E			Test_HelloWorld_main ENDP

 00000A6E			__System_Hpp_Runtime_Init PROC

 00000A6E  55				push	EBP
 00000A6F  8B EC			mov	EBP,ESP
 00000A71  51				push	ECX 
 00000A72  53				push	EBX 
 00000A73  56				push	ESI 
 00000A74  57				push	EDI 
 00000A75  E8 00000000 E		call	 GetVersion
 00000A7A  A3 00000154 R		mov	 __osver,EAX ;os version
 00000A7F  A1 00000154 R		mov	EAX, __osver 
 00000A84  C1 E8 08			shr	EAX,000000008h
 00000A87  25 000000FF			and	EAX,0000000FFh
 00000A8C  A3 00000158 R		mov	 __winminor,EAX ;windows minor
 00000A91  8B 0D 00000154 R		mov	ECX, __osver 
 00000A97  81 E1 000000FF		and	ECX,0000000FFh 
 00000A9D  89 0D 0000015C R		mov	 __winmajor,ECX ;windows major
 00000AA3  8B 15 0000015C R		mov	EDX,dword ptr __winmajor 
 00000AA9  C1 E2 08			shl	EDX,000000008h
 00000AAC  03 15 00000158 R		add	EDX,dword ptr __winminor
 00000AB2  89 15 00000160 R		mov	dword ptr __winver,EDX ;windows version
 00000AB8  A1 00000154 R		mov	EAX, __osver 
 00000ABD  C1 E8 10			shr	EAX,000000010h 
 00000AC0  25 0000FFFF			and	EAX,00000FFFFh 
 00000AC5  A3 00000154 R		mov	 __osver,EAX 
 00000ACA  8D 1D 00000188 R		lea	EBX,dword ptr ___argc
 00000AD0  53				push	EBX
 00000AD1  E8 00000000 E		call	 System_GetCommandLineArgv 
 00000AD6  A3 00000184 R		mov	dword ptr ___argv,EAX 
 00000ADB  50				push	EAX 
 00000ADC  8B 0D 00000188 R		mov	ECX,dword ptr ___argc 
 00000AE2  51				push	ECX 
 00000AE3  E8 FFFFFE5D			call	 Test_HelloWorld_main ;user entry point (stdcall calling convention)
 00000AE8  50				push	EAX 
 00000AE9  A1 00000184 R		mov	EAX,dword ptr ___argv 
 00000AEE  50				push	EAX 
 00000AEF  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00000AF4  50				push	EAX 
 00000AF5  E8 00000000 E		call	 System_Memory_Free 
 00000AFA  E8 00000000 E		call	 System_Exit 

 00000AFF  5F				pop	EDI
 00000B00  5E				pop	ESI 
 00000B01  5B				pop	EBX 
 00000B02  8B E5			mov	ESP,EBP
 00000B04  5D				pop	EBP 
 00000B05  C3				ret	
 00000B06			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 00000000 20 61 6E 64 20	$S000571 		BYTE 	" and the value of dXVal is = ",0
	   74 68 65 20 76
	   61 6C 75 65 20
	   6F 66 20 64 58
	   56 61 6C 20 69
	   73 20 3D 20 00
 0000001E 48 65 6C 6C 6F	$S000566 		BYTE 	"Hello World",0
	   20 57 6F 72 6C
	   64 00
 0000002A 48 65 72 65 2C	$S000557 		BYTE 	"Here, now we have j = ",0
	   20 6E 6F 77 20
	   77 65 20 68 61
	   76 65 20 6A 20
	   3D 20 00
 00000041 48 65 72 65 2C	$S000555 		BYTE 	"Here, we have j = ",0
	   20 77 65 20 68
	   61 76 65 20 6A
	   20 3D 20 00
 00000054 49 6E 69 74 69	$S000567 		BYTE 	"Initially, the value of nVal is = ",0
	   61 6C 6C 79 2C
	   20 74 68 65 20
	   76 61 6C 75 65
	   20 6F 66 20 6E
	   56 61 6C 20 69
	   73 20 3D 20 00
 00000077 4E 6F 77 2C 20	$S000570 		BYTE 	"Now, the value of nVal is = ",0
	   74 68 65 20 76
	   61 6C 75 65 20
	   6F 66 20 6E 56
	   61 6C 20 69 73
	   20 3D 20 00
 00000094 4E 75 6D 62 65	$S000561 		BYTE 	"Number of Parameters = ",0
	   72 20 6F 66 20
	   50 61 72 61 6D
	   65 74 65 72 73
	   20 3D 20 00
 000000AC 50 61 72 61 6D	$S000563 		BYTE 	"Parameter argv[",0
	   65 74 65 72 20
	   61 72 67 76 5B
	   00
 000000BC 54 68 65 20 72	$S000554 		BYTE 	"The resultant discriminant is s = ",0
	   65 73 75 6C 74
	   61 6E 74 20 64
	   69 73 63 72 69
	   6D 69 6E 61 6E
	   74 20 69 73 20
	   73 20 3D 20 00
 000000DF 54 68 65 20 72	$S000553 		BYTE 	"The resultant speed is s = ",0
	   65 73 75 6C 74
	   61 6E 74 20 73
	   70 65 65 64 20
	   69 73 20 73 20
	   3D 20 00
 000000FB 54 68 65 20 72	$S000552 		BYTE 	"The resultant time is t = ",0
	   65 73 75 6C 74
	   61 6E 74 20 74
	   69 6D 65 20 69
	   73 20 74 20 3D
	   20 00
 00000116 54 68 69 73 20	$S000565 		BYTE 	"This is my first H++ program; so I must say 'Hello World'",0
	   69 73 20 6D 79
	   20 66 69 72 73
	   74 20 48 2B 2B
	   20 70 72 6F 67
	   72 61 6D 3B 20
	   73 6F 20 49 20
	   6D 75 73 74 20
	   73 61 79 20 27
	   48 65 6C 6C 6F
	   20 57 6F 72 6C
	   64 27 00
 00000150 5D 3D 20 00		$S000564 		BYTE 	"]= ",0

 00000154 00000000		__osver 		DWORD 	0;Windows OS version
 00000158 00000000		__winminor 		DWORD 	0;Windows minor version
 0000015C 00000000		__winmajor 		DWORD 	0;Windows major version
 00000160 00000000		__winver 		DWORD 	0;Windows version
 00000164  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00000184 00000000		___argv 		DWORD 	0;Array of argument values
 00000188 00000000		___argc 		DWORD 	0;Argument count
 0000018C 00000000		Test_nVal	 DWORD	0
 00000190			Test_dYVal	 REAL8	0.0
	   0000000000000000
 00000198			Test_HelloWorld_dXVal	 REAL8	0.0
	   0000000000000000

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:12:31
testhelloworld.hpp					     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001A0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000B06 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000AC _TEXT	Length= 00000062 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00000105 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004C _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 000000A3 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000010E _TEXT	Length= 00000086 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 0000018B _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00000194 _TEXT	Length= 00000060 Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 000001EB _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001F4 _TEXT	Length= 00000062 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 0000024D _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 00000256 _TEXT	Length= 00000086 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 000002D3 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000345 _TEXT	Length= 0000009F Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 000003DB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002DC _TEXT	Length= 00000069 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 0000033C _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003E4 _TEXT	Length= 00000086 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 00000461 _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 0000046A _TEXT	Length= 0000008A Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 000004EB _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004F4 _TEXT	Length= 00000067 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 00000552 _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 0000055B _TEXT	Length= 00000086 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 000005D8 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005E1 _TEXT	Length= 0000004C Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00000624 _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Test_HelloWorld_Hello1 . . . . .	P Near	 0000062D _TEXT	Length= 00000299 Public STDCALL
  $L000534 . . . . . . . . . . .	L Near	 000008BD _TEXT	
Test_HelloWorld_Hello2 . . . . .	P Near	 000008C6 _TEXT	Length= 00000050 Public STDCALL
  $L000528 . . . . . . . . . . .	L Near	 0000090D _TEXT	
Test_HelloWorld_main . . . . . .	P Near	 00000945 _TEXT	Length= 00000129 Public STDCALL
  $L000574 . . . . . . . . . . .	L Near	 00000971 _TEXT	
  $L000573 . . . . . . . . . . .	L Near	 00000977 _TEXT	
  $L000575 . . . . . . . . . . .	L Near	 000009C9 _TEXT	
  $L000558 . . . . . . . . . . .	L Near	 00000A65 _TEXT	
Test_HelloWorld  . . . . . . . .	P Near	 00000916 _TEXT	Length= 00000016 Public STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00000A6E _TEXT	Length= 00000098 Public STDCALL
__member_Init@Test_HelloWorld  .	P Near	 0000092C _TEXT	Length= 00000019 Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000552 . . . . . . . . . . . .	Byte	 000000FB _DATA	
$S000553 . . . . . . . . . . . .	Byte	 000000DF _DATA	
$S000554 . . . . . . . . . . . .	Byte	 000000BC _DATA	
$S000555 . . . . . . . . . . . .	Byte	 00000041 _DATA	
$S000557 . . . . . . . . . . . .	Byte	 0000002A _DATA	
$S000561 . . . . . . . . . . . .	Byte	 00000094 _DATA	
$S000563 . . . . . . . . . . . .	Byte	 000000AC _DATA	
$S000564 . . . . . . . . . . . .	Byte	 00000150 _DATA	
$S000565 . . . . . . . . . . . .	Byte	 00000116 _DATA	
$S000566 . . . . . . . . . . . .	Byte	 0000001E _DATA	
$S000567 . . . . . . . . . . . .	Byte	 00000054 _DATA	
$S000570 . . . . . . . . . . . .	Byte	 00000077 _DATA	
$S000571 . . . . . . . . . . . .	Byte	 00000000 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Test_HelloWorld_dXVal  . . . . .	QWord	 00000198 _DATA	
Test_dYVal . . . . . . . . . . .	QWord	 00000190 _DATA	
Test_nVal  . . . . . . . . . . .	DWord	 0000018C _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 00000188 _DATA	
___argv  . . . . . . . . . . . .	DWord	 00000184 _DATA	
__computer . . . . . . . . . . .	Byte	 00000164 _DATA	
__osver  . . . . . . . . . . . .	DWord	 00000154 _DATA	
__winmajor . . . . . . . . . . .	DWord	 0000015C _DATA	
__winminor . . . . . . . . . . .	DWord	 00000158 _DATA	
__winver . . . . . . . . . . . .	DWord	 00000160 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
