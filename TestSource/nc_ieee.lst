Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:12:12
nc_ieee.hpp						     Page 1 - 1


				TITLE	 nc_ieee.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{389}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000469
				;}
 00000043			$L000469:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  8B E5			mov	ESP,EBP
 00000048  5D				pop	EBP 
 00000049  C2 0008			retn	000000008h
 0000004C			Math_DegreesToRadians ENDP

 0000004C			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004C  55				push	EBP
 0000004D  8B EC			mov	EBP,ESP
 0000004F  51				push	ECX 
 00000050  53				push	EBX 
 00000051  56				push	ESI 
 00000052  57				push	EDI 
				;{

				;{452}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000053  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000056  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000059  50				push	EAX
 0000005A  52				push	EDX 
 0000005B  E8 00000000 E		call	 Math_Exp
 00000060  50				push	EAX
 00000061  52				push	EDX 
 00000062  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000065  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000068  50				push	EAX
 00000069  52				push	EDX 
 0000006A  DD 04 24			fld	qword ptr [ESP]
 0000006D  D9 E0			fchs
 0000006F  DD 1C 24			fstp	qword ptr [ESP]
 00000072  E8 00000000 E		call	 Math_Exp
 00000077  50				push	EAX
 00000078  52				push	EDX 
 00000079  DD 04 24			fld	qword ptr [ESP]
 0000007C  59				pop	ECX
 0000007D  59				pop	ECX 
 0000007E  DC 04 24			fadd	qword ptr [ESP]
 00000081  DD 1C 24			fstp	qword ptr [ESP]
 00000084  B8 00000002			mov	EAX,000000002h
 00000089  9B DB E2			fclex
 0000008C  50				push	EAX
 0000008D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000092  50				push	EAX
 00000093  52				push	EDX 
 00000094  DD 04 24			fld	qword ptr [ESP]
 00000097  59				pop	ECX
 00000098  59				pop	ECX 
 00000099  DC 3C 24			fdivr	qword ptr [ESP]
 0000009C  DD 1C 24			fstp	qword ptr [ESP]
 0000009F  5A				pop	EDX
 000000A0  58				pop	EAX 
 000000A1  EB 00			jmp	OFFSET $L000486
				;}
 000000A3			$L000486:

 000000A3  5F				pop	EDI
 000000A4  5E				pop	ESI 
 000000A5  5B				pop	EBX 
 000000A6  8B E5			mov	ESP,EBP
 000000A8  5D				pop	EBP 
 000000A9  C2 0008			retn	000000008h
 000000AC			Math_Hyperbolic_HCos ENDP

 000000AC			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000AC  55				push	EBP
 000000AD  8B EC			mov	EBP,ESP
 000000AF  51				push	ECX 
 000000B0  53				push	EBX 
 000000B1  56				push	ESI 
 000000B2  57				push	EDI 
				;{

				;{464}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000B3  B8 00000002			mov	EAX,000000002h
 000000B8  50				push	EAX
 000000B9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000BC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BF  50				push	EAX
 000000C0  52				push	EDX 
 000000C1  E8 00000000 E		call	 Math_Exp
 000000C6  50				push	EAX
 000000C7  52				push	EDX 
 000000C8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000CB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CE  50				push	EAX
 000000CF  52				push	EDX 
 000000D0  DD 04 24			fld	qword ptr [ESP]
 000000D3  D9 E0			fchs
 000000D5  DD 1C 24			fstp	qword ptr [ESP]
 000000D8  E8 00000000 E		call	 Math_Exp
 000000DD  50				push	EAX
 000000DE  52				push	EDX 
 000000DF  DD 04 24			fld	qword ptr [ESP]
 000000E2  59				pop	ECX
 000000E3  59				pop	ECX 
 000000E4  DD 04 24			fld	qword ptr [ESP]
 000000E7  D8 E1			fsub	st,st(1)
 000000E9  DD 1C 24			fstp	qword ptr [ESP]
 000000EC  9B DB E2			fclex
 000000EF  DD 04 24			fld	qword ptr [ESP]
 000000F2  59				pop	ECX
 000000F3  59				pop	ECX 
 000000F4  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F9  50				push	EAX
 000000FA  52				push	EDX 
 000000FB  DC 3C 24			fdivr	qword ptr [ESP]
 000000FE  DD 1C 24			fstp	qword ptr [ESP]
 00000101  5A				pop	EDX
 00000102  58				pop	EAX 
 00000103  EB 00			jmp	OFFSET $L000492
				;}
 00000105			$L000492:

 00000105  5F				pop	EDI
 00000106  5E				pop	ESI 
 00000107  5B				pop	EBX 
 00000108  8B E5			mov	ESP,EBP
 0000010A  5D				pop	EBP 
 0000010B  C2 0008			retn	000000008h
 0000010E			Math_Hyperbolic_HCosec ENDP

 0000010E			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000010E  55				push	EBP
 0000010F  8B EC			mov	EBP,ESP
 00000111  51				push	ECX 
 00000112  53				push	EBX 
 00000113  56				push	ESI 
 00000114  57				push	EDI 
				;{

				;{468}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000115  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000118  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000011B  50				push	EAX
 0000011C  52				push	EDX 
 0000011D  E8 00000000 E		call	 Math_Exp
 00000122  50				push	EAX
 00000123  52				push	EDX 
 00000124  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000127  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000012A  50				push	EAX
 0000012B  52				push	EDX 
 0000012C  DD 04 24			fld	qword ptr [ESP]
 0000012F  D9 E0			fchs
 00000131  DD 1C 24			fstp	qword ptr [ESP]
 00000134  E8 00000000 E		call	 Math_Exp
 00000139  50				push	EAX
 0000013A  52				push	EDX 
 0000013B  DD 04 24			fld	qword ptr [ESP]
 0000013E  59				pop	ECX
 0000013F  59				pop	ECX 
 00000140  DC 04 24			fadd	qword ptr [ESP]
 00000143  DD 1C 24			fstp	qword ptr [ESP]
 00000146  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000149  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000014C  50				push	EAX
 0000014D  52				push	EDX 
 0000014E  E8 00000000 E		call	 Math_Exp
 00000153  50				push	EAX
 00000154  52				push	EDX 
 00000155  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000158  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000015B  50				push	EAX
 0000015C  52				push	EDX 
 0000015D  DD 04 24			fld	qword ptr [ESP]
 00000160  D9 E0			fchs
 00000162  DD 1C 24			fstp	qword ptr [ESP]
 00000165  E8 00000000 E		call	 Math_Exp
 0000016A  50				push	EAX
 0000016B  52				push	EDX 
 0000016C  DD 04 24			fld	qword ptr [ESP]
 0000016F  59				pop	ECX
 00000170  59				pop	ECX 
 00000171  DD 04 24			fld	qword ptr [ESP]
 00000174  D8 E1			fsub	st,st(1)
 00000176  DD 1C 24			fstp	qword ptr [ESP]
 00000179  9B DB E2			fclex
 0000017C  DD 04 24			fld	qword ptr [ESP]
 0000017F  59				pop	ECX
 00000180  59				pop	ECX 
 00000181  DC 3C 24			fdivr	qword ptr [ESP]
 00000184  DD 1C 24			fstp	qword ptr [ESP]
 00000187  5A				pop	EDX
 00000188  58				pop	EAX 
 00000189  EB 00			jmp	OFFSET $L000494
				;}
 0000018B			$L000494:

 0000018B  5F				pop	EDI
 0000018C  5E				pop	ESI 
 0000018D  5B				pop	EBX 
 0000018E  8B E5			mov	ESP,EBP
 00000190  5D				pop	EBP 
 00000191  C2 0008			retn	000000008h
 00000194			Math_Hyperbolic_HCotan ENDP

 00000194			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 00000194  55				push	EBP
 00000195  8B EC			mov	EBP,ESP
 00000197  51				push	ECX 
 00000198  53				push	EBX 
 00000199  56				push	ESI 
 0000019A  57				push	EDI 
				;{

				;{460}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 0000019B  B8 00000002			mov	EAX,000000002h
 000001A0  50				push	EAX
 000001A1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001A4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001A7  50				push	EAX
 000001A8  52				push	EDX 
 000001A9  E8 00000000 E		call	 Math_Exp
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001B3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001B6  50				push	EAX
 000001B7  52				push	EDX 
 000001B8  DD 04 24			fld	qword ptr [ESP]
 000001BB  D9 E0			fchs
 000001BD  DD 1C 24			fstp	qword ptr [ESP]
 000001C0  E8 00000000 E		call	 Math_Exp
 000001C5  50				push	EAX
 000001C6  52				push	EDX 
 000001C7  DD 04 24			fld	qword ptr [ESP]
 000001CA  59				pop	ECX
 000001CB  59				pop	ECX 
 000001CC  DC 04 24			fadd	qword ptr [ESP]
 000001CF  DD 1C 24			fstp	qword ptr [ESP]
 000001D2  9B DB E2			fclex
 000001D5  DD 04 24			fld	qword ptr [ESP]
 000001D8  59				pop	ECX
 000001D9  59				pop	ECX 
 000001DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000001DF  50				push	EAX
 000001E0  52				push	EDX 
 000001E1  DC 3C 24			fdivr	qword ptr [ESP]
 000001E4  DD 1C 24			fstp	qword ptr [ESP]
 000001E7  5A				pop	EDX
 000001E8  58				pop	EAX 
 000001E9  EB 00			jmp	OFFSET $L000490
				;}
 000001EB			$L000490:

 000001EB  5F				pop	EDI
 000001EC  5E				pop	ESI 
 000001ED  5B				pop	EBX 
 000001EE  8B E5			mov	ESP,EBP
 000001F0  5D				pop	EBP 
 000001F1  C2 0008			retn	000000008h
 000001F4			Math_Hyperbolic_HSec ENDP

 000001F4			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001F4  55				push	EBP
 000001F5  8B EC			mov	EBP,ESP
 000001F7  51				push	ECX 
 000001F8  53				push	EBX 
 000001F9  56				push	ESI 
 000001FA  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000201  50				push	EAX
 00000202  52				push	EDX 
 00000203  E8 00000000 E		call	 Math_Exp
 00000208  50				push	EAX
 00000209  52				push	EDX 
 0000020A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000020D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000210  50				push	EAX
 00000211  52				push	EDX 
 00000212  DD 04 24			fld	qword ptr [ESP]
 00000215  D9 E0			fchs
 00000217  DD 1C 24			fstp	qword ptr [ESP]
 0000021A  E8 00000000 E		call	 Math_Exp
 0000021F  50				push	EAX
 00000220  52				push	EDX 
 00000221  DD 04 24			fld	qword ptr [ESP]
 00000224  59				pop	ECX
 00000225  59				pop	ECX 
 00000226  DD 04 24			fld	qword ptr [ESP]
 00000229  D8 E1			fsub	st,st(1)
 0000022B  DD 1C 24			fstp	qword ptr [ESP]
 0000022E  B8 00000002			mov	EAX,000000002h
 00000233  9B DB E2			fclex
 00000236  50				push	EAX
 00000237  E8 00000000 E		call	 FloatingPoint_FromInt
 0000023C  50				push	EAX
 0000023D  52				push	EDX 
 0000023E  DD 04 24			fld	qword ptr [ESP]
 00000241  59				pop	ECX
 00000242  59				pop	ECX 
 00000243  DC 3C 24			fdivr	qword ptr [ESP]
 00000246  DD 1C 24			fstp	qword ptr [ESP]
 00000249  5A				pop	EDX
 0000024A  58				pop	EAX 
 0000024B  EB 00			jmp	OFFSET $L000483
				;}
 0000024D			$L000483:

 0000024D  5F				pop	EDI
 0000024E  5E				pop	ESI 
 0000024F  5B				pop	EBX 
 00000250  8B E5			mov	ESP,EBP
 00000252  5D				pop	EBP 
 00000253  C2 0008			retn	000000008h
 00000256			Math_Hyperbolic_HSin ENDP

 00000256			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 00000256  55				push	EBP
 00000257  8B EC			mov	EBP,ESP
 00000259  51				push	ECX 
 0000025A  53				push	EBX 
 0000025B  56				push	ESI 
 0000025C  57				push	EDI 
				;{

				;{456}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 0000025D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000260  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000263  50				push	EAX
 00000264  52				push	EDX 
 00000265  E8 00000000 E		call	 Math_Exp
 0000026A  50				push	EAX
 0000026B  52				push	EDX 
 0000026C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000026F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000272  50				push	EAX
 00000273  52				push	EDX 
 00000274  DD 04 24			fld	qword ptr [ESP]
 00000277  D9 E0			fchs
 00000279  DD 1C 24			fstp	qword ptr [ESP]
 0000027C  E8 00000000 E		call	 Math_Exp
 00000281  50				push	EAX
 00000282  52				push	EDX 
 00000283  DD 04 24			fld	qword ptr [ESP]
 00000286  59				pop	ECX
 00000287  59				pop	ECX 
 00000288  DD 04 24			fld	qword ptr [ESP]
 0000028B  D8 E1			fsub	st,st(1)
 0000028D  DD 1C 24			fstp	qword ptr [ESP]
 00000290  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000293  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000296  50				push	EAX
 00000297  52				push	EDX 
 00000298  E8 00000000 E		call	 Math_Exp
 0000029D  50				push	EAX
 0000029E  52				push	EDX 
 0000029F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002A2  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002A5  50				push	EAX
 000002A6  52				push	EDX 
 000002A7  DD 04 24			fld	qword ptr [ESP]
 000002AA  D9 E0			fchs
 000002AC  DD 1C 24			fstp	qword ptr [ESP]
 000002AF  E8 00000000 E		call	 Math_Exp
 000002B4  50				push	EAX
 000002B5  52				push	EDX 
 000002B6  DD 04 24			fld	qword ptr [ESP]
 000002B9  59				pop	ECX
 000002BA  59				pop	ECX 
 000002BB  DC 04 24			fadd	qword ptr [ESP]
 000002BE  DD 1C 24			fstp	qword ptr [ESP]
 000002C1  9B DB E2			fclex
 000002C4  DD 04 24			fld	qword ptr [ESP]
 000002C7  59				pop	ECX
 000002C8  59				pop	ECX 
 000002C9  DC 3C 24			fdivr	qword ptr [ESP]
 000002CC  DD 1C 24			fstp	qword ptr [ESP]
 000002CF  5A				pop	EDX
 000002D0  58				pop	EAX 
 000002D1  EB 00			jmp	OFFSET $L000488
				;}
 000002D3			$L000488:

 000002D3  5F				pop	EDI
 000002D4  5E				pop	ESI 
 000002D5  5B				pop	EBX 
 000002D6  8B E5			mov	ESP,EBP
 000002D8  5D				pop	EBP 
 000002D9  C2 0008			retn	000000008h
 000002DC			Math_Hyperbolic_HTan ENDP

 000002DC			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002DC  55				push	EBP
 000002DD  8B EC			mov	EBP,ESP
 000002DF  51				push	ECX 
 000002E0  53				push	EBX 
 000002E1  56				push	ESI 
 000002E2  57				push	EDI 
				;{

				;{479}:return Math::Ln(X + Math::Sqrt(X * X - 1))
 000002E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E9  50				push	EAX
 000002EA  52				push	EDX 
 000002EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F1  50				push	EAX
 000002F2  52				push	EDX 
 000002F3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002F6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F9  9B DB E2			fclex
 000002FC  50				push	EAX
 000002FD  52				push	EDX 
 000002FE  DD 04 24			fld	qword ptr [ESP]
 00000301  59				pop	ECX
 00000302  59				pop	ECX 
 00000303  DC 0C 24			fmul	qword ptr [ESP]
 00000306  DD 1C 24			fstp	qword ptr [ESP]
 00000309  B8 00000001			mov	EAX,000000001h
 0000030E  50				push	EAX
 0000030F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000314  50				push	EAX
 00000315  52				push	EDX 
 00000316  DD 04 24			fld	qword ptr [ESP]
 00000319  59				pop	ECX
 0000031A  59				pop	ECX 
 0000031B  DD 04 24			fld	qword ptr [ESP]
 0000031E  D8 E1			fsub	st,st(1)
 00000320  DD 1C 24			fstp	qword ptr [ESP]
 00000323  E8 00000000 E		call	 Math_Sqrt
 00000328  50				push	EAX
 00000329  52				push	EDX 
 0000032A  DD 04 24			fld	qword ptr [ESP]
 0000032D  59				pop	ECX
 0000032E  59				pop	ECX 
 0000032F  DC 04 24			fadd	qword ptr [ESP]
 00000332  DD 1C 24			fstp	qword ptr [ESP]
 00000335  E8 00000000 E		call	 Math_Ln
 0000033A  EB 00			jmp	OFFSET $L000500
				;}
 0000033C			$L000500:

 0000033C  5F				pop	EDI
 0000033D  5E				pop	ESI 
 0000033E  5B				pop	EBX 
 0000033F  8B E5			mov	ESP,EBP
 00000341  5D				pop	EBP 
 00000342  C2 0008			retn	000000008h
 00000345			Math_Hyperbolic_Inverse_HArccos ENDP

 00000345			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000345  55				push	EBP
 00000346  8B EC			mov	EBP,ESP
 00000348  51				push	ECX 
 00000349  53				push	EBX 
 0000034A  56				push	ESI 
 0000034B  57				push	EDI 
				;{

				;{491}:return Math::Ln((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000034C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000352  50				push	EAX
 00000353  52				push	EDX 
 00000354  E8 00000000 E		call	 Math_Sign
 00000359  50				push	EAX
 0000035A  52				push	EDX 
 0000035B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000035E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000361  50				push	EAX
 00000362  52				push	EDX 
 00000363  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000366  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000369  9B DB E2			fclex
 0000036C  50				push	EAX
 0000036D  52				push	EDX 
 0000036E  DD 04 24			fld	qword ptr [ESP]
 00000371  59				pop	ECX
 00000372  59				pop	ECX 
 00000373  DC 0C 24			fmul	qword ptr [ESP]
 00000376  DD 1C 24			fstp	qword ptr [ESP]
 00000379  B8 00000001			mov	EAX,000000001h
 0000037E  50				push	EAX
 0000037F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000384  50				push	EAX
 00000385  52				push	EDX 
 00000386  DD 04 24			fld	qword ptr [ESP]
 00000389  59				pop	ECX
 0000038A  59				pop	ECX 
 0000038B  DC 04 24			fadd	qword ptr [ESP]
 0000038E  DD 1C 24			fstp	qword ptr [ESP]
 00000391  E8 00000000 E		call	 Math_Sqrt
 00000396  9B DB E2			fclex
 00000399  50				push	EAX
 0000039A  52				push	EDX 
 0000039B  DD 04 24			fld	qword ptr [ESP]
 0000039E  59				pop	ECX
 0000039F  59				pop	ECX 
 000003A0  DC 0C 24			fmul	qword ptr [ESP]
 000003A3  DD 1C 24			fstp	qword ptr [ESP]
 000003A6  B8 00000001			mov	EAX,000000001h
 000003AB  50				push	EAX
 000003AC  E8 00000000 E		call	 FloatingPoint_FromInt
 000003B1  50				push	EAX
 000003B2  52				push	EDX 
 000003B3  DD 04 24			fld	qword ptr [ESP]
 000003B6  59				pop	ECX
 000003B7  59				pop	ECX 
 000003B8  DC 04 24			fadd	qword ptr [ESP]
 000003BB  DD 1C 24			fstp	qword ptr [ESP]
 000003BE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003C1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003C4  9B DB E2			fclex
 000003C7  50				push	EAX
 000003C8  52				push	EDX 
 000003C9  DD 04 24			fld	qword ptr [ESP]
 000003CC  59				pop	ECX
 000003CD  59				pop	ECX 
 000003CE  DC 3C 24			fdivr	qword ptr [ESP]
 000003D1  DD 1C 24			fstp	qword ptr [ESP]
 000003D4  E8 00000000 E		call	 Math_Ln
 000003D9  EB 00			jmp	OFFSET $L000506
				;}
 000003DB			$L000506:

 000003DB  5F				pop	EDI
 000003DC  5E				pop	ESI 
 000003DD  5B				pop	EBX 
 000003DE  8B E5			mov	ESP,EBP
 000003E0  5D				pop	EBP 
 000003E1  C2 0008			retn	000000008h
 000003E4			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003E4			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003E4  55				push	EBP
 000003E5  8B EC			mov	EBP,ESP
 000003E7  51				push	ECX 
 000003E8  53				push	EBX 
 000003E9  56				push	ESI 
 000003EA  57				push	EDI 
				;{

				;{495}:return Math::Ln((X + 1) / (X - 1)) / 2
 000003EB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003EE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003F1  50				push	EAX
 000003F2  52				push	EDX 
 000003F3  B8 00000001			mov	EAX,000000001h
 000003F8  50				push	EAX
 000003F9  E8 00000000 E		call	 FloatingPoint_FromInt
 000003FE  50				push	EAX
 000003FF  52				push	EDX 
 00000400  DD 04 24			fld	qword ptr [ESP]
 00000403  59				pop	ECX
 00000404  59				pop	ECX 
 00000405  DC 04 24			fadd	qword ptr [ESP]
 00000408  DD 1C 24			fstp	qword ptr [ESP]
 0000040B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000040E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000411  50				push	EAX
 00000412  52				push	EDX 
 00000413  B8 00000001			mov	EAX,000000001h
 00000418  50				push	EAX
 00000419  E8 00000000 E		call	 FloatingPoint_FromInt
 0000041E  50				push	EAX
 0000041F  52				push	EDX 
 00000420  DD 04 24			fld	qword ptr [ESP]
 00000423  59				pop	ECX
 00000424  59				pop	ECX 
 00000425  DD 04 24			fld	qword ptr [ESP]
 00000428  D8 E1			fsub	st,st(1)
 0000042A  DD 1C 24			fstp	qword ptr [ESP]
 0000042D  9B DB E2			fclex
 00000430  DD 04 24			fld	qword ptr [ESP]
 00000433  59				pop	ECX
 00000434  59				pop	ECX 
 00000435  DC 3C 24			fdivr	qword ptr [ESP]
 00000438  DD 1C 24			fstp	qword ptr [ESP]
 0000043B  E8 00000000 E		call	 Math_Ln
 00000440  50				push	EAX
 00000441  52				push	EDX 
 00000442  B8 00000002			mov	EAX,000000002h
 00000447  9B DB E2			fclex
 0000044A  50				push	EAX
 0000044B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000450  50				push	EAX
 00000451  52				push	EDX 
 00000452  DD 04 24			fld	qword ptr [ESP]
 00000455  59				pop	ECX
 00000456  59				pop	ECX 
 00000457  DC 3C 24			fdivr	qword ptr [ESP]
 0000045A  DD 1C 24			fstp	qword ptr [ESP]
 0000045D  5A				pop	EDX
 0000045E  58				pop	EAX 
 0000045F  EB 00			jmp	OFFSET $L000508
				;}
 00000461			$L000508:

 00000461  5F				pop	EDI
 00000462  5E				pop	ESI 
 00000463  5B				pop	EBX 
 00000464  8B E5			mov	ESP,EBP
 00000466  5D				pop	EBP 
 00000467  C2 0008			retn	000000008h
 0000046A			Math_Hyperbolic_Inverse_HArccotan ENDP

 0000046A			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 0000046A  55				push	EBP
 0000046B  8B EC			mov	EBP,ESP
 0000046D  51				push	ECX 
 0000046E  53				push	EBX 
 0000046F  56				push	ESI 
 00000470  57				push	EDI 
				;{

				;{487}:return Math::Ln((Math::Sqrt(-X * X + 1) + 1) / X)
 00000471  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000474  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000477  50				push	EAX
 00000478  52				push	EDX 
 00000479  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000047C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000047F  9B DB E2			fclex
 00000482  50				push	EAX
 00000483  52				push	EDX 
 00000484  DD 04 24			fld	qword ptr [ESP]
 00000487  59				pop	ECX
 00000488  59				pop	ECX 
 00000489  DC 0C 24			fmul	qword ptr [ESP]
 0000048C  DD 1C 24			fstp	qword ptr [ESP]
 0000048F  DD 04 24			fld	qword ptr [ESP]
 00000492  D9 E0			fchs
 00000494  DD 1C 24			fstp	qword ptr [ESP]
 00000497  B8 00000001			mov	EAX,000000001h
 0000049C  50				push	EAX
 0000049D  E8 00000000 E		call	 FloatingPoint_FromInt
 000004A2  50				push	EAX
 000004A3  52				push	EDX 
 000004A4  DD 04 24			fld	qword ptr [ESP]
 000004A7  59				pop	ECX
 000004A8  59				pop	ECX 
 000004A9  DC 04 24			fadd	qword ptr [ESP]
 000004AC  DD 1C 24			fstp	qword ptr [ESP]
 000004AF  E8 00000000 E		call	 Math_Sqrt
 000004B4  50				push	EAX
 000004B5  52				push	EDX 
 000004B6  B8 00000001			mov	EAX,000000001h
 000004BB  50				push	EAX
 000004BC  E8 00000000 E		call	 FloatingPoint_FromInt
 000004C1  50				push	EAX
 000004C2  52				push	EDX 
 000004C3  DD 04 24			fld	qword ptr [ESP]
 000004C6  59				pop	ECX
 000004C7  59				pop	ECX 
 000004C8  DC 04 24			fadd	qword ptr [ESP]
 000004CB  DD 1C 24			fstp	qword ptr [ESP]
 000004CE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004D1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004D4  9B DB E2			fclex
 000004D7  50				push	EAX
 000004D8  52				push	EDX 
 000004D9  DD 04 24			fld	qword ptr [ESP]
 000004DC  59				pop	ECX
 000004DD  59				pop	ECX 
 000004DE  DC 3C 24			fdivr	qword ptr [ESP]
 000004E1  DD 1C 24			fstp	qword ptr [ESP]
 000004E4  E8 00000000 E		call	 Math_Ln
 000004E9  EB 00			jmp	OFFSET $L000504
				;}
 000004EB			$L000504:

 000004EB  5F				pop	EDI
 000004EC  5E				pop	ESI 
 000004ED  5B				pop	EBX 
 000004EE  8B E5			mov	ESP,EBP
 000004F0  5D				pop	EBP 
 000004F1  C2 0008			retn	000000008h
 000004F4			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004F4			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004F4  55				push	EBP
 000004F5  8B EC			mov	EBP,ESP
 000004F7  51				push	ECX 
 000004F8  53				push	EBX 
 000004F9  56				push	ESI 
 000004FA  57				push	EDI 
				;{

				;{475}:return Math::Ln(X + Math::Sqrt(X * X + 1))
 000004FB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004FE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000501  50				push	EAX
 00000502  52				push	EDX 
 00000503  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000506  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000509  50				push	EAX
 0000050A  52				push	EDX 
 0000050B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000050E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000511  9B DB E2			fclex
 00000514  50				push	EAX
 00000515  52				push	EDX 
 00000516  DD 04 24			fld	qword ptr [ESP]
 00000519  59				pop	ECX
 0000051A  59				pop	ECX 
 0000051B  DC 0C 24			fmul	qword ptr [ESP]
 0000051E  DD 1C 24			fstp	qword ptr [ESP]
 00000521  B8 00000001			mov	EAX,000000001h
 00000526  50				push	EAX
 00000527  E8 00000000 E		call	 FloatingPoint_FromInt
 0000052C  50				push	EAX
 0000052D  52				push	EDX 
 0000052E  DD 04 24			fld	qword ptr [ESP]
 00000531  59				pop	ECX
 00000532  59				pop	ECX 
 00000533  DC 04 24			fadd	qword ptr [ESP]
 00000536  DD 1C 24			fstp	qword ptr [ESP]
 00000539  E8 00000000 E		call	 Math_Sqrt
 0000053E  50				push	EAX
 0000053F  52				push	EDX 
 00000540  DD 04 24			fld	qword ptr [ESP]
 00000543  59				pop	ECX
 00000544  59				pop	ECX 
 00000545  DC 04 24			fadd	qword ptr [ESP]
 00000548  DD 1C 24			fstp	qword ptr [ESP]
 0000054B  E8 00000000 E		call	 Math_Ln
 00000550  EB 00			jmp	OFFSET $L000497
				;}
 00000552			$L000497:

 00000552  5F				pop	EDI
 00000553  5E				pop	ESI 
 00000554  5B				pop	EBX 
 00000555  8B E5			mov	ESP,EBP
 00000557  5D				pop	EBP 
 00000558  C2 0008			retn	000000008h
 0000055B			Math_Hyperbolic_Inverse_HArcsin ENDP

 0000055B			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 0000055B  55				push	EBP
 0000055C  8B EC			mov	EBP,ESP
 0000055E  51				push	ECX 
 0000055F  53				push	EBX 
 00000560  56				push	ESI 
 00000561  57				push	EDI 
				;{

				;{483}:return Math::Ln((1 + X) / (1 - X)) / 2
 00000562  B8 00000001			mov	EAX,000000001h
 00000567  50				push	EAX
 00000568  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000056B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000056E  50				push	EAX
 0000056F  52				push	EDX 
 00000570  DD 04 24			fld	qword ptr [ESP]
 00000573  59				pop	ECX
 00000574  59				pop	ECX 
 00000575  E8 00000000 E		call	 FloatingPoint_FromInt
 0000057A  50				push	EAX
 0000057B  52				push	EDX 
 0000057C  DC 04 24			fadd	qword ptr [ESP]
 0000057F  DD 1C 24			fstp	qword ptr [ESP]
 00000582  B8 00000001			mov	EAX,000000001h
 00000587  50				push	EAX
 00000588  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000058B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000058E  50				push	EAX
 0000058F  52				push	EDX 
 00000590  DD 04 24			fld	qword ptr [ESP]
 00000593  59				pop	ECX
 00000594  59				pop	ECX 
 00000595  E8 00000000 E		call	 FloatingPoint_FromInt
 0000059A  50				push	EAX
 0000059B  52				push	EDX 
 0000059C  DD 04 24			fld	qword ptr [ESP]
 0000059F  D8 E1			fsub	st,st(1)
 000005A1  DD 1C 24			fstp	qword ptr [ESP]
 000005A4  9B DB E2			fclex
 000005A7  DD 04 24			fld	qword ptr [ESP]
 000005AA  59				pop	ECX
 000005AB  59				pop	ECX 
 000005AC  DC 3C 24			fdivr	qword ptr [ESP]
 000005AF  DD 1C 24			fstp	qword ptr [ESP]
 000005B2  E8 00000000 E		call	 Math_Ln
 000005B7  50				push	EAX
 000005B8  52				push	EDX 
 000005B9  B8 00000002			mov	EAX,000000002h
 000005BE  9B DB E2			fclex
 000005C1  50				push	EAX
 000005C2  E8 00000000 E		call	 FloatingPoint_FromInt
 000005C7  50				push	EAX
 000005C8  52				push	EDX 
 000005C9  DD 04 24			fld	qword ptr [ESP]
 000005CC  59				pop	ECX
 000005CD  59				pop	ECX 
 000005CE  DC 3C 24			fdivr	qword ptr [ESP]
 000005D1  DD 1C 24			fstp	qword ptr [ESP]
 000005D4  5A				pop	EDX
 000005D5  58				pop	EAX 
 000005D6  EB 00			jmp	OFFSET $L000502
				;}
 000005D8			$L000502:

 000005D8  5F				pop	EDI
 000005D9  5E				pop	ESI 
 000005DA  5B				pop	EBX 
 000005DB  8B E5			mov	ESP,EBP
 000005DD  5D				pop	EBP 
 000005DE  C2 0008			retn	000000008h
 000005E1			Math_Hyperbolic_Inverse_HArctan ENDP

 000005E1			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005E1  55				push	EBP
 000005E2  8B EC			mov	EBP,ESP
 000005E4  51				push	ECX 
 000005E5  53				push	EBX 
 000005E6  56				push	ESI 
 000005E7  57				push	EDI 
				;{

				;{384}:return (180 / Math::pi()) * rad
 000005E8  B8 000000B4			mov	EAX,0000000B4h
 000005ED  50				push	EAX
 000005EE  E8 00000000 E		call	 Math_pi
 000005F3  9B DB E2			fclex
 000005F6  50				push	EAX
 000005F7  52				push	EDX 
 000005F8  DD 04 24			fld	qword ptr [ESP]
 000005FB  59				pop	ECX
 000005FC  59				pop	ECX 
 000005FD  E8 00000000 E		call	 FloatingPoint_FromInt
 00000602  50				push	EAX
 00000603  52				push	EDX 
 00000604  DC 3C 24			fdivr	qword ptr [ESP]
 00000607  DD 1C 24			fstp	qword ptr [ESP]
 0000060A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000060D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000610  9B DB E2			fclex
 00000613  50				push	EAX
 00000614  52				push	EDX 
 00000615  DD 04 24			fld	qword ptr [ESP]
 00000618  59				pop	ECX
 00000619  59				pop	ECX 
 0000061A  DC 0C 24			fmul	qword ptr [ESP]
 0000061D  DD 1C 24			fstp	qword ptr [ESP]
 00000620  5A				pop	EDX
 00000621  58				pop	EAX 
 00000622  EB 00			jmp	OFFSET $L000466
				;}
 00000624			$L000466:

 00000624  5F				pop	EDI
 00000625  5E				pop	ESI 
 00000626  5B				pop	EBX 
 00000627  8B E5			mov	ESP,EBP
 00000629  5D				pop	EBP 
 0000062A  C2 0008			retn	000000008h
 0000062D			Math_RadiansToDegrees ENDP

 0000062D			Numerical_Computing_Program_ApproximateADerivativeByDifferenceQuotient PROC NEAR 
				;void Numerical::Computing::Program::ApproximateADerivativeByDifferenceQuotient(void);
 0000062D  55				push	EBP
 0000062E  8B EC			mov	EBP,ESP
 00000630  83 EC 30			sub	ESP,000000030h
 00000633  53				push	EBX 
 00000634  56				push	ESI 
 00000635  57				push	EDI 
				;{

				;{78}:n= 1;
 00000636  B8 00000001			mov	EAX,000000001h
 0000063B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{79}:x= 1.0, h= 1.0, deriv= Math::Cos(x), diffquo, ;
 0000063E  D9 E8			fld1
 00000640  DD 5D F4			fstp	qword ptr [EBP-000Ch]
 00000643  D9 E8			fld1
 00000645  DD 5D EC			fstp	qword ptr [EBP-0014h]
 00000648  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 0000064B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 0000064E  50				push	EAX
 0000064F  52				push	EDX 
 00000650  E8 00000000 E		call	 Math_Cos
 00000655  50				push	EAX
 00000656  52				push	EDX 
 00000657  DD C0			ffree	st
 00000659  DD 04 24			fld	qword ptr [ESP]
 0000065C  DD 5D E4			fstp	qword ptr [EBP-001Ch]
 0000065F  5A				pop	EDX
 00000660  58				pop	EAX 
 00000661  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 00000664  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 

				;{79}:error;
 00000667  8B 55 D4			mov	EDX,dword ptr [EBP-002Ch]
 0000066A  8B 45 D8			mov	EAX,dword ptr [EBP-0028h] 

				;{81}:Console::WriteLn(" deriv = ", deriv);
 0000066D  8D 05 00000028 R		lea	EAX,OFFSET $S000572
 00000673  6A 00			push	000000000h
 00000675  50				push	EAX 
 00000676  E8 00000000 E		call	 Console_WriteString
 0000067B  8B 55 E4			mov	EDX,dword ptr [EBP-001Ch]
 0000067E  8B 45 E8			mov	EAX,dword ptr [EBP-0018h] 
 00000681  50				push	EAX 
 00000682  52				push	EDX 
 00000683  E8 00000000 E		call	 Console_WriteDouble 
 00000688  E8 00000000 E		call	 Console_WriteCrLf 

				;{82}:Console::WriteLn("\n h\t\t\tdiffquo\t\t\tabs(deriv - diffquo) \n");
 0000068D  8D 05 000000D7 R		lea	EAX,OFFSET $S000573
 00000693  6A 00			push	000000000h
 00000695  50				push	EAX 
 00000696  E8 00000000 E		call	 Console_WriteString
 0000069B  E8 00000000 E		call	 Console_WriteCrLf 

				;{86}:while(n <= 20)
 000006A0			$L000633:
 000006A0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000006A3  50				push	EAX
 000006A4  B8 00000014			mov	EAX,000000014h
 000006A9  5A				pop	EDX
 000006AA  3B D0			cmp	EDX,EAX
 000006AC  0F 9E C0			setle	AL
 000006AF  84 C0			test	AL,AL
 000006B1  0F 84 0000020D		jz	OFFSET $L000634
				;{

				;{88}:h/= 10;
 000006B7  B8 0000000A			mov	EAX,00000000Ah
 000006BC  50				push	EAX
 000006BD  DB 04 24			fild	dword ptr [ESP]
 000006C0  58				pop	EAX
 000006C1  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000006C4  DC 3B			fdivr	qword ptr [EBX]
 000006C6  DD 1B			fstp	qword ptr [EBX]

				;{89}:diffquo= (Math::Sin(x + h) - Math::Sin(x)) / h;
 000006C8  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000006CB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000006CE  50				push	EAX
 000006CF  52				push	EDX 
 000006D0  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 000006D3  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 000006D6  50				push	EAX
 000006D7  52				push	EDX 
 000006D8  DD 04 24			fld	qword ptr [ESP]
 000006DB  59				pop	ECX
 000006DC  59				pop	ECX 
 000006DD  DC 04 24			fadd	qword ptr [ESP]
 000006E0  DD 1C 24			fstp	qword ptr [ESP]
 000006E3  E8 00000000 E		call	 Math_Sin
 000006E8  50				push	EAX
 000006E9  52				push	EDX 
 000006EA  8B 55 F4			mov	EDX,dword ptr [EBP-000Ch]
 000006ED  8B 45 F8			mov	EAX,dword ptr [EBP-0008h] 
 000006F0  50				push	EAX
 000006F1  52				push	EDX 
 000006F2  E8 00000000 E		call	 Math_Sin
 000006F7  50				push	EAX
 000006F8  52				push	EDX 
 000006F9  DD 04 24			fld	qword ptr [ESP]
 000006FC  59				pop	ECX
 000006FD  59				pop	ECX 
 000006FE  DD 04 24			fld	qword ptr [ESP]
 00000701  D8 E1			fsub	st,st(1)
 00000703  DD 1C 24			fstp	qword ptr [ESP]
 00000706  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 00000709  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 0000070C  9B DB E2			fclex
 0000070F  50				push	EAX
 00000710  52				push	EDX 
 00000711  DD 04 24			fld	qword ptr [ESP]
 00000714  59				pop	ECX
 00000715  59				pop	ECX 
 00000716  DC 3C 24			fdivr	qword ptr [ESP]
 00000719  DD 1C 24			fstp	qword ptr [ESP]
 0000071C  DD C0			ffree	st
 0000071E  DD 04 24			fld	qword ptr [ESP]
 00000721  DD 5D DC			fstp	qword ptr [EBP-0024h]

				;{90}:error= Math::Abs(deriv - diffquo);
 00000724  5A				pop	EDX
 00000725  58				pop	EAX 
 00000726  8B 55 E4			mov	EDX,dword ptr [EBP-001Ch]
 00000729  8B 45 E8			mov	EAX,dword ptr [EBP-0018h] 
 0000072C  50				push	EAX
 0000072D  52				push	EDX 
 0000072E  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 00000731  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 
 00000734  50				push	EAX
 00000735  52				push	EDX 
 00000736  DD 04 24			fld	qword ptr [ESP]
 00000739  59				pop	ECX
 0000073A  59				pop	ECX 
 0000073B  DD 04 24			fld	qword ptr [ESP]
 0000073E  D8 E1			fsub	st,st(1)
 00000740  DD 1C 24			fstp	qword ptr [ESP]
 00000743  E8 00000000 E		call	 Math_Abs
 00000748  50				push	EAX
 00000749  52				push	EDX 
 0000074A  DD C0			ffree	st
 0000074C  DD 04 24			fld	qword ptr [ESP]
 0000074F  DD 5D D4			fstp	qword ptr [EBP-002Ch]

				;{93}:if(n <= 8)
 00000752  5A				pop	EDX
 00000753  58				pop	EAX 
 00000754  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000757  50				push	EAX
 00000758  B8 00000008			mov	EAX,000000008h
 0000075D  5A				pop	EDX
 0000075E  3B D0			cmp	EDX,EAX
 00000760  0F 9E C0			setle	AL
 00000763  84 C0			test	AL,AL
 00000765  74 4D			jz	OFFSET $L000635

				;{94}:Console::WriteLn(h, "     \t\t", diffquo, "    \t", error);
 00000767  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 0000076A  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 0000076D  50				push	EAX
 0000076E  52				push	EDX 
 0000076F  E8 00000000 E		call	 Console_WriteDouble
 00000774  8D 05 00000007 R		lea	EAX,OFFSET $S000575
 0000077A  6A 00			push	000000000h 
 0000077C  50				push	EAX 
 0000077D  E8 00000000 E		call	 Console_WriteString 
 00000782  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 00000785  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 
 00000788  50				push	EAX 
 00000789  52				push	EDX 
 0000078A  E8 00000000 E		call	 Console_WriteDouble 
 0000078F  8D 05 0000000F R		lea	EAX,OFFSET $S000576
 00000795  6A 00			push	000000000h 
 00000797  50				push	EAX 
 00000798  E8 00000000 E		call	 Console_WriteString 
 0000079D  8B 55 D4			mov	EDX,dword ptr [EBP-002Ch]
 000007A0  8B 45 D8			mov	EAX,dword ptr [EBP-0028h] 
 000007A3  50				push	EAX 
 000007A4  52				push	EDX 
 000007A5  E8 00000000 E		call	 Console_WriteDouble 
 000007AA  E8 00000000 E		call	 Console_WriteCrLf 
 000007AF  E9 00000105			jmp	OFFSET $L000636

				; else {
 000007B4			$L000635:

				;{95}:if(n <= 15)
 000007B4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000007B7  50				push	EAX
 000007B8  B8 0000000F			mov	EAX,00000000Fh
 000007BD  5A				pop	EDX
 000007BE  3B D0			cmp	EDX,EAX
 000007C0  0F 9E C0			setle	AL
 000007C3  84 C0			test	AL,AL
 000007C5  74 4D			jz	OFFSET $L000637

				;{96}:Console::WriteLn(h, "     \t", diffquo, "    \t", error);
 000007C7  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 000007CA  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 000007CD  50				push	EAX
 000007CE  52				push	EDX 
 000007CF  E8 00000000 E		call	 Console_WriteDouble
 000007D4  8D 05 00000000 R		lea	EAX,OFFSET $S000578
 000007DA  6A 00			push	000000000h 
 000007DC  50				push	EAX 
 000007DD  E8 00000000 E		call	 Console_WriteString 
 000007E2  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 000007E5  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 
 000007E8  50				push	EAX 
 000007E9  52				push	EDX 
 000007EA  E8 00000000 E		call	 Console_WriteDouble 
 000007EF  8D 05 0000000F R		lea	EAX,OFFSET $S000576
 000007F5  6A 00			push	000000000h 
 000007F7  50				push	EAX 
 000007F8  E8 00000000 E		call	 Console_WriteString 
 000007FD  8B 55 D4			mov	EDX,dword ptr [EBP-002Ch]
 00000800  8B 45 D8			mov	EAX,dword ptr [EBP-0028h] 
 00000803  50				push	EAX 
 00000804  52				push	EDX 
 00000805  E8 00000000 E		call	 Console_WriteDouble 
 0000080A  E8 00000000 E		call	 Console_WriteCrLf 
 0000080F  E9 000000A5			jmp	OFFSET $L000638

				; else {
 00000814			$L000637:

				;{97}:if(n == 16)
 00000814  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000817  50				push	EAX
 00000818  B8 00000010			mov	EAX,000000010h
 0000081D  5A				pop	EDX
 0000081E  3B D0			cmp	EDX,EAX
 00000820  0F 94 C0			setz	AL
 00000823  84 C0			test	AL,AL
 00000825  74 4A			jz	OFFSET $L000639

				;{98}:Console::WriteLn(h, "     \t", diffquo, "    \t\t\t", error);
 00000827  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 0000082A  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 0000082D  50				push	EAX
 0000082E  52				push	EDX 
 0000082F  E8 00000000 E		call	 Console_WriteDouble
 00000834  8D 05 00000000 R		lea	EAX,OFFSET $S000578
 0000083A  6A 00			push	000000000h 
 0000083C  50				push	EAX 
 0000083D  E8 00000000 E		call	 Console_WriteString 
 00000842  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 00000845  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 
 00000848  50				push	EAX 
 00000849  52				push	EDX 
 0000084A  E8 00000000 E		call	 Console_WriteDouble 
 0000084F  8D 05 00000015 R		lea	EAX,OFFSET $S000580
 00000855  6A 00			push	000000000h 
 00000857  50				push	EAX 
 00000858  E8 00000000 E		call	 Console_WriteString 
 0000085D  8B 55 D4			mov	EDX,dword ptr [EBP-002Ch]
 00000860  8B 45 D8			mov	EAX,dword ptr [EBP-0028h] 
 00000863  50				push	EAX 
 00000864  52				push	EDX 
 00000865  E8 00000000 E		call	 Console_WriteDouble 
 0000086A  E8 00000000 E		call	 Console_WriteCrLf 
 0000086F  EB 48			jmp	OFFSET $L000640

				; else {
 00000871			$L000639:

				;{100}:Console::WriteLn(h, "     \t\t", diffquo, "    \t\t\t", error);
 00000871  8B 55 EC			mov	EDX,dword ptr [EBP-0014h]
 00000874  8B 45 F0			mov	EAX,dword ptr [EBP-0010h] 
 00000877  50				push	EAX
 00000878  52				push	EDX 
 00000879  E8 00000000 E		call	 Console_WriteDouble
 0000087E  8D 05 00000007 R		lea	EAX,OFFSET $S000575
 00000884  6A 00			push	000000000h 
 00000886  50				push	EAX 
 00000887  E8 00000000 E		call	 Console_WriteString 
 0000088C  8B 55 DC			mov	EDX,dword ptr [EBP-0024h]
 0000088F  8B 45 E0			mov	EAX,dword ptr [EBP-0020h] 
 00000892  50				push	EAX 
 00000893  52				push	EDX 
 00000894  E8 00000000 E		call	 Console_WriteDouble 
 00000899  8D 05 00000015 R		lea	EAX,OFFSET $S000580
 0000089F  6A 00			push	000000000h 
 000008A1  50				push	EAX 
 000008A2  E8 00000000 E		call	 Console_WriteString 
 000008A7  8B 55 D4			mov	EDX,dword ptr [EBP-002Ch]
 000008AA  8B 45 D8			mov	EAX,dword ptr [EBP-0028h] 
 000008AD  50				push	EAX 
 000008AE  52				push	EDX 
 000008AF  E8 00000000 E		call	 Console_WriteDouble 
 000008B4  E8 00000000 E		call	 Console_WriteCrLf 
 000008B9			$L000640:

				; }
 000008B9			$L000638:

				; }
 000008B9			$L000636:

				; }

				;{102}:n++ ;
 000008B9  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000008BC  FF 45 FC			inc	dword ptr [EBP-4]
				;}
 000008BF  E9 FFFFFDDC			jmp	OFFSET $L000633
 000008C4			$L000634:
				;}
 000008C4			$L000565:

 000008C4  5F				pop	EDI
 000008C5  5E				pop	ESI 
 000008C6  5B				pop	EBX 
 000008C7  8B E5			mov	ESP,EBP
 000008C9  5D				pop	EBP 
 000008CA  C3				ret	
 000008CB			Numerical_Computing_Program_ApproximateADerivativeByDifferenceQuotient ENDP

 000008CB			Numerical_Computing_Program_ApproximateEulerConstant PROC NEAR 
				;double Numerical::Computing::Program::ApproximateEulerConstant(void);
 000008CB  55				push	EBP
 000008CC  8B EC			mov	EBP,ESP
 000008CE  83 EC 18			sub	ESP,000000018h
 000008D1  53				push	EBX 
 000008D2  56				push	ESI 
 000008D3  57				push	EDI 
				;{

				;{108}:e= 0.0;
 000008D4  D9 EE			fldz
 000008D6  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{109}:x= 1.0;
 000008D9  D9 E8			fld1
 000008DB  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{110}:n= 100000000;
 000008DE  B8 05F5E100			mov	EAX,005F5E100h
 000008E3  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{111}:e= Math::Pow((1 + x / n), n);
 000008E6  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000008E9  50				push	EAX
 000008EA  E8 00000000 E		call	 FloatingPoint_FromInt
 000008EF  50				push	EAX
 000008F0  52				push	EDX 
 000008F1  B8 00000001			mov	EAX,000000001h
 000008F6  50				push	EAX
 000008F7  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 000008FA  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 000008FD  50				push	EAX
 000008FE  52				push	EDX 
 000008FF  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000902  9B DB E2			fclex
 00000905  50				push	EAX
 00000906  E8 00000000 E		call	 FloatingPoint_FromInt
 0000090B  50				push	EAX
 0000090C  52				push	EDX 
 0000090D  DD 04 24			fld	qword ptr [ESP]
 00000910  59				pop	ECX
 00000911  59				pop	ECX 
 00000912  DC 3C 24			fdivr	qword ptr [ESP]
 00000915  DD 1C 24			fstp	qword ptr [ESP]
 00000918  DD 04 24			fld	qword ptr [ESP]
 0000091B  59				pop	ECX
 0000091C  59				pop	ECX 
 0000091D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000922  50				push	EAX
 00000923  52				push	EDX 
 00000924  DC 04 24			fadd	qword ptr [ESP]
 00000927  DD 1C 24			fstp	qword ptr [ESP]
 0000092A  E8 00000000 E		call	 Math_Pow
 0000092F  50				push	EAX
 00000930  52				push	EDX 
 00000931  DD C0			ffree	st
 00000933  DD 04 24			fld	qword ptr [ESP]
 00000936  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{113}:Console::WriteLn("e = ", e, ", ln e = ", Math::Ln(e));
 00000939  5A				pop	EDX
 0000093A  58				pop	EAX 
 0000093B  8D 05 00000254 R		lea	EAX,OFFSET $S000586
 00000941  6A 00			push	000000000h
 00000943  50				push	EAX 
 00000944  E8 00000000 E		call	 Console_WriteString
 00000949  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 0000094C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 0000094F  50				push	EAX 
 00000950  52				push	EDX 
 00000951  E8 00000000 E		call	 Console_WriteDouble 
 00000956  8D 05 00000032 R		lea	EAX,OFFSET $S000587
 0000095C  6A 00			push	000000000h 
 0000095E  50				push	EAX 
 0000095F  E8 00000000 E		call	 Console_WriteString 
 00000964  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000967  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 0000096A  50				push	EAX
 0000096B  52				push	EDX 
 0000096C  E8 00000000 E		call	 Math_Ln
 00000971  50				push	EAX 
 00000972  52				push	EDX 
 00000973  E8 00000000 E		call	 Console_WriteDouble 
 00000978  E8 00000000 E		call	 Console_WriteCrLf 

				;{115}:return e
 0000097D  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000980  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000983  EB 00			jmp	OFFSET $L000581
				;}
 00000985			$L000581:

 00000985  5F				pop	EDI
 00000986  5E				pop	ESI 
 00000987  5B				pop	EBX 
 00000988  8B E5			mov	ESP,EBP
 0000098A  5D				pop	EBP 
 0000098B  C3				ret	
 0000098C			Numerical_Computing_Program_ApproximateEulerConstant ENDP

 0000098C			Numerical_Computing_Program_ApproximateEulerConstantByTaylor PROC NEAR 
				;double Numerical::Computing::Program::ApproximateEulerConstantByTaylor(void);
 0000098C  55				push	EBP
 0000098D  8B EC			mov	EBP,ESP
 0000098F  83 EC 1C			sub	ESP,00000001Ch
 00000992  53				push	EBX 
 00000993  56				push	ESI 
 00000994  57				push	EDI 
				;{

				;{127}:e= 0.0;
 00000995  D9 EE			fldz
 00000997  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{128}:x= 1.0;
 0000099A  D9 E8			fld1
 0000099C  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{129}:n= 20;
 0000099F  B8 00000014			mov	EAX,000000014h
 000009A4  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{130}:for(i= 0; i < n; i++ )
 000009A7  33 C0			xor	EAX,EAX
 000009A9  89 45 E8			mov	dword ptr [EBP-0018h],EAX
 000009AC  EB 06			jmp	OFFSET $L000641
 000009AE			$L000642:
 000009AE  8B 45 E8			mov	EAX,dword ptr [EBP-24]
 000009B1  FF 45 E8	inc	dword ptr [EBP-24]
 000009B4			$L000641:
 000009B4  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000009B7  50				push	EAX
 000009B8  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000009BB  5A				pop	EDX
 000009BC  3B D0			cmp	EDX,EAX
 000009BE  0F 9C C0			setl	AL
 000009C1  84 C0			test	AL,AL
 000009C3  74 48			jz	OFFSET $L000643

				;{131}:e+= Math::Pow(x, i) / Numerical::Computing::Program::Factorial(i);
 000009C5  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000009C8  50				push	EAX 
 000009C9  E8 00000000 E		call	 FloatingPoint_FromInt
 000009CE  50				push	EAX
 000009CF  52				push	EDX 
 000009D0  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 000009D3  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 000009D6  50				push	EAX
 000009D7  52				push	EDX 
 000009D8  E8 00000000 E		call	 Math_Pow
 000009DD  50				push	EAX
 000009DE  52				push	EDX 
 000009DF  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000009E2  50				push	EAX
 000009E3  E8 00000407			call	 Numerical_Computing_Program_Factorial
 000009E8  9B DB E2			fclex
 000009EB  50				push	EAX
 000009EC  E8 00000000 E		call	 FloatingPoint_FromInt
 000009F1  50				push	EAX
 000009F2  52				push	EDX 
 000009F3  DD 04 24			fld	qword ptr [ESP]
 000009F6  59				pop	ECX
 000009F7  59				pop	ECX 
 000009F8  DC 3C 24			fdivr	qword ptr [ESP]
 000009FB  DD 1C 24			fstp	qword ptr [ESP]
 000009FE  F8				clc	
 000009FF  DD 04 24			fld	qword ptr [ESP]
 00000A02  5A				pop	EDX
 00000A03  58				pop	EAX 
 00000A04  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A07  DC 03			fadd	qword ptr [EBX]
 00000A09  DD 1B			fstp	qword ptr [EBX]
 00000A0B  EB A1			jmp	OFFSET $L000642 
 00000A0D			$L000643:

				;{133}:Console::WriteLn("e = ", e, ", ln e = ", Math::Ln(e));
 00000A0D  8D 05 00000254 R		lea	EAX,OFFSET $S000586
 00000A13  6A 00			push	000000000h
 00000A15  50				push	EAX 
 00000A16  E8 00000000 E		call	 Console_WriteString
 00000A1B  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000A1E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000A21  50				push	EAX 
 00000A22  52				push	EDX 
 00000A23  E8 00000000 E		call	 Console_WriteDouble 
 00000A28  8D 05 00000032 R		lea	EAX,OFFSET $S000587
 00000A2E  6A 00			push	000000000h 
 00000A30  50				push	EAX 
 00000A31  E8 00000000 E		call	 Console_WriteString 
 00000A36  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000A39  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000A3C  50				push	EAX
 00000A3D  52				push	EDX 
 00000A3E  E8 00000000 E		call	 Math_Ln
 00000A43  50				push	EAX 
 00000A44  52				push	EDX 
 00000A45  E8 00000000 E		call	 Console_WriteDouble 
 00000A4A  E8 00000000 E		call	 Console_WriteCrLf 

				;{135}:return e
 00000A4F  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000A52  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000A55  EB 00			jmp	OFFSET $L000590
				;}
 00000A57			$L000590:

 00000A57  5F				pop	EDI
 00000A58  5E				pop	ESI 
 00000A59  5B				pop	EBX 
 00000A5A  8B E5			mov	ESP,EBP
 00000A5C  5D				pop	EBP 
 00000A5D  C3				ret	
 00000A5E			Numerical_Computing_Program_ApproximateEulerConstantByTaylor ENDP

 00000A5E			Numerical_Computing_Program_CalcAddOneToReciprocalPowerOf2 PROC NEAR 
				;void Numerical::Computing::Program::CalcAddOneToReciprocalPowerOf2(void);
 00000A5E  55				push	EBP
 00000A5F  8B EC			mov	EBP,ESP
 00000A61  83 EC 18			sub	ESP,000000018h
 00000A64  53				push	EBX 
 00000A65  56				push	ESI 
 00000A66  57				push	EDI 
				;{

				;{29}:x= 1, y= 2;
 00000A67  B8 00000001			mov	EAX,000000001h
 00000A6C  50				push	EAX
 00000A6D  DB 04 24			fild	dword ptr [ESP]
 00000A70  DD 5D F8			fstp	qword ptr [EBP-0008h]
 00000A73  58				pop	EAX
 00000A74  B8 00000002			mov	EAX,000000002h
 00000A79  50				push	EAX
 00000A7A  DB 04 24			fild	dword ptr [ESP]
 00000A7D  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{30}:n= 0;
 00000A80  58				pop	EAX
 00000A81  33 C0			xor	EAX,EAX
 00000A83  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{34}:while(y > 1)
 00000A86			$L000644:
 00000A86  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000A89  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000A8C  50				push	EAX
 00000A8D  52				push	EDX 
 00000A8E  B8 00000001			mov	EAX,000000001h
 00000A93  50				push	EAX
 00000A94  E8 00000000 E		call	 FloatingPoint_FromInt
 00000A99  50				push	EAX
 00000A9A  52				push	EDX 
 00000A9B  E8 00000000 E		call	 FloatingPoint_Compare
 00000AA0  83 F8 00			cmp	EAX,000000000h
 00000AA3  F7 D8			neg	EAX
 00000AA5  0F 9F C0			setg	AL
 00000AA8  84 C0			test	AL,AL
 00000AAA  0F 84 00000099		jz	OFFSET $L000645
				;{

				;{36}:x= x / 2;
 00000AB0  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000AB3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000AB6  50				push	EAX
 00000AB7  52				push	EDX 
 00000AB8  B8 00000002			mov	EAX,000000002h
 00000ABD  9B DB E2			fclex
 00000AC0  50				push	EAX
 00000AC1  E8 00000000 E		call	 FloatingPoint_FromInt
 00000AC6  50				push	EAX
 00000AC7  52				push	EDX 
 00000AC8  DD 04 24			fld	qword ptr [ESP]
 00000ACB  59				pop	ECX
 00000ACC  59				pop	ECX 
 00000ACD  DC 3C 24			fdivr	qword ptr [ESP]
 00000AD0  DD 1C 24			fstp	qword ptr [ESP]
 00000AD3  DD C0			ffree	st
 00000AD5  DD 04 24			fld	qword ptr [ESP]
 00000AD8  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{37}:y= 1 + x;
 00000ADB  5A				pop	EDX
 00000ADC  58				pop	EAX 
 00000ADD  B8 00000001			mov	EAX,000000001h
 00000AE2  50				push	EAX
 00000AE3  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000AE6  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000AE9  50				push	EAX
 00000AEA  52				push	EDX 
 00000AEB  DD 04 24			fld	qword ptr [ESP]
 00000AEE  59				pop	ECX
 00000AEF  59				pop	ECX 
 00000AF0  E8 00000000 E		call	 FloatingPoint_FromInt
 00000AF5  50				push	EAX
 00000AF6  52				push	EDX 
 00000AF7  DC 04 24			fadd	qword ptr [ESP]
 00000AFA  DD 1C 24			fstp	qword ptr [ESP]
 00000AFD  DD C0			ffree	st
 00000AFF  DD 04 24			fld	qword ptr [ESP]
 00000B02  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{38}:n++ ;
 00000B05  5A				pop	EDX
 00000B06  58				pop	EAX 
 00000B07  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00000B0A  FF 45 EC			inc	dword ptr [EBP-20]

				;{39}:Console::WriteLn(" 2^ - ", n, " = ", y);
 00000B0D  8D 05 0000001D R		lea	EAX,OFFSET $S000530
 00000B13  6A 00			push	000000000h
 00000B15  50				push	EAX 
 00000B16  E8 00000000 E		call	 Console_WriteString
 00000B1B  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000B1E  50				push	EAX 
 00000B1F  E8 00000000 E		call	 Console_WriteInteger 
 00000B24  8D 05 00000024 R		lea	EAX,OFFSET $S000531
 00000B2A  6A 00			push	000000000h 
 00000B2C  50				push	EAX 
 00000B2D  E8 00000000 E		call	 Console_WriteString 
 00000B32  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000B35  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000B38  50				push	EAX 
 00000B39  52				push	EDX 
 00000B3A  E8 00000000 E		call	 Console_WriteDouble 
 00000B3F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B44  E9 FFFFFF3D			jmp	OFFSET $L000644
 00000B49			$L000645:
				;}
 00000B49			$L000532:

 00000B49  5F				pop	EDI
 00000B4A  5E				pop	ESI 
 00000B4B  5B				pop	EBX 
 00000B4C  8B E5			mov	ESP,EBP
 00000B4E  5D				pop	EBP 
 00000B4F  C3				ret	
 00000B50			Numerical_Computing_Program_CalcAddOneToReciprocalPowerOf2 ENDP

 00000B50			Numerical_Computing_Program_CalcEulersGammaConstant PROC NEAR 
				;double Numerical::Computing::Program::CalcEulersGammaConstant(void);
 00000B50  55				push	EBP
 00000B51  8B EC			mov	EBP,ESP
 00000B53  83 EC 14			sub	ESP,000000014h
 00000B56  53				push	EBX 
 00000B57  56				push	ESI 
 00000B58  57				push	EDI 
				;{

				;{140}:result= 0.0;
 00000B59  D9 EE			fldz
 00000B5B  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{141}:n= 100000;
 00000B5E  B8 000186A0			mov	EAX,0000186A0h
 00000B63  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{142}:for(i= 1; i < n; i++ )
 00000B66  B8 00000001			mov	EAX,000000001h
 00000B6B  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000B6E  EB 06			jmp	OFFSET $L000646
 00000B70			$L000647:
 00000B70  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000B73  FF 45 F0			inc	dword ptr [EBP-16]
 00000B76			$L000646:
 00000B76  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000B79  50				push	EAX
 00000B7A  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000B7D  5A				pop	EDX
 00000B7E  3B D0			cmp	EDX,EAX
 00000B80  0F 9C C0			setl	AL
 00000B83  84 C0			test	AL,AL
 00000B85  74 35			jz	OFFSET $L000648
				;{

				;{144}:result+= 1 / i;
 00000B87  B8 00000001			mov	EAX,000000001h
 00000B8C  50				push	EAX
 00000B8D  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000B90  9B DB E2			fclex
 00000B93  50				push	EAX
 00000B94  E8 00000000 E		call	 FloatingPoint_FromInt
 00000B99  50				push	EAX
 00000B9A  52				push	EDX 
 00000B9B  DD 04 24			fld	qword ptr [ESP]
 00000B9E  59				pop	ECX
 00000B9F  59				pop	ECX 
 00000BA0  E8 00000000 E		call	 FloatingPoint_FromInt
 00000BA5  50				push	EAX
 00000BA6  52				push	EDX 
 00000BA7  DC 3C 24			fdivr	qword ptr [ESP]
 00000BAA  DD 1C 24			fstp	qword ptr [ESP]
 00000BAD  F8				clc	
 00000BAE  DD 04 24			fld	qword ptr [ESP]
 00000BB1  5A				pop	EDX
 00000BB2  58				pop	EAX 
 00000BB3  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000BB6  DC 03			fadd	qword ptr [EBX]
 00000BB8  DD 1B			fstp	qword ptr [EBX]
				;}
 00000BBA  EB B4			jmp	OFFSET $L000647 
 00000BBC			$L000648:

				;{146}:result-= Math::Ln(n);
 00000BBC  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000BBF  50				push	EAX
 00000BC0  E8 00000000 E		call	 FloatingPoint_FromInt
 00000BC5  50				push	EAX
 00000BC6  52				push	EDX 
 00000BC7  E8 00000000 E		call	 Math_Ln
 00000BCC  F8				clc	
 00000BCD  50				push	EAX
 00000BCE  52				push	EDX 
 00000BCF  DD 04 24			fld	qword ptr [ESP]
 00000BD2  5A				pop	EDX
 00000BD3  58				pop	EAX 
 00000BD4  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000BD7  DC 2B			fsubr	qword ptr [EBX]
 00000BD9  DD 1B			fstp	qword ptr [EBX]

				;{148}:return result
 00000BDB  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000BDE  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000BE1  EB 00			jmp	OFFSET $L000595
				;}
 00000BE3			$L000595:

 00000BE3  5F				pop	EDI
 00000BE4  5E				pop	ESI 
 00000BE5  5B				pop	EBX 
 00000BE6  8B E5			mov	ESP,EBP
 00000BE8  5D				pop	EBP 
 00000BE9  C3				ret	
 00000BEA			Numerical_Computing_Program_CalcEulersGammaConstant ENDP

 00000BEA			Numerical_Computing_Program_CalcHyperbolicDemo2 PROC NEAR 
				;double Numerical::Computing::Program::CalcHyperbolicDemo2(void);
 00000BEA  55				push	EBP
 00000BEB  8B EC			mov	EBP,ESP
 00000BED  51				push	ECX 
 00000BEE  53				push	EBX 
 00000BEF  56				push	ESI 
 00000BF0  57				push	EDI 
				;{

				;{172}:return (Math::Hyperbolic::HCos(Math::pi()) * Math::Hyperbolic::HCos(Math::pi())) - (Math::Hyperbolic::HSin(Math::pi()) * Math::Hyperbolic::HSin(Math::pi()))
 00000BF1  E8 00000000 E		call	 Math_pi
 00000BF6  50				push	EAX
 00000BF7  52				push	EDX 
 00000BF8  E8 FFFFF44F			call	 Math_Hyperbolic_HCos
 00000BFD  50				push	EAX
 00000BFE  52				push	EDX 
 00000BFF  E8 00000000 E		call	 Math_pi
 00000C04  50				push	EAX
 00000C05  52				push	EDX 
 00000C06  E8 FFFFF441			call	 Math_Hyperbolic_HCos
 00000C0B  9B DB E2			fclex
 00000C0E  50				push	EAX
 00000C0F  52				push	EDX 
 00000C10  DD 04 24			fld	qword ptr [ESP]
 00000C13  59				pop	ECX
 00000C14  59				pop	ECX 
 00000C15  DC 0C 24			fmul	qword ptr [ESP]
 00000C18  DD 1C 24			fstp	qword ptr [ESP]
 00000C1B  E8 00000000 E		call	 Math_pi
 00000C20  50				push	EAX
 00000C21  52				push	EDX 
 00000C22  E8 FFFFF5CD			call	 Math_Hyperbolic_HSin
 00000C27  50				push	EAX
 00000C28  52				push	EDX 
 00000C29  E8 00000000 E		call	 Math_pi
 00000C2E  50				push	EAX
 00000C2F  52				push	EDX 
 00000C30  E8 FFFFF5BF			call	 Math_Hyperbolic_HSin
 00000C35  9B DB E2			fclex
 00000C38  50				push	EAX
 00000C39  52				push	EDX 
 00000C3A  DD 04 24			fld	qword ptr [ESP]
 00000C3D  59				pop	ECX
 00000C3E  59				pop	ECX 
 00000C3F  DC 0C 24			fmul	qword ptr [ESP]
 00000C42  DD 1C 24			fstp	qword ptr [ESP]
 00000C45  DD 04 24			fld	qword ptr [ESP]
 00000C48  59				pop	ECX
 00000C49  59				pop	ECX 
 00000C4A  DD 04 24			fld	qword ptr [ESP]
 00000C4D  D8 E1			fsub	st,st(1)
 00000C4F  DD 1C 24			fstp	qword ptr [ESP]
 00000C52  5A				pop	EDX
 00000C53  58				pop	EAX 
 00000C54  EB 00			jmp	OFFSET $L000608
				;}
 00000C56			$L000608:

 00000C56  5F				pop	EDI
 00000C57  5E				pop	ESI 
 00000C58  5B				pop	EBX 
 00000C59  8B E5			mov	ESP,EBP
 00000C5B  5D				pop	EBP 
 00000C5C  C3				ret	
 00000C5D			Numerical_Computing_Program_CalcHyperbolicDemo2 ENDP

 00000C5D			Numerical_Computing_Program_CalcHyperbolicFunctionsDemo PROC NEAR 
				;double Numerical::Computing::Program::CalcHyperbolicFunctionsDemo(double x);
 00000C5D  55				push	EBP
 00000C5E  8B EC			mov	EBP,ESP
 00000C60  83 EC 0C			sub	ESP,00000000Ch
 00000C63  53				push	EBX 
 00000C64  56				push	ESI 
 00000C65  57				push	EDI 
				;{

				;{165}:e_PowX= Math::Hyperbolic::HSin(x) + Math::Hyperbolic::HCos(x);
 00000C66  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000C69  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000C6C  50				push	EAX
 00000C6D  52				push	EDX 
 00000C6E  E8 FFFFF581			call	 Math_Hyperbolic_HSin
 00000C73  50				push	EAX
 00000C74  52				push	EDX 
 00000C75  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000C78  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000C7B  50				push	EAX
 00000C7C  52				push	EDX 
 00000C7D  E8 FFFFF3CA			call	 Math_Hyperbolic_HCos
 00000C82  50				push	EAX
 00000C83  52				push	EDX 
 00000C84  DD 04 24			fld	qword ptr [ESP]
 00000C87  59				pop	ECX
 00000C88  59				pop	ECX 
 00000C89  DC 04 24			fadd	qword ptr [ESP]
 00000C8C  DD 1C 24			fstp	qword ptr [ESP]
 00000C8F  DD C0			ffree	st
 00000C91  DD 04 24			fld	qword ptr [ESP]
 00000C94  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{167}:return e_PowX
 00000C97  5A				pop	EDX
 00000C98  58				pop	EAX 
 00000C99  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000C9C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000C9F  EB 00			jmp	OFFSET $L000605
				;}
 00000CA1			$L000605:

 00000CA1  5F				pop	EDI
 00000CA2  5E				pop	ESI 
 00000CA3  5B				pop	EBX 
 00000CA4  8B E5			mov	ESP,EBP
 00000CA6  5D				pop	EBP 
 00000CA7  C2 0008			retn	000000008h
 00000CAA			Numerical_Computing_Program_CalcHyperbolicFunctionsDemo ENDP

 00000CAA			Numerical_Computing_Program_CalcPowerOfReciprocalCubes PROC NEAR 
				;double Numerical::Computing::Program::CalcPowerOfReciprocalCubes(void);
 00000CAA  55				push	EBP
 00000CAB  8B EC			mov	EBP,ESP
 00000CAD  83 EC 14			sub	ESP,000000014h
 00000CB0  53				push	EBX 
 00000CB1  56				push	ESI 
 00000CB2  57				push	EDI 
				;{

				;{153}:result= 0.0;
 00000CB3  D9 EE			fldz
 00000CB5  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{154}:n= 1000;
 00000CB8  B8 000003E8			mov	EAX,0000003E8h
 00000CBD  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{155}:for(i= 1; i < n; i++ )
 00000CC0  B8 00000001			mov	EAX,000000001h
 00000CC5  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000CC8  EB 06			jmp	OFFSET $L000649
 00000CCA			$L000650:
 00000CCA  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00000CCD  FF 45 F0			inc	dword ptr [EBP-16]
 00000CD0			$L000649:
 00000CD0  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000CD3  50				push	EAX
 00000CD4  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000CD7  5A				pop	EDX
 00000CD8  3B D0			cmp	EDX,EAX
 00000CDA  0F 9C C0			setl	AL
 00000CDD  84 C0			test	AL,AL
 00000CDF  74 49			jz	OFFSET $L000651
				;{

				;{157}:result+= 1 / Math::Pow(i, 3);
 00000CE1  B8 00000001			mov	EAX,000000001h
 00000CE6  50				push	EAX
 00000CE7  B8 00000003			mov	EAX,000000003h
 00000CEC  50				push	EAX 
 00000CED  E8 00000000 E		call	 FloatingPoint_FromInt
 00000CF2  50				push	EAX
 00000CF3  52				push	EDX 
 00000CF4  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000CF7  50				push	EAX
 00000CF8  E8 00000000 E		call	 FloatingPoint_FromInt
 00000CFD  50				push	EAX
 00000CFE  52				push	EDX 
 00000CFF  E8 00000000 E		call	 Math_Pow
 00000D04  9B DB E2			fclex
 00000D07  50				push	EAX
 00000D08  52				push	EDX 
 00000D09  DD 04 24			fld	qword ptr [ESP]
 00000D0C  59				pop	ECX
 00000D0D  59				pop	ECX 
 00000D0E  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D13  50				push	EAX
 00000D14  52				push	EDX 
 00000D15  DC 3C 24			fdivr	qword ptr [ESP]
 00000D18  DD 1C 24			fstp	qword ptr [ESP]
 00000D1B  F8				clc	
 00000D1C  DD 04 24			fld	qword ptr [ESP]
 00000D1F  5A				pop	EDX
 00000D20  58				pop	EAX 
 00000D21  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000D24  DC 03			fadd	qword ptr [EBX]
 00000D26  DD 1B			fstp	qword ptr [EBX]
				;}
 00000D28  EB A0			jmp	OFFSET $L000650 
 00000D2A			$L000651:

				;{160}:return result
 00000D2A  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000D2D  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000D30  EB 00			jmp	OFFSET $L000600
				;}
 00000D32			$L000600:

 00000D32  5F				pop	EDI
 00000D33  5E				pop	ESI 
 00000D34  5B				pop	EBX 
 00000D35  8B E5			mov	ESP,EBP
 00000D37  5D				pop	EBP 
 00000D38  C3				ret	
 00000D39			Numerical_Computing_Program_CalcPowerOfReciprocalCubes ENDP

 00000D39			Numerical_Computing_Program_CalcReciprocalPowerOf2 PROC NEAR 
				;void Numerical::Computing::Program::CalcReciprocalPowerOf2(void);
 00000D39  55				push	EBP
 00000D3A  8B EC			mov	EBP,ESP
 00000D3C  83 EC 10			sub	ESP,000000010h
 00000D3F  53				push	EBX 
 00000D40  56				push	ESI 
 00000D41  57				push	EDI 
				;{

				;{14}:x= 1;
 00000D42  B8 00000001			mov	EAX,000000001h
 00000D47  50				push	EAX
 00000D48  DB 04 24			fild	dword ptr [ESP]
 00000D4B  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{15}:n= 0;
 00000D4E  58				pop	EAX
 00000D4F  33 C0			xor	EAX,EAX
 00000D51  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{19}:while(x > 1.0e-17)
 00000D54			$L000652:
 00000D54  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000D57  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000D5A  50				push	EAX
 00000D5B  52				push	EDX 
 00000D5C  BA 4646D497			mov	EDX,04646D497h
 00000D61  B8 3C670EF5			mov	EAX,03C670EF5h 
 00000D66  50				push	EAX
 00000D67  52				push	EDX 
 00000D68  E8 00000000 E		call	 FloatingPoint_Compare
 00000D6D  83 F8 00			cmp	EAX,000000000h
 00000D70  F7 D8			neg	EAX
 00000D72  0F 9F C0			setg	AL
 00000D75  84 C0			test	AL,AL
 00000D77  74 6F			jz	OFFSET $L000653
				;{

				;{21}:x= x / 2;
 00000D79  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000D7C  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000D7F  50				push	EAX
 00000D80  52				push	EDX 
 00000D81  B8 00000002			mov	EAX,000000002h
 00000D86  9B DB E2			fclex
 00000D89  50				push	EAX
 00000D8A  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D8F  50				push	EAX
 00000D90  52				push	EDX 
 00000D91  DD 04 24			fld	qword ptr [ESP]
 00000D94  59				pop	ECX
 00000D95  59				pop	ECX 
 00000D96  DC 3C 24			fdivr	qword ptr [ESP]
 00000D99  DD 1C 24			fstp	qword ptr [ESP]
 00000D9C  DD C0			ffree	st
 00000D9E  DD 04 24			fld	qword ptr [ESP]
 00000DA1  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{22}:n++ ;
 00000DA4  5A				pop	EDX
 00000DA5  58				pop	EAX 
 00000DA6  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000DA9  FF 45 F4			inc	dword ptr [EBP-12]

				;{23}:Console::WriteLn(" 2^ - ", n, " = ", x);
 00000DAC  8D 05 0000001D R		lea	EAX,OFFSET $S000530
 00000DB2  6A 00			push	000000000h
 00000DB4  50				push	EAX 
 00000DB5  E8 00000000 E		call	 Console_WriteString
 00000DBA  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000DBD  50				push	EAX 
 00000DBE  E8 00000000 E		call	 Console_WriteInteger 
 00000DC3  8D 05 00000024 R		lea	EAX,OFFSET $S000531
 00000DC9  6A 00			push	000000000h 
 00000DCB  50				push	EAX 
 00000DCC  E8 00000000 E		call	 Console_WriteString 
 00000DD1  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000DD4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000DD7  50				push	EAX 
 00000DD8  52				push	EDX 
 00000DD9  E8 00000000 E		call	 Console_WriteDouble 
 00000DDE  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000DE3  E9 FFFFFF6C			jmp	OFFSET $L000652
 00000DE8			$L000653:
				;}
 00000DE8			$L000525:

 00000DE8  5F				pop	EDI
 00000DE9  5E				pop	ESI 
 00000DEA  5B				pop	EBX 
 00000DEB  8B E5			mov	ESP,EBP
 00000DED  5D				pop	EBP 
 00000DEE  C3				ret	
 00000DEF			Numerical_Computing_Program_CalcReciprocalPowerOf2 ENDP

 00000DEF			Numerical_Computing_Program_Factorial PROC NEAR 
				;int Numerical::Computing::Program::Factorial(int n);
 00000DEF  55				push	EBP
 00000DF0  8B EC			mov	EBP,ESP
 00000DF2  51				push	ECX 
 00000DF3  53				push	EBX 
 00000DF4  56				push	ESI 
 00000DF5  57				push	EDI 
				;{

				;{120}:if(n == 0)
 00000DF6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DF9  50				push	EAX
 00000DFA  33 C0			xor	EAX,EAX
 00000DFC  5A				pop	EDX
 00000DFD  3B D0			cmp	EDX,EAX
 00000DFF  0F 94 C0			setz	AL
 00000E02  84 C0			test	AL,AL
 00000E04  74 07			jz	OFFSET $L000654

				;{121}:return 1
 00000E06  B8 00000001			mov	EAX,000000001h
 00000E0B  EB 1F			jmp	OFFSET $L000588
 00000E0D			$L000654:

				;{122}:return n * Numerical::Computing::Program::Factorial(n - 1)
 00000E0D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E10  50				push	EAX
 00000E11  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E14  50				push	EAX
 00000E15  B8 00000001			mov	EAX,000000001h
 00000E1A  5A				pop	EDX
 00000E1B  2B D0			sub	EDX,EAX
 00000E1D  8B C2			mov	EAX,EDX
 00000E1F  50				push	EAX
 00000E20  E8 FFFFFFCA			call	 Numerical_Computing_Program_Factorial
 00000E25  59				pop	ECX
 00000E26  99				cdq	
 00000E27  0F AF C1			imul	EAX,ECX
 00000E2A  EB 00			jmp	OFFSET $L000588
				;}
 00000E2C			$L000588:

 00000E2C  5F				pop	EDI
 00000E2D  5E				pop	ESI 
 00000E2E  5B				pop	EBX 
 00000E2F  8B E5			mov	ESP,EBP
 00000E31  5D				pop	EBP 
 00000E32  C2 0004			retn	000000004h
 00000E35			Numerical_Computing_Program_Factorial ENDP

 00000E35			Numerical_Computing_Program_FindOneFromQuotient PROC NEAR 
				;void Numerical::Computing::Program::FindOneFromQuotient(void);
 00000E35  55				push	EBP
 00000E36  8B EC			mov	EBP,ESP
 00000E38  83 EC 10			sub	ESP,000000010h
 00000E3B  53				push	EBX 
 00000E3C  56				push	ESI 
 00000E3D  57				push	EDI 
				;{

				;{67}:y= 0.0;
 00000E3E  D9 EE			fldz
 00000E40  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{69}:for(x= 1; x <= 10; x++ )
 00000E43  B8 00000001			mov	EAX,000000001h
 00000E48  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000E4B  EB 06			jmp	OFFSET $L000656
 00000E4D			$L000657:
 00000E4D  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000E50  FF 45 F4			inc	dword ptr [EBP-12]
 00000E53			$L000656:
 00000E53  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E56  50				push	EAX
 00000E57  B8 0000000A			mov	EAX,00000000Ah
 00000E5C  5A				pop	EDX
 00000E5D  3B D0			cmp	EDX,EAX
 00000E5F  0F 9E C0			setle	AL
 00000E62  84 C0			test	AL,AL
 00000E64  0F 84 00000087		jz	OFFSET $L000658
				;{

				;{71}:y= 1 / (1 / x);
 00000E6A  B8 00000001			mov	EAX,000000001h
 00000E6F  50				push	EAX
 00000E70  B8 00000001			mov	EAX,000000001h
 00000E75  50				push	EAX
 00000E76  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E79  9B DB E2			fclex
 00000E7C  50				push	EAX
 00000E7D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000E82  50				push	EAX
 00000E83  52				push	EDX 
 00000E84  DD 04 24			fld	qword ptr [ESP]
 00000E87  59				pop	ECX
 00000E88  59				pop	ECX 
 00000E89  E8 00000000 E		call	 FloatingPoint_FromInt
 00000E8E  50				push	EAX
 00000E8F  52				push	EDX 
 00000E90  DC 3C 24			fdivr	qword ptr [ESP]
 00000E93  DD 1C 24			fstp	qword ptr [ESP]
 00000E96  9B DB E2			fclex
 00000E99  DD 04 24			fld	qword ptr [ESP]
 00000E9C  59				pop	ECX
 00000E9D  59				pop	ECX 
 00000E9E  E8 00000000 E		call	 FloatingPoint_FromInt
 00000EA3  50				push	EAX
 00000EA4  52				push	EDX 
 00000EA5  DC 3C 24			fdivr	qword ptr [ESP]
 00000EA8  DD 1C 24			fstp	qword ptr [ESP]
 00000EAB  DD C0			ffree	st
 00000EAD  DD 04 24			fld	qword ptr [ESP]
 00000EB0  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{72}:Console::WriteLn("y is ", x, "? == ", y);
 00000EB3  5A				pop	EDX
 00000EB4  58				pop	EAX 
 00000EB5  8D 05 0000025F R		lea	EAX,OFFSET $S000563
 00000EBB  6A 00			push	000000000h
 00000EBD  50				push	EAX 
 00000EBE  E8 00000000 E		call	 Console_WriteString
 00000EC3  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000EC6  50				push	EAX 
 00000EC7  E8 00000000 E		call	 Console_WriteInteger 
 00000ECC  8D 05 00000058 R		lea	EAX,OFFSET $S000564
 00000ED2  6A 00			push	000000000h 
 00000ED4  50				push	EAX 
 00000ED5  E8 00000000 E		call	 Console_WriteString 
 00000EDA  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000EDD  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000EE0  50				push	EAX 
 00000EE1  52				push	EDX 
 00000EE2  E8 00000000 E		call	 Console_WriteDouble 
 00000EE7  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000EEC  E9 FFFFFF5C			jmp	OFFSET $L000657 
 00000EF1			$L000658:
				;}
 00000EF1			$L000558:

 00000EF1  5F				pop	EDI
 00000EF2  5E				pop	ESI 
 00000EF3  5B				pop	EBX 
 00000EF4  8B E5			mov	ESP,EBP
 00000EF6  5D				pop	EBP 
 00000EF7  C3				ret	
 00000EF8			Numerical_Computing_Program_FindOneFromQuotient ENDP

 00000EF8			Numerical_Computing_Program_TotalParallelResistance PROC NEAR 
				;void Numerical::Computing::Program::TotalParallelResistance(void);
 00000EF8  55				push	EBP
 00000EF9  8B EC			mov	EBP,ESP
 00000EFB  83 EC 60			sub	ESP,000000060h
 00000EFE  53				push	EBX 
 00000EFF  56				push	ESI 
 00000F00  57				push	EDI 
				;{

				;{45}:R1= 1.0;
 00000F01  D9 E8			fld1
 00000F03  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{46}:R2;
 00000F06  8D 45 B0			lea	EAX,dword ptr [EBP-0050h]

				;{48}:R2[0]= 1.0;
 00000F09  33 C0			xor	EAX,EAX
 00000F0B  6B C0 08			imul	EAX,EAX,000000008h
 00000F0E  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000F12  50				push	EAX
 00000F13  D9 E8			fld1
 00000F15  5B				pop	EBX
 00000F16  DD 1B			fstp	qword ptr [EBX]

				;{49}:R2[1]= 10.0;
 00000F18  B8 00000001			mov	EAX,000000001h
 00000F1D  6B C0 08			imul	EAX,EAX,000000008h
 00000F20  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000F24  50				push	EAX
 00000F25  33 D2			xor	EDX,EDX
 00000F27  B8 40240000			mov	EAX,040240000h
 00000F2C  50				push	EAX
 00000F2D  52				push	EDX 
 00000F2E  DD C0			ffree	st
 00000F30  DD 04 24			fld	qword ptr [ESP]
 00000F33  5A				pop	EDX
 00000F34  58				pop	EAX 
 00000F35  5B				pop	EBX
 00000F36  DD 1B			fstp	qword ptr [EBX]

				;{50}:R2[2]= 1000.0;
 00000F38  B8 00000002			mov	EAX,000000002h
 00000F3D  6B C0 08			imul	EAX,EAX,000000008h
 00000F40  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000F44  50				push	EAX
 00000F45  33 D2			xor	EDX,EDX
 00000F47  B8 408F4000			mov	EAX,0408F4000h
 00000F4C  50				push	EAX
 00000F4D  52				push	EDX 
 00000F4E  DD C0			ffree	st
 00000F50  DD 04 24			fld	qword ptr [ESP]
 00000F53  5A				pop	EDX
 00000F54  58				pop	EAX 
 00000F55  5B				pop	EBX
 00000F56  DD 1B			fstp	qword ptr [EBX]

				;{51}:R2[3]= 1.0e5;
 00000F58  B8 00000003			mov	EAX,000000003h
 00000F5D  6B C0 08			imul	EAX,EAX,000000008h
 00000F60  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000F64  50				push	EAX
 00000F65  33 D2			xor	EDX,EDX
 00000F67  B8 40F86A00			mov	EAX,040F86A00h
 00000F6C  50				push	EAX
 00000F6D  52				push	EDX 
 00000F6E  DD C0			ffree	st
 00000F70  DD 04 24			fld	qword ptr [ESP]
 00000F73  5A				pop	EDX
 00000F74  58				pop	EAX 
 00000F75  5B				pop	EBX
 00000F76  DD 1B			fstp	qword ptr [EBX]

				;{52}:R2[4]= 1.0e10;
 00000F78  B8 00000004			mov	EAX,000000004h
 00000F7D  6B C0 08			imul	EAX,EAX,000000008h
 00000F80  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000F84  50				push	EAX
 00000F85  BA 20000000			mov	EDX,020000000h
 00000F8A  B8 4202A05F			mov	EAX,04202A05Fh 
 00000F8F  50				push	EAX
 00000F90  52				push	EDX 
 00000F91  DD C0			ffree	st
 00000F93  DD 04 24			fld	qword ptr [ESP]
 00000F96  5A				pop	EDX
 00000F97  58				pop	EAX 
 00000F98  5B				pop	EBX
 00000F99  DD 1B			fstp	qword ptr [EBX]

				;{53}:R2[5]= 0.1;
 00000F9B  B8 00000005			mov	EAX,000000005h
 00000FA0  6B C0 08			imul	EAX,EAX,000000008h
 00000FA3  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000FA7  50				push	EAX
 00000FA8  BA 9999999A			mov	EDX,09999999Ah
 00000FAD  B8 3FB99999			mov	EAX,03FB99999h 
 00000FB2  50				push	EAX
 00000FB3  52				push	EDX 
 00000FB4  DD C0			ffree	st
 00000FB6  DD 04 24			fld	qword ptr [ESP]
 00000FB9  5A				pop	EDX
 00000FBA  58				pop	EAX 
 00000FBB  5B				pop	EBX
 00000FBC  DD 1B			fstp	qword ptr [EBX]

				;{54}:R2[6]= 1.0e-5;
 00000FBE  B8 00000006			mov	EAX,000000006h
 00000FC3  6B C0 08			imul	EAX,EAX,000000008h
 00000FC6  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000FCA  50				push	EAX
 00000FCB  BA 88E368F0			mov	EDX,088E368F0h
 00000FD0  B8 3EE4F8B5			mov	EAX,03EE4F8B5h 
 00000FD5  50				push	EAX
 00000FD6  52				push	EDX 
 00000FD7  DD C0			ffree	st
 00000FD9  DD 04 24			fld	qword ptr [ESP]
 00000FDC  5A				pop	EDX
 00000FDD  58				pop	EAX 
 00000FDE  5B				pop	EBX
 00000FDF  DD 1B			fstp	qword ptr [EBX]

				;{55}:R2[7]= 1.0e-10;
 00000FE1  B8 00000007			mov	EAX,000000007h
 00000FE6  6B C0 08			imul	EAX,EAX,000000008h
 00000FE9  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00000FED  50				push	EAX
 00000FEE  BA D9D7BDBA			mov	EDX,0D9D7BDBAh
 00000FF3  B8 3DDB7CDF			mov	EAX,03DDB7CDFh 
 00000FF8  50				push	EAX
 00000FF9  52				push	EDX 
 00000FFA  DD C0			ffree	st
 00000FFC  DD 04 24			fld	qword ptr [ESP]
 00000FFF  5A				pop	EDX
 00001000  58				pop	EAX 
 00001001  5B				pop	EBX
 00001002  DD 1B			fstp	qword ptr [EBX]

				;{56}:R2[8]= 0;
 00001004  B8 00000008			mov	EAX,000000008h
 00001009  6B C0 08			imul	EAX,EAX,000000008h
 0000100C  8D 44 28 B0			lea	EAX,dword ptr [EBP+EAX-0050h]
 00001010  50				push	EAX
 00001011  33 C0			xor	EAX,EAX
 00001013  50				push	EAX
 00001014  DB 04 24			fild	dword ptr [ESP]
 00001017  58				pop	EAX
 00001018  5B				pop	EBX
 00001019  DD 1B			fstp	qword ptr [EBX]

				;{58}:for(i= 0; i < sizeof (R2) / sizeof (double); ++i)
 0000101B  33 C0			xor	EAX,EAX
 0000101D  89 45 AC			mov	dword ptr [EBP-0054h],EAX
 00001020  EB 06			jmp	OFFSET $L000659
 00001022			$L000660:
 00001022  FF 45 AC			inc	dword ptr [EBP-84]
 00001025  8B 45 AC			mov	EAX,dword ptr [EBP-84]
 00001028			$L000659:
 00001028  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 0000102B  50				push	EAX
 0000102C  B8 00000048			mov	EAX,000000048h
 00001031  50				push	EAX
 00001032  B8 00000008			mov	EAX,000000008h
 00001037  9B DB E2			fclex
 0000103A  50				push	EAX
 0000103B  E8 00000000 E		call	 FloatingPoint_FromInt
 00001040  50				push	EAX
 00001041  52				push	EDX 
 00001042  DD 04 24			fld	qword ptr [ESP]
 00001045  59				pop	ECX
 00001046  59				pop	ECX 
 00001047  E8 00000000 E		call	 FloatingPoint_FromInt
 0000104C  50				push	EAX
 0000104D  52				push	EDX 
 0000104E  DC 3C 24			fdivr	qword ptr [ESP]
 00001051  DD 1C 24			fstp	qword ptr [ESP]
 00001054  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 00001059  83 F8 00			cmp	EAX,000000000h
 0000105C  F7 D8			neg	EAX
 0000105E  0F 9C C0			setl	AL
 00001061  84 C0			test	AL,AL
 00001063  0F 84 000000E7		jz	OFFSET $L000661
				;{

				;{60}:total= 1 / (1 / R1 + 1 / R2[i]);
 00001069  B8 00000001			mov	EAX,000000001h
 0000106E  50				push	EAX
 0000106F  B8 00000001			mov	EAX,000000001h
 00001074  50				push	EAX
 00001075  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001078  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 0000107B  9B DB E2			fclex
 0000107E  50				push	EAX
 0000107F  52				push	EDX 
 00001080  DD 04 24			fld	qword ptr [ESP]
 00001083  59				pop	ECX
 00001084  59				pop	ECX 
 00001085  E8 00000000 E		call	 FloatingPoint_FromInt
 0000108A  50				push	EAX
 0000108B  52				push	EDX 
 0000108C  DC 3C 24			fdivr	qword ptr [ESP]
 0000108F  DD 1C 24			fstp	qword ptr [ESP]
 00001092  B8 00000001			mov	EAX,000000001h
 00001097  50				push	EAX
 00001098  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 0000109B  6B C0 08			imul	EAX,EAX,000000008h
 0000109E  8B 54 28 B0			mov	EDX,dword ptr [EBP+EAX-0050h]
 000010A2  83 C0 04			add	EAX,000000004h ;low part
 000010A5  8B 44 28 B0			mov	EAX,dword ptr [EBP+EAX-0050h] 
 000010A9  9B DB E2			fclex
 000010AC  50				push	EAX
 000010AD  52				push	EDX 
 000010AE  DD 04 24			fld	qword ptr [ESP]
 000010B1  59				pop	ECX
 000010B2  59				pop	ECX 
 000010B3  E8 00000000 E		call	 FloatingPoint_FromInt
 000010B8  50				push	EAX
 000010B9  52				push	EDX 
 000010BA  DC 3C 24			fdivr	qword ptr [ESP]
 000010BD  DD 1C 24			fstp	qword ptr [ESP]
 000010C0  DD 04 24			fld	qword ptr [ESP]
 000010C3  59				pop	ECX
 000010C4  59				pop	ECX 
 000010C5  DC 04 24			fadd	qword ptr [ESP]
 000010C8  DD 1C 24			fstp	qword ptr [ESP]
 000010CB  9B DB E2			fclex
 000010CE  DD 04 24			fld	qword ptr [ESP]
 000010D1  59				pop	ECX
 000010D2  59				pop	ECX 
 000010D3  E8 00000000 E		call	 FloatingPoint_FromInt
 000010D8  50				push	EAX
 000010D9  52				push	EDX 
 000010DA  DC 3C 24			fdivr	qword ptr [ESP]
 000010DD  DD 1C 24			fstp	qword ptr [ESP]
 000010E0  DD C0			ffree	st
 000010E2  DD 04 24			fld	qword ptr [ESP]
 000010E5  DD 5D A4			fstp	qword ptr [EBP-005Ch]

				;{61}:Console::WriteLn("r1 = ", R1, "\tR2 = ", R2[i], "\t Total Resistance = ", total);
 000010E8  5A				pop	EDX
 000010E9  58				pop	EAX 
 000010EA  8D 05 00000259 R		lea	EAX,OFFSET $S000555
 000010F0  6A 00			push	000000000h
 000010F2  50				push	EAX 
 000010F3  E8 00000000 E		call	 Console_WriteString
 000010F8  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000010FB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000010FE  50				push	EAX 
 000010FF  52				push	EDX 
 00001100  E8 00000000 E		call	 Console_WriteDouble 
 00001105  8D 05 0000024D R		lea	EAX,OFFSET $S000556
 0000110B  6A 00			push	000000000h 
 0000110D  50				push	EAX 
 0000110E  E8 00000000 E		call	 Console_WriteString 
 00001113  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00001116  6B C0 08			imul	EAX,EAX,000000008h
 00001119  8B 54 28 B0			mov	EDX,dword ptr [EBP+EAX-0050h]
 0000111D  83 C0 04			add	EAX,000000004h ;low part
 00001120  8B 44 28 B0			mov	EAX,dword ptr [EBP+EAX-0050h] 
 00001124  50				push	EAX 
 00001125  52				push	EDX 
 00001126  E8 00000000 E		call	 Console_WriteDouble 
 0000112B  8D 05 00000237 R		lea	EAX,OFFSET $S000557
 00001131  6A 00			push	000000000h 
 00001133  50				push	EAX 
 00001134  E8 00000000 E		call	 Console_WriteString 
 00001139  8B 55 A4			mov	EDX,dword ptr [EBP-005Ch]
 0000113C  8B 45 A8			mov	EAX,dword ptr [EBP-0058h] 
 0000113F  50				push	EAX 
 00001140  52				push	EDX 
 00001141  E8 00000000 E		call	 Console_WriteDouble 
 00001146  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000114B  E9 FFFFFED2			jmp	OFFSET $L000660 
 00001150			$L000661:
				;}
 00001150			$L000536:

 00001150  5F				pop	EDI
 00001151  5E				pop	ESI 
 00001152  5B				pop	EBX 
 00001153  8B E5			mov	ESP,EBP
 00001155  5D				pop	EBP 
 00001156  C3				ret	
 00001157			Numerical_Computing_Program_TotalParallelResistance ENDP

 00001157			Numerical_Computing_Program_main PROC NEAR 
				;void Numerical::Computing::Program::main(void);
 00001157  55				push	EBP
 00001158  8B EC			mov	EBP,ESP
 0000115A  83 EC 20			sub	ESP,000000020h
 0000115D  53				push	EBX 
 0000115E  56				push	ESI 
 0000115F  57				push	EDI 
				;{

				;{177}:Console::WriteLn("Reciprocal power of 2:\n");
 00001160  8D 05 000000A3 R		lea	EAX,OFFSET $S000610
 00001166  6A 00			push	000000000h
 00001168  50				push	EAX 
 00001169  E8 00000000 E		call	 Console_WriteString
 0000116E  E8 00000000 E		call	 Console_WriteCrLf 

				;{178}:Numerical::Computing::Program::CalcReciprocalPowerOf2();
 00001173  E8 FFFFFBC1			call	 Numerical_Computing_Program_CalcReciprocalPowerOf2

				;{179}:Console::WriteLn("1 + Reciprocal power of 2:\n");
 00001178  8D 05 0000003C R		lea	EAX,OFFSET $S000611
 0000117E  6A 00			push	000000000h
 00001180  50				push	EAX 
 00001181  E8 00000000 E		call	 Console_WriteString
 00001186  E8 00000000 E		call	 Console_WriteCrLf 

				;{180}:Numerical::Computing::Program::CalcAddOneToReciprocalPowerOf2();
 0000118B  E8 FFFFF8CE			call	 Numerical_Computing_Program_CalcAddOneToReciprocalPowerOf2

				;{181}:Console::WriteLn("\nTotal Parallel Resistance:\n");
 00001190  8D 05 000001AA R		lea	EAX,OFFSET $S000612
 00001196  6A 00			push	000000000h
 00001198  50				push	EAX 
 00001199  E8 00000000 E		call	 Console_WriteString
 0000119E  E8 00000000 E		call	 Console_WriteCrLf 

				;{182}:Numerical::Computing::Program::TotalParallelResistance();
 000011A3  E8 FFFFFD50			call	 Numerical_Computing_Program_TotalParallelResistance

				;{183}:Console::WriteLn("\nProblem: 1/(1/x):\n");
 000011A8  8D 05 00000189 R		lea	EAX,OFFSET $S000613
 000011AE  6A 00			push	000000000h
 000011B0  50				push	EAX 
 000011B1  E8 00000000 E		call	 Console_WriteString
 000011B6  E8 00000000 E		call	 Console_WriteCrLf 

				;{184}:Numerical::Computing::Program::FindOneFromQuotient();
 000011BB  E8 FFFFFC75			call	 Numerical_Computing_Program_FindOneFromQuotient

				;{185}:Console::WriteLn("Approximate A Derivative By Difference Quotient:\n");
 000011C0  8D 05 0000005E R		lea	EAX,OFFSET $S000614
 000011C6  6A 00			push	000000000h
 000011C8  50				push	EAX 
 000011C9  E8 00000000 E		call	 Console_WriteString
 000011CE  E8 00000000 E		call	 Console_WriteCrLf 

				;{186}:Numerical::Computing::Program::ApproximateADerivativeByDifferenceQuotient();
 000011D3  E8 FFFFF455			call	 Numerical_Computing_Program_ApproximateADerivativeByDifferenceQuotient

				;{187}:Console::WriteLn("\nApproximating e:\n");
 000011D8  8D 05 00000131 R		lea	EAX,OFFSET $S000615
 000011DE  6A 00			push	000000000h
 000011E0  50				push	EAX 
 000011E1  E8 00000000 E		call	 Console_WriteString
 000011E6  E8 00000000 E		call	 Console_WriteCrLf 

				;{188}:e1= Numerical::Computing::Program::ApproximateEulerConstant();
 000011EB  E8 FFFFF6DB			call	 Numerical_Computing_Program_ApproximateEulerConstant
 000011F0  50				push	EAX
 000011F1  52				push	EDX 
 000011F2  DD C0			ffree	st
 000011F4  DD 04 24			fld	qword ptr [ESP]
 000011F7  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{189}:Console::WriteLn("\nApproximating e using Taylor series:\n");
 000011FA  5A				pop	EDX
 000011FB  58				pop	EAX 
 000011FC  8D 05 0000010A R		lea	EAX,OFFSET $S000617
 00001202  6A 00			push	000000000h
 00001204  50				push	EAX 
 00001205  E8 00000000 E		call	 Console_WriteString
 0000120A  E8 00000000 E		call	 Console_WriteCrLf 

				;{190}:e2= Numerical::Computing::Program::ApproximateEulerConstantByTaylor();
 0000120F  E8 FFFFF778			call	 Numerical_Computing_Program_ApproximateEulerConstantByTaylor
 00001214  50				push	EAX
 00001215  52				push	EDX 
 00001216  DD C0			ffree	st
 00001218  DD 04 24			fld	qword ptr [ESP]
 0000121B  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{192}:Console::WriteLn("\n\nCancellation phenomena:\n\ne1= ", e1, "\ne2= ", e2, "\n\n| e1 - e2 | = ", Math::Abs(e1 - e2));
 0000121E  5A				pop	EDX
 0000121F  58				pop	EAX 
 00001220  8D 05 000001EE R		lea	EAX,OFFSET $S000619
 00001226  6A 00			push	000000000h
 00001228  50				push	EAX 
 00001229  E8 00000000 E		call	 Console_WriteString
 0000122E  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001231  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001234  50				push	EAX 
 00001235  52				push	EDX 
 00001236  E8 00000000 E		call	 Console_WriteDouble 
 0000123B  8D 05 00000231 R		lea	EAX,OFFSET $S000620
 00001241  6A 00			push	000000000h 
 00001243  50				push	EAX 
 00001244  E8 00000000 E		call	 Console_WriteString 
 00001249  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 0000124C  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 0000124F  50				push	EAX 
 00001250  52				push	EDX 
 00001251  E8 00000000 E		call	 Console_WriteDouble 
 00001256  8D 05 0000020E R		lea	EAX,OFFSET $S000621
 0000125C  6A 00			push	000000000h 
 0000125E  50				push	EAX 
 0000125F  E8 00000000 E		call	 Console_WriteString 
 00001264  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001267  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 0000126A  50				push	EAX
 0000126B  52				push	EDX 
 0000126C  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 0000126F  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00001272  50				push	EAX
 00001273  52				push	EDX 
 00001274  DD 04 24			fld	qword ptr [ESP]
 00001277  59				pop	ECX
 00001278  59				pop	ECX 
 00001279  DD 04 24			fld	qword ptr [ESP]
 0000127C  D8 E1			fsub	st,st(1)
 0000127E  DD 1C 24			fstp	qword ptr [ESP]
 00001281  E8 00000000 E		call	 Math_Abs
 00001286  50				push	EAX 
 00001287  52				push	EDX 
 00001288  E8 00000000 E		call	 Console_WriteDouble 
 0000128D  E8 00000000 E		call	 Console_WriteCrLf 

				;{194}:Console::WriteLn("\nCalculating the Euler\'s gamma constant: ", Numerical::Computing::Program::CalcEulersGammaConstant());
 00001292  8D 05 00000144 R		lea	EAX,OFFSET $S000622
 00001298  6A 00			push	000000000h
 0000129A  50				push	EAX 
 0000129B  E8 00000000 E		call	 Console_WriteString
 000012A0  E8 FFFFF8AB			call	 Numerical_Computing_Program_CalcEulersGammaConstant
 000012A5  50				push	EAX 
 000012A6  52				push	EDX 
 000012A7  E8 00000000 E		call	 Console_WriteDouble 
 000012AC  E8 00000000 E		call	 Console_WriteCrLf 

				;{197}:Console::WriteLn("\nCalculating the Power of ", "Reciprocal Cubes: ", Numerical::Computing::Program::CalcPowerOfReciprocalCubes());
 000012B1  8D 05 0000016E R		lea	EAX,OFFSET $S000623
 000012B7  6A 00			push	000000000h
 000012B9  50				push	EAX 
 000012BA  E8 00000000 E		call	 Console_WriteString
 000012BF  8D 05 00000090 R		lea	EAX,OFFSET $S000624
 000012C5  6A 00			push	000000000h 
 000012C7  50				push	EAX 
 000012C8  E8 00000000 E		call	 Console_WriteString 
 000012CD  E8 FFFFF9D8			call	 Numerical_Computing_Program_CalcPowerOfReciprocalCubes
 000012D2  50				push	EAX 
 000012D3  52				push	EDX 
 000012D4  E8 00000000 E		call	 Console_WriteDouble 
 000012D9  E8 00000000 E		call	 Console_WriteCrLf 

				;{198}:Console::WriteLn("\nShould be: ", Math::Pow(Math::pi(), 3) / 25.79436089);
 000012DE  8D 05 0000019D R		lea	EAX,OFFSET $S000625
 000012E4  6A 00			push	000000000h
 000012E6  50				push	EAX 
 000012E7  E8 00000000 E		call	 Console_WriteString
 000012EC  B8 00000003			mov	EAX,000000003h
 000012F1  50				push	EAX 
 000012F2  E8 00000000 E		call	 FloatingPoint_FromInt
 000012F7  50				push	EAX
 000012F8  52				push	EDX 
 000012F9  E8 00000000 E		call	 Math_pi
 000012FE  50				push	EAX
 000012FF  52				push	EDX 
 00001300  E8 00000000 E		call	 Math_Pow
 00001305  50				push	EAX
 00001306  52				push	EDX 
 00001307  BA 3C3BC57E			mov	EDX,03C3BC57Eh
 0000130C  B8 4039CB5B			mov	EAX,04039CB5Bh 
 00001311  9B DB E2			fclex
 00001314  50				push	EAX
 00001315  52				push	EDX 
 00001316  DD 04 24			fld	qword ptr [ESP]
 00001319  59				pop	ECX
 0000131A  59				pop	ECX 
 0000131B  DC 3C 24			fdivr	qword ptr [ESP]
 0000131E  DD 1C 24			fstp	qword ptr [ESP]
 00001321  E8 00000000 E		call	 Console_WriteDouble 
 00001326  E8 00000000 E		call	 Console_WriteCrLf 

				;{200}:x= Math::pi();
 0000132B  E8 00000000 E		call	 Math_pi
 00001330  50				push	EAX
 00001331  52				push	EDX 
 00001332  DD C0			ffree	st
 00001334  DD 04 24			fld	qword ptr [ESP]
 00001337  DD 5D E8			fstp	qword ptr [EBP-0018h]

				;{201}:e_PowX= Numerical::Computing::Program::CalcHyperbolicFunctionsDemo(x);
 0000133A  5A				pop	EDX
 0000133B  58				pop	EAX 
 0000133C  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 0000133F  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00001342  50				push	EAX
 00001343  52				push	EDX 
 00001344  E8 FFFFF914			call	 Numerical_Computing_Program_CalcHyperbolicFunctionsDemo
 00001349  50				push	EAX
 0000134A  52				push	EDX 
 0000134B  DD C0			ffree	st
 0000134D  DD 04 24			fld	qword ptr [ESP]
 00001350  DD 5D E0			fstp	qword ptr [EBP-0020h]

				;{203}:Console::WriteLn("\n x = pi = ", x);
 00001353  5A				pop	EDX
 00001354  58				pop	EAX 
 00001355  8D 05 000000FE R		lea	EAX,OFFSET $S000629
 0000135B  6A 00			push	000000000h
 0000135D  50				push	EAX 
 0000135E  E8 00000000 E		call	 Console_WriteString
 00001363  8B 55 E8	mov	EDX,dword ptr [EBP-0018h]
 00001366  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00001369  50				push	EAX 
 0000136A  52				push	EDX 
 0000136B  E8 00000000 E		call	 Console_WriteDouble 
 00001370  E8 00000000 E		call	 Console_WriteCrLf 

				;{204}:Console::WriteLn("\nValue of e^x == Sinh[x] + Cosh[x] == ", e_PowX, "\n\t\t\t   Aprox. == ", Math::Exp(x));
 00001375  8D 05 000001C7 R		lea	EAX,OFFSET $S000630
 0000137B  6A 00			push	000000000h
 0000137D  50				push	EAX 
 0000137E  E8 00000000 E		call	 Console_WriteString
 00001383  8B 55 E0			mov	EDX,dword ptr [EBP-0020h]
 00001386  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch] 
 00001389  50				push	EAX 
 0000138A  52				push	EDX 
 0000138B  E8 00000000 E		call	 Console_WriteDouble 
 00001390  8D 05 0000021F R		lea	EAX,OFFSET $S000631
 00001396  6A 00			push	000000000h 
 00001398  50				push	EAX 
 00001399  E8 00000000 E		call	 Console_WriteString 
 0000139E  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 000013A1  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 000013A4  50				push	EAX
 000013A5  52				push	EDX 
 000013A6  E8 00000000 E		call	 Math_Exp
 000013AB  50				push	EAX 
 000013AC  52				push	EDX 
 000013AD  E8 00000000 E		call	 Console_WriteDouble 
 000013B2  E8 00000000 E		call	 Console_WriteCrLf 

				;{207}:Console::WriteLn("\n Cosh^2 pi - Sinh^2 pi == ", Math::Round(Numerical::Computing::Program::CalcHyperbolicDemo2()));
 000013B7  8D 05 000000BB R		lea	EAX,OFFSET $S000632
 000013BD  6A 00			push	000000000h
 000013BF  50				push	EAX 
 000013C0  E8 00000000 E		call	 Console_WriteString
 000013C5  E8 FFFFF820			call	 Numerical_Computing_Program_CalcHyperbolicDemo2
 000013CA  50				push	EAX
 000013CB  52				push	EDX 
 000013CC  E8 00000000 E		call	 Math_Round
 000013D1  50				push	EAX 
 000013D2  E8 00000000 E		call	 Console_WriteInteger 
 000013D7  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000013DC			$L000609:

 000013DC  5F				pop	EDI
 000013DD  5E				pop	ESI 
 000013DE  5B				pop	EBX 
 000013DF  8B E5			mov	ESP,EBP
 000013E1  5D				pop	EBP 
 000013E2  C3				ret	
 000013E3			Numerical_Computing_Program_main ENDP

 000013E3			__System_Hpp_Runtime_Init PROC

 000013E3  55				push	EBP
 000013E4  8B EC			mov	EBP,ESP
 000013E6  51				push	ECX 
 000013E7  53				push	EBX 
 000013E8  56				push	ESI 
 000013E9  57				push	EDI 
 000013EA  E8 00000000 E		call	 GetVersion
 000013EF  A3 00000265 R		mov	 __osver,EAX ;os version
 000013F4  A1 00000265 R		mov	EAX, __osver 
 000013F9  C1 E8 08			shr	EAX,000000008h
 000013FC  25 000000FF			and	EAX,0000000FFh
 00001401  A3 00000269 R		mov	 __winminor,EAX ;windows minor
 00001406  8B 0D 00000265 R		mov	ECX, __osver 
 0000140C  81 E1 000000FF		and	ECX,0000000FFh 
 00001412  89 0D 0000026D R		mov	 __winmajor,ECX ;windows major
 00001418  8B 15 0000026D R		mov	EDX,dword ptr __winmajor 
 0000141E  C1 E2 08			shl	EDX,000000008h
 00001421  03 15 00000269 R		add	EDX,dword ptr __winminor
 00001427  89 15 00000271 R		mov	dword ptr __winver,EDX ;windows version
 0000142D  A1 00000265 R		mov	EAX, __osver 
 00001432  C1 E8 10			shr	EAX,000000010h 
 00001435  25 0000FFFF			and	EAX,00000FFFFh 
 0000143A  A3 00000265 R		mov	 __osver,EAX 
 0000143F  E8 FFFFFD13			call	 Numerical_Computing_Program_main ;user entry point (stdcall calling convention)
 00001444  50				push	EAX
 00001445  E8 00000000 E		call	 System_Exit 

 0000144A  5F				pop	EDI
 0000144B  5E				pop	ESI 
 0000144C  5B				pop	EBX 
 0000144D  8B E5			mov	ESP,EBP
 0000144F  5D				pop	EBP 
 00001450  C3				ret	
 00001451			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh

 00000000 20 20 20 20 20	$S000578 		BYTE 	"     ",09h,0
	   09 00
 00000007 20 20 20 20 20	$S000575 		BYTE 	"     ",09h,09h,0
	   09 09 00
 0000000F 20 20 20 20 09	$S000576 		BYTE 	"    ",09h,0
	   00
 00000015 20 20 20 20 09	$S000580 		BYTE 	"    ",09h,09h,09h,0
	   09 09 00
 0000001D 20 32 5E 20 2D	$S000530 		BYTE 	" 2^ - ",0
	   20 00
 00000024 20 3D 20 00		$S000531 		BYTE 	" = ",0
 00000028 20 64 65 72 69	$S000572 		BYTE 	" deriv = ",0
	   76 20 3D 20 00
 00000032 2C 20 6C 6E 20	$S000587 		BYTE 	", ln e = ",0
	   65 20 3D 20 00
 0000003C 31 20 2B 20 52	$S000611 		BYTE 	"1 + Reciprocal power of 2:",0Ah,0
	   65 63 69 70 72
	   6F 63 61 6C 20
	   70 6F 77 65 72
	   20 6F 66 20 32
	   3A 0A 00
 00000058 3F 20 3D 3D 20	$S000564 		BYTE 	"? == ",0
	   00
 0000005E 41 70 70 72 6F	$S000614 		BYTE 	"Approximate A Derivative By Difference Quotient:",0Ah,0
	   78 69 6D 61 74
	   65 20 41 20 44
	   65 72 69 76 61
	   74 69 76 65 20
	   42 79 20 44 69
	   66 66 65 72 65
	   6E 63 65 20 51
	   75 6F 74 69 65
	   6E 74 3A 0A 00
 00000090 52 65 63 69 70	$S000624 		BYTE 	"Reciprocal Cubes: ",0
	   72 6F 63 61 6C
	   20 43 75 62 65
	   73 3A 20 00
 000000A3 52 65 63 69 70	$S000610 		BYTE 	"Reciprocal power of 2:",0Ah,0
	   72 6F 63 61 6C
	   20 70 6F 77 65
	   72 20 6F 66 20
	   32 3A 0A 00
 000000BB 0A 20 43 6F 73	$S000632 		BYTE 	0Ah," Cosh^2 pi - Sinh^2 pi == ",0
	   68 5E 32 20 70
	   69 20 2D 20 53
	   69 6E 68 5E 32
	   20 70 69 20 3D
	   3D 20 00
 000000D7 0A 20 68 09 09	$S000573 		BYTE 	0Ah," h",09h,09h,09h,"diffquo",09h,09h,09h,"abs(deriv - diffquo) ",0Ah,0
	   09 64 69 66 66
	   71 75 6F 09 09
	   09 61 62 73 28
	   64 65 72 69 76
	   20 2D 20 64 69
	   66 66 71 75 6F
	   29 20 0A 00
 000000FE 0A 20 78 20 3D	$S000629 		BYTE 	0Ah," x = pi = ",0
	   20 70 69 20 3D
	   20 00
 0000010A 0A 41 70 70 72	$S000617 		BYTE 	0Ah,"Approximating e using Taylor series:",0Ah,0
	   6F 78 69 6D 61
	   74 69 6E 67 20
	   65 20 75 73 69
	   6E 67 20 54 61
	   79 6C 6F 72 20
	   73 65 72 69 65
	   73 3A 0A 00
 00000131 0A 41 70 70 72	$S000615 		BYTE 	0Ah,"Approximating e:",0Ah,0
	   6F 78 69 6D 61
	   74 69 6E 67 20
	   65 3A 0A 00
 00000144 0A 43 61 6C 63	$S000622 		BYTE 	0Ah,"Calculating the Euler's gamma constant: ",0
	   75 6C 61 74 69
	   6E 67 20 74 68
	   65 20 45 75 6C
	   65 72 27 73 20
	   67 61 6D 6D 61
	   20 63 6F 6E 73
	   74 61 6E 74 3A
	   20 00
 0000016E 0A 43 61 6C 63	$S000623 		BYTE 	0Ah,"Calculating the Power of ",0
	   75 6C 61 74 69
	   6E 67 20 74 68
	   65 20 50 6F 77
	   65 72 20 6F 66
	   20 00
 00000189 0A 50 72 6F 62	$S000613 		BYTE 	0Ah,"Problem: 1/(1/x):",0Ah,0
	   6C 65 6D 3A 20
	   31 2F 28 31 2F
	   78 29 3A 0A 00
 0000019D 0A 53 68 6F 75	$S000625 		BYTE 	0Ah,"Should be: ",0
	   6C 64 20 62 65
	   3A 20 00
 000001AA 0A 54 6F 74 61	$S000612 		BYTE 	0Ah,"Total Parallel Resistance:",0Ah,0
	   6C 20 50 61 72
	   61 6C 6C 65 6C
	   20 52 65 73 69
	   73 74 61 6E 63
	   65 3A 0A 00
 000001C7 0A 56 61 6C 75	$S000630 		BYTE 	0Ah,"Value of e^x == Sinh[x] + Cosh[x] == ",0
	   65 20 6F 66 20
	   65 5E 78 20 3D
	   3D 20 53 69 6E
	   68 5B 78 5D 20
	   2B 20 43 6F 73
	   68 5B 78 5D 20
	   3D 3D 20 00
 000001EE 0A 0A 43 61 6E	$S000619 		BYTE 	0Ah,0Ah,"Cancellation phenomena:",0Ah,0Ah,"e1= ",0
	   63 65 6C 6C 61
	   74 69 6F 6E 20
	   70 68 65 6E 6F
	   6D 65 6E 61 3A
	   0A 0A 65 31 3D
	   20 00
 0000020E 0A 0A 7C 20 65	$S000621 		BYTE 	0Ah,0Ah,"| e1 - e2 | = ",0
	   31 20 2D 20 65
	   32 20 7C 20 3D
	   20 00
 0000021F 0A 09 09 09 20	$S000631 		BYTE 	0Ah,09h,09h,09h,"   Aprox. == ",0
	   20 20 41 70 72
	   6F 78 2E 20 3D
	   3D 20 00
 00000231 0A 65 32 3D 20	$S000620 		BYTE 	0Ah,"e2= ",0
	   00
 00000237 09 20 54 6F 74	$S000557 		BYTE 	09h," Total Resistance = ",0
	   61 6C 20 52 65
	   73 69 73 74 61
	   6E 63 65 20 3D
	   20 00
 0000024D 09 52 32 20 3D	$S000556 		BYTE 	09h,"R2 = ",0
	   20 00
 00000254 65 20 3D 20 00	$S000586 		BYTE 	"e = ",0
 00000259 72 31 20 3D 20	$S000555 		BYTE 	"r1 = ",0
	   00
 0000025F 79 20 69 73 20	$S000563 		BYTE 	"y is ",0
	   00

 00000265 00000000		__osver 		DWORD 	0;Windows OS version
 00000269 00000000		__winminor 		DWORD 	0;Windows minor version
 0000026D 00000000		__winmajor 		DWORD 	0;Windows major version
 00000271 00000000		__winver 		DWORD 	0;Windows version
 00000275  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00000295 00000000		___argv 		DWORD 	0;Array of argument values
 00000299 00000000		___argc 		DWORD 	0;Argument count

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    03/19/13 15:12:12
nc_ieee.hpp						     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000029D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001451 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004C Public STDCALL
  $L000469 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000AC _TEXT	Length= 00000062 Public STDCALL
  $L000492 . . . . . . . . . . .	L Near	 00000105 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004C _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 000000A3 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000010E _TEXT	Length= 00000086 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 0000018B _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 00000194 _TEXT	Length= 00000060 Public STDCALL
  $L000490 . . . . . . . . . . .	L Near	 000001EB _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001F4 _TEXT	Length= 00000062 Public STDCALL
  $L000483 . . . . . . . . . . .	L Near	 0000024D _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 00000256 _TEXT	Length= 00000086 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 000002D3 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000345 _TEXT	Length= 0000009F Public STDCALL
  $L000506 . . . . . . . . . . .	L Near	 000003DB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002DC _TEXT	Length= 00000069 Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 0000033C _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003E4 _TEXT	Length= 00000086 Public STDCALL
  $L000508 . . . . . . . . . . .	L Near	 00000461 _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 0000046A _TEXT	Length= 0000008A Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 000004EB _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004F4 _TEXT	Length= 00000067 Public STDCALL
  $L000497 . . . . . . . . . . .	L Near	 00000552 _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 0000055B _TEXT	Length= 00000086 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 000005D8 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005E1 _TEXT	Length= 0000004C Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00000624 _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Numerical_Computing_Program_ApproximateADerivativeByDifferenceQuotient . P Near	  0000062D _TEXT	Length= 0000029E Public STDCALL
  $L000633 . . . . . . . . . . .	L Near	 000006A0 _TEXT	
  $L000635 . . . . . . . . . . .	L Near	 000007B4 _TEXT	
  $L000637 . . . . . . . . . . .	L Near	 00000814 _TEXT	
  $L000639 . . . . . . . . . . .	L Near	 00000871 _TEXT	
  $L000640 . . . . . . . . . . .	L Near	 000008B9 _TEXT	
  $L000638 . . . . . . . . . . .	L Near	 000008B9 _TEXT	
  $L000636 . . . . . . . . . . .	L Near	 000008B9 _TEXT	
  $L000634 . . . . . . . . . . .	L Near	 000008C4 _TEXT	
  $L000565 . . . . . . . . . . .	L Near	 000008C4 _TEXT	
Numerical_Computing_Program_ApproximateEulerConstantByTaylor . P Near   0000098C _TEXT	Length= 000000D2 Public STDCALL
  $L000642 . . . . . . . . . . .	L Near	 000009AE _TEXT	
  $L000641 . . . . . . . . . . .	L Near	 000009B4 _TEXT	
  $L000643 . . . . . . . . . . .	L Near	 00000A0D _TEXT	
  $L000590 . . . . . . . . . . .	L Near	 00000A57 _TEXT	
Numerical_Computing_Program_ApproximateEulerConstant . P Near   000008CB _TEXT	Length= 000000C1 Public STDCALL
  $L000581 . . . . . . . . . . .	L Near	 00000985 _TEXT	
Numerical_Computing_Program_CalcAddOneToReciprocalPowerOf2 . P Near   00000A5E _TEXT	Length= 000000F2 Public STDCALL
  $L000644 . . . . . . . . . . .	L Near	 00000A86 _TEXT	
  $L000645 . . . . . . . . . . .	L Near	 00000B49 _TEXT	
  $L000532 . . . . . . . . . . .	L Near	 00000B49 _TEXT	
Numerical_Computing_Program_CalcEulersGammaConstant  P Near   00000B50 _TEXT	Length= 0000009A Public STDCALL
  $L000647 . . . . . . . . . . .	L Near	 00000B70 _TEXT	
  $L000646 . . . . . . . . . . .	L Near	 00000B76 _TEXT	
  $L000648 . . . . . . . . . . .	L Near	 00000BBC _TEXT	
  $L000595 . . . . . . . . . . .	L Near	 00000BE3 _TEXT	
Numerical_Computing_Program_CalcHyperbolicDemo2  P Near	  00000BEA _TEXT	Length= 00000073 Public STDCALL
  $L000608 . . . . . . . . . . .	L Near	 00000C56 _TEXT	
Numerical_Computing_Program_CalcHyperbolicFunctionsDemo  P Near	  00000C5D _TEXT	Length= 0000004D Public STDCALL
  $L000605 . . . . . . . . . . .	L Near	 00000CA1 _TEXT	
Numerical_Computing_Program_CalcPowerOfReciprocalCubes . P Near	  00000CAA _TEXT	Length= 0000008F Public STDCALL
  $L000650 . . . . . . . . . . .	L Near	 00000CCA _TEXT	
  $L000649 . . . . . . . . . . .	L Near	 00000CD0 _TEXT	
  $L000651 . . . . . . . . . . .	L Near	 00000D2A _TEXT	
  $L000600 . . . . . . . . . . .	L Near	 00000D32 _TEXT	
Numerical_Computing_Program_CalcReciprocalPowerOf2 . P Near   00000D39 _TEXT	Length= 000000B6 Public STDCALL
  $L000652 . . . . . . . . . . .	L Near	 00000D54 _TEXT	
  $L000653 . . . . . . . . . . .	L Near	 00000DE8 _TEXT	
  $L000525 . . . . . . . . . . .	L Near	 00000DE8 _TEXT	
Numerical_Computing_Program_Factorial 	P Near	 00000DEF _TEXT	Length= 00000046 Public STDCALL
  $L000654 . . . . . . . . . . .	L Near	 00000E0D _TEXT	
  $L000588 . . . . . . . . . . .	L Near	 00000E2C _TEXT	
Numerical_Computing_Program_FindOneFromQuotient  P Near	  00000E35 _TEXT	Length= 000000C3 Public STDCALL
  $L000657 . . . . . . . . . . .	L Near	 00000E4D _TEXT	
  $L000656 . . . . . . . . . . .	L Near	 00000E53 _TEXT	
  $L000658 . . . . . . . . . . .	L Near	 00000EF1 _TEXT	
  $L000558 . . . . . . . . . . .	L Near	 00000EF1 _TEXT	
Numerical_Computing_Program_TotalParallelResistance  P Near   00000EF8 _TEXT	Length= 0000025F Public STDCALL
  $L000660 . . . . . . . . . . .	L Near	 00001022 _TEXT	
  $L000659 . . . . . . . . . . .	L Near	 00001028 _TEXT	
  $L000661 . . . . . . . . . . .	L Near	 00001150 _TEXT	
  $L000536 . . . . . . . . . . .	L Near	 00001150 _TEXT	
Numerical_Computing_Program_main .	P Near	 00001157 _TEXT	Length= 0000028C Public STDCALL
  $L000609 . . . . . . . . . . .	L Near	 000013DC _TEXT	
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 000013E3 _TEXT	Length= 0000006E Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000530 . . . . . . . . . . . .	Byte	 0000001D _DATA	
$S000531 . . . . . . . . . . . .	Byte	 00000024 _DATA	
$S000555 . . . . . . . . . . . .	Byte	 00000259 _DATA	
$S000556 . . . . . . . . . . . .	Byte	 0000024D _DATA	
$S000557 . . . . . . . . . . . .	Byte	 00000237 _DATA	
$S000563 . . . . . . . . . . . .	Byte	 0000025F _DATA	
$S000564 . . . . . . . . . . . .	Byte	 00000058 _DATA	
$S000572 . . . . . . . . . . . .	Byte	 00000028 _DATA	
$S000573 . . . . . . . . . . . .	Byte	 000000D7 _DATA	
$S000575 . . . . . . . . . . . .	Byte	 00000007 _DATA	
$S000576 . . . . . . . . . . . .	Byte	 0000000F _DATA	
$S000578 . . . . . . . . . . . .	Byte	 00000000 _DATA	
$S000580 . . . . . . . . . . . .	Byte	 00000015 _DATA	
$S000586 . . . . . . . . . . . .	Byte	 00000254 _DATA	
$S000587 . . . . . . . . . . . .	Byte	 00000032 _DATA	
$S000610 . . . . . . . . . . . .	Byte	 000000A3 _DATA	
$S000611 . . . . . . . . . . . .	Byte	 0000003C _DATA	
$S000612 . . . . . . . . . . . .	Byte	 000001AA _DATA	
$S000613 . . . . . . . . . . . .	Byte	 00000189 _DATA	
$S000614 . . . . . . . . . . . .	Byte	 0000005E _DATA	
$S000615 . . . . . . . . . . . .	Byte	 00000131 _DATA	
$S000617 . . . . . . . . . . . .	Byte	 0000010A _DATA	
$S000619 . . . . . . . . . . . .	Byte	 000001EE _DATA	
$S000620 . . . . . . . . . . . .	Byte	 00000231 _DATA	
$S000621 . . . . . . . . . . . .	Byte	 0000020E _DATA	
$S000622 . . . . . . . . . . . .	Byte	 00000144 _DATA	
$S000623 . . . . . . . . . . . .	Byte	 0000016E _DATA	
$S000624 . . . . . . . . . . . .	Byte	 00000090 _DATA	
$S000625 . . . . . . . . . . . .	Byte	 0000019D _DATA	
$S000629 . . . . . . . . . . . .	Byte	 000000FE _DATA	
$S000630 . . . . . . . . . . . .	Byte	 000001C7 _DATA	
$S000631 . . . . . . . . . . . .	Byte	 0000021F _DATA	
$S000632 . . . . . . . . . . . .	Byte	 000000BB _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 00000299 _DATA	
___argv  . . . . . . . . . . . .	DWord	 00000295 _DATA	
__computer . . . . . . . . . . .	Byte	 00000275 _DATA	
__osver  . . . . . . . . . . . .	DWord	 00000265 _DATA	
__winmajor . . . . . . . . . . .	DWord	 0000026D _DATA	
__winminor . . . . . . . . . . .	DWord	 00000269 _DATA	
__winver . . . . . . . . . . . .	DWord	 00000271 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
