Microsoft (R) Macro Assembler Version 6.15.8803		    12/18/08 02:22:01
c:\hcc\hcc\TestSource\unittesting1.hpp			     Page 1 - 1


				TITLE	 c:\hcc\hcc\TestSource\unittesting1.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{327}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000033  50				push	EAX
 00000034  52				push	EDX 
 00000035  DD 04 24			fld	qword ptr [ESP]
 00000038  59				pop	ECX
 00000039  59				pop	ECX 
 0000003A  DC 3C 24			fdivr	qword ptr [ESP]
 0000003D  DD 1C 24			fstp	qword ptr [ESP]
 00000040  5A				pop	EDX
 00000041  58				pop	EAX 
 00000042  EB 00			jmp	OFFSET $L000407
				;}
 00000044			$L000407:

 00000044  5F				pop	EDI
 00000045  5E				pop	ESI 
 00000046  5B				pop	EBX 
 00000047  C9				leave	
 00000048  C2 0008			retn	000000008h
 0000004B			Math_DegreesToRadians ENDP

 0000004B			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004B  55				push	EBP
 0000004C  8B EC			mov	EBP,ESP
 0000004E  51				push	ECX 
 0000004F  53				push	EBX 
 00000050  56				push	ESI 
 00000051  57				push	EDI 
				;{

				;{390}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000052  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000055  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000058  50				push	EAX
 00000059  52				push	EDX 
 0000005A  E8 00000000 E		call	 Math_Exp
 0000005F  50				push	EAX
 00000060  52				push	EDX 
 00000061  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000064  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000067  50				push	EAX
 00000068  52				push	EDX 
 00000069  DD 04 24			fld	qword ptr [ESP]
 0000006C  D9 E0			fchs
 0000006E  DD 1C 24			fstp	qword ptr [ESP]
 00000071  E8 00000000 E		call	 Math_Exp
 00000076  50				push	EAX
 00000077  52				push	EDX 
 00000078  DD 04 24			fld	qword ptr [ESP]
 0000007B  59				pop	ECX
 0000007C  59				pop	ECX 
 0000007D  DC 04 24			fadd	qword ptr [ESP]
 00000080  DD 1C 24			fstp	qword ptr [ESP]
 00000083  B8 00000002			mov	EAX,000000002h
 00000088  9B DB E2			fclex
 0000008B  50				push	EAX
 0000008C  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000092  50				push	EAX
 00000093  52				push	EDX 
 00000094  DD 04 24			fld	qword ptr [ESP]
 00000097  59				pop	ECX
 00000098  59				pop	ECX 
 00000099  DC 3C 24			fdivr	qword ptr [ESP]
 0000009C  DD 1C 24			fstp	qword ptr [ESP]
 0000009F  5A				pop	EDX
 000000A0  58				pop	EAX 
 000000A1  EB 00			jmp	OFFSET $L000424
				;}
 000000A3			$L000424:

 000000A3  5F				pop	EDI
 000000A4  5E				pop	ESI 
 000000A5  5B				pop	EBX 
 000000A6  C9				leave	
 000000A7  C2 0008			retn	000000008h
 000000AA			Math_Hyperbolic_HCos ENDP

 000000AA			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000AA  55				push	EBP
 000000AB  8B EC			mov	EBP,ESP
 000000AD  51				push	ECX 
 000000AE  53				push	EBX 
 000000AF  56				push	ESI 
 000000B0  57				push	EDI 
				;{

				;{402}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000B1  B8 00000002			mov	EAX,000000002h
 000000B6  50				push	EAX
 000000B7  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000BA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BD  50				push	EAX
 000000BE  52				push	EDX 
 000000BF  E8 00000000 E		call	 Math_Exp
 000000C4  50				push	EAX
 000000C5  52				push	EDX 
 000000C6  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000C9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CC  50				push	EAX
 000000CD  52				push	EDX 
 000000CE  DD 04 24			fld	qword ptr [ESP]
 000000D1  D9 E0			fchs
 000000D3  DD 1C 24			fstp	qword ptr [ESP]
 000000D6  E8 00000000 E		call	 Math_Exp
 000000DB  50				push	EAX
 000000DC  52				push	EDX 
 000000DD  DD 04 24			fld	qword ptr [ESP]
 000000E0  59				pop	ECX
 000000E1  59				pop	ECX 
 000000E2  DD 04 24			fld	qword ptr [ESP]
 000000E5  D8 E1			fsub	st,st(1)
 000000E7  DD 1C 24			fstp	qword ptr [ESP]
 000000EA  9B DB E2			fclex
 000000ED  DD 04 24			fld	qword ptr [ESP]
 000000F0  59				pop	ECX
 000000F1  59				pop	ECX 
 000000F2  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000000F8  50				push	EAX
 000000F9  52				push	EDX 
 000000FA  DC 3C 24			fdivr	qword ptr [ESP]
 000000FD  DD 1C 24			fstp	qword ptr [ESP]
 00000100  5A				pop	EDX
 00000101  58				pop	EAX 
 00000102  EB 00			jmp	OFFSET $L000430
				;}
 00000104			$L000430:

 00000104  5F				pop	EDI
 00000105  5E				pop	ESI 
 00000106  5B				pop	EBX 
 00000107  C9				leave	
 00000108  C2 0008			retn	000000008h
 0000010B			Math_Hyperbolic_HCosec ENDP

 0000010B			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 0000010B  55				push	EBP
 0000010C  8B EC			mov	EBP,ESP
 0000010E  51				push	ECX 
 0000010F  53				push	EBX 
 00000110  56				push	ESI 
 00000111  57				push	EDI 
				;{

				;{406}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 00000112  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000115  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000118  50				push	EAX
 00000119  52				push	EDX 
 0000011A  E8 00000000 E		call	 Math_Exp
 0000011F  50				push	EAX
 00000120  52				push	EDX 
 00000121  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000124  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000127  50				push	EAX
 00000128  52				push	EDX 
 00000129  DD 04 24			fld	qword ptr [ESP]
 0000012C  D9 E0			fchs
 0000012E  DD 1C 24			fstp	qword ptr [ESP]
 00000131  E8 00000000 E		call	 Math_Exp
 00000136  50				push	EAX
 00000137  52				push	EDX 
 00000138  DD 04 24			fld	qword ptr [ESP]
 0000013B  59				pop	ECX
 0000013C  59				pop	ECX 
 0000013D  DC 04 24			fadd	qword ptr [ESP]
 00000140  DD 1C 24			fstp	qword ptr [ESP]
 00000143  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000146  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000149  50				push	EAX
 0000014A  52				push	EDX 
 0000014B  E8 00000000 E		call	 Math_Exp
 00000150  50				push	EAX
 00000151  52				push	EDX 
 00000152  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000155  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000158  50				push	EAX
 00000159  52				push	EDX 
 0000015A  DD 04 24			fld	qword ptr [ESP]
 0000015D  D9 E0			fchs
 0000015F  DD 1C 24			fstp	qword ptr [ESP]
 00000162  E8 00000000 E		call	 Math_Exp
 00000167  50				push	EAX
 00000168  52				push	EDX 
 00000169  DD 04 24			fld	qword ptr [ESP]
 0000016C  59				pop	ECX
 0000016D  59				pop	ECX 
 0000016E  DD 04 24			fld	qword ptr [ESP]
 00000171  D8 E1			fsub	st,st(1)
 00000173  DD 1C 24			fstp	qword ptr [ESP]
 00000176  9B DB E2			fclex
 00000179  DD 04 24			fld	qword ptr [ESP]
 0000017C  59	pop	ECX
 0000017D  59				pop	ECX 
 0000017E  DC 3C 24			fdivr	qword ptr [ESP]
 00000181  DD 1C 24			fstp	qword ptr [ESP]
 00000184  5A				pop	EDX
 00000185  58				pop	EAX 
 00000186  EB 00			jmp	OFFSET $L000432
				;}
 00000188			$L000432:

 00000188  5F				pop	EDI
 00000189  5E				pop	ESI 
 0000018A  5B				pop	EBX 
 0000018B  C9				leave	
 0000018C  C2 0008			retn	000000008h
 0000018F			Math_Hyperbolic_HCotan ENDP

 0000018F			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 0000018F  55				push	EBP
 00000190  8B EC			mov	EBP,ESP
 00000192  51				push	ECX 
 00000193  53				push	EBX 
 00000194  56				push	ESI 
 00000195  57				push	EDI 
				;{

				;{398}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00000196  B8 00000002			mov	EAX,000000002h
 0000019B  50				push	EAX
 0000019C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000019F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001A2  50				push	EAX
 000001A3  52				push	EDX 
 000001A4  E8 00000000 E		call	 Math_Exp
 000001A9  50				push	EAX
 000001AA  52				push	EDX 
 000001AB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001AE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001B1  50				push	EAX
 000001B2  52				push	EDX 
 000001B3  DD 04 24			fld	qword ptr [ESP]
 000001B6  D9 E0			fchs
 000001B8  DD 1C 24			fstp	qword ptr [ESP]
 000001BB  E8 00000000 E		call	 Math_Exp
 000001C0  50				push	EAX
 000001C1  52				push	EDX 
 000001C2  DD 04 24			fld	qword ptr [ESP]
 000001C5  59				pop	ECX
 000001C6  59				pop	ECX 
 000001C7  DC 04 24			fadd	qword ptr [ESP]
 000001CA  DD 1C 24			fstp	qword ptr [ESP]
 000001CD  9B DB E2			fclex
 000001D0  DD 04 24			fld	qword ptr [ESP]
 000001D3  59				pop	ECX
 000001D4  59				pop	ECX 
 000001D5  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000001DB  50				push	EAX
 000001DC  52				push	EDX 
 000001DD  DC 3C 24			fdivr	qword ptr [ESP]
 000001E0  DD 1C 24			fstp	qword ptr [ESP]
 000001E3  5A				pop	EDX
 000001E4  58				pop	EAX 
 000001E5  EB 00			jmp	OFFSET $L000428
				;}
 000001E7			$L000428:

 000001E7  5F				pop	EDI
 000001E8  5E				pop	ESI 
 000001E9  5B				pop	EBX 
 000001EA  C9				leave	
 000001EB  C2 0008			retn	000000008h
 000001EE			Math_Hyperbolic_HSec ENDP

 000001EE			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001EE  55				push	EBP
 000001EF  8B EC			mov	EBP,ESP
 000001F1  51				push	ECX 
 000001F2  53				push	EBX 
 000001F3  56				push	ESI 
 000001F4  57				push	EDI 
				;{

				;{386}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001FB  50				push	EAX
 000001FC  52				push	EDX 
 000001FD  E8 00000000 E		call	 Math_Exp
 00000202  50				push	EAX
 00000203  52				push	EDX 
 00000204  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000207  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000020A  50				push	EAX
 0000020B  52				push	EDX 
 0000020C  DD 04 24			fld	qword ptr [ESP]
 0000020F  D9 E0			fchs
 00000211  DD 1C 24			fstp	qword ptr [ESP]
 00000214  E8 00000000 E		call	 Math_Exp
 00000219  50				push	EAX
 0000021A  52				push	EDX 
 0000021B  DD 04 24			fld	qword ptr [ESP]
 0000021E  59				pop	ECX
 0000021F  59				pop	ECX 
 00000220  DD 04 24			fld	qword ptr [ESP]
 00000223  D8 E1			fsub	st,st(1)
 00000225  DD 1C 24			fstp	qword ptr [ESP]
 00000228  B8 00000002			mov	EAX,000000002h
 0000022D  9B DB E2			fclex
 00000230  50				push	EAX
 00000231  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000237  50				push	EAX
 00000238  52				push	EDX 
 00000239  DD 04 24			fld	qword ptr [ESP]
 0000023C  59				pop	ECX
 0000023D  59				pop	ECX 
 0000023E  DC 3C 24			fdivr	qword ptr [ESP]
 00000241  DD 1C 24			fstp	qword ptr [ESP]
 00000244  5A				pop	EDX
 00000245  58				pop	EAX 
 00000246  EB 00			jmp	OFFSET $L000421
				;}
 00000248			$L000421:

 00000248  5F				pop	EDI
 00000249  5E				pop	ESI 
 0000024A  5B				pop	EBX 
 0000024B  C9				leave	
 0000024C  C2 0008			retn	000000008h
 0000024F			Math_Hyperbolic_HSin ENDP

 0000024F			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 0000024F  55				push	EBP
 00000250  8B EC			mov	EBP,ESP
 00000252  51				push	ECX 
 00000253  53				push	EBX 
 00000254  56				push	ESI 
 00000255  57				push	EDI 
				;{

				;{394}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 00000256  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000259  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000025C  50				push	EAX
 0000025D  52				push	EDX 
 0000025E  E8 00000000 E		call	 Math_Exp
 00000263  50				push	EAX
 00000264  52				push	EDX 
 00000265  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000268  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000026B  50				push	EAX
 0000026C  52				push	EDX 
 0000026D  DD 04 24			fld	qword ptr [ESP]
 00000270  D9 E0			fchs
 00000272  DD 1C 24			fstp	qword ptr [ESP]
 00000275  E8 00000000 E		call	 Math_Exp
 0000027A  50				push	EAX
 0000027B  52				push	EDX 
 0000027C  DD 04 24			fld	qword ptr [ESP]
 0000027F  59				pop	ECX
 00000280  59				pop	ECX 
 00000281  DD 04 24			fld	qword ptr [ESP]
 00000284  D8 E1			fsub	st,st(1)
 00000286  DD 1C 24			fstp	qword ptr [ESP]
 00000289  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000028C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000028F  50				push	EAX
 00000290  52				push	EDX 
 00000291  E8 00000000 E		call	 Math_Exp
 00000296  50				push	EAX
 00000297  52				push	EDX 
 00000298  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000029B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000029E  50				push	EAX
 0000029F  52				push	EDX 
 000002A0  DD 04 24			fld	qword ptr [ESP]
 000002A3  D9 E0			fchs
 000002A5  DD 1C 24			fstp	qword ptr [ESP]
 000002A8  E8 00000000 E		call	 Math_Exp
 000002AD  50				push	EAX
 000002AE  52				push	EDX 
 000002AF  DD 04 24			fld	qword ptr [ESP]
 000002B2  59				pop	ECX
 000002B3  59				pop	ECX 
 000002B4  DC 04 24			fadd	qword ptr [ESP]
 000002B7  DD 1C 24			fstp	qword ptr [ESP]
 000002BA  9B DB E2			fclex
 000002BD  DD 04 24			fld	qword ptr [ESP]
 000002C0  59				pop	ECX
 000002C1  59				pop	ECX 
 000002C2  DC 3C 24			fdivr	qword ptr [ESP]
 000002C5  DD 1C 24			fstp	qword ptr [ESP]
 000002C8  5A				pop	EDX
 000002C9  58				pop	EAX 
 000002CA  EB 00			jmp	OFFSET $L000426
				;}
 000002CC			$L000426:

 000002CC  5F				pop	EDI
 000002CD  5E				pop	ESI 
 000002CE  5B				pop	EBX 
 000002CF  C9				leave	
 000002D0  C2 0008			retn	000000008h
 000002D3			Math_Hyperbolic_HTan ENDP

 000002D3			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002D3  55				push	EBP
 000002D4  8B EC			mov	EBP,ESP
 000002D6  51				push	ECX 
 000002D7  53				push	EBX 
 000002D8  56				push	ESI 
 000002D9  57				push	EDI 
				;{

				;{417}:return Math::log10(X + Math::Sqrt(X * X - 1))

 000002DA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002DD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E0  50				push	EAX
 000002E1  52				push	EDX 

 000002E2  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E8  50				push	EAX
 000002E9  52				push	EDX 
 000002EA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002ED  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002F0  9B DB E2			fclex
 000002F3  50				push	EAX
 000002F4  52				push	EDX 
 000002F5  DD 04 24			fld	qword ptr [ESP]
 000002F8  59				pop	ECX
 000002F9  59				pop	ECX 
 000002FA  DC 0C 24			fmul	qword ptr [ESP]
 000002FD  DD 1C 24			fstp	qword ptr [ESP]
 00000300  B8 00000001			mov	EAX,000000001h
 00000305  50				push	EAX
 00000306  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000030C  50				push	EAX
 0000030D  52				push	EDX 
 0000030E  DD 04 24			fld	qword ptr [ESP]
 00000311  59				pop	ECX
 00000312  59				pop	ECX 
 00000313  DD 04 24			fld	qword ptr [ESP]
 00000316  D8 E1			fsub	st,st(1)
 00000318  DD 1C 24			fstp	qword ptr [ESP]

 0000031B  E8 00000000 E		call	 Math_Sqrt
 00000320  50				push	EAX
 00000321  52				push	EDX 
 00000322  DD 04 24			fld	qword ptr [ESP]
 00000325  59				pop	ECX
 00000326  59				pop	ECX 
 00000327  DC 04 24			fadd	qword ptr [ESP]
 0000032A  DD 1C 24			fstp	qword ptr [ESP]

 0000032D  E8 00000000 E		call	 Math_log10
 00000332  EB 00			jmp	OFFSET $L000438
				;}
 00000334			$L000438:

 00000334  5F				pop	EDI
 00000335  5E				pop	ESI 
 00000336  5B				pop	EBX 
 00000337  C9				leave	
 00000338  C2 0008			retn	000000008h
 0000033B			Math_Hyperbolic_Inverse_HArccos ENDP

 0000033B			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 0000033B  55				push	EBP
 0000033C  8B EC			mov	EBP,ESP
 0000033E  51				push	ECX 
 0000033F  53				push	EBX 
 00000340  56				push	ESI 
 00000341  57				push	EDI 
				;{

				;{429}:return Math::log10((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)

 00000342  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000345  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000348  50				push	EAX
 00000349  52				push	EDX 
 0000034A  E8 00000000 E		call	 Math_Sign
 0000034F  50				push	EAX
 00000350  52				push	EDX 

 00000351  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000354  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000357  50				push	EAX
 00000358  52				push	EDX 
 00000359  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000035C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000035F  9B DB E2			fclex
 00000362  50				push	EAX
 00000363  52				push	EDX 
 00000364  DD 04 24			fld	qword ptr [ESP]
 00000367  59				pop	ECX
 00000368  59				pop	ECX 
 00000369  DC 0C 24			fmul	qword ptr [ESP]
 0000036C  DD 1C 24			fstp	qword ptr [ESP]
 0000036F  B8 00000001			mov	EAX,000000001h
 00000374  50				push	EAX
 00000375  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000037B  50				push	EAX
 0000037C  52				push	EDX 
 0000037D  DD 04 24			fld	qword ptr [ESP]
 00000380  59				pop	ECX
 00000381  59				pop	ECX 
 00000382  DC 04 24			fadd	qword ptr [ESP]
 00000385  DD 1C 24			fstp	qword ptr [ESP]

 00000388  E8 00000000 E		call	 Math_Sqrt
 0000038D  9B DB E2			fclex
 00000390  50				push	EAX
 00000391  52				push	EDX 
 00000392  DD 04 24			fld	qword ptr [ESP]
 00000395  59				pop	ECX
 00000396  59				pop	ECX 
 00000397  DC 0C 24			fmul	qword ptr [ESP]
 0000039A  DD 1C 24			fstp	qword ptr [ESP]
 0000039D  B8 00000001			mov	EAX,000000001h
 000003A2  50				push	EAX
 000003A3  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000003A9  50				push	EAX
 000003AA  52				push	EDX 
 000003AB  DD 04 24			fld	qword ptr [ESP]
 000003AE  59				pop	ECX
 000003AF  59				pop	ECX 
 000003B0  DC 04 24			fadd	qword ptr [ESP]
 000003B3  DD 1C 24			fstp	qword ptr [ESP]
 000003B6  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003B9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003BC  9B DB E2			fclex
 000003BF  50				push	EAX
 000003C0  52				push	EDX 
 000003C1  DD 04 24			fld	qword ptr [ESP]
 000003C4  59				pop	ECX
 000003C5  59				pop	ECX 
 000003C6  DC 3C 24			fdivr	qword ptr [ESP]
 000003C9  DD 1C 24			fstp	qword ptr [ESP]

 000003CC  E8 00000000 E		call	 Math_log10
 000003D1  EB 00			jmp	OFFSET $L000444
				;}
 000003D3			$L000444:

 000003D3  5F				pop	EDI
 000003D4  5E				pop	ESI 
 000003D5  5B				pop	EBX 
 000003D6  C9				leave	
 000003D7  C2 0008			retn	000000008h
 000003DA			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003DA			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003DA  55				push	EBP
 000003DB  8B EC			mov	EBP,ESP
 000003DD  51				push	ECX 
 000003DE  53				push	EBX 
 000003DF  56				push	ESI 
 000003E0  57				push	EDI 
				;{

				;{433}:return Math::log10((X + 1) / (X - 1)) / 2

 000003E1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003E4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003E7  50				push	EAX
 000003E8  52				push	EDX 
 000003E9  B8 00000001			mov	EAX,000000001h
 000003EE  50				push	EAX
 000003EF  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000003F5  50				push	EAX
 000003F6  52				push	EDX 
 000003F7  DD 04 24			fld	qword ptr [ESP]
 000003FA  59				pop	ECX
 000003FB  59				pop	ECX 
 000003FC  DC 04 24			fadd	qword ptr [ESP]
 000003FF  DD 1C 24			fstp	qword ptr [ESP]
 00000402  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000405  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000408  50				push	EAX
 00000409  52				push	EDX 
 0000040A  B8 00000001			mov	EAX,000000001h
 0000040F  50				push	EAX
 00000410  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000416  50				push	EAX
 00000417  52				push	EDX 
 00000418  DD 04 24			fld	qword ptr [ESP]
 0000041B  59				pop	ECX
 0000041C  59				pop	ECX 
 0000041D  DD 04 24			fld	qword ptr [ESP]
 00000420  D8 E1			fsub	st,st(1)
 00000422  DD 1C 24			fstp	qword ptr [ESP]
 00000425  9B DB E2			fclex
 00000428  DD 04 24			fld	qword ptr [ESP]
 0000042B  59				pop	ECX
 0000042C  59				pop	ECX 
 0000042D  DC 3C 24			fdivr	qword ptr [ESP]
 00000430  DD 1C 24			fstp	qword ptr [ESP]

 00000433  E8 00000000 E		call	 Math_log10
 00000438  50				push	EAX
 00000439  52				push	EDX 
 0000043A  B8 00000002			mov	EAX,000000002h
 0000043F  9B DB E2			fclex
 00000442  50				push	EAX
 00000443  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000449  50				push	EAX
 0000044A  52				push	EDX 
 0000044B  DD 04 24			fld	qword ptr [ESP]
 0000044E  59				pop	ECX
 0000044F  59				pop	ECX 
 00000450  DC 3C 24			fdivr	qword ptr [ESP]
 00000453  DD 1C 24			fstp	qword ptr [ESP]
 00000456  5A				pop	EDX
 00000457  58				pop	EAX 
 00000458  EB 00			jmp	OFFSET $L000446
				;}
 0000045A			$L000446:

 0000045A  5F				pop	EDI
 0000045B  5E				pop	ESI 
 0000045C  5B				pop	EBX 
 0000045D  C9				leave	
 0000045E  C2 0008			retn	000000008h
 00000461			Math_Hyperbolic_Inverse_HArccotan ENDP

 00000461			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 00000461  55				push	EBP
 00000462  8B EC			mov	EBP,ESP
 00000464  51				push	ECX 
 00000465  53				push	EBX 
 00000466  56				push	ESI 
 00000467  57				push	EDI 
				;{

				;{425}:return Math::log10((Math::Sqrt(-X * X + 1) + 1) / X)


 00000468  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000046B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000046E  50				push	EAX
 0000046F  52				push	EDX 
 00000470  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000473  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000476  9B DB E2			fclex
 00000479  50				push	EAX
 0000047A  52				push	EDX 
 0000047B  DD 04 24			fld	qword ptr [ESP]
 0000047E  59				pop	ECX
 0000047F  59				pop	ECX 
 00000480  DC 0C 24			fmul	qword ptr [ESP]
 00000483  DD 1C 24			fstp	qword ptr [ESP]
 00000486  DD 04 24			fld	qword ptr [ESP]
 00000489  D9 E0			fchs
 0000048B  DD 1C 24			fstp	qword ptr [ESP]
 0000048E  B8 00000001			mov	EAX,000000001h
 00000493  50				push	EAX
 00000494  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000049A  50				push	EAX
 0000049B  52				push	EDX 
 0000049C  DD 04 24			fld	qword ptr [ESP]
 0000049F  59				pop	ECX
 000004A0  59				pop	ECX 
 000004A1  DC 04 24			fadd	qword ptr [ESP]
 000004A4  DD 1C 24			fstp	qword ptr [ESP]

 000004A7  E8 00000000 E		call	 Math_Sqrt
 000004AC  50				push	EAX
 000004AD  52				push	EDX 
 000004AE  B8 00000001			mov	EAX,000000001h
 000004B3  50				push	EAX
 000004B4  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000004BA  50				push	EAX
 000004BB  52				push	EDX 
 000004BC  DD 04 24			fld	qword ptr [ESP]
 000004BF  59				pop	ECX
 000004C0  59				pop	ECX 
 000004C1  DC 04 24			fadd	qword ptr [ESP]
 000004C4  DD 1C 24			fstp	qword ptr [ESP]
 000004C7  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004CA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004CD  9B DB E2			fclex
 000004D0  50				push	EAX
 000004D1  52				push	EDX 
 000004D2  DD 04 24			fld	qword ptr [ESP]
 000004D5  59				pop	ECX
 000004D6  59				pop	ECX 
 000004D7  DC 3C 24			fdivr	qword ptr [ESP]
 000004DA  DD 1C 24			fstp	qword ptr [ESP]

 000004DD  E8 00000000 E		call	 Math_log10
 000004E2  EB 00			jmp	OFFSET $L000442
				;}
 000004E4			$L000442:

 000004E4  5F				pop	EDI
 000004E5  5E				pop	ESI 
 000004E6  5B				pop	EBX 
 000004E7  C9				leave	
 000004E8  C2 0008			retn	000000008h
 000004EB			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004EB			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004EB  55				push	EBP
 000004EC  8B EC			mov	EBP,ESP
 000004EE  51				push	ECX 
 000004EF  53				push	EBX 
 000004F0  56				push	ESI 
 000004F1  57				push	EDI 
				;{

				;{413}:return Math::log10(X + Math::Sqrt(X * X + 1))

 000004F2  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004F8  50				push	EAX
 000004F9  52				push	EDX 

 000004FA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004FD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000500  50				push	EAX
 00000501  52				push	EDX 
 00000502  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000505  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000508  9B DB E2			fclex
 0000050B  50				push	EAX
 0000050C  52				push	EDX 
 0000050D  DD 04 24			fld	qword ptr [ESP]
 00000510  59				pop	ECX
 00000511  59				pop	ECX 
 00000512  DC 0C 24			fmul	qword ptr [ESP]
 00000515  DD 1C 24			fstp	qword ptr [ESP]
 00000518  B8 00000001			mov	EAX,000000001h
 0000051D  50				push	EAX
 0000051E  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000524  50				push	EAX
 00000525  52				push	EDX 
 00000526  DD 04 24			fld	qword ptr [ESP]
 00000529  59				pop	ECX
 0000052A  59				pop	ECX 
 0000052B  DC 04 24			fadd	qword ptr [ESP]
 0000052E  DD 1C 24			fstp	qword ptr [ESP]

 00000531  E8 00000000 E		call	 Math_Sqrt
 00000536  50				push	EAX
 00000537  52				push	EDX 
 00000538  DD 04 24			fld	qword ptr [ESP]
 0000053B  59				pop	ECX
 0000053C  59				pop	ECX 
 0000053D  DC 04 24			fadd	qword ptr [ESP]
 00000540  DD 1C 24			fstp	qword ptr [ESP]

 00000543  E8 00000000 E		call	 Math_log10
 00000548  EB 00			jmp	OFFSET $L000435
				;}
 0000054A			$L000435:

 0000054A  5F				pop	EDI
 0000054B  5E				pop	ESI 
 0000054C  5B				pop	EBX 
 0000054D  C9				leave	
 0000054E  C2 0008			retn	000000008h
 00000551			Math_Hyperbolic_Inverse_HArcsin ENDP

 00000551			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 00000551  55				push	EBP
 00000552  8B EC			mov	EBP,ESP
 00000554  51				push	ECX 
 00000555  53				push	EBX 
 00000556  56				push	ESI 
 00000557  57				push	EDI 
				;{

				;{421}:return Math::log10((1 + X) / (1 - X)) / 2

 00000558  B8 00000001			mov	EAX,000000001h
 0000055D  50				push	EAX
 0000055E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000561  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000564  50				push	EAX
 00000565  52				push	EDX 
 00000566  DD 04 24			fld	qword ptr [ESP]
 00000569  59				pop	ECX
 0000056A  59				pop	ECX 
 0000056B  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000571  50				push	EAX
 00000572  52				push	EDX 
 00000573  DC 04 24			fadd	qword ptr [ESP]
 00000576  DD 1C 24			fstp	qword ptr [ESP]
 00000579  B8 00000001			mov	EAX,000000001h
 0000057E  50				push	EAX
 0000057F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000582  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000585  50				push	EAX
 00000586  52				push	EDX 
 00000587  DD 04 24			fld	qword ptr [ESP]
 0000058A  59				pop	ECX
 0000058B  59				pop	ECX 
 0000058C  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000592  50				push	EAX
 00000593  52				push	EDX 
 00000594  DD 04 24			fld	qword ptr [ESP]
 00000597  D8 E1			fsub	st,st(1)
 00000599  DD 1C 24			fstp	qword ptr [ESP]
 0000059C  9B DB E2			fclex
 0000059F  DD 04 24			fld	qword ptr [ESP]
 000005A2  59				pop	ECX
 000005A3  59				pop	ECX 
 000005A4  DC 3C 24			fdivr	qword ptr [ESP]
 000005A7  DD 1C 24			fstp	qword ptr [ESP]

 000005AA  E8 00000000 E		call	 Math_log10
 000005AF  50				push	EAX
 000005B0  52				push	EDX 
 000005B1  B8 00000002			mov	EAX,000000002h
 000005B6  9B DB E2			fclex
 000005B9  50				push	EAX
 000005BA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000005C0  50				push	EAX
 000005C1  52				push	EDX 
 000005C2  DD 04 24			fld	qword ptr [ESP]
 000005C5  59				pop	ECX
 000005C6  59				pop	ECX 
 000005C7  DC 3C 24			fdivr	qword ptr [ESP]
 000005CA  DD 1C 24			fstp	qword ptr [ESP]
 000005CD  5A				pop	EDX
 000005CE  58				pop	EAX 
 000005CF  EB 00			jmp	OFFSET $L000440
				;}
 000005D1			$L000440:

 000005D1  5F				pop	EDI
 000005D2  5E				pop	ESI 
 000005D3  5B				pop	EBX 
 000005D4  C9				leave	
 000005D5  C2 0008			retn	000000008h
 000005D8			Math_Hyperbolic_Inverse_HArctan ENDP

 000005D8			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005D8  55				push	EBP
 000005D9  8B EC			mov	EBP,ESP
 000005DB  51				push	ECX 
 000005DC  53				push	EBX 
 000005DD  56				push	ESI 
 000005DE  57				push	EDI 
				;{

				;{322}:return (180 / Math::pi()) * rad
 000005DF  B8 000000B4			mov	EAX,0000000B4h
 000005E4  50				push	EAX
 000005E5  E8 00000000 E		call	 Math_pi
 000005EA  9B DB E2			fclex
 000005ED  50				push	EAX
 000005EE  52				push	EDX 
 000005EF  DD 04 24			fld	qword ptr [ESP]
 000005F2  59				pop	ECX
 000005F3  59				pop	ECX 
 000005F4  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000005FA  50				push	EAX
 000005FB  52				push	EDX 
 000005FC  DC 3C 24			fdivr	qword ptr [ESP]
 000005FF  DD 1C 24			fstp	qword ptr [ESP]
 00000602  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000605  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000608  9B DB E2			fclex
 0000060B  50				push	EAX
 0000060C  52				push	EDX 
 0000060D  DD 04 24			fld	qword ptr [ESP]
 00000610  59				pop	ECX
 00000611  59				pop	ECX 
 00000612  DC 0C 24			fmul	qword ptr [ESP]
 00000615  DD 1C 24			fstp	qword ptr [ESP]
 00000618  5A				pop	EDX
 00000619  58				pop	EAX 
 0000061A  EB 00			jmp	OFFSET $L000404
				;}
 0000061C			$L000404:

 0000061C  5F				pop	EDI
 0000061D  5E				pop	ESI 
 0000061E  5B				pop	EBX 
 0000061F  C9				leave	
 00000620  C2 0008			retn	000000008h
 00000623			Math_RadiansToDegrees ENDP

 00000623			UnitTesting_Circle_Circumference PROC NEAR 
				;double Circumference(void);
 00000623  55				push	EBP
 00000624  8B EC			mov	EBP,ESP
 00000626  51				push	ECX 
 00000627  53				push	EBX 
 00000628  56				push	ESI 
 00000629  57				push	EDI 
				;{

				;{72}:return Math::pi() * Radius
 0000062A  E8 00000000 E		call	 Math_pi
 0000062F  50				push	EAX
 00000630  52				push	EDX 
 00000631  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000634  E8 00000082			call	 UnitTesting_Circle_get_Radius
 00000639  9B DB E2			fclex
 0000063C  50				push	EAX
 0000063D  52				push	EDX 
 0000063E  DD 04 24			fld	qword ptr [ESP]
 00000641  59				pop	ECX
 00000642  59				pop	ECX 
 00000643  DC 0C 24			fmul	qword ptr [ESP]
 00000646  DD 1C 24			fstp	qword ptr [ESP]
 00000649  5A				pop	EDX
 0000064A  58				pop	EAX 
 0000064B  EB 00			jmp	OFFSET $L000590
				;}
 0000064D			$L000590:

 0000064D  5F				pop	EDI
 0000064E  5E				pop	ESI 
 0000064F  5B				pop	EBX 
 00000650  C9				leave	
 00000651  C3				ret	
 00000652			UnitTesting_Circle_Circumference ENDP

 00000652			UnitTesting_Circle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00000652  55				push	EBP
 00000653  8B EC			mov	EBP,ESP
 00000655  51				push	ECX 
 00000656  53				push	EBX 
 00000657  56				push	ESI 
 00000658  57				push	EDI 
				;{

				;{91}:return 2 * Circumference()
 00000659  B8 00000002			mov	EAX,000000002h
 0000065E  50				push	EAX
 0000065F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000662  E8 FFFFFFBC			call	 UnitTesting_Circle_Circumference
 00000667  9B DB E2			fclex
 0000066A  50				push	EAX
 0000066B  52				push	EDX 
 0000066C  DD 04 24			fld	qword ptr [ESP]
 0000066F  59				pop	ECX
 00000670  59				pop	ECX 
 00000671  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000677  50				push	EAX
 00000678  52				push	EDX 
 00000679  DC 0C 24			fmul	qword ptr [ESP]
 0000067C  DD 1C 24			fstp	qword ptr [ESP]
 0000067F  5A				pop	EDX
 00000680  58				pop	EAX 
 00000681  EB 00			jmp	OFFSET $L000596
				;}
 00000683			$L000596:

 00000683  5F				pop	EDI
 00000684  5E				pop	ESI 
 00000685  5B				pop	EBX 
 00000686  C9				leave	
 00000687  C3				ret	
 00000688			UnitTesting_Circle_ComputeArea ENDP

 00000688			UnitTesting_Circle_Draw PROC NEAR 
				;void Draw(void);
 00000688  55				push	EBP
 00000689  8B EC			mov	EBP,ESP
 0000068B  51				push	ECX 
 0000068C  53				push	EBX 
 0000068D  56				push	ESI 
 0000068E  57				push	EDI 
				;{

				;{86}:Console::WriteLn("Drawing a Circle!");
 0000068F  8D 05 000004AD R		lea	EAX,OFFSET $S000595
 00000695  6A 00			push	000000000h
 00000697  50				push	EAX 
 00000698  E8 00000000 E		call	 Console_WriteString
 0000069D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006A2			$L000594:

 000006A2  5F				pop	EDI
 000006A3  5E				pop	ESI 
 000006A4  5B				pop	EBX 
 000006A5  C9				leave	
 000006A6  C3				ret	
 000006A7			UnitTesting_Circle_Draw ENDP

 000006A7			UnitTesting_Circle_Name PROC NEAR 
				;string Name(void);
 000006A7  55				push	EBP
 000006A8  8B EC			mov	EBP,ESP
 000006AA  51				push	ECX 
 000006AB  53				push	EBX 
 000006AC  56				push	ESI 
 000006AD  57				push	EDI 
				;{

				;{81}:return "Circle"
 000006AE  8D 05 00000432 R		lea	EAX,OFFSET $S000593
 000006B4  EB 00			jmp	OFFSET $L000592
				;}
 000006B6			$L000592:

 000006B6  5F				pop	EDI
 000006B7  5E				pop	ESI 
 000006B8  5B				pop	EBX 
 000006B9  C9				leave	
 000006BA  C3				ret	
 000006BB			UnitTesting_Circle_Name ENDP

 000006BB			UnitTesting_Circle_get_Radius PROC NEAR 
				;double get::Radius(void);
 000006BB  55				push	EBP
 000006BC  8B EC			mov	EBP,ESP
 000006BE  51				push	ECX 
 000006BF  53				push	EBX 
 000006C0  56				push	ESI 
 000006C1  57				push	EDI 
				;{

				;{62}:return radius
 000006C2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006C5  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000006C8  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000006CB  EB 00			jmp	OFFSET $L000587
				;}
 000006CD			$L000587:

 000006CD  5F				pop	EDI
 000006CE  5E				pop	ESI 
 000006CF  5B				pop	EBX 
 000006D0  C9				leave	
 000006D1  C3				ret	
 000006D2			UnitTesting_Circle_get_Radius ENDP

 000006D2			UnitTesting_Circle_put_Radius PROC NEAR 
				;void put::Radius(double value);
 000006D2  55				push	EBP
 000006D3  8B EC			mov	EBP,ESP
 000006D5  51				push	ECX 
 000006D6  53				push	EBX 
 000006D7  56				push	ESI 
 000006D8  57				push	EDI 
				;{

				;{67}:radius= value;
 000006D9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000006DC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000006DF  50				push	EAX
 000006E0  52				push	EDX 
 000006E1  DD 04 24			fld	qword ptr [ESP]
 000006E4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006E7  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 000006EA  DD 1B			fstp	qword ptr [EBX]
				;}
 000006EC			$L000588:
 000006EC  5A				pop	EDX
 000006ED  58				pop	EAX 

 000006EE  5F				pop	EDI
 000006EF  5E				pop	ESI 
 000006F0  5B				pop	EBX 
 000006F1  C9				leave	
 000006F2  C2 0008			retn	000000008h
 000006F5			UnitTesting_Circle_put_Radius ENDP

 000006F5			UnitTesting_Circle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 000006F5  55				push	EBP
 000006F6  8B EC			mov	EBP,ESP
 000006F8  51				push	ECX 
 000006F9  53				push	EBX 
 000006FA  56				push	ESI 
 000006FB  57				push	EDI 
				;{

				;{77}:return UnitTesting::stCircle
 000006FC  B8 00000001			mov	EAX,000000001h
 00000701  33 D2			xor	EDX,EDX
 00000703  EB 00			jmp	OFFSET $L000591
				;}
 00000705			$L000591:

 00000705  5F				pop	EDI
 00000706  5E				pop	ESI 
 00000707  5B				pop	EBX 
 00000708  C9				leave	
 00000709  C3				ret	
 0000070A			UnitTesting_Circle_Type ENDP

 0000070A			UnitTesting_Circle PROC NEAR 
				;void UnitTesting::Circle(void);
 0000070A  55				push	EBP
 0000070B  8B EC			mov	EBP,ESP
 0000070D  51				push	ECX 
 0000070E  53				push	EBX 
 0000070F  56				push	ESI 
 00000710  57				push	EDI 
 00000711  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000714  E8 000003AB			call	 UnitTesting_Shape ;base constructor call
 00000719  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000071C  C7 01 00000000 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Circle 
 00000722  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000725  E8 000024F4			call	 __member_Init@UnitTesting_Circle 

 0000072A  5F				pop	EDI
 0000072B  5E				pop	ESI 
 0000072C  5B				pop	EBX 
 0000072D  C9				leave	
 0000072E  C3				ret	
 0000072F			UnitTesting_Circle ENDP

 0000072F			UnitTesting_HelloWorld_Destructor PROC NEAR 
				;void Destructor(void);
 0000072F  55				push	EBP
 00000730  8B EC			mov	EBP,ESP
 00000732  51				push	ECX 
 00000733  53				push	EBX 
 00000734  56				push	ESI 
 00000735  57				push	EDI 
				;{

				;{39}:Console::WriteLn("The HelloWorld destructor");
 00000736  8D 05 00000654 R		lea	EAX,OFFSET $S000644
 0000073C  6A 00			push	000000000h
 0000073E  50				push	EAX 
 0000073F  E8 00000000 E		call	 Console_WriteString
 00000744  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000749			$L000643:

 00000749  5F				pop	EDI
 0000074A  5E				pop	ESI 
 0000074B  5B				pop	EBX 
 0000074C  C9				leave	
 0000074D  C3				ret	
 0000074E			UnitTesting_HelloWorld_Destructor ENDP

 0000074E			UnitTesting_HelloWorld_SayHello PROC NEAR 
				;void SayHello(string text);
 0000074E  55				push	EBP
 0000074F  8B EC			mov	EBP,ESP
 00000751  51				push	ECX 
 00000752  53				push	EBX 
 00000753  56				push	ESI 
 00000754  57				push	EDI 
				;{

				;{29}:Console::WriteLn("this is what I have to say for the first time in H++ :", text);
 00000755  8D 05 000007BD R		lea	EAX,OFFSET $S000639
 0000075B  6A 00			push	000000000h
 0000075D  50				push	EAX 
 0000075E  E8 00000000 E		call	 Console_WriteString
 00000763  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000766  6A 00			push	000000000h 
 00000768  50				push	EAX 
 00000769  E8 00000000 E		call	 Console_WriteString 
 0000076E  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000773			$L000637:

 00000773  5F				pop	EDI
 00000774  5E				pop	ESI 
 00000775  5B				pop	EBX 
 00000776  C9				leave	
 00000777  C2 0004			retn	000000004h
 0000077A			UnitTesting_HelloWorld_SayHello ENDP

 0000077A			UnitTesting_HelloWorld_ShowHello PROC NEAR 
				;void ShowHello(string text);
 0000077A  55	push	EBP
 0000077B  8B EC			mov	EBP,ESP
 0000077D  51				push	ECX 
 0000077E  53				push	EBX 
 0000077F  56				push	ESI 
 00000780  57				push	EDI 
				;{

				;{34}:System::ShowMessage(text, "H++ First program", System::IconInformation);
 00000781  B8 00000040			mov	EAX,000000040h
 00000786  33 D2			xor	EDX,EDX
 00000788  50				push	EAX 
 00000789  8D 05 000004F0 R		lea	EAX,OFFSET $S000642
 0000078F  50				push	EAX 
 00000790  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000793  50				push	EAX
 00000794  E8 00000000 E		call	 System_ShowMessage
				;}
 00000799			$L000640:

 00000799  5F				pop	EDI
 0000079A  5E				pop	ESI 
 0000079B  5B				pop	EBX 
 0000079C  C9				leave	
 0000079D  C2 0004			retn	000000004h
 000007A0			UnitTesting_HelloWorld_ShowHello ENDP

 000007A0			UnitTesting_HelloWorld PROC NEAR 
				;void UnitTesting::HelloWorld(void);
 000007A0  55				push	EBP
 000007A1  8B EC			mov	EBP,ESP
 000007A3  51				push	ECX 
 000007A4  53				push	EBX 
 000007A5  56				push	ESI 
 000007A6  57				push	EDI 
				;{

				;{24}:Console::WriteLn("The HelloWorld constructor");
 000007A7  8D 05 00000639 R		lea	EAX,OFFSET $S000636
 000007AD  6A 00			push	000000000h
 000007AF  50				push	EAX 
 000007B0  E8 00000000 E		call	 Console_WriteString
 000007B5  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 000007BA  5F				pop	EDI
 000007BB  5E				pop	ESI 
 000007BC  5B				pop	EBX 
 000007BD  C9				leave	
 000007BE  C3				ret	
 000007BF			UnitTesting_HelloWorld ENDP

 000007BF			UnitTesting_Integers_Inline_Test PROC NEAR 
				;void UnitTesting::Integers_Inline::Test(void);
 000007BF  55				push	EBP
 000007C0  8B EC			mov	EBP,ESP
 000007C2  83 EC 14			sub	ESP,000000014h
 000007C5  53				push	EBX 
 000007C6  56				push	ESI 
 000007C7  57				push	EDI 
 000007C8  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 000007CB  B9 00000004			mov	ECX,000000004h
 000007D0  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000007D5  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{90}:a= 5, b= 4;
 000007D7  B8 00000005			mov	EAX,000000005h
 000007DC  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 000007DF  B8 00000004			mov	EAX,000000004h
 000007E4  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{92}:Console::WriteLn("The values: a = ", a, ", and b = ", b);
 000007E7  8D 05 000006E5 R		lea	EAX,OFFSET $S000551
 000007ED  6A 00			push	000000000h
 000007EF  50				push	EAX 
 000007F0  E8 00000000 E		call	 Console_WriteString
 000007F5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000007F8  50				push	EAX 
 000007F9  E8 00000000 E		call	 Console_WriteInteger 
 000007FE  8D 05 000003D1 R		lea	EAX,OFFSET $S000552
 00000804  6A 00			push	000000000h 
 00000806  50				push	EAX 
 00000807  E8 00000000 E		call	 Console_WriteString 
 0000080C  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000080F  50				push	EAX 
 00000810  E8 00000000 E		call	 Console_WriteInteger 
 00000815  E8 00000000 E		call	 Console_WriteCrLf 

				;{94}:c= max(a, b);
 0000081A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000081D  50				push	EAX
 0000081E  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000821  5B				pop	EBX
 00000822  33 C9			xor	ECX,ECX
 00000824  3B D8			cmp	EBX,EAX
 00000826  0F 9E C1			setle	CL
 00000829  83 E9 01			sub	ECX,000000001h
 0000082C  2B D8			sub	EBX,EAX 
 0000082E  23 CB			and	ECX,EBX
 00000830  03 C1			add	EAX,ECX
 00000832  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{96}:Console::WriteLn("The max value is = ", c);
 00000835  8D 05 0000066E R		lea	EAX,OFFSET $S000554
 0000083B  6A 00			push	000000000h
 0000083D  50				push	EAX 
 0000083E  E8 00000000 E		call	 Console_WriteString
 00000843  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000846  50				push	EAX 
 00000847  E8 00000000 E		call	 Console_WriteInteger 
 0000084C  E8 00000000 E		call	 Console_WriteCrLf 

				;{98}:d= min(a, b);
 00000851  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000854  50				push	EAX
 00000855  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000858  5B				pop	EBX
 00000859  2B D8			sub	EBX,EAX
 0000085B  1B C9			sbb	ECX,ECX
 0000085D  23 CB			and	ECX,EBX
 0000085F  03 C1			add	EAX,ECX
 00000861  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{100}:Console::WriteLn("The min value is = ", d);
 00000864  8D 05 00000682 R		lea	EAX,OFFSET $S000556
 0000086A  6A 00			push	000000000h
 0000086C  50				push	EAX 
 0000086D  E8 00000000 E		call	 Console_WriteString
 00000872  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000875  50				push	EAX 
 00000876  E8 00000000 E		call	 Console_WriteInteger 
 0000087B  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000880			$L000546:

 00000880  5F				pop	EDI
 00000881  5E				pop	ESI 
 00000882  5B				pop	EBX 
 00000883  C9				leave	
 00000884  C3				ret	
 00000885			UnitTesting_Integers_Inline_Test ENDP

 00000885			UnitTesting_Rnd_NextDbl PROC NEAR 
				;double NextDbl(void);
 00000885  55				push	EBP
 00000886  8B EC			mov	EBP,ESP
 00000888  51				push	ECX 
 00000889  53				push	EBX 
 0000088A  56				push	ESI 
 0000088B  57				push	EDI 
				;{

				;{45}:return UnitTesting::Rnd::NextDblEx()
 0000088C  E8 0000004C			call	 UnitTesting_Rnd_NextDblEx
 00000891  EB 00			jmp	OFFSET $L000466
				;}
 00000893			$L000466:

 00000893  5F				pop	EDI
 00000894  5E				pop	ESI 
 00000895  5B				pop	EBX 
 00000896  C9				leave	
 00000897  C3				ret	
 00000898			UnitTesting_Rnd_NextDbl ENDP

 00000898			UnitTesting_Rnd_NextInt PROC NEAR 
				;double NextInt(void);
 00000898  55				push	EBP
 00000899  8B EC			mov	EBP,ESP
 0000089B  51				push	ECX 
 0000089C  53				push	EBX 
 0000089D  56				push	ESI 
 0000089E  57				push	EDI 
				;{

				;{50}:return UnitTesting::Rnd::NextIntEx()
 0000089F  E8 0000013E			call	 UnitTesting_Rnd_NextIntEx
 000008A4  EB 00			jmp	OFFSET $L000467
				;}
 000008A6			$L000467:

 000008A6  5F				pop	EDI
 000008A7  5E				pop	ESI 
 000008A8  5B				pop	EBX 
 000008A9  C9				leave	
 000008AA  C3				ret	
 000008AB			UnitTesting_Rnd_NextInt ENDP

 000008AB			UnitTesting_Rnd PROC NEAR 
				;void UnitTesting::Rnd(int seedx);
 000008AB  55				push	EBP
 000008AC  8B EC			mov	EBP,ESP
 000008AE  51				push	ECX 
 000008AF  53				push	EBX 
 000008B0  56				push	ESI 
 000008B1  57				push	EDI 
				;{

				;{15}:UnitTesting::Rnd::seed= seedx;
 000008B2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008B5  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000008BB  89 03			mov	dword ptr [EBX],EAX
				;}

 000008BD  5F				pop	EDI
 000008BE  5E				pop	ESI 
 000008BF  5B				pop	EBX 
 000008C0  C9				leave	
 000008C1  C2 0004			retn	000000004h
 000008C4			UnitTesting_Rnd ENDP

 000008C4			UnitTesting_Rnd_setSeed PROC NEAR 
				;void setSeed(long s);
 000008C4  55				push	EBP
 000008C5  8B EC			mov	EBP,ESP
 000008C7  51				push	ECX 
 000008C8  53				push	EBX 
 000008C9  56				push	ESI 
 000008CA  57				push	EDI 
				;{

				;{21}:UnitTesting::Rnd::seed= s;
 000008CB  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008CE  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000008D4  89 03			mov	dword ptr [EBX],EAX
				;}
 000008D6			$L000461:

 000008D6  5F				pop	EDI
 000008D7  5E				pop	ESI 
 000008D8  5B				pop	EBX 
 000008D9  C9				leave	
 000008DA  C2 0004			retn	000000004h
 000008DD			UnitTesting_Rnd_setSeed ENDP

 000008DD			UnitTesting_Rnd_NextDblEx PROC NEAR 
				;double UnitTesting::Rnd::NextDblEx(void);
 000008DD  55				push	EBP
 000008DE  8B EC			mov	EBP,ESP
 000008E0  51				push	ECX 
 000008E1  53				push	EBX 
 000008E2  56				push	ESI 
 000008E3  57				push	EDI 
				;{

				;{26}:UnitTesting::Rnd::seed= Math::Round(UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed * UnitTesting::Rnd::q));

 000008E4  8D 1D 00000820 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 000008EA  8B 03			mov	EAX,dword ptr [EBX]
 000008EC  50				push	EAX
 000008ED  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000008F3  8B 03			mov	EAX,dword ptr [EBX]
 000008F5  50				push	EAX
 000008F6  8D 1D 00000828 R		lea	EBX,OFFSET UnitTesting_Rnd_q
 000008FC  8B 03			mov	EAX,dword ptr [EBX]
 000008FE  8B C8			mov	ECX,EAX
 00000900  58				pop	EAX
 00000901  33 D2			xor	EDX,EDX
 00000903  F7 F9			idiv	ECX
 00000905  8B C2			mov	EAX,EDX 
 00000907  59				pop	ECX
 00000908  99				cdq	
 00000909  0F AF C1			imul	EAX,ECX
 0000090C  50				push	EAX
 0000090D  52				push	EDX 
 0000090E  8D 1D 0000082C R		lea	EBX,OFFSET UnitTesting_Rnd_r
 00000914  8B 03			mov	EAX,dword ptr [EBX]
 00000916  50				push	EAX
 00000917  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 0000091D  8B 03			mov	EAX,dword ptr [EBX]
 0000091F  50				push	EAX
 00000920  8D 1D 00000828 R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00000926  8B 03			mov	EAX,dword ptr [EBX]
 00000928  59				pop	ECX
 00000929  99				cdq	
 0000092A  0F AF C1			imul	EAX,ECX
 0000092D  9B DB E2			fclex
 00000930  50				push	EAX
 00000931  52				push	EDX 
 00000932  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000938  50				push	EAX
 00000939  52				push	EDX 
 0000093A  DD 04 24			fld	qword ptr [ESP]
 0000093D  59				pop	ECX
 0000093E  59				pop	ECX 
 0000093F  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000945  50				push	EAX
 00000946  52				push	EDX 
 00000947  DC 0C 24			fmul	qword ptr [ESP]
 0000094A  DF 3C 24			fistp	qword ptr [ESP]
 0000094D  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000953  50				push	EAX
 00000954  52				push	EDX 
 00000955  DD 04 24			fld	qword ptr [ESP]
 00000958  59				pop	ECX
 00000959  59				pop	ECX 
 0000095A  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000960  50				push	EAX
 00000961  52				push	EDX 
 00000962  DD 04 24			fld	qword ptr [ESP]
 00000965  D8 E1			fsub	st,st(1)
 00000967  DF 3C 24			fistp	qword ptr [ESP]
 0000096A  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000970  50				push	EAX
 00000971  52				push	EDX 

 00000972  E8 00000000 E		call	 Math_Round
 00000977  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 0000097D  89 03			mov	dword ptr [EBX],EAX

				;{28}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 0000097F  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000985  8B 03			mov	EAX,dword ptr [EBX]
 00000987  50				push	EAX
 00000988  33 C0			xor	EAX,EAX
 0000098A  5A				pop	EDX
 0000098B  3B D0			cmp	EDX,EAX
 0000098D  0F 9C C0			setl	AL
 00000990  84 C0			test	AL,AL
 00000992  74 0A			jz	 $L000972
 00000994  8D 1D 00000824 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 0000099A  8B 03			mov	EAX,dword ptr [EBX]
 0000099C  EB 02			jmp	 $L000973
 0000099E			$L000972:
 0000099E  33 C0			xor	EAX,EAX
 000009A0			$L000973:
 000009A0  F8				clc	
 000009A1  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000009A7  01 03			add	dword ptr [EBX],EAX

				;{30}:return UnitTesting::Rnd::seed / UnitTesting::Rnd::m
 000009A9  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000009AF  8B 03			mov	EAX,dword ptr [EBX]
 000009B1  50				push	EAX
 000009B2  8D 1D 00000824 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000009B8  8B 03			mov	EAX,dword ptr [EBX]
 000009BA  9B DB E2			fclex
 000009BD  50				push	EAX
 000009BE  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000009C4  50				push	EAX
 000009C5  52				push	EDX 
 000009C6  DD 04 24			fld	qword ptr [ESP]
 000009C9  59				pop	ECX
 000009CA  59				pop	ECX 
 000009CB  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000009D1  50				push	EAX
 000009D2  52				push	EDX 
 000009D3  DC 3C 24			fdivr	qword ptr [ESP]
 000009D6  DD 1C 24			fstp	qword ptr [ESP]
 000009D9  5A				pop	EDX
 000009DA  58				pop	EAX 
 000009DB  EB 00			jmp	OFFSET $L000463
				;}
 000009DD			$L000463:

 000009DD  5F				pop	EDI
 000009DE  5E				pop	ESI 
 000009DF  5B				pop	EBX 
 000009E0  C9				leave	
 000009E1  C3				ret	
 000009E2			UnitTesting_Rnd_NextDblEx ENDP

 000009E2			UnitTesting_Rnd_NextIntEx PROC NEAR 
				;double UnitTesting::Rnd::NextIntEx(void);
 000009E2  55				push	EBP
 000009E3  8B EC			mov	EBP,ESP
 000009E5  51				push	ECX 
 000009E6  53				push	EBX 
 000009E7  56				push	ESI 
 000009E8  57				push	EDI 
				;{

				;{36}:UnitTesting::Rnd::seed= UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed * UnitTesting::Rnd::q);
 000009E9  8D 1D 00000820 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 000009EF  8B 03			mov	EAX,dword ptr [EBX]
 000009F1  50				push	EAX
 000009F2  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000009F8  8B 03			mov	EAX,dword ptr [EBX]
 000009FA  50				push	EAX
 000009FB  8D 1D 00000828 R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00000A01  8B 03			mov	EAX,dword ptr [EBX]
 00000A03  8B C8			mov	ECX,EAX
 00000A05  58				pop	EAX
 00000A06  33 D2			xor	EDX,EDX
 00000A08  F7 F9			idiv	ECX
 00000A0A  8B C2			mov	EAX,EDX 
 00000A0C  59				pop	ECX
 00000A0D  99				cdq	
 00000A0E  0F AF C1			imul	EAX,ECX
 00000A11  50				push	EAX
 00000A12  52				push	EDX 
 00000A13  8D 1D 0000082C R		lea	EBX,OFFSET UnitTesting_Rnd_r
 00000A19  8B 03			mov	EAX,dword ptr [EBX]
 00000A1B  50				push	EAX
 00000A1C  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000A22  8B 03			mov	EAX,dword ptr [EBX]
 00000A24  50				push	EAX
 00000A25  8D 1D 00000828 R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00000A2B  8B 03			mov	EAX,dword ptr [EBX]
 00000A2D  59				pop	ECX
 00000A2E  99				cdq	
 00000A2F  0F AF C1			imul	EAX,ECX
 00000A32  9B DB E2			fclex
 00000A35  50				push	EAX
 00000A36  52				push	EDX 
 00000A37  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000A3D  50				push	EAX
 00000A3E  52				push	EDX 
 00000A3F  DD 04 24			fld	qword ptr [ESP]
 00000A42  59				pop	ECX
 00000A43  59				pop	ECX 
 00000A44  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000A4A  50				push	EAX
 00000A4B  52				push	EDX 
 00000A4C  DC 0C 24			fmul	qword ptr [ESP]
 00000A4F  DF 3C 24			fistp	qword ptr [ESP]
 00000A52  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000A58  50				push	EAX
 00000A59  52				push	EDX 
 00000A5A  DD 04 24			fld	qword ptr [ESP]
 00000A5D  59				pop	ECX
 00000A5E  59				pop	ECX 
 00000A5F  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000A65  50				push	EAX
 00000A66  52				push	EDX 
 00000A67  DD 04 24			fld	qword ptr [ESP]
 00000A6A  D8 E1			fsub	st,st(1)
 00000A6C  DF 3C 24			fistp	qword ptr [ESP]
 00000A6F  5A				pop	EDX
 00000A70  58				pop	EAX 
 00000A71  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000A77  89 03			mov	dword ptr [EBX],EAX

				;{38}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 00000A79  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000A7F  8B 03			mov	EAX,dword ptr [EBX]
 00000A81  50				push	EAX
 00000A82  33 C0			xor	EAX,EAX
 00000A84  5A				pop	EDX
 00000A85  3B D0			cmp	EDX,EAX
 00000A87  0F 9C C0			setl	AL
 00000A8A  84 C0			test	AL,AL
 00000A8C  74 0A			jz	 $L000974
 00000A8E  8D 1D 00000824 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 00000A94  8B 03			mov	EAX,dword ptr [EBX]
 00000A96  EB 02			jmp	 $L000975
 00000A98			$L000974:
 00000A98  33 C0			xor	EAX,EAX
 00000A9A			$L000975:
 00000A9A  F8				clc	
 00000A9B  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000AA1  01 03			add	dword ptr [EBX],EAX

				;{40}:return UnitTesting::Rnd::seed % UnitTesting::Rnd::m
 00000AA3  8D 1D 0000081C R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00000AA9  8B 03			mov	EAX,dword ptr [EBX]
 00000AAB  50				push	EAX
 00000AAC  8D 1D 00000824 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 00000AB2  8B 03			mov	EAX,dword ptr [EBX]
 00000AB4  8B C8			mov	ECX,EAX
 00000AB6  58				pop	EAX
 00000AB7  33 D2			xor	EDX,EDX
 00000AB9  F7 F9			idiv	ECX
 00000ABB  8B C2			mov	EAX,EDX 
 00000ABD  EB 00			jmp	OFFSET $L000465
				;}
 00000ABF			$L000465:

 00000ABF  5F				pop	EDI
 00000AC0  5E				pop	ESI 
 00000AC1  5B				pop	EBX 
 00000AC2  C9				leave	
 00000AC3  C3				ret	
 00000AC4			UnitTesting_Rnd_NextIntEx ENDP

 00000AC4			UnitTesting_Shape PROC NEAR 
				;void UnitTesting::Shape(void);
 00000AC4  55				push	EBP
 00000AC5  8B EC			mov	EBP,ESP
 00000AC7  51				push	ECX 
 00000AC8  53				push	EBX 
 00000AC9  56				push	ESI 
 00000ACA  57				push	EDI 
 00000ACB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ACE  C7 01 00000010 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Shape 

 00000AD4  5F				pop	EDI
 00000AD5  5E				pop	ESI 
 00000AD6  5B				pop	EBX 
 00000AD7  C9				leave	
 00000AD8  C3				ret	
 00000AD9			UnitTesting_Shape ENDP

 00000AD9			UnitTesting_Square_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00000AD9  55				push	EBP
 00000ADA  8B EC			mov	EBP,ESP
 00000ADC  51				push	ECX 
 00000ADD  53				push	EBX 
 00000ADE  56				push	ESI 
 00000ADF  57				push	EDI 
				;{

				;{122}:return Width * Height
 00000AE0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000AE3  E8 000000A5			call	 UnitTesting_Square_get_Width
 00000AE8  50				push	EAX
 00000AE9  52				push	EDX 
 00000AEA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000AED  E8 00000038			call	 UnitTesting_Square_get_Height
 00000AF2  9B DB E2			fclex
 00000AF5  50				push	EAX
 00000AF6  52				push	EDX 
 00000AF7  DD 04 24			fld	qword ptr [ESP]
 00000AFA  59				pop	ECX
 00000AFB  59				pop	ECX 
 00000AFC  DC 0C 24			fmul	qword ptr [ESP]
 00000AFF  DD 1C 24			fstp	qword ptr [ESP]
 00000B02  5A				pop	EDX
 00000B03  58				pop	EAX 
 00000B04  EB 00			jmp	OFFSET $L000609
				;}
 00000B06			$L000609:

 00000B06  5F				pop	EDI
 00000B07  5E				pop	ESI 
 00000B08  5B				pop	EBX 
 00000B09  C9				leave	
 00000B0A  C3				ret	
 00000B0B			UnitTesting_Square_ComputeArea ENDP

 00000B0B			UnitTesting_Square_Draw PROC NEAR 
				;void Draw(void);
 00000B0B  55				push	EBP
 00000B0C  8B EC			mov	EBP,ESP
 00000B0E  51				push	ECX 
 00000B0F  53				push	EBX 
 00000B10  56				push	ESI 
 00000B11  57				push	EDI 
				;{

				;{135}:Console::WriteLn("Drawing a Square!");
 00000B12  8D 05 000004BF R		lea	EAX,OFFSET $S000614
 00000B18  6A 00			push	000000000h
 00000B1A  50				push	EAX 
 00000B1B  E8 00000000 E		call	 Console_WriteString
 00000B20  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B25			$L000613:

 00000B25  5F				pop	EDI
 00000B26  5E				pop	ESI 
 00000B27  5B				pop	EBX 
 00000B28  C9				leave	
 00000B29  C3				ret	
 00000B2A			UnitTesting_Square_Draw ENDP

 00000B2A			UnitTesting_Square_get_Height PROC NEAR 
				;double get::Height(void);
 00000B2A  55				push	EBP
 00000B2B  8B EC			mov	EBP,ESP
 00000B2D  51				push	ECX 
 00000B2E  53				push	EBX 
 00000B2F  56				push	ESI 
 00000B30  57				push	EDI 
				;{

				;{112}:return dHeight
 00000B31  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B34  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00000B37  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00000B3A  EB 00			jmp	OFFSET $L000606
				;}
 00000B3C			$L000606:

 00000B3C  5F				pop	EDI
 00000B3D  5E				pop	ESI 
 00000B3E  5B				pop	EBX 
 00000B3F  C9				leave	
 00000B40  C3				ret	
 00000B41			UnitTesting_Square_get_Height ENDP

 00000B41			UnitTesting_Square_put_Height PROC NEAR 
				;void put::Height(double value);
 00000B41  55				push	EBP
 00000B42  8B EC			mov	EBP,ESP
 00000B44  51				push	ECX 
 00000B45  53				push	EBX 
 00000B46  56				push	ESI 
 00000B47  57				push	EDI 
				;{

				;{117}:dHeight= value;
 00000B48  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000B4B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000B4E  50				push	EAX
 00000B4F  52				push	EDX 
 00000B50  DD 04 24			fld	qword ptr [ESP]
 00000B53  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B56  8D 59 0C			lea	EBX,dword ptr [ECX+000Ch]
 00000B59  DD 1B			fstp	qword ptr [EBX]
				;}
 00000B5B			$L000607:
 00000B5B  5A				pop	EDX
 00000B5C  58				pop	EAX 

 00000B5D  5F				pop	EDI
 00000B5E  5E				pop	ESI 
 00000B5F  5B				pop	EBX 
 00000B60  C9				leave	
 00000B61  C2 0008			retn	000000008h
 00000B64			UnitTesting_Square_put_Height ENDP

 00000B64			UnitTesting_Square_Name PROC NEAR 
				;string Name(void);
 00000B64  55				push	EBP
 00000B65  8B EC			mov	EBP,ESP
 00000B67  51				push	ECX 
 00000B68  53				push	EBX 
 00000B69  56				push	ESI 
 00000B6A  57				push	EDI 
				;{

				;{130}:return "Square"
 00000B6B  8D 05 00000620 R		lea	EAX,OFFSET $S000612
 00000B71  EB 00			jmp	OFFSET $L000611
				;}
 00000B73			$L000611:

 00000B73  5F				pop	EDI
 00000B74  5E				pop	ESI 
 00000B75  5B				pop	EBX 
 00000B76  C9				leave	
 00000B77  C3				ret	
 00000B78			UnitTesting_Square_Name ENDP

 00000B78			UnitTesting_Square_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00000B78  55				push	EBP
 00000B79  8B EC			mov	EBP,ESP
 00000B7B  51				push	ECX 
 00000B7C  53				push	EBX 
 00000B7D  56				push	ESI 
 00000B7E  57				push	EDI 
				;{

				;{126}:return UnitTesting::stSquare
 00000B7F  B8 00000002			mov	EAX,000000002h
 00000B84  33 D2			xor	EDX,EDX
 00000B86  EB 00			jmp	OFFSET $L000610
				;}
 00000B88			$L000610:

 00000B88  5F				pop	EDI
 00000B89  5E				pop	ESI 
 00000B8A  5B				pop	EBX 
 00000B8B  C9				leave	
 00000B8C  C3				ret	
 00000B8D			UnitTesting_Square_Type ENDP

 00000B8D			UnitTesting_Square_get_Width PROC NEAR 
				;double get::Width(void);
 00000B8D  55				push	EBP
 00000B8E  8B EC			mov	EBP,ESP
 00000B90  51				push	ECX 
 00000B91  53				push	EBX 
 00000B92  56				push	ESI 
 00000B93  57				push	EDI 
				;{

				;{102}:return dWidth
 00000B94  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000B97  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000B9A  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000B9D  EB 00			jmp	OFFSET $L000602
				;}
 00000B9F			$L000602:

 00000B9F  5F				pop	EDI
 00000BA0  5E				pop	ESI 
 00000BA1  5B				pop	EBX 
 00000BA2  C9				leave	
 00000BA3  C3				ret	
 00000BA4			UnitTesting_Square_get_Width ENDP

 00000BA4			UnitTesting_Square_put_Width PROC NEAR 
				;void put::Width(double value);
 00000BA4  55				push	EBP
 00000BA5  8B EC			mov	EBP,ESP
 00000BA7  51				push	ECX 
 00000BA8  53				push	EBX 
 00000BA9  56				push	ESI 
 00000BAA  57				push	EDI 
				;{

				;{107}:dWidth= value;
 00000BAB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000BAE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000BB1  50				push	EAX
 00000BB2  52				push	EDX 
 00000BB3  DD 04 24			fld	qword ptr [ESP]
 00000BB6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000BB9  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00000BBC  DD 1B			fstp	qword ptr [EBX]
				;}
 00000BBE			$L000603:
 00000BBE  5A				pop	EDX
 00000BBF  58				pop	EAX 

 00000BC0  5F				pop	EDI
 00000BC1  5E				pop	ESI 
 00000BC2  5B				pop	EBX 
 00000BC3  C9				leave	
 00000BC4  C2 0008			retn	000000008h
 00000BC7			UnitTesting_Square_put_Width ENDP

 00000BC7			UnitTesting_Square PROC NEAR 
				;void UnitTesting::Square(void);
 00000BC7  55				push	EBP
 00000BC8  8B EC			mov	EBP,ESP
 00000BCA  51				push	ECX 
 00000BCB  53				push	EBX 
 00000BCC  56				push	ESI 
 00000BCD  57				push	EDI 
 00000BCE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000BD1  E8 FFFFFEEE			call	 UnitTesting_Shape ;base constructor call
 00000BD6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000BD9  C7 01 00000020 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Square 
 00000BDF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000BE2  E8 00002050			call	 __member_Init@UnitTesting_Square 

 00000BE7  5F				pop	EDI
 00000BE8  5E				pop	ESI 
 00000BE9  5B				pop	EBX 
 00000BEA  C9				leave	
 00000BEB  C3				ret	
 00000BEC			UnitTesting_Square ENDP

 00000BEC			UnitTesting_SummationSeries_Ackermman PROC NEAR 
				;int UnitTesting::SummationSeries::Ackermman(int m, int n);
 00000BEC  55				push	EBP
 00000BED  8B EC			mov	EBP,ESP
 00000BEF  51				push	ECX 
 00000BF0  53				push	EBX 
 00000BF1  56				push	ESI 
 00000BF2  57				push	EDI 
				;{

				;{77}:if(m == 0 && n >= 0)
 00000BF3  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000BF6  50				push	EAX
 00000BF7  33 C0			xor	EAX,EAX
 00000BF9  5A				pop	EDX
 00000BFA  3B D0			cmp	EDX,EAX
 00000BFC  0F 94 C0			setz	AL
 00000BFF  50				push	EAX
 00000C00  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C03  50				push	EAX
 00000C04  33 C0			xor	EAX,EAX
 00000C06  5A				pop	EDX
 00000C07  3B D0			cmp	EDX,EAX
 00000C09  0F 9D C0			setge	AL
 00000C0C  5A				pop	EDX
 00000C0D  23 C2			and	EAX,EDX
 00000C0F  84 C0			test	AL,AL
 00000C11  74 0E			jz	OFFSET $L000978

				;{78}:return n + 1
 00000C13  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C16  50				push	EAX
 00000C17  B8 00000001			mov	EAX,000000001h
 00000C1C  5A				pop	EDX
 00000C1D  03 C2			add	EAX,EDX
 00000C1F  EB 6E			jmp	OFFSET $L000542

				; else {
 00000C21			$L000978:

				;{79}:if(m >= 1 && n == 0)
 00000C21  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C24  50				push	EAX
 00000C25  B8 00000001			mov	EAX,000000001h
 00000C2A  5A				pop	EDX
 00000C2B  3B D0			cmp	EDX,EAX
 00000C2D  0F 9D C0			setge	AL
 00000C30  50				push	EAX
 00000C31  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C34  50				push	EAX
 00000C35  33 C0			xor	EAX,EAX
 00000C37  5A				pop	EDX
 00000C38  3B D0			cmp	EDX,EAX
 00000C3A  0F 94 C0			setz	AL
 00000C3D  5A				pop	EDX
 00000C3E  23 C2			and	EAX,EDX
 00000C40  84 C0			test	AL,AL
 00000C42  74 1C			jz	OFFSET $L000980

				;{80}:return UnitTesting::SummationSeries::Ackermman(m - 1, 1)
 00000C44  B8 00000001			mov	EAX,000000001h
 00000C49  50				push	EAX 
 00000C4A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C4D  50				push	EAX
 00000C4E  B8 00000001			mov	EAX,000000001h
 00000C53  5A				pop	EDX
 00000C54  2B D0			sub	EDX,EAX
 00000C56  8B C2			mov	EAX,EDX
 00000C58  50				push	EAX
 00000C59  E8 FFFFFF8E			call	 UnitTesting_SummationSeries_Ackermman
 00000C5E  EB 2F			jmp	OFFSET $L000542

				; else {
 00000C60			$L000980:

				;{82}:return UnitTesting::SummationSeries::Ackermman(m - 1, UnitTesting::SummationSeries::Ackermman(m, n - 1))
 00000C60  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000C63  50				push	EAX
 00000C64  B8 00000001			mov	EAX,000000001h
 00000C69  5A				pop	EDX
 00000C6A  2B D0			sub	EDX,EAX
 00000C6C  8B C2			mov	EAX,EDX
 00000C6E  50				push	EAX 
 00000C6F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C72  50				push	EAX
 00000C73  E8 FFFFFF74			call	 UnitTesting_SummationSeries_Ackermman
 00000C78  50				push	EAX 

 00000C79  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C7C  50				push	EAX
 00000C7D  B8 00000001			mov	EAX,000000001h
 00000C82  5A				pop	EDX
 00000C83  2B D0			sub	EDX,EAX
 00000C85  8B C2			mov	EAX,EDX
 00000C87  50				push	EAX
 00000C88  E8 FFFFFF5F			call	 UnitTesting_SummationSeries_Ackermman
 00000C8D  EB 00			jmp	OFFSET $L000542
 00000C8F			$L000981:

				; }
 00000C8F			$L000979:

				; }
				;}
 00000C8F			$L000542:

 00000C8F  5F				pop	EDI
 00000C90  5E				pop	ESI 
 00000C91  5B				pop	EBX 
 00000C92  C9				leave	
 00000C93  C2 0008			retn	000000008h
 00000C96			UnitTesting_SummationSeries_Ackermman ENDP

 00000C96			UnitTesting_SummationSeries_ComputeRenderGamma PROC NEAR 
				;void UnitTesting::SummationSeries::ComputeRenderGamma(void);
 00000C96  55				push	EBP
 00000C97  8B EC			mov	EBP,ESP
 00000C99  83 EC 10			sub	ESP,000000010h
 00000C9C  53				push	EBX 
 00000C9D  56				push	ESI 
 00000C9E  57				push	EDI 
 00000C9F  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000CA2  B9 00000003			mov	ECX,000000003h
 00000CA7  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000CAC  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{68}:result= 0;
 00000CAE  33 C0			xor	EAX,EAX
 00000CB0  50				push	EAX
 00000CB1  DB 04 24			fild	dword ptr [ESP]
 00000CB4  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{69}:for(i= 1; i <= 500000; ++i)
 00000CB7  B8 00000001			mov	EAX,000000001h
 00000CBC  5A				pop	EDX
 00000CBD  58				pop	EAX 
 00000CBE  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000CC1  EB 06			jmp	OFFSET $L000982
 00000CC3			$L000983:
 00000CC3  FF 45 F4			inc	dword ptr [EBP-12]
 00000CC6  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000CC9			$L000982:
 00000CC9  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000CCC  50				push	EAX
 00000CCD  B8 0007A120			mov	EAX,00007A120h
 00000CD2  5A				pop	EDX
 00000CD3  3B D0			cmp	EDX,EAX
 00000CD5  0F 9E C0			setle	AL
 00000CD8  85 C0			test	EAX,EAX
 00000CDA  74 74			jz	OFFSET $L000984

				;{70}:result+= 1.0 / i - Math::log2((i + 1.0) / i);
 00000CDC  D9 E8			fld1
 00000CDE  51				push	ECX
 00000CDF  51				push	ECX 
 00000CE0  DD 1C 24			fstp	qword ptr [ESP]
 00000CE3  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000CE6  9B DB E2			fclex
 00000CE9  50				push	EAX
 00000CEA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000CF0  50				push	EAX
 00000CF1  52				push	EDX 
 00000CF2  DD 04 24			fld	qword ptr [ESP]
 00000CF5  59				pop	ECX
 00000CF6  59				pop	ECX 
 00000CF7  DC 3C 24			fdivr	qword ptr [ESP]
 00000CFA  DD 1C 24			fstp	qword ptr [ESP]

 00000CFD  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000D00  50				push	EAX
 00000D01  D9 E8			fld1
 00000D03  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000D09  50				push	EAX
 00000D0A  52				push	EDX 
 00000D0B  DC 04 24			fadd	qword ptr [ESP]
 00000D0E  DD 1C 24			fstp	qword ptr [ESP]
 00000D11  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000D14  9B DB E2			fclex
 00000D17  50				push	EAX
 00000D18  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000D1E  50				push	EAX
 00000D1F  52				push	EDX 
 00000D20  DD 04 24			fld	qword ptr [ESP]
 00000D23  59				pop	ECX
 00000D24  59				pop	ECX 
 00000D25  DC 3C 24			fdivr	qword ptr [ESP]
 00000D28  DD 1C 24			fstp	qword ptr [ESP]

 00000D2B  E8 00000000 E		call	 Math_log2
 00000D30  50				push	EAX
 00000D31  52				push	EDX 
 00000D32  DD 04 24			fld	qword ptr [ESP]
 00000D35  59				pop	ECX
 00000D36  59				pop	ECX 
 00000D37  DD 04 24			fld	qword ptr [ESP]
 00000D3A  D8 E1			fsub	st,st(1)
 00000D3C  DD 1C 24			fstp	qword ptr [ESP]
 00000D3F  F8				clc	
 00000D40  DD 04 24			fld	qword ptr [ESP]
 00000D43  5A				pop	EDX
 00000D44  58				pop	EAX 
 00000D45  DC 45 F8			fadd	qword ptr [EBP-0008h]
 00000D48  DD 5D F8			fstp	qword ptr [EBP-0008h]
 00000D4B  E9 FFFFFF73			jmp	OFFSET $L000983 
 00000D50			$L000984:

				;{72}:Console::WriteLn("Gamma y = ", result);
 00000D50  8D 05 000004E5 R		lea	EAX,OFFSET $S000541
 00000D56  6A 00			push	000000000h
 00000D58  50				push	EAX 
 00000D59  E8 00000000 E		call	 Console_WriteString
 00000D5E  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00000D61  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00000D64  50				push	EAX 
 00000D65  52				push	EDX 
 00000D66  E8 00000000 E		call	 Console_WriteDouble 
 00000D6B  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000D70			$L000536:

 00000D70  5F				pop	EDI
 00000D71  5E				pop	ESI 
 00000D72  5B				pop	EBX 
 00000D73  C9				leave	
 00000D74  C3				ret	
 00000D75			UnitTesting_SummationSeries_ComputeRenderGamma ENDP

 00000D75			UnitTesting_SummationSeries_GeometricSeriesClosedSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesClosedSum(int x, signed n);
 00000D75  55				push	EBP
 00000D76  8B EC			mov	EBP,ESP
 00000D78  51				push	ECX 
 00000D79  53				push	EBX 
 00000D7A  56				push	ESI 
 00000D7B  57				push	EDI 
				;{

				;{62}:return FloatingPoint::ToInt((Math::Pow(x, n + 1) - 1) / (x - 1))

 00000D7C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000D7F  50				push	EAX
 00000D80  B8 00000001			mov	EAX,000000001h
 00000D85  5A				pop	EDX
 00000D86  03 C2			add	EAX,EDX
 00000D88  50				push	EAX 
 00000D89  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000D8F  50				push	EAX
 00000D90  52				push	EDX 
 00000D91  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D94  50				push	EAX
 00000D95  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000D9B  50				push	EAX
 00000D9C  52				push	EDX 
					
 00000D9D  E8 00000000 E	call	 Math_Pow
 00000DA2  50				push	EAX
 00000DA3  52				push	EDX 
 00000DA4  B8 00000001			mov	EAX,000000001h
 00000DA9  50				push	EAX
 00000DAA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000DB0  50				push	EAX
 00000DB1  52				push	EDX 
 00000DB2  DD 04 24			fld	qword ptr [ESP]
 00000DB5  59				pop	ECX
 00000DB6  59				pop	ECX 
 00000DB7  DD 04 24			fld	qword ptr [ESP]
 00000DBA  D8 E1			fsub	st,st(1)
 00000DBC  DD 1C 24			fstp	qword ptr [ESP]
 00000DBF  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DC2  50				push	EAX
 00000DC3  B8 00000001			mov	EAX,000000001h
 00000DC8  5A				pop	EDX
 00000DC9  2B D0			sub	EDX,EAX
 00000DCB  8B C2			mov	EAX,EDX
 00000DCD  9B DB E2			fclex
 00000DD0  50				push	EAX
 00000DD1  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000DD7  50				push	EAX
 00000DD8  52				push	EDX 
 00000DD9  DD 04 24			fld	qword ptr [ESP]
 00000DDC  59				pop	ECX
 00000DDD  59				pop	ECX 
 00000DDE  DC 3C 24			fdivr	qword ptr [ESP]
 00000DE1  DD 1C 24			fstp	qword ptr [ESP]

 00000DE4  E8 00000000 E		call	 FloatingPoint_ToInt
 00000DE9  EB 00			jmp	OFFSET $L000533
				;}
 00000DEB			$L000533:

 00000DEB  5F				pop	EDI
 00000DEC  5E				pop	ESI 
 00000DED  5B				pop	EBX 
 00000DEE  C9				leave	
 00000DEF  C2 0008			retn	000000008h
 00000DF2			UnitTesting_SummationSeries_GeometricSeriesClosedSum ENDP

 00000DF2			UnitTesting_SummationSeries_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesSum(int x, signed n);
 00000DF2  55				push	EBP
 00000DF3  8B EC			mov	EBP,ESP
 00000DF5  83 EC 18			sub	ESP,000000018h
 00000DF8  53				push	EBX 
 00000DF9  56				push	ESI 
 00000DFA  57				push	EDI 
 00000DFB  8D 7D EC			lea	EDI,dword ptr [EBP-0014h]
 00000DFE  B9 00000005			mov	ECX,000000005h
 00000E03  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000E08  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{21}:nx= FloatingPoint::ToInt(3.145464654);
 00000E0A  BA 5F5D3B4E			mov	EDX,05F5D3B4Eh
 00000E0F  B8 400929E9			mov	EAX,0400929E9h 
 00000E14  50				push	EAX
 00000E15  52				push	EDX 
 00000E16  E8 00000000 E		call	 FloatingPoint_ToInt
 00000E1B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{23}:sum= 0;
 00000E1E  33 C0			xor	EAX,EAX
 00000E20  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{24}:for(i= 0; i <= n; ++i)
 00000E23  33 C0			xor	EAX,EAX
 00000E25  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00000E28  EB 06			jmp	OFFSET $L000985
 00000E2A			$L000986:
 00000E2A  FF 45 F4			inc	dword ptr [EBP-12]
 00000E2D  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00000E30			$L000985:
 00000E30  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E33  50				push	EAX
 00000E34  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000E37  5A				pop	EDX
 00000E38  3B D0			cmp	EDX,EAX
 00000E3A  0F 9E C0			setle	AL
 00000E3D  85 C0			test	EAX,EAX
 00000E3F  74 3A			jz	OFFSET $L000987
				;{

				;{26}:prod= 1;
 00000E41  B8 00000001			mov	EAX,000000001h
 00000E46  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{27}:for(j= 0; j < i; ++j)
 00000E49  33 C0			xor	EAX,EAX
 00000E4B  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 00000E4E  EB 06			jmp	OFFSET $L000988
 00000E50			$L000989:
 00000E50  FF 45 EC			inc	dword ptr [EBP-20]
 00000E53  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00000E56			$L000988:
 00000E56  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00000E59  50				push	EAX
 00000E5A  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000E5D  5A				pop	EDX
 00000E5E  3B D0			cmp	EDX,EAX
 00000E60  0F 9C C0			setl	AL
 00000E63  85 C0			test	EAX,EAX
 00000E65  74 0B			jz	OFFSET $L000990

				;{28}:prod*= x;
 00000E67  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E6A  F7 6D F0			imul	dword ptr [EBP-0010h]
 00000E6D  89 45 F0			mov	dword ptr [EBP-0010h],EAX
 00000E70  EB DE			jmp	OFFSET $L000989 
 00000E72			$L000990:

				;{29}:sum+= prod;
 00000E72  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000E75  F8				clc	
 00000E76  01 45 F8			add	dword ptr [EBP-0008h],EAX
				;}
 00000E79  EB AF			jmp	OFFSET $L000986 
 00000E7B			$L000987:

				;{31}:return sum
 00000E7B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000E7E  EB 00			jmp	OFFSET $L000512
				;}
 00000E80			$L000512:

 00000E80  5F				pop	EDI
 00000E81  5E				pop	ESI 
 00000E82  5B				pop	EBX 
 00000E83  C9				leave	
 00000E84  C2 0008			retn	000000008h
 00000E87			UnitTesting_SummationSeries_GeometricSeriesSum ENDP

 00000E87			UnitTesting_SummationSeries_Horner_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::GeometricSeriesSum(int x, signed n);
 00000E87  55				push	EBP
 00000E88  8B EC			mov	EBP,ESP
 00000E8A  83 EC 0C			sub	ESP,00000000Ch
 00000E8D  53				push	EBX 
 00000E8E  56				push	ESI 
 00000E8F  57				push	EDI 
 00000E90  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00000E93  B9 00000002			mov	ECX,000000002h
 00000E98  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000E9D  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{49}:sum= 0;
 00000E9F  33 C0			xor	EAX,EAX
 00000EA1  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{50}:for(i= 0; i <= n; ++i)
 00000EA4  33 C0			xor	EAX,EAX
 00000EA6  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000EA9  EB 06			jmp	OFFSET $L000991
 00000EAB			$L000992:
 00000EAB  FF 45 F8			inc	dword ptr [EBP-8]
 00000EAE  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000EB1			$L000991:
 00000EB1  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000EB4  50				push	EAX
 00000EB5  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000EB8  5A				pop	EDX
 00000EB9  3B D0			cmp	EDX,EAX
 00000EBB  0F 9E C0			setle	AL
 00000EBE  85 C0			test	EAX,EAX
 00000EC0  74 36			jz	OFFSET $L000993

				;{51}:sum= sum * x + 1;
 00000EC2  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000EC5  50				push	EAX
 00000EC6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000EC9  59				pop	ECX
 00000ECA  99				cdq	
 00000ECB  0F AF C1			imul	EAX,ECX
 00000ECE  50				push	EAX
 00000ECF  52				push	EDX 
 00000ED0  B8 00000001			mov	EAX,000000001h
 00000ED5  50				push	EAX
 00000ED6  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00000EDC  50				push	EAX
 00000EDD  52				push	EDX 
 00000EDE  DD 04 24			fld	qword ptr [ESP]
 00000EE1  59				pop	ECX
 00000EE2  59				pop	ECX 
 00000EE3  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00000EE9  50				push	EAX
 00000EEA  52				push	EDX 
 00000EEB  DC 04 24			fadd	qword ptr [ESP]
 00000EEE  DF 3C 24			fistp	qword ptr [ESP]
 00000EF1  5A				pop	EDX
 00000EF2  58				pop	EAX 
 00000EF3  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000EF6  EB B3			jmp	OFFSET $L000992 
 00000EF8			$L000993:

				;{53}:return sum
 00000EF8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000EFB  EB 00			jmp	OFFSET $L000528
				;}
 00000EFD			$L000528:

 00000EFD  5F				pop	EDI
 00000EFE  5E				pop	ESI 
 00000EFF  5B				pop	EBX 
 00000F00  C9				leave	
 00000F01  C2 0008			retn	000000008h
 00000F04			UnitTesting_SummationSeries_Horner_GeometricSeriesSum ENDP

 00000F04			UnitTesting_SummationSeries_Horner_Horner PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::Horner(int [] a, signed n, int x);
 00000F04  55				push	EBP
 00000F05  8B EC			mov	EBP,ESP
 00000F07  83 EC 0C			sub	ESP,00000000Ch
 00000F0A  53				push	EBX 
 00000F0B  56				push	ESI 
 00000F0C  57				push	EDI 
 00000F0D  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00000F10  B9 00000002			mov	ECX,000000002h
 00000F15  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000F1A  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{39}:result= a[n];
 00000F1C  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000F1F  8D 03			lea	EAX,dword ptr [EBX]
 00000F21  8B F0			mov	ESI,EAX
 00000F23  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000F26  8B C8			mov	ECX,EAX
 00000F28  8B 04 8E			mov	EAX,dword ptr [ESI+ECX*0004h] 
 00000F2B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{41}:for(i= n - 1; i >= 0; --i)
 00000F2E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000F31  50				push	EAX
 00000F32  B8 00000001			mov	EAX,000000001h
 00000F37  5A				pop	EDX
 00000F38  2B D0			sub	EDX,EAX
 00000F3A  8B C2			mov	EAX,EDX
 00000F3C  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000F3F  EB 06			jmp	OFFSET $L000994
 00000F41			$L000995:
 00000F41  FF 4D F8			dec	dword ptr [EBP-8]
 00000F44  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000F47			$L000994:
 00000F47  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000F4A  50				push	EAX
 00000F4B  33 C0			xor	EAX,EAX
 00000F4D  5A				pop	EDX
 00000F4E  3B D0			cmp	EDX,EAX
 00000F50  0F 9D C0			setge	AL
 00000F53  85 C0			test	EAX,EAX
 00000F55  74 1E			jz	OFFSET $L000996

				;{42}:result*= x + a[i];
 00000F57  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000F5A  50				push	EAX
 00000F5B  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000F5E  8D 03			lea	EAX,dword ptr [EBX]
 00000F60  8B F0			mov	ESI,EAX
 00000F62  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000F65  8B C8			mov	ECX,EAX
 00000F67  8B 04 8E			mov	EAX,dword ptr [ESI+ECX*0004h] 
 00000F6A  5A				pop	EDX
 00000F6B  03 C2			add	EAX,EDX
 00000F6D  F7 6D FC			imul	dword ptr [EBP-0004h]
 00000F70  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000F73  EB CC			jmp	OFFSET $L000995 
 00000F75			$L000996:

				;{43}:return result
 00000F75  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000F78  EB 00			jmp	OFFSET $L000522
				;}
 00000F7A			$L000522:

 00000F7A  5F				pop	EDI
 00000F7B  5E				pop	ESI 
 00000F7C  5B				pop	EBX 
 00000F7D  C9				leave	
 00000F7E  C2 000C			retn	00000000Ch
 00000F81			UnitTesting_SummationSeries_Horner_Horner ENDP

 00000F81			UnitTesting_SummationSeries_SimpleSum PROC NEAR 
				;signed UnitTesting::SummationSeries::SimpleSum(signed n);
 00000F81  55				push	EBP
 00000F82  8B EC			mov	EBP,ESP
 00000F84  83 EC 0C			sub	ESP,00000000Ch
 00000F87  53				push	EBX 
 00000F88  56				push	ESI 
 00000F89  57				push	EDI 
 00000F8A  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00000F8D  B9 00000002			mov	ECX,000000002h
 00000F92  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000F97  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{11}:result= 0;
 00000F99  33 C0			xor	EAX,EAX
 00000F9B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{12}:for(i= 1; i <= n; ++i)
 00000F9E  B8 00000001			mov	EAX,000000001h
 00000FA3  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000FA6  EB 06			jmp	OFFSET $L000997
 00000FA8			$L000998:
 00000FA8  FF 45 F8			inc	dword ptr [EBP-8]
 00000FAB  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000FAE			$L000997:
 00000FAE  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000FB1  50				push	EAX
 00000FB2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000FB5  5A				pop	EDX
 00000FB6  3B D0			cmp	EDX,EAX
 00000FB8  0F 9E C0			setle	AL
 00000FBB  85 C0			test	EAX,EAX
 00000FBD  74 09			jz	OFFSET $L000999

				;{13}:result+= i;
 00000FBF  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000FC2  F8				clc	
 00000FC3  01 45 FC			add	dword ptr [EBP-0004h],EAX
 00000FC6  EB E0			jmp	OFFSET $L000998 
 00000FC8			$L000999:

				;{15}:return result
 00000FC8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000FCB  EB 00			jmp	OFFSET $L000508
				;}
 00000FCD			$L000508:

 00000FCD  5F				pop	EDI
 00000FCE  5E				pop	ESI 
 00000FCF  5B				pop	EBX 
 00000FD0  C9				leave	
 00000FD1  C2 0004			retn	000000004h
 00000FD4			UnitTesting_SummationSeries_SimpleSum ENDP

 00000FD4			UnitTesting_TestArrays_get_Name PROC NEAR 
				;string get::Name(void);
 00000FD4  55				push	EBP
 00000FD5  8B EC			mov	EBP,ESP
 00000FD7  51				push	ECX 
 00000FD8  53				push	EBX 
 00000FD9  56				push	ESI 
 00000FDA  57				push	EDI 
				;{

				;{474}:return name
 00000FDB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FDE  8B 01			mov	EAX,dword ptr [ECX]
 00000FE0  EB 00			jmp	OFFSET $L000828
				;}
 00000FE2			$L000828:

 00000FE2  5F				pop	EDI
 00000FE3  5E				pop	ESI 
 00000FE4  5B				pop	EBX 
 00000FE5  C9				leave	
 00000FE6  C3				ret	
 00000FE7			UnitTesting_TestArrays_get_Name ENDP

 00000FE7			UnitTesting_TestArrays_put_Name PROC NEAR 
				;void put::Name(string value);
 00000FE7  55				push	EBP
 00000FE8  8B EC			mov	EBP,ESP
 00000FEA  51				push	ECX 
 00000FEB  53				push	EBX 
 00000FEC  56				push	ESI 
 00000FED  57				push	EDI 
;{

				;{478}:name= value;
 00000FEE  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000FF1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FF4  8D 19			lea	EBX,dword ptr [ECX]
 00000FF6  89 03			mov	dword ptr [EBX],EAX
				;}
 00000FF8			$L000829:

 00000FF8  5F				pop	EDI
 00000FF9  5E				pop	ESI 
 00000FFA  5B				pop	EBX 
 00000FFB  C9				leave	
 00000FFC  C2 0004			retn	000000004h
 00000FFF			UnitTesting_TestArrays_put_Name ENDP

 00000FFF			UnitTesting_TestArrays PROC NEAR 
				;void UnitTesting::TestArrays(void);
 00000FFF  55				push	EBP
 00001000  8B EC			mov	EBP,ESP
 00001002  51				push	ECX 
 00001003  53				push	EBX 
 00001004  56				push	ESI 
 00001005  57				push	EDI 

 00001006  5F				pop	EDI
 00001007  5E				pop	ESI 
 00001008  5B				pop	EBX 
 00001009  C9				leave	
 0000100A  C3				ret	
 0000100B			UnitTesting_TestArrays ENDP

 0000100B			UnitTesting_TestArrays_DoTest PROC NEAR 
				;void UnitTesting::TestArrays::DoTest(void);
 0000100B  55				push	EBP
 0000100C  8B EC			mov	EBP,ESP
 0000100E  81 EC 000001C0		sub	ESP,0000001C0h
 00001014  53				push	EBX 
 00001015  56				push	ESI 
 00001016  57				push	EDI 
 00001017  8D BD FFFFFE44		lea	EDI,dword ptr [EBP-01BCh]
 0000101D  B9 0000006F			mov	ECX,00000006Fh
 00001022  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001027  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{506}:array2;
 00001029  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]

				;{508}:array2[0].Width= 100;
 0000102F  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001035  8B F0			mov	ESI,EAX
 00001037  33 C0			xor	EAX,EAX
 00001039  8B C8			mov	ECX,EAX
 0000103B  6B C9 30			imul	ECX,000000030h
 0000103E  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001041  8B C8			mov	ECX,EAX 
 00001043  51				push	ECX
 00001044  B8 00000064			mov	EAX,000000064h
 00001049  59				pop	ECX
 0000104A  50				push	EAX
 0000104B  0E E8 00000A2C		call	OFFSET UnitTesting_TestIntegers_put_Width

				;{509}:array2[0].Height= 200;
 00001051  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001057  8B F0			mov	ESI,EAX
 00001059  33 C0			xor	EAX,EAX
 0000105B  8B C8			mov	ECX,EAX
 0000105D  6B C9 30			imul	ECX,000000030h
 00001060  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001063  8B C8			mov	ECX,EAX 
 00001065  51				push	ECX
 00001066  B8 000000C8			mov	EAX,0000000C8h
 0000106B  59				pop	ECX
 0000106C  50				push	EAX
 0000106D  0E E8 00000977		call	OFFSET UnitTesting_TestIntegers_put_Height

				;{511}:nArea= array2[0].Width;
 00001073  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001079  8B F0			mov	ESI,EAX
 0000107B  33 C0			xor	EAX,EAX
 0000107D  8B C8			mov	ECX,EAX
 0000107F  6B C9 30			imul	ECX,000000030h
 00001082  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001085  8B C8			mov	ECX,EAX 
 00001087  E8 000009DE			call	 UnitTesting_TestIntegers_get_Width
 0000108C  99				cdq	
 0000108D  89 95 FFFFFF38		mov	dword ptr [EBP-00C8h],EDX
 00001093  89 85 FFFFFF3C		mov	dword ptr [EBP-00C4h],EAX 

				;{513}:nArea= array2[0].Width * array2[0].Height;
 00001099  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 0000109F  8B F0			mov	ESI,EAX
 000010A1  33 C0			xor	EAX,EAX
 000010A3  8B C8			mov	ECX,EAX
 000010A5  6B C9 30			imul	ECX,000000030h
 000010A8  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000010AB  8B C8			mov	ECX,EAX 
 000010AD  E8 000009B8			call	 UnitTesting_TestIntegers_get_Width
 000010B2  50				push	EAX
 000010B3  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 000010B9  8B F0			mov	ESI,EAX
 000010BB  33 C0			xor	EAX,EAX
 000010BD  8B C8			mov	ECX,EAX
 000010BF  6B C9 30			imul	ECX,000000030h
 000010C2  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000010C5  8B C8			mov	ECX,EAX 
 000010C7  E8 0000090A			call	 UnitTesting_TestIntegers_get_Height
 000010CC  59				pop	ECX
 000010CD  99				cdq	
 000010CE  0F AF C1			imul	EAX,ECX
 000010D1  89 95 FFFFFF38		mov	dword ptr [EBP-00C8h],EDX
 000010D7  89 85 FFFFFF3C		mov	dword ptr [EBP-00C4h],EAX 

				;{515}:array2[0].member1= Math::pi();
 000010DD  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 000010E3  8B F0			mov	ESI,EAX
 000010E5  33 C0			xor	EAX,EAX
 000010E7  8B C8			mov	ECX,EAX
 000010E9  6B C9 30			imul	ECX,000000030h
 000010EC  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000010EF  8B C8			mov	ECX,EAX 
 000010F1  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 000010F4  50				push	EAX
 000010F5  E8 00000000 E		call	 Math_pi
 000010FA  50				push	EAX
 000010FB  52				push	EDX 
 000010FC  DD 04 24			fld	qword ptr [ESP]
 000010FF  5A				pop	EDX
 00001100  58				pop	EAX 
 00001101  5B				pop	EBX
 00001102  DD 1B			fstp	qword ptr [EBX]

				;{516}:array2[0].member1= Math::log_e_base2();
 00001104  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 0000110A  8B F0			mov	ESI,EAX
 0000110C  33 C0			xor	EAX,EAX
 0000110E  8B C8			mov	ECX,EAX
 00001110  6B C9 30			imul	ECX,000000030h
 00001113  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001116  8B C8			mov	ECX,EAX 
 00001118  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 0000111B  50				push	EAX
 0000111C  E8 00000000 E		call	 Math_log_e_base2
 00001121  50				push	EAX
 00001122  52				push	EDX 
 00001123  DD 04 24			fld	qword ptr [ESP]
 00001126  5A				pop	EDX
 00001127  58				pop	EAX 
 00001128  5B				pop	EBX
 00001129  DD 1B			fstp	qword ptr [EBX]

				;{519}:array2[1].Width= 100;
 0000112B  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001131  8B F0			mov	ESI,EAX
 00001133  B8 00000001			mov	EAX,000000001h
 00001138  8B C8			mov	ECX,EAX
 0000113A  6B C9 30			imul	ECX,000000030h
 0000113D  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001140  8B C8			mov	ECX,EAX 
 00001142  51				push	ECX
 00001143  B8 00000064			mov	EAX,000000064h
 00001148  59				pop	ECX
 00001149  50				push	EAX
 0000114A  0E E8 0000092D		call	OFFSET UnitTesting_TestIntegers_put_Width

				;{520}:array2[1].Height= 200;
 00001150  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001156  8B F0			mov	ESI,EAX
 00001158  B8 00000001			mov	EAX,000000001h
 0000115D  8B C8			mov	ECX,EAX
 0000115F  6B C9 30			imul	ECX,000000030h
 00001162  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001165  8B C8			mov	ECX,EAX 
 00001167  51				push	ECX
 00001168  B8 000000C8			mov	EAX,0000000C8h
 0000116D  59				pop	ECX
 0000116E  50				push	EAX
 0000116F  0E E8 00000875		call	OFFSET UnitTesting_TestIntegers_put_Height

				;{522}:nArea= array2[1].Width * array2[1].Height;
 00001175  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 0000117B  8B F0			mov	ESI,EAX
 0000117D  B8 00000001			mov	EAX,000000001h
 00001182  8B C8			mov	ECX,EAX
 00001184  6B C9 30			imul	ECX,000000030h
 00001187  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 0000118A  8B C8			mov	ECX,EAX 
 0000118C  E8 000008D9			call	 UnitTesting_TestIntegers_get_Width
 00001191  50				push	EAX
 00001192  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001198  8B F0			mov	ESI,EAX
 0000119A  B8 00000001			mov	EAX,000000001h
 0000119F  8B C8			mov	ECX,EAX
 000011A1  6B C9 30			imul	ECX,000000030h
 000011A4  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000011A7  8B C8			mov	ECX,EAX 
 000011A9  E8 00000828			call	 UnitTesting_TestIntegers_get_Height
 000011AE  59				pop	ECX
 000011AF  99				cdq	
 000011B0  0F AF C1			imul	EAX,ECX
 000011B3  89 95 FFFFFF38		mov	dword ptr [EBP-00C8h],EDX
 000011B9  89 85 FFFFFF3C		mov	dword ptr [EBP-00C4h],EAX 

				;{524}:array2[2].Width= 100;
 000011BF  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 000011C5  8B F0			mov	ESI,EAX
 000011C7  B8 00000002			mov	EAX,000000002h
 000011CC  8B C8			mov	ECX,EAX
 000011CE  6B C9 30			imul	ECX,000000030h
 000011D1  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000011D4  8B C8			mov	ECX,EAX 
 000011D6  51				push	ECX
 000011D7  B8 00000064			mov	EAX,000000064h
 000011DC  59				pop	ECX
 000011DD  50				push	EAX
 000011DE  0E E8 00000899		call	OFFSET UnitTesting_TestIntegers_put_Width

				;{525}:array2[2].Height= 200;
 000011E4  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 000011EA  8B F0			mov	ESI,EAX
 000011EC  B8 00000002			mov	EAX,000000002h
 000011F1  8B C8			mov	ECX,EAX
 000011F3  6B C9 30			imul	ECX,000000030h
 000011F6  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000011F9  8B C8			mov	ECX,EAX 
 000011FB  51				push	ECX
 000011FC  B8 000000C8			mov	EAX,0000000C8h
 00001201  59				pop	ECX
 00001202  50				push	EAX
 00001203  0E E8 000007E1		call	OFFSET UnitTesting_TestIntegers_put_Height

				;{527}:nArea= array2[2].Width * array2[2].Height;
 00001209  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 0000120F  8B F0			mov	ESI,EAX
 00001211  B8 00000002			mov	EAX,000000002h
 00001216  8B C8			mov	ECX,EAX
 00001218  6B C9 30			imul	ECX,000000030h
 0000121B  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 0000121E  8B C8			mov	ECX,EAX 
 00001220  E8 00000845			call	 UnitTesting_TestIntegers_get_Width
 00001225  50				push	EAX
 00001226  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 0000122C  8B F0			mov	ESI,EAX
 0000122E  B8 00000002			mov	EAX,000000002h
 00001233  8B C8			mov	ECX,EAX
 00001235  6B C9 30			imul	ECX,000000030h
 00001238  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 0000123B  8B C8			mov	ECX,EAX 
 0000123D  E8 00000794			call	 UnitTesting_TestIntegers_get_Height
 00001242  59				pop	ECX
 00001243  99				cdq	
 00001244  0F AF C1			imul	EAX,ECX
 00001247  89 95 FFFFFF38		mov	dword ptr [EBP-00C8h],EDX
 0000124D  89 85 FFFFFF3C		mov	dword ptr [EBP-00C4h],EAX 

				;{530}:array2[3].my_array1[0]= 9.99;
 00001253  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001259  8B F0			mov	ESI,EAX
 0000125B  B8 00000003			mov	EAX,000000003h
 00001260  8B C8			mov	ECX,EAX
 00001262  6B C9 30			imul	ECX,000000030h
 00001265  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 00001268  8B C8			mov	ECX,EAX 
 0000126A  8D 40 18			lea	EAX,dword ptr [EAX+0018h] ;array data member as element on an object
 0000126D  8B F0			mov	ESI,EAX
 0000126F  33 C0			xor	EAX,EAX
 00001271  8B C8			mov	ECX,EAX
 00001273  8D 04 CE			lea	EAX,dword ptr [ESI+ECX*0008h]
 00001276  50				push	EAX
 00001277  BA 47AE147B			mov	EDX,047AE147Bh
 0000127C  B8 4023FAE1			mov	EAX,04023FAE1h 
 00001281  50				push	EAX
 00001282  52				push	EDX 
 00001283  DD 04 24			fld	qword ptr [ESP]
 00001286  5A				pop	EDX
 00001287  58				pop	EAX 
 00001288  5B				pop	EBX
 00001289  DD 1B			fstp	qword ptr [EBX]

				;{531}:array2[3].my_array2[0]= FloatingPoint::ToInt(9.99);
 0000128B  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001291  8B F0			mov	ESI,EAX
 00001293  B8 00000003			mov	EAX,000000003h
 00001298  8B C8			mov	ECX,EAX
 0000129A  6B C9 30			imul	ECX,000000030h
 0000129D  8D 04 31			lea	EAX,dword ptr [ESI+ECX]
 000012A0  8B C8			mov	ECX,EAX 
 000012A2  8D 40 28			lea	EAX,dword ptr [EAX+0028h] ;array data member as element on an object
 000012A5  8B F0			mov	ESI,EAX
 000012A7  33 C0			xor	EAX,EAX
 000012A9  8B C8			mov	ECX,EAX
 000012AB  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 000012AE  50				push	EAX
 000012AF  BA 47AE147B			mov	EDX,047AE147Bh
 000012B4  B8 4023FAE1			mov	EAX,04023FAE1h 
 000012B9  50				push	EAX
 000012BA  52				push	EDX 
 000012BB  E8 00000000 E		call	 FloatingPoint_ToInt
 000012C0  5B				pop	EBX
 000012C1  89 03			mov	dword ptr [EBX],EAX

				;{533}:name= "Harold L. Marzan";
 000012C3  8D 05 0000050A R		lea	EAX,OFFSET $S000845
 000012C9  89 85 FFFFFF34		mov	dword ptr [EBP-00CCh],EAX

				;{534}:UnitTesting::TestArrays::printChars(name, StringHandling::StringLength(name));
 000012CF  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 000012D5  50				push	EAX
 000012D6  E8 00000000 E		call	 StringHandling_StringLength
 000012DB  50				push	EAX 
 000012DC  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 000012E2  50				push	EAX
 000012E3  E8 00000279			call	 UnitTesting_TestArrays_printChars

				;{536}:my_name_is;
 000012E8  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]

				;{538}:my_name_is[0]= 'H';
 000012EE  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 000012F4  8B F0			mov	ESI,EAX
 000012F6  33 C0			xor	EAX,EAX
 000012F8  8B C8			mov	ECX,EAX
 000012FA  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 000012FD  50				push	EAX
 000012FE  B8 00000048			mov	EAX,000000048h
 00001303  5B				pop	EBX
 00001304  88 03			mov	byte ptr [EBX],AL

				;{539}:my_name_is[1]= 'a';
 00001306  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 0000130C  8B F0			mov	ESI,EAX
 0000130E  B8 00000001			mov	EAX,000000001h
 00001313  8B C8			mov	ECX,EAX
 00001315  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 00001318  50				push	EAX
 00001319  B8 00000061			mov	EAX,000000061h
 0000131E  5B				pop	EBX
 0000131F  88 03			mov	byte ptr [EBX],AL

				;{540}:my_name_is[2]= 'r';
 00001321  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001327  8B F0			mov	ESI,EAX
 00001329  B8 00000002			mov	EAX,000000002h
 0000132E  8B C8			mov	ECX,EAX
 00001330  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 00001333  50				push	EAX
 00001334  B8 00000072			mov	EAX,000000072h
 00001339  5B				pop	EBX
 0000133A  88 03			mov	byte ptr [EBX],AL

				;{541}:my_name_is[3]= 'o';
 0000133C  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001342  8B F0			mov	ESI,EAX
 00001344  B8 00000003			mov	EAX,000000003h
 00001349  8B C8			mov	ECX,EAX
 0000134B  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 0000134E  50				push	EAX
 0000134F  B8 0000006F			mov	EAX,00000006Fh
 00001354  5B				pop	EBX
 00001355  88 03			mov	byte ptr [EBX],AL

				;{542}:my_name_is[4]= 'l';
 00001357  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 0000135D  8B F0			mov	ESI,EAX
 0000135F  B8 00000004			mov	EAX,000000004h
 00001364  8B C8			mov	ECX,EAX
 00001366  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 00001369  50				push	EAX
 0000136A  B8 0000006C			mov	EAX,00000006Ch
 0000136F  5B				pop	EBX
 00001370  88 03			mov	byte ptr [EBX],AL

				;{543}:my_name_is[5]= 'd';
 00001372  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001378  8B F0			mov	ESI,EAX
 0000137A  B8 00000005			mov	EAX,000000005h
 0000137F  8B C8			mov	ECX,EAX
 00001381  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 00001384  50				push	EAX
 00001385  B8 00000064			mov	EAX,000000064h
 0000138A  5B				pop	EBX
 0000138B  88 03			mov	byte ptr [EBX],AL

				;{544}:my_name_is[6]= ' ';
 0000138D  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001393  8B F0			mov	ESI,EAX
 00001395  B8 00000006			mov	EAX,000000006h
 0000139A  8B C8			mov	ECX,EAX
 0000139C  8D 04 0E			lea	EAX,dword ptr [ESI+ECX*0001h]
 0000139F  50				push	EAX
 000013A0  B8 00000000			mov	EAX,000000000h
 000013A5  5B				pop	EBX
 000013A6  88 03			mov	byte ptr [EBX],AL

				;{546}:Console::WriteLn("My name is :", my_name_is);
 000013A8  8D 05 00000578 R		lea	EAX,OFFSET $S000854
 000013AE  6A 00			push	000000000h
 000013B0  50				push	EAX 
 000013B1  E8 00000000 E		call	 Console_WriteString
 000013B6  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 000013BC  6A 14			push	000000014h 
 000013BE  50				push	EAX 
 000013BF  E8 00000000 E		call	 Console_WriteString 
 000013C4  E8 00000000 E		call	 Console_WriteCrLf 

				;{548}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 000013C9  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 000013CF  50				push	EAX
 000013D0  E8 00000000 E		call	 StringHandling_StringLength
 000013D5  50				push	EAX 
 000013D6  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 000013DC  50				push	EAX
 000013DD  E8 0000017F			call	 UnitTesting_TestArrays_printChars

				;{550}:arr;
 000013E2  8D 85 FFFFFE58		lea	EAX,dword ptr [EBP-01A8h]

				;{552}:UnitTesting::TestArrays::printChars(arr[9], StringHandling::StringLength(arr[9]));
 000013E8  8D 85 FFFFFE58		lea	EAX,dword ptr [EBP-01A8h]
 000013EE  8B F0			mov	ESI,EAX
 000013F0  83 E1 00			and	ECX,000000000h
 000013F3  51				push	ECX
 000013F4  B8 00000009			mov	EAX,000000009h
 000013F9  B9 00000014			mov	ECX,000000014h
 000013FE  F7 E9			imul	ECX
 00001400  59				pop	ECX
 00001401  03 C8			add	ECX,EAX
 00001403  8B 04 0E			mov	EAX,dword ptr [ESI+ECX*0001h] 
 00001406  50				push	EAX
 00001407  E8 00000000 E		call	 StringHandling_StringLength
 0000140C  50				push	EAX 

 0000140D  8D 85 FFFFFE58		lea	EAX,dword ptr [EBP-01A8h]
 00001413  8B F0			mov	ESI,EAX
 00001415  83 E1 00			and	ECX,000000000h
 00001418  51				push	ECX
 00001419  B8 00000009			mov	EAX,000000009h
 0000141E  B9 00000014			mov	ECX,000000014h
 00001423  F7 E9			imul	ECX
 00001425  59				pop	ECX
 00001426  03 C8			add	ECX,EAX
 00001428  8B 04 0E			mov	EAX,dword ptr [ESI+ECX*0001h] 
 0000142B  50				push	EAX
 0000142C  E8 00000130			call	 UnitTesting_TestArrays_printChars

				;{554}:arr_of_strings;
 00001431  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]

				;{556}:arr_of_strings[0]= "Harold ";
 00001437  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 0000143D  8B F0			mov	ESI,EAX
 0000143F  83 E1 00			and	ECX,000000000h
 00001442  51				push	ECX
 00001443  33 C0			xor	EAX,EAX
 00001445  59				pop	ECX
 00001446  03 C8			add	ECX,EAX
 00001448  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000144B  50				push	EAX
 0000144C  8D 05 00000502 R		lea	EAX,OFFSET $S000857
 00001452  5B				pop	EBX
 00001453  89 03			mov	dword ptr [EBX],EAX

				;{557}:arr_of_strings[1]= "Lawrence ";
 00001455  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 0000145B  8B F0			mov	ESI,EAX
 0000145D  83 E1 00			and	ECX,000000000h
 00001460  51				push	ECX
 00001461  B8 00000001			mov	EAX,000000001h
 00001466  59				pop	ECX
 00001467  03 C8			add	ECX,EAX
 00001469  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000146C  50				push	EAX
 0000146D  8D 05 0000055D R		lea	EAX,OFFSET $S000858
 00001473  5B				pop	EBX
 00001474  89 03			mov	dword ptr [EBX],EAX

				;{558}:arr_of_strings[2]= "Marzan ";
 00001476  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 0000147C  8B F0			mov	ESI,EAX
 0000147E  83 E1 00			and	ECX,000000000h
 00001481  51				push	ECX
 00001482  B8 00000002			mov	EAX,000000002h
 00001487  59				pop	ECX
 00001488  03 C8			add	ECX,EAX
 0000148A  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000148D  50				push	EAX
 0000148E  8D 05 00000567 R		lea	EAX,OFFSET $S000859
 00001494  5B				pop	EBX
 00001495  89 03			mov	dword ptr [EBX],EAX

				;{559}:arr_of_strings[3]= "Mercado.";
 00001497  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 0000149D  8B F0			mov	ESI,EAX
 0000149F  83 E1 00			and	ECX,000000000h
 000014A2  51				push	ECX
 000014A3  B8 00000003			mov	EAX,000000003h
 000014A8  59				pop	ECX
 000014A9  03 C8			add	ECX,EAX
 000014AB  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 000014AE  50				push	EAX
 000014AF  8D 05 0000056F R		lea	EAX,OFFSET $S000860
 000014B5  5B				pop	EBX
 000014B6  89 03			mov	dword ptr [EBX],EAX

				;{561}:for(i= 0; i < 4; ++i)
 000014B8  33 C0			xor	EAX,EAX
 000014BA  89 85 FFFFFE44		mov	dword ptr [EBP-01BCh],EAX
 000014C0  EB 0C			jmp	OFFSET $L001001
 000014C2			$L001002:
 000014C2  FF 85 FFFFFE44		inc	dword ptr [EBP-444]
 000014C8  8B 85 FFFFFE44		mov	EAX,dword ptr [EBP-444]
 000014CE			$L001001:
 000014CE  8B 85 FFFFFE44		mov	EAX,dword ptr [EBP-01BCh]
 000014D4  50				push	EAX
 000014D5  B8 00000004			mov	EAX,000000004h
 000014DA  5A				pop	EDX
 000014DB  3B D0			cmp	EDX,EAX
 000014DD  0F 9C C0			setl	AL
 000014E0  85 C0			test	EAX,EAX
 000014E2  74 3F			jz	OFFSET $L001003
				;{

				;{563}:UnitTesting::TestArrays::printChars(arr_of_strings[i], StringHandling::StringLength(arr_of_strings[i]));
 000014E4  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 000014EA  8B F0			mov	ESI,EAX
 000014EC  83 E1 00			and	ECX,000000000h
 000014EF  51				push	ECX
 000014F0  8B 85 FFFFFE44		mov	EAX,dword ptr [EBP-01BCh]
 000014F6  59				pop	ECX
 000014F7  03 C8			add	ECX,EAX
 000014F9  8B 04 8E			mov	EAX,dword ptr [ESI+ECX*0004h]
 000014FC  50				push	EAX
 000014FD  E8 00000000 E		call	 StringHandling_StringLength
 00001502  50				push	EAX 

 00001503  8D 85 FFFFFE48		lea	EAX,dword ptr [EBP-01B8h]
 00001509  8B F0			mov	ESI,EAX
 0000150B  83 E1 00			and	ECX,000000000h
 0000150E  51				push	ECX
 0000150F  8B 85 FFFFFE44		mov	EAX,dword ptr [EBP-01BCh]
 00001515  59				pop	ECX
 00001516  03 C8			add	ECX,EAX
 00001518  8B 04 8E			mov	EAX,dword ptr [ESI+ECX*0004h]
 0000151B  50				push	EAX
 0000151C  E8 00000040			call	 UnitTesting_TestArrays_printChars
				;}
 00001521  EB 9F			jmp	OFFSET $L001002 
 00001523			$L001003:

				;{566}:StringHandling::StringCopy(my_name_is, name, StringHandling::StringLength(name));
 00001523  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00001529  50				push	EAX
 0000152A  E8 00000000 E		call	 StringHandling_StringLength
 0000152F  50				push	EAX 
 00001530  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00001536  50				push	EAX
 00001537  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 0000153D  50				push	EAX
 0000153E  E8 00000000 E		call	 StringHandling_StringCopy

				;{567}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 00001543  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001549  50				push	EAX
 0000154A  E8 00000000 E		call	 StringHandling_StringLength
 0000154F  50				push	EAX 
 00001550  8D 85 FFFFFF20		lea	EAX,dword ptr [EBP-00E0h]
 00001556  50				push	EAX
 00001557  E8 00000005			call	 UnitTesting_TestArrays_printChars
				;}
 0000155C			$L000839:

 0000155C  5F				pop	EDI
 0000155D  5E				pop	ESI 
 0000155E  5B				pop	EBX 
 0000155F  C9				leave	
 00001560  C3				ret	
 00001561			UnitTesting_TestArrays_DoTest ENDP

 00001561			UnitTesting_TestArrays_printChars PROC NEAR 
				;void UnitTesting::TestArrays::printChars(char [] array, int n);
 00001561  55				push	EBP
 00001562  8B EC			mov	EBP,ESP
 00001564  83 EC 08			sub	ESP,000000008h
 00001567  53				push	EBX 
 00001568  56				push	ESI 
 00001569  57				push	EDI 
 0000156A  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000156D  B9 00000001			mov	ECX,000000001h
 00001572  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001577  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;try
 00001579  54				push	ESP ;pPrevESP
 0000157A  55				push	EBP ;pPrevEBP
 0000157B  68 00001602 R		push	OFFSET __except_handlerXXX001005 
					assume FS:nothing
 00001580  64: FF 35			push	dword ptr  FS:[0] 
	   00000000
 00001587  64: 89 25			mov	dword ptr  FS:[0],ESP
	   00000000

				;{487}:for(i= 0; i < n; ++i)
 0000158E  33 C0			xor	EAX,EAX
 00001590  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001593  EB 06			jmp	OFFSET $L001008
 00001595			$L001009:
 00001595  FF 45 FC			inc	dword ptr [EBP-4]
 00001598  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000159B			$L001008:
 0000159B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000159E  50				push	EAX
 0000159F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000015A2  5A				pop	EDX
 000015A3  3B D0			cmp	EDX,EAX
 000015A5  0F 9C C0			setl	AL
 000015A8  85 C0			test	EAX,EAX
 000015AA  74 41			jz	OFFSET $L001010

				;{488}:Console::WriteLn("Char at i:[", i, "] == ", array[i]);
 000015AC  8D 05 00000426 R		lea	EAX,OFFSET $S000835
 000015B2  6A 00			push	000000000h
 000015B4  50				push	EAX 
 000015B5  E8 00000000 E		call	 Console_WriteString
 000015BA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000015BD  50				push	EAX 
 000015BE  E8 00000000 E		call	 Console_WriteInteger 
 000015C3  8D 05 0000072D R		lea	EAX,OFFSET $S000836
 000015C9  6A 00			push	000000000h 
 000015CB  50				push	EAX 
 000015CC  E8 00000000 E		call	 Console_WriteString 
 000015D1  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015D4  8D 03			lea	EAX,dword ptr [EBX]
 000015D6  8B F0			mov	ESI,EAX
 000015D8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000015DB  8B C8			mov	ECX,EAX
 000015DD  8B 04 0E			mov	EAX,dword ptr [ESI+ECX*0001h] 
 000015E0  50				push	EAX 
 000015E1  E8 00000000 E		call	 Console_WriteChar 
 000015E6  E8 00000000 E		call	 Console_WriteCrLf 
 000015EB  EB A8			jmp	OFFSET $L001009 
 000015ED			$L001010:
				;{

				;{491}:Console::WriteLn("Oops! there was a bug in this code!");
 000015ED  8D 05 00000585 R		lea	EAX,OFFSET $S000837
 000015F3  6A 00			push	000000000h
 000015F5  50				push	EAX 
 000015F6  E8 00000000 E		call	 Console_WriteString
 000015FB  E8 00000000 E		call	 Console_WriteCrLf 
				;}
				;}
 00001600  EB 5C			jmp	OFFSET $L001004
 00001602			__except_handlerXXX001005:
 00001602  8B 5C 24 04			mov	EBX,dword ptr [ESP+0004h] ;_ExceptionRecord
 00001606  8B 0B			mov	ECX,dword ptr [EBX] ;_ExceptionRecord->ExceptionCode // The reason the exception occurred.
 00001608  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 0000160F  8B 23			mov	ESP,dword ptr [EBX] 
 00001611  64: 8F 05			pop	dword ptr  FS:[0]
	   00000000
 00001618  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 0000161C  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 00001620  B8 00000001			mov	EAX,000000001h
 00001625  3B C1			cmp	EAX,ECX
 00001627  75 15			jnz	OFFSET $L001011

				;{495}:Console::WriteLn("Oops! there was a serious bug in this code!");
 00001629  8D 05 000005A9 R		lea	EAX,OFFSET $S000838
 0000162F  6A 00			push	000000000h
 00001631  50				push	EAX 
 00001632  E8 00000000 E		call	 Console_WriteString
 00001637  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000163C  EB 38			jmp	OFFSET $L001007 
 0000163E			$L001011:
 0000163E  B8 00000002			mov	EAX,000000002h
 00001643  3B C1			cmp	EAX,ECX 
 00001645  75 15			jnz	OFFSET $L001012 

				;{499}:Console::WriteLn("Oops! there was a serious bug in this code!");
 00001647  8D 05 000005A9 R		lea	EAX,OFFSET $S000838
 0000164D  6A 00			push	000000000h
 0000164F  50				push	EAX 
 00001650  E8 00000000 E		call	 Console_WriteString
 00001655  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000165A  EB 1A			jmp	OFFSET $L001007 
 0000165C			$L001012:
 0000165C  EB 18			jmp	OFFSET $L001007 
 0000165E			$L001004:
 0000165E  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 00001665  8B 23			mov	ESP,dword ptr [EBX] 
 00001667  64: 8F 05			pop	dword ptr  FS:[0] 
	   00000000
 0000166E  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00001672  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 00001676			$L001007:
				;}
 00001676			$L000831:

 00001676  5F				pop	EDI
 00001677  5E				pop	ESI 
 00001678  5B				pop	EBX 
 00001679  C9				leave	
 0000167A  C2 0008			retn	000000008h
 0000167D			UnitTesting_TestArrays_printChars ENDP

 0000167D			UnitTesting_TestFloatingPoint_Area PROC NEAR 
				;double Area(double minor_base, double major_base, double height);
 0000167D  55				push	EBP
 0000167E  8B EC			mov	EBP,ESP
 00001680  83 EC 0C			sub	ESP,00000000Ch
 00001683  53				push	EBX 
 00001684  56				push	ESI 
 00001685  57				push	EDI 
 00001686  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001689  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 0000168C  B9 00000002			mov	ECX,000000002h 
 00001691  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001696  F3/ AB			rep stos	dword ptr [EDI]
 00001698  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{459}:area= ((minor_base + major_base) * height) / 2.0;
 0000169B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000169E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000016A1  50				push	EAX
 000016A2  52				push	EDX 
 000016A3  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 000016A6  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 000016A9  50				push	EAX
 000016AA  52				push	EDX 
 000016AB  DD 04 24			fld	qword ptr [ESP]
 000016AE  59				pop	ECX
 000016AF  59				pop	ECX 
 000016B0  DC 04 24			fadd	qword ptr [ESP]
 000016B3  DD 1C 24			fstp	qword ptr [ESP]
 000016B6  8B 55 18			mov	EDX,dword ptr [EBP+0018h]
 000016B9  8B 45 1C			mov	EAX,dword ptr [EBP+001Ch] 
 000016BC  9B DB E2			fclex
 000016BF  50				push	EAX
 000016C0  52				push	EDX 
 000016C1  DD 04 24			fld	qword ptr [ESP]
 000016C4  59				pop	ECX
 000016C5  59				pop	ECX 
 000016C6  DC 0C 24			fmul	qword ptr [ESP]
 000016C9  DD 1C 24			fstp	qword ptr [ESP]
 000016CC  BA 00000000			mov	EDX,000000000h
 000016D1  B8 40000000			mov	EAX,040000000h 
 000016D6  9B DB E2			fclex
 000016D9  50				push	EAX
 000016DA  52				push	EDX 
 000016DB  DD 04 24			fld	qword ptr [ESP]
 000016DE  59				pop	ECX
 000016DF  59				pop	ECX 
 000016E0  DC 3C 24			fdivr	qword ptr [ESP]
 000016E3  DD 1C 24			fstp	qword ptr [ESP]
 000016E6  DD 04 24			fld	qword ptr [ESP]
 000016E9  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{461}:return area
 000016EC  5A				pop	EDX
 000016ED  58				pop	EAX 
 000016EE  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000016F1  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000016F4  EB 00			jmp	OFFSET $L000820
				;}
 000016F6			$L000820:

 000016F6  5F				pop	EDI
 000016F7  5E				pop	ESI 
 000016F8  5B				pop	EBX 
 000016F9  C9				leave	
 000016FA  C2 0018			retn	000000018h
 000016FD			UnitTesting_TestFloatingPoint_Area ENDP

 000016FD			UnitTesting_TestFloatingPoint_Destructor PROC NEAR 
				;void Destructor(void);
 000016FD  55				push	EBP
 000016FE  8B EC			mov	EBP,ESP
 00001700  51				push	ECX 
 00001701  53				push	EBX 
 00001702  56				push	ESI 
 00001703  57				push	EDI 
				;{

				;{438}:System::Debug::OutputString("destroying a TestFloatingPoint() object...");
 00001704  8D 05 00000764 R		lea	EAX,OFFSET $S000813
 0000170A  50				push	EAX
 0000170B  E8 00000000 E		call	 System_Debug_OutputString
				;}
 00001710$L000812:

 00001710  5F				pop	EDI
 00001711  5E				pop	ESI 
 00001712  5B				pop	EBX 
 00001713  C9				leave	
 00001714  C3				ret	
 00001715			UnitTesting_TestFloatingPoint_Destructor ENDP

 00001715			UnitTesting_TestFloatingPoint_Power PROC NEAR 
				;double Power(double X, int n);
 00001715  55				push	EBP
 00001716  8B EC			mov	EBP,ESP
 00001718  51				push	ECX 
 00001719  53				push	EBX 
 0000171A  56				push	ESI 
 0000171B  57				push	EDI 
				;{

				;{442}:if(n == 0)
 0000171C  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 0000171F  50				push	EAX
 00001720  33 C0			xor	EAX,EAX
 00001722  5A				pop	EDX
 00001723  3B D0			cmp	EDX,EAX
 00001725  0F 94 C0			setz	AL
 00001728  84 C0			test	AL,AL
 0000172A  74 0A			jz	OFFSET $L001013

				;{443}:return 1
 0000172C  B8 00000001			mov	EAX,000000001h
 00001731  E9 000000E5			jmp	OFFSET $L000814
 00001736			$L001013:

				;{445}:if(n % 2 == 0)
 00001736  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001739  50				push	EAX
 0000173A  B8 00000002			mov	EAX,000000002h
 0000173F  8B C8			mov	ECX,EAX
 00001741  58				pop	EAX
 00001742  33 D2			xor	EDX,EDX
 00001744  F7 F9			idiv	ECX
 00001746  8B C2			mov	EAX,EDX 
 00001748  50				push	EAX
 00001749  33 C0			xor	EAX,EAX
 0000174B  5A				pop	EDX
 0000174C  3B D0			cmp	EDX,EAX
 0000174E  0F 94 C0			setz	AL
 00001751  84 C0			test	AL,AL
 00001753  74 56			jz	OFFSET $L001015

				;{446}:return Power(X * X, n / 2)

 00001755  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001758  50				push	EAX
 00001759  B8 00000002			mov	EAX,000000002h
 0000175E  9B DB E2			fclex
 00001761  50				push	EAX
 00001762  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001768  50				push	EAX
 00001769  52				push	EDX 
 0000176A  DD 04 24			fld	qword ptr [ESP]
 0000176D  59				pop	ECX
 0000176E  59				pop	ECX 
 0000176F  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001775  50				push	EAX
 00001776  52				push	EDX 
 00001777  DC 3C 24			fdivr	qword ptr [ESP]
 0000177A  DD 1C 24			fstp	qword ptr [ESP]
 0000177D  E8 00000000 E		call	 FloatingPoint_ToInt
 00001782  50				push	EAX

 00001783  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00001786  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00001789  50				push	EAX
 0000178A  52				push	EDX 
 0000178B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000178E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00001791  9B DB E2			fclex
 00001794  50				push	EAX
 00001795  52				push	EDX 
 00001796  DD 04 24			fld	qword ptr [ESP]
 00001799  59				pop	ECX
 0000179A  59				pop	ECX 
 0000179B  DC 0C 24			fmul	qword ptr [ESP]
 0000179E  DD 1C 24			fstp	qword ptr [ESP]

 000017A1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000017A4  E8 FFFFFF6C			call	 UnitTesting_TestFloatingPoint_Power
 000017A9  EB 70			jmp	OFFSET $L000814

				; else {
 000017AB			$L001015:

				;{448}:return X * Power(X * X, n / 2)
 000017AB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000017AE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000017B1  50				push	EAX
 000017B2  52				push	EDX 

 000017B3  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000017B6  50				push	EAX
 000017B7  B8 00000002			mov	EAX,000000002h
 000017BC  9B DB E2			fclex
 000017BF  50				push	EAX
 000017C0  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000017C6  50				push	EAX
 000017C7  52				push	EDX 
 000017C8  DD 04 24			fld	qword ptr [ESP]
 000017CB  59				pop	ECX
 000017CC  59				pop	ECX 
 000017CD  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000017D3  50				push	EAX
 000017D4  52				push	EDX 
 000017D5  DC 3C 24			fdivr	qword ptr [ESP]
 000017D8  DD 1C 24			fstp	qword ptr [ESP]
 000017DB  E8 00000000 E		call	 FloatingPoint_ToInt
 000017E0  50				push	EAX

 000017E1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000017E4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000017E7  50				push	EAX
 000017E8  52				push	EDX 
 000017E9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000017EC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000017EF  9B DB E2			fclex
 000017F2  50				push	EAX
 000017F3  52				push	EDX 
 000017F4  DD 04 24			fld	qword ptr [ESP]
 000017F7  59				pop	ECX
 000017F8  59				pop	ECX 
 000017F9  DC 0C 24			fmul	qword ptr [ESP]
 000017FC  DD 1C 24			fstp	qword ptr [ESP]

 000017FF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001802  E8 FFFFFF0E			call	 UnitTesting_TestFloatingPoint_Power
 00001807  9B DB E2			fclex
 0000180A  50				push	EAX
 0000180B  52				push	EDX 
 0000180C  DD 04 24			fld	qword ptr [ESP]
 0000180F  59				pop	ECX
 00001810  59				pop	ECX 
 00001811  DC 0C 24			fmul	qword ptr [ESP]
 00001814  DD 1C 24			fstp	qword ptr [ESP]
 00001817  5A				pop	EDX
 00001818  58				pop	EAX 
 00001819  EB 00			jmp	OFFSET $L000814
 0000181B			$L001016:

				; }
				;}
 0000181B			$L000814:

 0000181B  5F				pop	EDI
 0000181C  5E				pop	ESI 
 0000181D  5B				pop	EBX 
 0000181E  C9				leave	
 0000181F  C2 000C			retn	00000000Ch
 00001822			UnitTesting_TestFloatingPoint_Power ENDP

 00001822			UnitTesting_TestFloatingPoint PROC NEAR 
				;void UnitTesting::TestFloatingPoint(void);
 00001822  55				push	EBP
 00001823  8B EC			mov	EBP,ESP
 00001825  51				push	ECX 
 00001826  53				push	EBX 
 00001827  56				push	ESI 
 00001828  57				push	EDI 
				;{

				;{433}:System::Debug::OutputString("constructing a TestFloatingPoint() object...");
 00001829  8D 05 00000737 R		lea	EAX,OFFSET $S000811
 0000182F  50				push	EAX
 00001830  E8 00000000 E		call	 System_Debug_OutputString
				;}

 00001835  5F				pop	EDI
 00001836  5E				pop	ESI 
 00001837  5B				pop	EBX 
 00001838  C9				leave	
 00001839  C3				ret	
 0000183A			UnitTesting_TestFloatingPoint ENDP

 0000183A			UnitTesting_TestFloatingPoint_speed PROC NEAR 
				;double UnitTesting::TestFloatingPoint::speed(double distance, double time);
 0000183A  55				push	EBP
 0000183B  8B EC			mov	EBP,ESP
 0000183D  51				push	ECX 
 0000183E  53				push	EBX 
 0000183F  56				push	ESI 
 00001840  57				push	EDI 
				;{

				;{454}:return distance / time
 00001841  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00001844  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00001847  50				push	EAX
 00001848  52				push	EDX 
 00001849  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 0000184C  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 0000184F  9B DB E2			fclex
 00001852  50				push	EAX
 00001853  52				push	EDX 
 00001854  DD 04 24			fld	qword ptr [ESP]
 00001857  59				pop	ECX
 00001858  59				pop	ECX 
 00001859  DC 3C 24			fdivr	qword ptr [ESP]
 0000185C  DD 1C 24			fstp	qword ptr [ESP]
 0000185F  5A				pop	EDX
 00001860  58				pop	EAX 
 00001861  EB 00			jmp	OFFSET $L000817
				;}
 00001863			$L000817:

 00001863  5F				pop	EDI
 00001864  5E				pop	ESI 
 00001865  5B				pop	EBX 
 00001866  C9				leave	
 00001867  C2 0010			retn	000000010h
 0000186A			UnitTesting_TestFloatingPoint_speed ENDP

 0000186A			UnitTesting_TestIntegers_Calc1 PROC NEAR 
				;int Calc1(int i, int ref j);
 0000186A  55				push	EBP
 0000186B  8B EC			mov	EBP,ESP
 0000186D  83 EC 08			sub	ESP,000000008h
 00001870  53				push	EBX 
 00001871  56				push	ESI 
 00001872  57				push	EDI 
 00001873  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00001876  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00001879  B9 00000001			mov	ECX,000000001h 
 0000187E  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001883  F3/ AB			rep stos	dword ptr [EDI]
 00001885  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{327}:nArea= j * Height;
 00001888  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000188B  8B 03			mov	EAX,dword ptr [EBX]
 0000188D  50				push	EAX
 0000188E  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00001891  E8 00000140			call	 UnitTesting_TestIntegers_get_Height
 00001896  59				pop	ECX
 00001897  99				cdq	
 00001898  0F AF C1			imul	EAX,ECX
 0000189B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{329}:j= Width;
 0000189E  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000018A1  E8 000001C4			call	 UnitTesting_TestIntegers_get_Width
 000018A6  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000018A9  89 03			mov	dword ptr [EBX],EAX

				;{331}:j= i div 5;
 000018AB  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000018AE  50				push	EAX
 000018AF  B8 00000005			mov	EAX,000000005h
 000018B4  8B C8			mov	ECX,EAX
 000018B6  58				pop	EAX
 000018B7  33 D2			xor	EDX,EDX
 000018B9  F7 F9			idiv	ECX
 000018BB  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000018BE  89 03			mov	dword ptr [EBX],EAX

				;{333}:nArea= FloatingPoint::ToInt(j * Height * 1.0);

 000018C0  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 000018C3  8B 03			mov	EAX,dword ptr [EBX]
 000018C5  50				push	EAX
 000018C6  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000018C9  E8 00000108			call	 UnitTesting_TestIntegers_get_Height
 000018CE  59				pop	ECX
 000018CF  99				cdq	
 000018D0  0F AF C1			imul	EAX,ECX
 000018D3  50				push	EAX
 000018D4  52				push	EDX 
 000018D5  D9 E8			fld1
 000018D7  9B DB E2			fclex
 000018DA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 000018E0  50				push	EAX
 000018E1  52				push	EDX 
 000018E2  DC 0C 24			fmul	qword ptr [ESP]
 000018E5  DF 3C 24			fistp	qword ptr [ESP]
 000018E8  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 000018EE  50				push	EAX
 000018EF  52				push	EDX 

 000018F0  E8 00000000 E		call	 FloatingPoint_ToInt
 000018F5  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{336}:j*= 3;
 000018F8  B8 00000003			mov	EAX,000000003h
 000018FD  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001900  F7 2B			imul	dword ptr [EBX]
 00001902  89 03			mov	dword ptr [EBX],EAX

				;{338}:return nArea
 00001904  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001907  EB 00			jmp	OFFSET $L000750
				;}
 00001909			$L000750:

 00001909  5F				pop	EDI
 0000190A  5E				pop	ESI 
 0000190B  5B				pop	EBX 
 0000190C  C9				leave	
 0000190D  C2 0008			retn	000000008h
 00001910			UnitTesting_TestIntegers_Calc1 ENDP

 00001910			UnitTesting_TestIntegers_Calc2 PROC NEAR 
				;void Calc2(Int32 ref x, Int32 ref y);
 00001910  55				push	EBP
 00001911  8B EC			mov	EBP,ESP
 00001913  83 EC 08			sub	ESP,000000008h
 00001916  53				push	EBX 
 00001917  56				push	ESI 
 00001918  57				push	EDI 
 00001919  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 0000191C  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000191F  B9 00000001			mov	ECX,000000001h 
 00001924  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001929  F3/ AB			rep stos	dword ptr [EDI]
 0000192B  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{350}:a= 1000;
 0000192E  B8 000003E8			mov	EAX,0000003E8h
 00001933  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{351}:x= 9 * 3 * a;
 00001936  B8 00000009			mov	EAX,000000009h
 0000193B  50				push	EAX
 0000193C  B8 00000003			mov	EAX,000000003h
 00001941  59				pop	ECX
 00001942  33 D2			xor	EDX,EDX
 00001944  66| 0F AF C1			imul	AX,CX
 00001948  C1 E2 10			shl	EDX,000000010h
 0000194B  0B C2			or	EAX,EDX
 0000194D  50				push	EAX
 0000194E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001951  59				pop	ECX 
 00001952  99				cdq	
 00001953  0F AF C1			imul	EAX,ECX 
 00001956  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001959  89 03			mov	dword ptr [EBX],EAX

				;{352}:y= a * 4 * 5;
 0000195B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000195E  50				push	EAX
 0000195F  B8 00000004			mov	EAX,000000004h
 00001964  59				pop	ECX
 00001965  33 D2			xor	EDX,EDX
 00001967  66| 0F AF C1			imul	AX,CX
 0000196B  C1 E2 10			shl	EDX,000000010h
 0000196E  0B C2			or	EAX,EDX
 00001970  50				push	EAX
 00001971  B8 00000005			mov	EAX,000000005h
 00001976  59				pop	ECX 
 00001977  33 D2			xor	EDX,EDX 
 00001979  66| 0F AF C1			imul	AX,CX 
 0000197D  C1 E2 10			shl	EDX,000000010h 
 00001980  0B C2			or	EAX,EDX 
 00001982  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001985  89 03			mov	dword ptr [EBX],EAX
				;}
 00001987			$L000758:

 00001987  5F				pop	EDI
 00001988  5E				pop	ESI 
 00001989  5B				pop	EBX 
 0000198A  C9				leave	
 0000198B  C2 0008			retn	000000008h
 0000198E			UnitTesting_TestIntegers_Calc2 ENDP

 0000198E			UnitTesting_TestIntegers_Factorial PROC NEAR 
				;int Factorial(int n);
 0000198E  55				push	EBP
 0000198F  8B EC			mov	EBP,ESP
 00001991  51				push	ECX 
 00001992  53				push	EBX 
 00001993  56				push	ESI 
 00001994  57				push	EDI 
				;{

				;{407}:System::Debug::BreakPoint();
 00001995  CC				int	000000003h ;User breakpoint

				;{409}:if(n == 0)
 00001996  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001999  50				push	EAX
 0000199A  33 C0			xor	EAX,EAX
 0000199C  5A				pop	EDX
 0000199D  3B D0			cmp	EDX,EAX
 0000199F  0F 94 C0			setz	AL
 000019A2  84 C0			test	AL,AL
 000019A4  74 07			jz	OFFSET $L001017

				;{410}:return 1
 000019A6  B8 00000001			mov	EAX,000000001h
 000019AB  EB 22			jmp	OFFSET $L000799

				; else {
 000019AD			$L001017:

				;{412}:return n * Factorial(n - 1)
 000019AD  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000019B0  50				push	EAX
 000019B1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000019B4  50				push	EAX
 000019B5  B8 00000001			mov	EAX,000000001h
 000019BA  5A				pop	EDX
 000019BB  2B D0			sub	EDX,EAX
 000019BD  8B C2			mov	EAX,EDX
 000019BF  50				push	EAX
 000019C0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000019C3  E8 FFFFFFC6			call	 UnitTesting_TestIntegers_Factorial
 000019C8  59				pop	ECX
 000019C9  99				cdq	
 000019CA  0F AF C1			imul	EAX,ECX
 000019CD  EB 00			jmp	OFFSET $L000799
 000019CF			$L001018:

				; }
				;}
 000019CF			$L000799:

 000019CF  5F				pop	EDI
 000019D0  5E				pop	ESI 
 000019D1  5B				pop	EBX 
 000019D2  C9				leave	
 000019D3  C2 0004			retn	000000004h
 000019D6			UnitTesting_TestIntegers_Factorial ENDP

 000019D6			UnitTesting_TestIntegers_get_Height PROC NEAR 
				;int get::Height(void);
 000019D6  55				push	EBP
 000019D7  8B EC			mov	EBP,ESP
 000019D9  51				push	ECX 
 000019DA  53				push	EBX 
 000019DB  56				push	ESI 
 000019DC  57				push	EDI 
				;{

				;{103}:return nHeight
 000019DD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000019E0  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 000019E3  EB 00			jmp	OFFSET $L000685
				;}
 000019E5			$L000685:

 000019E5  5F				pop	EDI
 000019E6  5E				pop	ESI 
 000019E7  5B				pop	EBX 
 000019E8  C9				leave	
 000019E9  C3				ret	
 000019EA			UnitTesting_TestIntegers_get_Height ENDP

 000019EA			UnitTesting_TestIntegers_put_Height PROC NEAR 
				;void put::Height(int value);
 000019EA  55				push	EBP
 000019EB  8B EC			mov	EBP,ESP
 000019ED  51				push	ECX 
 000019EE  53				push	EBX 
 000019EF  56				push	ESI 
 000019F0  57				push	EDI 
				;{

				;{108}:nHeight= value;
 000019F1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000019F4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000019F7  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 000019FA  89 03			mov	dword ptr [EBX],EAX
				;}
 000019FC			$L000686:

 000019FC  5F				pop	EDI
 000019FD  5E				pop	ESI 
 000019FE  5B				pop	EBX 
 000019FF  C9				leave	
 00001A00  C2 0004			retn	000000004h
 00001A03			UnitTesting_TestIntegers_put_Height ENDP

 00001A03			UnitTesting_TestIntegers_Swap PROC NEAR 
				;void Swap(int ref value1, int ref value2);
 00001A03  55				push	EBP
 00001A04  8B EC			mov	EBP,ESP
 00001A06  83 EC 08			sub	ESP,000000008h
 00001A09  53				push	EBX 
 00001A0A  56				push	ESI 
 00001A0B  57				push	EDI 
 00001A0C  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00001A0F  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00001A12  B9 00000001			mov	ECX,000000001h 
 00001A17  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001A1C  F3/ AB			rep stos	dword ptr [EDI]
 00001A1E  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{343}:tmp= value1;
 00001A21  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001A24  8B 03			mov	EAX,dword ptr [EBX]
 00001A26  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{344}:value1= value2;
 00001A29  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001A2C  8B 03			mov	EAX,dword ptr [EBX]
 00001A2E  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001A31  89 03			mov	dword ptr [EBX],EAX

				;{345}:value2= tmp;
 00001A33  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001A36  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001A39  89 03			mov	dword ptr [EBX],EAX
				;}
 00001A3B			$L000754:

 00001A3B  5F				pop	EDI
 00001A3C  5E				pop	ESI 
 00001A3D  5B				pop	EBX 
 00001A3E  C9				leave	
 00001A3F  C2 0008			retn	000000008h
 00001A42			UnitTesting_TestIntegers_Swap ENDP

 00001A42			UnitTesting_TestIntegers_SwapDebug PROC NEAR 
				;void SwapDebug(int ref value1, int ref value2);
 00001A42  55				push	EBP
 00001A43  8B EC			mov	EBP,ESP
 00001A45  51				push	ECX 
 00001A46  53				push	EBX 
 00001A47  56				push	ESI 
 00001A48  57				push	EDI 
				;{

				;{417}:System::Debug::OutputString("Swaping values...");
 00001A49  8D 05 00000627 R		lea	EAX,OFFSET $S000804
 00001A4F  50				push	EAX
 00001A50  E8 00000000 E		call	 System_Debug_OutputString

				;{418}:Swap(value1, value2);
 00001A55  FF 75 0C			push	dword ptr [EBP+000Ch]
 00001A58  FF 75 08			push	dword ptr [EBP+0008h]
 00001A5B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001A5E  E8 FFFFFFA0			call	 UnitTesting_TestIntegers_Swap
				;}
 00001A63			$L000801:

 00001A63  5F				pop	EDI
 00001A64  5E				pop	ESI 
 00001A65  5B				pop	EBX 
 00001A66  C9				leave	
 00001A67  C2 0008			retn	000000008h
 00001A6A			UnitTesting_TestIntegers_SwapDebug ENDP

 00001A6A			UnitTesting_TestIntegers_get_Width PROC NEAR 
				;int get::Width(void);
 00001A6A  55				push	EBP
 00001A6B  8B EC			mov	EBP,ESP
 00001A6D  51				push	ECX 
 00001A6E  53				push	EBX 
 00001A6F  56				push	ESI 
 00001A70  57				push	EDI 
				;{

				;{93}:return nWidth
 00001A71  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001A74  8B 01			mov	EAX,dword ptr [ECX]
 00001A76  EB 00			jmp	OFFSET $L000681
				;}
 00001A78			$L000681:

 00001A78  5F				pop	EDI
 00001A79  5E				pop	ESI 
 00001A7A  5B				pop	EBX 
 00001A7B  C9				leave	
 00001A7C  C3				ret	
 00001A7D			UnitTesting_TestIntegers_get_Width ENDP

 00001A7D			UnitTesting_TestIntegers_put_Width PROC NEAR 
				;void put::Width(int value);
 00001A7D  55				push	EBP
 00001A7E  8B EC			mov	EBP,ESP
 00001A80  51				push	ECX 
 00001A81  53				push	EBX 
 00001A82  56				push	ESI 
 00001A83  57				push	EDI 
				;{

				;{98}:nWidth= value;
 00001A84  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001A87  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001A8A  8D 19			lea	EBX,dword ptr [ECX]
 00001A8C  89 03			mov	dword ptr [EBX],EAX
				;}
 00001A8E			$L000682:

 00001A8E  5F				pop	EDI
 00001A8F  5E				pop	ESI 
 00001A90  5B				pop	EBX 
 00001A91  C9				leave	
 00001A92  C2 0004			retn	000000004h
 00001A95			UnitTesting_TestIntegers_put_Width ENDP

 00001A95			UnitTesting_TestIntegers_add PROC NEAR 
				;void add(int v1, int v2, int ref res);
 00001A95  55				push	EBP
 00001A96  8B EC			mov	EBP,ESP
 00001A98  51				push	ECX 
 00001A99  53				push	EBX 
 00001A9A  56				push	ESI 
 00001A9B  57				push	EDI 
				;{

				;{358}:res= v1 + v2;
 00001A9C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001A9F  50				push	EAX
 00001AA0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001AA3  5A				pop	EDX
 00001AA4  03 C2			add	EAX,EDX
 00001AA6  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001AA9  89 03			mov	dword ptr [EBX],EAX

				;{360}:Console::WriteLn("(+) the result is: ", res);
 00001AAB  8D 05 000000CC R		lea	EAX,OFFSET $S000767
 00001AB1  6A 00			push	000000000h
 00001AB3  50				push	EAX 
 00001AB4  E8 00000000 E		call	 Console_WriteString
 00001AB9  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001ABC  8B 03			mov	EAX,dword ptr [EBX]
 00001ABE  50				push	EAX 
 00001ABF  E8 00000000 E		call	 Console_WriteInteger 
 00001AC4  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001AC9			$L000763:

 00001AC9  5F				pop	EDI
 00001ACA  5E				pop	ESI 
 00001ACB  5B				pop	EBX 
 00001ACC  C9				leave	
 00001ACD  C2 000C			retn	00000000Ch
 00001AD0			UnitTesting_TestIntegers_add ENDP

 00001AD0			UnitTesting_TestIntegers_divide PROC NEAR 
				;void divide(int v1, int v2, int ref res);
 00001AD0  55				push	EBP
 00001AD1  8B EC			mov	EBP,ESP
 00001AD3  51				push	ECX 
 00001AD4  53				push	EBX 
 00001AD5  56				push	ESI 
 00001AD6  57				push	EDI 
				;{

				;{379}:res= v1 div v2;
 00001AD7  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001ADA  50				push	EAX
 00001ADB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001ADE  8B C8			mov	ECX,EAX
 00001AE0  58				pop	EAX
 00001AE1  33 D2			xor	EDX,EDX
 00001AE3  F7 F9			idiv	ECX
 00001AE5  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001AE8  89 03			mov	dword ptr [EBX],EAX

				;{381}:Console::WriteLn("(div) the result is: ", res);
 00001AEA  8D 05 0000035A R		lea	EAX,OFFSET $S000782
 00001AF0  6A 00			push	000000000h
 00001AF2  50				push	EAX 
 00001AF3  E8 00000000 E		call	 Console_WriteString
 00001AF8  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001AFB  8B 03			mov	EAX,dword ptr [EBX]
 00001AFD  50				push	EAX 
 00001AFE  E8 00000000 E		call	 Console_WriteInteger 
 00001B03  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001B08			$L000778:

 00001B08  5F				pop	EDI
 00001B09  5E				pop	ESI 
 00001B0A  5B				pop	EBX 
 00001B0B  C9				leave	
 00001B0C  C2 000C			retn	00000000Ch
 00001B0F			UnitTesting_TestIntegers_divide ENDP

 00001B0F			UnitTesting_TestIntegers_divide2 PROC NEAR 
				;void divide2(int v1, int v2, int ref res);
 00001B0F  55				push	EBP
 00001B10  8B EC			mov	EBP,ESP
 00001B12  51				push	ECX 
 00001B13  53				push	EBX 
 00001B14  56				push	ESI 
 00001B15  57				push	EDI 
				;{

				;{393}:res= Math::Round(v1 / v2);

 00001B16  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001B19  50				push	EAX
 00001B1A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B1D  9B DB E2			fclex
 00001B20  50				push	EAX
 00001B21  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001B27  50				push	EAX
 00001B28  52				push	EDX 
 00001B29  DD 04 24			fld	qword ptr [ESP]
 00001B2C  59				pop	ECX
 00001B2D  59				pop	ECX 
 00001B2E  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001B34  50				push	EAX
 00001B35  52				push	EDX 
 00001B36  DC 3C 24			fdivr	qword ptr [ESP]
 00001B39  DD 1C 24			fstp	qword ptr [ESP]

 00001B3C  E8 00000000 E		call	 Math_Round
 00001B41  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001B44  89 03			mov	dword ptr [EBX],EAX

				;{395}:Console::WriteLn("(round(/)) the result is: ", res);
 00001B46  8D 05 000003B6 R		lea	EAX,OFFSET $S000792
 00001B4C  6A 00			push	000000000h
 00001B4E  50				push	EAX 
 00001B4F  E8 00000000 E		call	 Console_WriteString
 00001B54  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001B57  8B 03			mov	EAX,dword ptr [EBX]
 00001B59  50				push	EAX 
 00001B5A  E8 00000000 E		call	 Console_WriteInteger 
 00001B5F  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001B64			$L000788:

 00001B64  5F				pop	EDI
 00001B65  5E				pop	ESI 
 00001B66  5B				pop	EBX 
 00001B67  C9				leave	
 00001B68  C2 000C			retn	00000000Ch
 00001B6B			UnitTesting_TestIntegers_divide2 ENDP

 00001B6B			UnitTesting_TestIntegers_getArea PROC NEAR 
				;int getArea(void);
 00001B6B  55				push	EBP
 00001B6C  8B EC			mov	EBP,ESP
 00001B6E  51				push	ECX 
 00001B6F  53				push	EBX 
 00001B70  56				push	ESI 
 00001B71  57				push	EDI 
				;{

				;{113}:return Width * Height
 00001B72  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B75  E8 FFFFFEF0			call	 UnitTesting_TestIntegers_get_Width
 00001B7A  50				push	EAX
 00001B7B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B7E  E8 FFFFFE53			call	 UnitTesting_TestIntegers_get_Height
 00001B83  59				pop	ECX
 00001B84  99				cdq	
 00001B85  0F AF C1			imul	EAX,ECX
 00001B88  EB 00			jmp	OFFSET $L000688
				;}
 00001B8A			$L000688:

 00001B8A  5F				pop	EDI
 00001B8B  5E				pop	ESI 
 00001B8C  5B				pop	EBX 
 00001B8D  C9				leave	
 00001B8E  C3				ret	
 00001B8F			UnitTesting_TestIntegers_getArea ENDP

 00001B8F			UnitTesting_TestIntegers_getArea2 PROC NEAR 
				;double getArea2(void);
 00001B8F  55				push	EBP
 00001B90  8B EC			mov	EBP,ESP
 00001B92  51				push	ECX 
 00001B93  53				push	EBX 
 00001B94  56				push	ESI 
 00001B95  57				push	EDI 
				;{

				;{118}:return nWidth * nHeight * 1.0
 00001B96  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B99  8B 01			mov	EAX,dword ptr [ECX]
 00001B9B  50				push	EAX
 00001B9C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001B9F  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00001BA2  59				pop	ECX
 00001BA3  99				cdq	
 00001BA4  0F AF C1			imul	EAX,ECX
 00001BA7  50				push	EAX
 00001BA8  52				push	EDX 
 00001BA9  D9 E8			fld1
 00001BAB  9B DB E2			fclex
 00001BAE  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00001BB4  50				push	EAX
 00001BB5  52				push	EDX 
 00001BB6  DC 0C 24			fmul	qword ptr [ESP]
 00001BB9  DF 3C 24			fistp	qword ptr [ESP]
 00001BBC  5A				pop	EDX
 00001BBD  58				pop	EAX 
 00001BBE  EB 00			jmp	OFFSET $L000689
				;}
 00001BC0			$L000689:

 00001BC0  5F				pop	EDI
 00001BC1  5E				pop	ESI 
 00001BC2  5B				pop	EBX 
 00001BC3  C9				leave	
 00001BC4  C3				ret	
 00001BC5			UnitTesting_TestIntegers_getArea2 ENDP

 00001BC5			UnitTesting_TestIntegers_modulus PROC NEAR 
				;void modulus(int v1, int v2, int ref res);
 00001BC5  55				push	EBP
 00001BC6  8B EC			mov	EBP,ESP
 00001BC8  51				push	ECX 
 00001BC9  53				push	EBX 
 00001BCA  56				push	ESI 
 00001BCB  57				push	EDI 
				;{

				;{386}:res= v1 % v2;
 00001BCC  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001BCF  50				push	EAX
 00001BD0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BD3  8B C8			mov	ECX,EAX
 00001BD5  58				pop	EAX
 00001BD6  33 D2			xor	EDX,EDX
 00001BD8  F7 F9			idiv	ECX
 00001BDA  8B C2			mov	EAX,EDX 
 00001BDC  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001BDF  89 03			mov	dword ptr [EBX],EAX

				;{388}:Console::WriteLn("(mod) the result is: ", res);
 00001BE1  8D 05 00000399 R		lea	EAX,OFFSET $S000787
 00001BE7  6A 00			push	000000000h
 00001BE9  50				push	EAX 
 00001BEA  E8 00000000 E		call	 Console_WriteString
 00001BEF  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001BF2  8B 03			mov	EAX,dword ptr [EBX]
 00001BF4  50				push	EAX 
 00001BF5  E8 00000000 E		call	 Console_WriteInteger 
 00001BFA  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001BFF			$L000783:

 00001BFF  5F				pop	EDI
 00001C00  5E				pop	ESI 
 00001C01  5B				pop	EBX 
 00001C02  C9				leave	
 00001C03  C2 000C			retn	00000000Ch
 00001C06			UnitTesting_TestIntegers_modulus ENDP

 00001C06			UnitTesting_TestIntegers_multiple_assignments PROC NEAR 
				;void multiple_assignments(int ref param1, int param2);
 00001C06  55				push	EBP
 00001C07  8B EC			mov	EBP,ESP
 00001C09  83 EC 0C			sub	ESP,00000000Ch
 00001C0C  53				push	EBX 
 00001C0D  56				push	ESI 
 00001C0E  57				push	EDI 
 00001C0F  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001C12  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001C15  B9 00000002			mov	ECX,000000002h 
 00001C1A  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001C1F  F3/ AB			rep stos	dword ptr [EDI]
 00001C21  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{400}:local= param2= param1= (0x400 * 1024) / 0x10;
 00001C24  B8 00000400			mov	EAX,000000400h
 00001C29  50				push	EAX
 00001C2A  B8 00000400			mov	EAX,000000400h
 00001C2F  59				pop	ECX
 00001C30  33 D2			xor	EDX,EDX
 00001C32  66| 0F AF C1			imul	AX,CX
 00001C36  C1 E2 10			shl	EDX,000000010h
 00001C39  0B C2			or	EAX,EDX
 00001C3B  50				push	EAX
 00001C3C  B8 00000010			mov	EAX,000000010h
 00001C41  9B DB E2			fclex
 00001C44  50				push	EAX
 00001C45  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001C4B  50				push	EAX
 00001C4C  52				push	EDX 
 00001C4D  DD 04 24			fld	qword ptr [ESP]
 00001C50  59				pop	ECX
 00001C51  59				pop	ECX 
 00001C52  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001C58  50				push	EAX
 00001C59  52				push	EDX 
 00001C5A  DC 3C 24			fdivr	qword ptr [ESP]
 00001C5D  DD 1C 24			fstp	qword ptr [ESP]
 00001C60  5A				pop	EDX
 00001C61  58				pop	EAX 
 00001C62  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001C65  89 03			mov	dword ptr [EBX],EAX
 00001C67  89 45 0C			mov	dword ptr [EBP+000Ch],EAX
 00001C6A  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{402}:what= (local == 0x10000);
 00001C6D  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001C70  50				push	EAX
 00001C71  B8 00010000			mov	EAX,000010000h
 00001C76  5A				pop	EDX
 00001C77  3B D0			cmp	EDX,EAX
 00001C79  0F 94 C0			setz	AL
 00001C7C  88 45 F8			mov	byte ptr [EBP-0008h],AL
				;}
 00001C7F			$L000793:

 00001C7F  5F				pop	EDI
 00001C80  5E				pop	ESI 
 00001C81  5B				pop	EBX 
 00001C82  C9				leave	
 00001C83  C2 0008			retn	000000008h
 00001C86			UnitTesting_TestIntegers_multiple_assignments ENDP

 00001C86			UnitTesting_TestIntegers_multiply PROC NEAR 
				;void multiply(int v1, int v2, int ref res);
 00001C86  55				push	EBP
 00001C87  8B EC			mov	EBP,ESP
 00001C89  51				push	ECX 
 00001C8A  53				push	EBX 
 00001C8B  56				push	ESI 
 00001C8C  57				push	EDI 
				;{

				;{372}:res= v1 * v2;
 00001C8D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001C90  50				push	EAX
 00001C91  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001C94  59				pop	ECX
 00001C95  99				cdq	
 00001C96  0F AF C1			imul	EAX,ECX
 00001C99  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001C9C  89 03			mov	dword ptr [EBX],EAX

				;{374}:Console::WriteLn("(*) the result is: ", res);
 00001C9E  8D 05 000000B8 R		lea	EAX,OFFSET $S000777
 00001CA4  6A 00			push	000000000h
 00001CA6  50				push	EAX 
 00001CA7  E8 00000000 E		call	 Console_WriteString
 00001CAC  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001CAF  8B 03			mov	EAX,dword ptr [EBX]
 00001CB1  50				push	EAX 
 00001CB2  E8 00000000 E		call	 Console_WriteInteger 
 00001CB7  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001CBC			$L000773:

 00001CBC  5F				pop	EDI
 00001CBD  5E				pop	ESI 
 00001CBE  5B				pop	EBX 
 00001CBF  C9				leave	
 00001CC0  C2 000C			retn	00000000Ch
 00001CC3			UnitTesting_TestIntegers_multiply ENDP

 00001CC3			UnitTesting_TestIntegers_subs PROC NEAR 
				;void subs(int v1, int v2, int ref res);
 00001CC3  55				push	EBP
 00001CC4  8B EC			mov	EBP,ESP
 00001CC6  51				push	ECX 
 00001CC7  53				push	EBX 
 00001CC8  56				push	ESI 
 00001CC9  57				push	EDI 
				;{

				;{365}:res= v1 - v2;
 00001CCA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001CCD  50				push	EAX
 00001CCE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001CD1  5A				pop	EDX
 00001CD2  2B D0			sub	EDX,EAX
 00001CD4  8B C2			mov	EAX,EDX
 00001CD6  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001CD9  89 03			mov	dword ptr [EBX],EAX

				;{367}:Console::WriteLn("(-) the result is: ", res);
 00001CDB  8D 05 000000E0 R		lea	EAX,OFFSET $S000772
 00001CE1  6A 00			push	000000000h
 00001CE3  50				push	EAX 
 00001CE4  E8 00000000 E		call	 Console_WriteString
 00001CE9  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00001CEC  8B 03			mov	EAX,dword ptr [EBX]
 00001CEE  50				push	EAX 
 00001CEF  E8 00000000 E		call	 Console_WriteInteger 
 00001CF4  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001CF9			$L000768:

 00001CF9  5F				pop	EDI
 00001CFA  5E				pop	ESI 
 00001CFB  5B				pop	EBX 
 00001CFC  C9				leave	
 00001CFD  C2 000C			retn	00000000Ch
 00001D00			UnitTesting_TestIntegers_subs ENDP

 00001D00			UnitTesting_TestIntegers PROC NEAR 
				;void UnitTesting::TestIntegers(void);
 00001D00  55				push	EBP
 00001D01  8B EC			mov	EBP,ESP
 00001D03  51				push	ECX 
 00001D04  53				push	EBX 
 00001D05  56				push	ESI 
 00001D06  57				push	EDI 
 00001D07  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001D0A  E8 00000F4B			call	 __member_Init@UnitTesting_TestIntegers

 00001D0F  5F				pop	EDI
 00001D10  5E				pop	ESI 
 00001D11  5B				pop	EBX 
 00001D12  C9				leave	
 00001D13  C3				ret	
 00001D14			UnitTesting_TestIntegers ENDP

 00001D14			UnitTesting_TestIntegers_TestExpressions PROC NEAR 
				;void UnitTesting::TestIntegers::TestExpressions(void);
 00001D14  55				push	EBP
 00001D15  8B EC			mov	EBP,ESP
 00001D17  81 EC 00000080		sub	ESP,000000080h
 00001D1D  53				push	EBX 
 00001D1E  56				push	ESI 
 00001D1F  57				push	EDI 
 00001D20  8D 7D 84			lea	EDI,dword ptr [EBP-007Ch]
 00001D23  B9 0000001F			mov	ECX,00000001Fh
 00001D28  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001D2D  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{125}:hex_value= 0xDEADC0DEh;
 00001D2F  B8 DEADC0DE			mov	EAX,0DEADC0DEh
 00001D34  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{127}:hex_value= hex_value << 0x10;
 00001D37  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001D3A  50				push	EAX
 00001D3B  B8 00000010			mov	EAX,000000010h
 00001D40  8A C8			mov	CL,AL
 00001D42  58				pop	EAX
 00001D43  D3 E0			shl	EAX,CL
 00001D45  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{129}:hex_value= hex_value >> 8;
 00001D48  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001D4B  50				push	EAX
 00001D4C  B8 00000008			mov	EAX,000000008h
 00001D51  8A C8			mov	CL,AL
 00001D53  58				pop	EAX
 00001D54  D3 E8			shr	EAX,CL
 00001D56  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{131}:hex_value= hex_value >> 8;
 00001D59  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001D5C  50				push	EAX
 00001D5D  B8 00000008			mov	EAX,000000008h
 00001D62  8A C8			mov	CL,AL
 00001D64  58				pop	EAX
 00001D65  D3 E8			shr	EAX,CL
 00001D67  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{134}:j= 0;
 00001D6A  33 C0			xor	EAX,EAX
 00001D6C  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{136}:what= false;
 00001D6F  33 C0			xor	EAX,EAX
 00001D71  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{145}:hex_value= 0;
 00001D74  33 C0			xor	EAX,EAX
 00001D76  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{147}:while(true)
 00001D79			$L001020:
 00001D79  B8 00000001			mov	EAX,000000001h
 00001D7E  85 C0			test	EAX,EAX
 00001D80  74 5B			jz	OFFSET $L001021
				;{

				;{149}:j= (4 + (--j)) % 4;
 00001D82  B8 00000004			mov	EAX,000000004h
 00001D87  50				push	EAX
 00001D88  FF 4D F8			dec	dword ptr [EBP-8]
 00001D8B  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001D8E  5A				pop	EDX
 00001D8F  03 C2			add	EAX,EDX
 00001D91  50				push	EAX
 00001D92  B8 00000004			mov	EAX,000000004h
 00001D97  8B C8			mov	ECX,EAX
 00001D99  58				pop	EAX
 00001D9A  33 D2			xor	EDX,EDX
 00001D9C  F7 F9			idiv	ECX
 00001D9E  8B C2			mov	EAX,EDX 
 00001DA0  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{151}:if(++hex_value < 12)
 00001DA3  FF 45 FC			inc	dword ptr [EBP-4]
 00001DA6  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001DA9  50				push	EAX
 00001DAA  B8 0000000C			mov	EAX,00000000Ch
 00001DAF  5A				pop	EDX
 00001DB0  3B D0			cmp	EDX,EAX
 00001DB2  0F 9C C0			setl	AL
 00001DB5  84 C0			test	AL,AL
 00001DB7  74 02			jz	OFFSET $L001022

				;continue;
 00001DB9  EB BE			jmp	OFFSET $L001020
 00001DBB			$L001022:

				;{154}:what= (j % 2) == 0;
 00001DBB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001DBE  50				push	EAX
 00001DBF  B8 00000002			mov	EAX,000000002h
 00001DC4  8B C8			mov	ECX,EAX
 00001DC6  58				pop	EAX
 00001DC7  33 D2			xor	EDX,EDX
 00001DC9  F7 F9			idiv	ECX
 00001DCB  8B C2			mov	EAX,EDX 
 00001DCD  50				push	EAX
 00001DCE  33 C0			xor	EAX,EAX
 00001DD0  5A				pop	EDX
 00001DD1  3B D0			cmp	EDX,EAX
 00001DD3  0F 94 C0			setz	AL
 00001DD6  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;break;
 00001DD9  EB 02			jmp	OFFSET $L001021
				;}
 00001DDB  EB 9C			jmp	OFFSET $L001020
 00001DDD			$L001021:

				;{159}:what= j == 3;
 00001DDD  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001DE0  50				push	EAX
 00001DE1  B8 00000003			mov	EAX,000000003h
 00001DE6  5A				pop	EDX
 00001DE7  3B D0			cmp	EDX,EAX
 00001DE9  0F 94 C0			setz	AL
 00001DEC  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;do
 00001DEF			$L001024:
				;{

				;{162}:j= (4 + (--j)) % 4;
 00001DEF  B8 00000004			mov	EAX,000000004h
 00001DF4  50				push	EAX
 00001DF5  FF 4D F8			dec	dword ptr [EBP-8]
 00001DF8  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001DFB  5A				pop	EDX
 00001DFC  03 C2			add	EAX,EDX
 00001DFE  50				push	EAX
 00001DFF  B8 00000004			mov	EAX,000000004h
 00001E04  8B C8			mov	ECX,EAX
 00001E06  58				pop	EAX
 00001E07  33 D2			xor	EDX,EDX
 00001E09  F7 F9			idiv	ECX
 00001E0B  8B C2			mov	EAX,EDX 
 00001E0D  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{164}:if(j == 0)
 00001E10  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001E13  50				push	EAX
 00001E14  33 C0			xor	EAX,EAX
 00001E16  5A				pop	EDX
 00001E17  3B D0			cmp	EDX,EAX
 00001E19  0F 94 C0			setz	AL
 00001E1C  84 C0			test	AL,AL
 00001E1E  74 02			jz	OFFSET $L001027

				;break;
 00001E20  EB 10			jmp	OFFSET $L001026
 00001E22			$L001027:
				;}
 00001E22			$L001025:

				;{165}:while(j > 0)
 00001E22  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001E25  50				push	EAX
 00001E26  33 C0			xor	EAX,EAX
 00001E28  5A				pop	EDX
 00001E29  3B D0			cmp	EDX,EAX
 00001E2B  0F 9F C0			setg	AL
 00001E2E  85 C0			test	EAX,EAX
 00001E30  75 BD			jne	OFFSET $L001024
 00001E32			$L001026:

				;{169}:x= 0;
 00001E32  33 C0			xor	EAX,EAX
 00001E34  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{171}:y= 1, z= 2;
 00001E37  B8 00000001			mov	EAX,000000001h
 00001E3C  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 00001E3F  B8 00000002			mov	EAX,000000002h
 00001E44  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{173}:result= (y + 1) * z;
 00001E47  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001E4A  50				push	EAX
 00001E4B  B8 00000001			mov	EAX,000000001h
 00001E50  5A				pop	EDX
 00001E51  03 C2			add	EAX,EDX
 00001E53  50				push	EAX
 00001E54  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00001E57  59				pop	ECX
 00001E58  99				cdq	
 00001E59  0F AF C1			imul	EAX,ECX
 00001E5C  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{175}:x++ ;
 00001E5F  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00001E62  FF 45 F0			inc	dword ptr [EBP-16]

				;{176}:++x;
 00001E65  FF 45 F0			inc	dword ptr [EBP-16]
 00001E68  8B 45 F0			mov	EAX,dword ptr [EBP-16]

				;{178}:x+= 14;
 00001E6B  B8 0000000E			mov	EAX,00000000Eh
 00001E70  F8				clc	
 00001E71  01 45 F0			add	dword ptr [EBP-0010h],EAX

				;{180}:what= x == 0x10h;
 00001E74  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001E77  50				push	EAX
 00001E78  B8 00000010			mov	EAX,000000010h
 00001E7D  5A				pop	EDX
 00001E7E  3B D0			cmp	EDX,EAX
 00001E80  0F 94 C0			setz	AL
 00001E83  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{182}:x/= 4;
 00001E86  B8 00000004			mov	EAX,000000004h
 00001E8B  50				push	EAX
 00001E8C  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001E8F  99				cdq	
 00001E90  F7 3C 24			idiv	dword ptr [ESP]
 00001E93  89 45 F0			mov	dword ptr [EBP-0010h],EAX 
 00001E96  59				pop	ECX

				;{184}:--x;
 00001E97  FF 4D F0			dec	dword ptr [EBP-16]
 00001E9A  8B 45 F0			mov	EAX,dword ptr [EBP-16]

				;{185}:x-- ;
 00001E9D  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00001EA0  FF 4D F0			dec	dword ptr [EBP-16]

				;{187}:x= 7 % x;
 00001EA3  B8 00000007			mov	EAX,000000007h
 00001EA8  50				push	EAX
 00001EA9  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001EAC  8B C8			mov	ECX,EAX
 00001EAE  58				pop	EAX
 00001EAF  33 D2			xor	EDX,EDX
 00001EB1  F7 F9			idiv	ECX
 00001EB3  8B C2			mov	EAX,EDX 
 00001EB5  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{189}:what= x == 1;
 00001EB8  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001EBB  50				push	EAX
 00001EBC  B8 00000001			mov	EAX,000000001h
 00001EC1  5A				pop	EDX
 00001EC2  3B D0			cmp	EDX,EAX
 00001EC4  0F 94 C0			setz	AL
 00001EC7  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{191}:x++ ;
 00001ECA  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00001ECD  FF 45 F0			inc	dword ptr [EBP-16]

				;{193}:x*= 10;
 00001ED0  B8 0000000A			mov	EAX,00000000Ah
 00001ED5  F7 6D F0			imul	dword ptr [EBP-0010h]
 00001ED8  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{195}:x/= 5;
 00001EDB  B8 00000005			mov	EAX,000000005h
 00001EE0  50				push	EAX
 00001EE1  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001EE4  99				cdq	
 00001EE5  F7 3C 24			idiv	dword ptr [ESP]
 00001EE8  89 45 F0			mov	dword ptr [EBP-0010h],EAX 
 00001EEB  59				pop	ECX

				;{197}:x/= 4;
 00001EEC  B8 00000004			mov	EAX,000000004h
 00001EF1  50				push	EAX
 00001EF2  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001EF5  99				cdq	
 00001EF6  F7 3C 24			idiv	dword ptr [ESP]
 00001EF9  89 45 F0			mov	dword ptr [EBP-0010h],EAX 
 00001EFC  59				pop	ECX

				;{199}:x%= 4;
 00001EFD  B8 00000004			mov	EAX,000000004h
 00001F02  50				push	EAX
 00001F03  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F06  99				cdq	
 00001F07  F7 3C 24			idiv	dword ptr [ESP]
 00001F0A  89 55 F0			mov	dword ptr [EBP-0010h],EDX 
 00001F0D  59				pop	ECX

				;{201}:y= 0x400h;
 00001F0E  B8 00000400			mov	EAX,000000400h
 00001F13  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{203}:x= y div 15;
 00001F16  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001F19  50				push	EAX
 00001F1A  B8 0000000F			mov	EAX,00000000Fh
 00001F1F  8B C8			mov	ECX,EAX
 00001F21  58				pop	EAX
 00001F22  33 D2			xor	EDX,EDX
 00001F24  F7 F9			idiv	ECX
 00001F26  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{205}:what= x == 68;
 00001F29  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F2C  50				push	EAX
 00001F2D  B8 00000044			mov	EAX,000000044h
 00001F32  5A				pop	EDX
 00001F33  3B D0			cmp	EDX,EAX
 00001F35  0F 94 C0			setz	AL
 00001F38  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{207}:z= 0x10;
 00001F3B  B8 00000010			mov	EAX,000000010h
 00001F40  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{209}:x= y * z;
 00001F43  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001F46  50				push	EAX
 00001F47  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00001F4A  59				pop	ECX
 00001F4B  99				cdq	
 00001F4C  0F AF C1			imul	EAX,ECX
 00001F4F  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{211}:what= x == 0x400;
 00001F52  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F55  50				push	EAX
 00001F56  B8 00000400			mov	EAX,000000400h
 00001F5B  5A				pop	EDX
 00001F5C  3B D0			cmp	EDX,EAX
 00001F5E  0F 94 C0			setz	AL
 00001F61  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{213}:y= z= x;
 00001F64  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F67  89 45 E8			mov	dword ptr [EBP-0018h],EAX
 00001F6A  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{215}:x= y div 4;
 00001F6D  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001F70  50				push	EAX
 00001F71  B8 00000004			mov	EAX,000000004h
 00001F76  8B C8			mov	ECX,EAX
 00001F78  58				pop	EAX
 00001F79  33 D2			xor	EDX,EDX
 00001F7B  F7 F9			idiv	ECX
 00001F7D  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{217}:what= x == 4096;
 00001F80  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F83  50				push	EAX
 00001F84  B8 00001000			mov	EAX,000001000h
 00001F89  5A				pop	EDX
 00001F8A  3B D0			cmp	EDX,EAX
 00001F8C  0F 94 C0			setz	AL
 00001F8F  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{219}:z= x % 3;
 00001F92  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001F95  50				push	EAX
 00001F96  B8 00000003			mov	EAX,000000003h
 00001F9B  8B C8			mov	ECX,EAX
 00001F9D  58				pop	EAX
 00001F9E  33 D2			xor	EDX,EDX
 00001FA0  F7 F9			idiv	ECX
 00001FA2  8B C2			mov	EAX,EDX 
 00001FA4  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{221}:what= x == 1;
 00001FA7  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001FAA  50				push	EAX
 00001FAB  B8 00000001			mov	EAX,000000001h
 00001FB0  5A				pop	EDX
 00001FB1  3B D0			cmp	EDX,EAX
 00001FB3  0F 94 C0			setz	AL
 00001FB6  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{223}:y= x div 3;
 00001FB9  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001FBC  50				push	EAX
 00001FBD  B8 00000003			mov	EAX,000000003h
 00001FC2  8B C8			mov	ECX,EAX
 00001FC4  58				pop	EAX
 00001FC5  33 D2			xor	EDX,EDX
 00001FC7  F7 F9			idiv	ECX
 00001FC9  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{225}:what= x == 1365;
 00001FCC  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001FCF  50				push	EAX
 00001FD0  B8 00000555			mov	EAX,000000555h
 00001FD5  5A				pop	EDX
 00001FD6  3B D0			cmp	EDX,EAX
 00001FD8  0F 94 C0			setz	AL
 00001FDB  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{227}:result= FloatingPoint::ToInt(x / 3);

 00001FDE  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001FE1  50				push	EAX
 00001FE2  B8 00000003			mov	EAX,000000003h
 00001FE7  9B DB E2			fclex
 00001FEA  50				push	EAX
 00001FEB  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001FF1  50				push	EAX
 00001FF2  52				push	EDX 
 00001FF3  DD 04 24			fld	qword ptr [ESP]
 00001FF6  59				pop	ECX
 00001FF7  59				pop	ECX 
 00001FF8  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00001FFE  50				push	EAX
 00001FFF  52				push	EDX 
 00002000  DC 3C 24			fdivr	qword ptr [ESP]
 00002003  DD 1C 24			fstp	qword ptr [ESP]

 00002006  E8 00000000 E		call	 FloatingPoint_ToInt
 0000200B  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{229}:result= x / (3 + 1);
 0000200E  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00002011  50				push	EAX
 00002012  B8 00000003			mov	EAX,000000003h
 00002017  50				push	EAX
 00002018  B8 00000001			mov	EAX,000000001h
 0000201D  5A				pop	EDX
 0000201E  03 C2			add	EAX,EDX
 00002020  9B DB E2			fclex
 00002023  50				push	EAX
 00002024  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000202A  50				push	EAX
 0000202B  52				push	EDX 
 0000202C  DD 04 24			fld	qword ptr [ESP]
 0000202F  59				pop	ECX
 00002030  59				pop	ECX 
 00002031  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002037  50				push	EAX
 00002038  52				push	EDX 
 00002039  DC 3C 24			fdivr	qword ptr [ESP]
 0000203C  DD 1C 24			fstp	qword ptr [ESP]
 0000203F  5A				pop	EDX
 00002040  58				pop	EAX 
 00002041  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{231}:what= (result == 1024);
 00002044  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00002047  50				push	EAX
 00002048  B8 00000400			mov	EAX,000000400h
 0000204D  5A				pop	EDX
 0000204E  3B D0			cmp	EDX,EAX
 00002050  0F 94 C0			setz	AL
 00002053  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{233}:a= 20000, b= 4, c= 10;
 00002056  B8 00004E20			mov	EAX,000004E20h
 0000205B  66| 89 45 E0			mov	word ptr [EBP-0020h],AX
 0000205F  B8 00000004			mov	EAX,000000004h
 00002064  66| 89 45 DC			mov	word ptr [EBP-0024h],AX
 00002068  B8 0000000A			mov	EAX,00000000Ah
 0000206D  66| 89 45 D8			mov	word ptr [EBP-0028h],AX

				;{235}:result= a * b * c;
 00002071  33 C0			xor	EAX,EAX
 00002073  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 00002077  50				push	EAX
 00002078  33 C0			xor	EAX,EAX
 0000207A  66| 8B 45 DC			mov	AX,word ptr [EBP-0024h]
 0000207E  59				pop	ECX
 0000207F  33 D2			xor	EDX,EDX
 00002081  66| 0F AF C1			imul	AX,CX
 00002085  C1 E2 10			shl	EDX,000000010h
 00002088  0B C2			or	EAX,EDX
 0000208A  50				push	EAX
 0000208B  33 C0			xor	EAX,EAX
 0000208D  66| 8B 45 D8			mov	AX,word ptr [EBP-0028h]
 00002091  59				pop	ECX 
 00002092  33 D2			xor	EDX,EDX 
 00002094  66| 0F AF C1			imul	AX,CX 
 00002098  C1 E2 10			shl	EDX,000000010h 
 0000209B  0B C2			or	EAX,EDX 
 0000209D  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{237}:what= result == 0xC3500h;
 000020A0  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000020A3  50				push	EAX
 000020A4  B8 000C3500			mov	EAX,0000C3500h
 000020A9  5A				pop	EDX
 000020AA  3B D0			cmp	EDX,EAX
 000020AC  0F 94 C0			setz	AL
 000020AF  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{239}:result/= 0x10;
 000020B2  B8 00000010			mov	EAX,000000010h
 000020B7  50				push	EAX
 000020B8  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000020BB  99				cdq	
 000020BC  F7 3C 24			idiv	dword ptr [ESP]
 000020BF  89 45 E4			mov	dword ptr [EBP-001Ch],EAX 
 000020C2  59				pop	ECX

				;{241}:what= (result == 50000);
 000020C3  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000020C6  50				push	EAX
 000020C7  B8 0000C350			mov	EAX,00000C350h
 000020CC  5A				pop	EDX
 000020CD  3B D0			cmp	EDX,EAX
 000020CF  0F 94 C0			setz	AL
 000020D2  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{243}:x= result % 3;
 000020D5  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 000020D8  50				push	EAX
 000020D9  B8 00000003			mov	EAX,000000003h
 000020DE  8B C8			mov	ECX,EAX
 000020E0  58				pop	EAX
 000020E1  33 D2			xor	EDX,EDX
 000020E3  F7 F9			idiv	ECX
 000020E5  8B C2			mov	EAX,EDX 
 000020E7  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{245}:result= Math::Round(a / 3) * 4;

 000020EA  33 C0			xor	EAX,EAX
 000020EC  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 000020F0  50				push	EAX
 000020F1  B8 00000003			mov	EAX,000000003h
 000020F6  9B DB E2			fclex
 000020F9  50				push	EAX
 000020FA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002100  50				push	EAX
 00002101  52				push	EDX 
 00002102  DD 04 24			fld	qword ptr [ESP]
 00002105  59				pop	ECX
 00002106  59				pop	ECX 
 00002107  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000210D  50				push	EAX
 0000210E  52				push	EDX 
 0000210F  DC 3C 24			fdivr	qword ptr [ESP]
 00002112  DD 1C 24			fstp	qword ptr [ESP]

 00002115  E8 00000000 E		call	 Math_Round
 0000211A  50				push	EAX
 0000211B  B8 00000004			mov	EAX,000000004h
 00002120  59				pop	ECX
 00002121  33 D2			xor	EDX,EDX
 00002123  66| 0F AF C1			imul	AX,CX
 00002127  C1 E2 10			shl	EDX,000000010h
 0000212A  0B C2			or	EAX,EDX
 0000212C  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{247}:what= (result == 33335);
 0000212F  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00002132  50				push	EAX
 00002133  B8 00008237			mov	EAX,000008237h
 00002138  5A				pop	EDX
 00002139  3B D0			cmp	EDX,EAX
 0000213B  0F 94 C0			setz	AL
 0000213E  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{249}:a= 1;
 00002141  B8 00000001			mov	EAX,000000001h
 00002146  66| 89 45 E0			mov	word ptr [EBP-0020h],AX

				;{249}:b= 4;
 0000214A  B8 00000004			mov	EAX,000000004h
 0000214F  66| 89 45 DC			mov	word ptr [EBP-0024h],AX

				;{249}:c= 4;
 00002153  B8 00000004			mov	EAX,000000004h
 00002158  66| 89 45 D8			mov	word ptr [EBP-0028h],AX

				;{251}:disc= Math::Sqr(b) - 4 * a * c;
 0000215C  33 C0			xor	EAX,EAX
 0000215E  66| 8B 45 DC			mov	AX,word ptr [EBP-0024h]
 00002162  50				push	EAX
 00002163  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002169  50				push	EAX
 0000216A  52				push	EDX 
 0000216B  E8 00000000 E		call	 Math_Sqr
 00002170  50				push	EAX
 00002171  52				push	EDX 
 00002172  B8 00000004			mov	EAX,000000004h
 00002177  50				push	EAX
 00002178  33 C0			xor	EAX,EAX
 0000217A  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 0000217E  59				pop	ECX
 0000217F  33 D2			xor	EDX,EDX
 00002181  66| 0F AF C1			imul	AX,CX
 00002185  C1 E2 10			shl	EDX,000000010h
 00002188  0B C2			or	EAX,EDX
 0000218A  50				push	EAX
 0000218B  33 C0			xor	EAX,EAX
 0000218D  66| 8B 45 D8			mov	AX,word ptr [EBP-0028h]
 00002191  59				pop	ECX 
 00002192  33 D2			xor	EDX,EDX 
 00002194  66| 0F AF C1			imul	AX,CX 
 00002198  C1 E2 10			shl	EDX,000000010h 
 0000219B  0B C2			or	EAX,EDX 
 0000219D  50				push	EAX
 0000219E  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000021A4  50				push	EAX
 000021A5  52				push	EDX 
 000021A6  DD 04 24			fld	qword ptr [ESP]
 000021A9  59				pop	ECX
 000021AA  59				pop	ECX 
 000021AB  DD 04 24			fld	qword ptr [ESP]
 000021AE  D8 E1			fsub	st,st(1)
 000021B0  DD 1C 24			fstp	qword ptr [ESP]
 000021B3  DD 04 24			fld	qword ptr [ESP]
 000021B6  DD 5D D0			fstp	qword ptr [EBP-0030h]

				;{253}:what= disc == 0.0;
 000021B9  5A				pop	EDX
 000021BA  58				pop	EAX 
 000021BB  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 000021BE  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 000021C1  50				push	EAX
 000021C2  52				push	EDX 
 000021C3  D9 EE			fldz
 000021C5  51				push	ECX
 000021C6  51				push	ECX 
 000021C7  DD 1C 24			fstp	qword ptr [ESP]
 000021CA  E8 00000000 E		call	 FloatingPoint_Compare
 000021CF  85 C0			test	EAX,EAX
 000021D1  0F 94 C0			setz	AL
 000021D4  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{255}:x1= -b + Math::Sqrt(disc) / 2 * a;
 000021D7  33 C0			xor	EAX,EAX
 000021D9  66| 8B 45 DC			mov	AX,word ptr [EBP-0024h]
 000021DD  F7 D8			neg	EAX
 000021DF  50				push	EAX
 000021E0  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 000021E3  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 000021E6  50				push	EAX
 000021E7  52				push	EDX 
 000021E8  E8 00000000 E		call	 Math_Sqrt
 000021ED  50				push	EAX
 000021EE  52				push	EDX 
 000021EF  B8 00000002			mov	EAX,000000002h
 000021F4  9B DB E2			fclex
 000021F7  50				push	EAX
 000021F8  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000021FE  50				push	EAX
 000021FF  52				push	EDX 
 00002200  DD 04 24			fld	qword ptr [ESP]
 00002203  59				pop	ECX
 00002204  59				pop	ECX 
 00002205  DC 3C 24			fdivr	qword ptr [ESP]
 00002208  DD 1C 24			fstp	qword ptr [ESP]
 0000220B  33 C0			xor	EAX,EAX
 0000220D  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 00002211  9B DB E2			fclex
 00002214  50				push	EAX
 00002215  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000221B  50				push	EAX
 0000221C  52				push	EDX 
 0000221D  DD 04 24			fld	qword ptr [ESP]
 00002220  59				pop	ECX 
 00002221  59				pop	ECX 
 00002222  DC 0C 24			fmul	qword ptr [ESP]
 00002225  DD 1C 24			fstp	qword ptr [ESP]
 00002228  DD 04 24			fld	qword ptr [ESP]
 0000222B  59				pop	ECX
 0000222C  59				pop	ECX 
 0000222D  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002233  50				push	EAX
 00002234  52				push	EDX 
 00002235  DC 04 24			fadd	qword ptr [ESP]
 00002238  DD 1C 24			fstp	qword ptr [ESP]
 0000223B  DD 04 24			fld	qword ptr [ESP]
 0000223E  DD 5D C8			fstp	qword ptr [EBP-0038h]

				;{256}:what= x1 == -2.0;
 00002241  5A				pop	EDX
 00002242  58				pop	EAX 
 00002243  8B 55 C8			mov	EDX,dword ptr [EBP-0038h]
 00002246  8B 45 CC			mov	EAX,dword ptr [EBP-0034h] 
 00002249  50				push	EAX
 0000224A  52				push	EDX 
 0000224B  BA 00000000			mov	EDX,000000000h
 00002250  B8 40000000			mov	EAX,040000000h 
 00002255  50				push	EAX
 00002256  52				push	EDX 
 00002257  DD 04 24			fld	qword ptr [ESP]
 0000225A  D9 E0			fchs
 0000225C  DD 1C 24			fstp	qword ptr [ESP]
 0000225F  E8 00000000 E		call	 FloatingPoint_Compare
 00002264  85 C0			test	EAX,EAX
 00002266  0F 94 C0			setz	AL
 00002269  5A				pop	EDX
 0000226A  58				pop	EAX 
 0000226B  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{258}:x2= -b - Math::Sqrt(disc) / 2 * a;
 0000226E  33 C0			xor	EAX,EAX
 00002270  66| 8B 45 DC			mov	AX,word ptr [EBP-0024h]
 00002274  F7 D8			neg	EAX
 00002276  50				push	EAX
 00002277  8B 55 D0			mov	EDX,dword ptr [EBP-0030h]
 0000227A  8B 45 D4			mov	EAX,dword ptr [EBP-002Ch] 
 0000227D  50				push	EAX
 0000227E  52				push	EDX 
 0000227F  E8 00000000 E		call	 Math_Sqrt
 00002284  50				push	EAX
 00002285  52				push	EDX 
 00002286  B8 00000002			mov	EAX,000000002h
 0000228B  9B DB E2			fclex
 0000228E  50				push	EAX
 0000228F  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002295  50				push	EAX
 00002296  52				push	EDX 
 00002297  DD 04 24			fld	qword ptr [ESP]
 0000229A  59				pop	ECX
 0000229B  59				pop	ECX 
 0000229C  DC 3C 24			fdivr	qword ptr [ESP]
 0000229F  DD 1C 24			fstp	qword ptr [ESP]
 000022A2  33 C0			xor	EAX,EAX
 000022A4  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 000022A8  9B DB E2			fclex
 000022AB  50				push	EAX
 000022AC  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000022B2  50				push	EAX
 000022B3  52				push	EDX 
 000022B4  DD 04 24			fld	qword ptr [ESP]
 000022B7  59				pop	ECX 
 000022B8  59				pop	ECX 
 000022B9  DC 0C 24			fmul	qword ptr [ESP]
 000022BC  DD 1C 24			fstp	qword ptr [ESP]
 000022BF  DD 04 24			fld	qword ptr [ESP]
 000022C2  59				pop	ECX
 000022C3  59				pop	ECX 
 000022C4  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000022CA  50				push	EAX
 000022CB  52				push	EDX 
 000022CC  DD 04 24			fld	qword ptr [ESP]
 000022CF  D8 E1			fsub	st,st(1)
 000022D1  DD 1C 24			fstp	qword ptr [ESP]
 000022D4  DD 04 24			fld	qword ptr [ESP]
 000022D7  DD 5D C0			fstp	qword ptr [EBP-0040h]

				;{259}:what= x2 == -2.0;
 000022DA  5A				pop	EDX
 000022DB  58				pop	EAX 
 000022DC  8B 55 C0			mov	EDX,dword ptr [EBP-0040h]
 000022DF  8B 45 C4			mov	EAX,dword ptr [EBP-003Ch] 
 000022E2  50				push	EAX
 000022E3  52				push	EDX 
 000022E4  BA 00000000			mov	EDX,000000000h
 000022E9  B8 40000000			mov	EAX,040000000h 
 000022EE  50				push	EAX
 000022EF  52				push	EDX 
 000022F0  DD 04 24			fld	qword ptr [ESP]
 000022F3  D9 E0			fchs
 000022F5  DD 1C 24			fstp	qword ptr [ESP]
 000022F8  E8 00000000 E		call	 FloatingPoint_Compare
 000022FD  85 C0			test	EAX,EAX
 000022FF  0F 94 C0			setz	AL
 00002302  5A				pop	EDX
 00002303  58				pop	EAX 
 00002304  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{261}:x= 1;
 00002307  B8 00000001			mov	EAX,000000001h
 0000230C  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{262}:Console::WriteLn("the value of x is: ", x);
 0000230F  8D 05 000007A9 R		lea	EAX,OFFSET $S000727
 00002315  6A 00			push	000000000h
 00002317  50				push	EAX 
 00002318  E8 00000000 E		call	 Console_WriteString
 0000231D  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00002320  50				push	EAX 
 00002321  E8 00000000 E		call	 Console_WriteInteger 
 00002326  E8 00000000 E		call	 Console_WriteCrLf 

				;{264}:++x;
 0000232B  FF 45 F0			inc	dword ptr [EBP-16]
 0000232E  8B 45 F0			mov	EAX,dword ptr [EBP-16]

				;{265}:Console::WriteLn("the value of x is: ", x);
 00002331  8D 05 000007A9 R		lea	EAX,OFFSET $S000727
 00002337  6A 00			push	000000000h
 00002339  50				push	EAX 
 0000233A  E8 00000000 E		call	 Console_WriteString
 0000233F  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00002342  50				push	EAX 
 00002343  E8 00000000 E		call	 Console_WriteInteger 
 00002348  E8 00000000 E		call	 Console_WriteCrLf 

				;{267}:--x;
 0000234D  FF 4D F0			dec	dword ptr [EBP-16]
 00002350  8B 45 F0			mov	EAX,dword ptr [EBP-16]

				;{268}:Console::WriteLn("the value of x is: ", x);
 00002353  8D 05 000007A9 R		lea	EAX,OFFSET $S000727
 00002359  6A 00			push	000000000h
 0000235B  50				push	EAX 
 0000235C  E8 00000000 E		call	 Console_WriteString
 00002361  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00002364  50				push	EAX 
 00002365  E8 00000000 E		call	 Console_WriteInteger 
 0000236A  E8 00000000 E		call	 Console_WriteCrLf 

				;{270}:Console::WriteLn("the value of x is: ", x++ );
 0000236F  8D 05 000007A9 R		lea	EAX,OFFSET $S000727
 00002375  6A 00			push	000000000h
 00002377  50				push	EAX 
 00002378  E8 00000000 E		call	 Console_WriteString
 0000237D  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00002380  FF 45 F0			inc	dword ptr [EBP-16]
 00002383  50				push	EAX 
 00002384  E8 00000000 E		call	 Console_WriteInteger 
 00002389  E8 00000000 E		call	 Console_WriteCrLf 

				;{272}:Console::WriteLn("the value of x is: ", x-- );
 0000238E  8D 05 000007A9 R		lea	EAX,OFFSET $S000727
 00002394  6A 00			push	000000000h
 00002396  50				push	EAX 
 00002397  E8 00000000 E		call	 Console_WriteString
 0000239C  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 0000239F  FF 4D F0			dec	dword ptr [EBP-16]
 000023A2  50				push	EAX 
 000023A3  E8 00000000 E		call	 Console_WriteInteger 
 000023A8  E8 00000000 E		call	 Console_WriteCrLf 

				;{274}:Console::WriteLn("the value is: ", x++ -4 / (-1));
 000023AD  8D 05 0000079A R		lea	EAX,OFFSET $S000728
 000023B3  6A 00			push	000000000h
 000023B5  50				push	EAX 
 000023B6  E8 00000000 E		call	 Console_WriteString
 000023BB  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 000023BE  FF 45 F0			inc	dword ptr [EBP-16]
 000023C1  50				push	EAX
 000023C2  B8 00000004			mov	EAX,000000004h
 000023C7  50				push	EAX
 000023C8  B8 00000001			mov	EAX,000000001h
 000023CD  F7 D8			neg	EAX
 000023CF  9B DB E2			fclex
 000023D2  50				push	EAX
 000023D3  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000023D9  50				push	EAX
 000023DA  52				push	EDX 
 000023DB  DD 04 24			fld	qword ptr [ESP]
 000023DE  59				pop	ECX
 000023DF  59				pop	ECX 
 000023E0  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000023E6  50				push	EAX
 000023E7  52				push	EDX 
 000023E8  DC 3C 24			fdivr	qword ptr [ESP]
 000023EB  DD 1C 24			fstp	qword ptr [ESP]
 000023EE  DD 04 24			fld	qword ptr [ESP]
 000023F1  59				pop	ECX
 000023F2  59				pop	ECX 
 000023F3  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000023F9  50				push	EAX
 000023FA  52				push	EDX 
 000023FB  DD 04 24			fld	qword ptr [ESP]
 000023FE  D8 E1			fsub	st,st(1)
 00002400  DD 1C 24			fstp	qword ptr [ESP]
 00002403  E8 00000000 E		call	 Console_WriteDouble 
 00002408  E8 00000000 E		call	 Console_WriteCrLf 

				;{276}:Console::WriteLn("the value is: ", --x - 4 / (-1));
 0000240D  8D 05 0000079A R		lea	EAX,OFFSET $S000728
 00002413  6A 00			push	000000000h
 00002415  50				push	EAX 
 00002416  E8 00000000 E		call	 Console_WriteString
 0000241B  FF 4D F0			dec	dword ptr [EBP-16]
 0000241E  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00002421  50				push	EAX
 00002422  B8 00000004			mov	EAX,000000004h
 00002427  50				push	EAX
 00002428  B8 00000001			mov	EAX,000000001h
 0000242D  F7 D8			neg	EAX
 0000242F  9B DB E2			fclex
 00002432  50				push	EAX
 00002433  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002439  50				push	EAX
 0000243A  52				push	EDX 
 0000243B  DD 04 24			fld	qword ptr [ESP]
 0000243E  59				pop	ECX
 0000243F  59				pop	ECX 
 00002440  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002446  50				push	EAX
 00002447  52				push	EDX 
 00002448  DC 3C 24			fdivr	qword ptr [ESP]
 0000244B  DD 1C 24			fstp	qword ptr [ESP]
 0000244E  DD 04 24			fld	qword ptr [ESP]
 00002451  59				pop	ECX
 00002452  59				pop	ECX 
 00002453  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002459  50				push	EAX
 0000245A  52				push	EDX 
 0000245B  DD 04 24			fld	qword ptr [ESP]
 0000245E  D8 E1			fsub	st,st(1)
 00002460  DD 1C 24			fstp	qword ptr [ESP]
 00002463  E8 00000000 E		call	 Console_WriteDouble 
 00002468  E8 00000000 E		call	 Console_WriteCrLf 

				;{278}:Console::WriteLn("the value is: ", (x++ -4) / (-1));
 0000246D  8D 05 0000079A R		lea	EAX,OFFSET $S000728
 00002473  6A 00			push	000000000h
 00002475  50				push	EAX 
 00002476  E8 00000000 E		call	 Console_WriteString
 0000247B  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 0000247E  FF 45 F0			inc	dword ptr [EBP-16]
 00002481  50				push	EAX
 00002482  B8 00000004			mov	EAX,000000004h
 00002487  5A				pop	EDX
 00002488  2B D0			sub	EDX,EAX
 0000248A  8B C2			mov	EAX,EDX
 0000248C  50				push	EAX
 0000248D  B8 00000001			mov	EAX,000000001h
 00002492  F7 D8			neg	EAX
 00002494  9B DB E2			fclex
 00002497  50				push	EAX
 00002498  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000249E  50				push	EAX
 0000249F  52				push	EDX 
 000024A0  DD 04 24			fld	qword ptr [ESP]
 000024A3  59				pop	ECX
 000024A4  59				pop	ECX 
 000024A5  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000024AB  50				push	EAX
 000024AC  52				push	EDX 
 000024AD  DC 3C 24			fdivr	qword ptr [ESP]
 000024B0  DD 1C 24			fstp	qword ptr [ESP]
 000024B3  E8 00000000 E		call	 Console_WriteDouble 
 000024B8  E8 00000000 E		call	 Console_WriteCrLf 

				;{280}:Console::WriteLn("the value is: ", (--x - 4) / (-1));
 000024BD  8D 05 0000079A R		lea	EAX,OFFSET $S000728
 000024C3  6A 00			push	000000000h
 000024C5  50				push	EAX 
 000024C6  E8 00000000 E		call	 Console_WriteString
 000024CB  FF 4D F0			dec	dword ptr [EBP-16]
 000024CE  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 000024D1  50				push	EAX
 000024D2  B8 00000004			mov	EAX,000000004h
 000024D7  5A				pop	EDX
 000024D8  2B D0			sub	EDX,EAX
 000024DA  8B C2			mov	EAX,EDX
 000024DC  50				push	EAX
 000024DD  B8 00000001			mov	EAX,000000001h
 000024E2  F7 D8			neg	EAX
 000024E4  9B DB E2			fclex
 000024E7  50				push	EAX
 000024E8  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000024EE  50				push	EAX
 000024EF  52				push	EDX 
 000024F0  DD 04 24			fld	qword ptr [ESP]
 000024F3  59				pop	ECX
 000024F4  59				pop	ECX 
 000024F5  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000024FB  50				push	EAX
 000024FC  52				push	EDX 
 000024FD  DC 3C 24			fdivr	qword ptr [ESP]
 00002500  DD 1C 24			fstp	qword ptr [ESP]
 00002503  E8 00000000 E		call	 Console_WriteDouble 
 00002508  E8 00000000 E		call	 Console_WriteCrLf 

				;{282}:x= UnitTesting::ten * 100;
 0000250D  B8 0000000A			mov	EAX,00000000Ah
 00002512  33 D2			xor	EDX,EDX
 00002514  50				push	EAX
 00002515  B8 00000064			mov	EAX,000000064h
 0000251A  59				pop	ECX
 0000251B  33 D2			xor	EDX,EDX
 0000251D  66| 0F AF C1			imul	AX,CX
 00002521  C1 E2 10			shl	EDX,000000010h
 00002524  0B C2			or	EAX,EDX
 00002526  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{284}:what= x == 1000;
 00002529  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 0000252C  50				push	EAX
 0000252D  B8 000003E8			mov	EAX,0000003E8h
 00002532  5A				pop	EDX
 00002533  3B D0			cmp	EDX,EAX
 00002535  0F 94 C0			setz	AL
 00002538  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{286}:what= UnitTesting::ten * 50 == 500;
 0000253B  B8 0000000A			mov	EAX,00000000Ah
 00002540  33 D2			xor	EDX,EDX
 00002542  50				push	EAX
 00002543  B8 00000032			mov	EAX,000000032h
 00002548  59				pop	ECX
 00002549  33 D2			xor	EDX,EDX
 0000254B  66| 0F AF C1			imul	AX,CX
 0000254F  C1 E2 10			shl	EDX,000000010h
 00002552  0B C2			or	EAX,EDX
 00002554  50				push	EAX
 00002555  B8 000001F4			mov	EAX,0000001F4h
 0000255A  5A				pop	EDX
 0000255B  3B D0			cmp	EDX,EAX
 0000255D  0F 94 C0			setz	AL
 00002560  88 45 F4			mov	byte ptr [EBP-000Ch],AL

				;{295}:UnitTesting::TestIntegers::bigValue*= 4;
 00002563  B8 00000004			mov	EAX,000000004h
 00002568  99				cdq	
 00002569  8D 1D 00000880 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 0000256F  50				push	EAX
 00002570  52				push	EDX 
 00002571  DF 2C 24			fild	qword ptr [ESP]
 00002574  DC 0B			fmul	qword ptr [EBX]
 00002576  DF 3C 24			fistp	qword ptr [ESP]
 00002579  5A				pop	EDX
 0000257A  58				pop	EAX 
 0000257B  89 43 04			mov	dword ptr [EBX+4],EAX
 0000257E  89 13			mov	dword ptr [EBX],EDX 

				;{299}:alett= UnitTesting::misc1::alpha;
 00002580  B8 00000000			mov	EAX,000000000h
 00002585  33 D2			xor	EDX,EDX
 00002587  89 45 BC			mov	dword ptr [EBP-0044h],EAX

				;{301}:lundi= UnitTesting::misc1::monday, mardi= UnitTesting::misc1::tuesday;
 0000258A  B8 00000001			mov	EAX,000000001h
 0000258F  33 D2			xor	EDX,EDX
 00002591  89 45 B8			mov	dword ptr [EBP-0048h],EAX
 00002594  B8 00000002			mov	EAX,000000002h
 00002599  33 D2			xor	EDX,EDX
 0000259B  89 45 B4			mov	dword ptr [EBP-004Ch],EAX

				;{304}:length= 15, width= 10;
 0000259E  B8 0000000F			mov	EAX,00000000Fh
 000025A3  89 45 B0			mov	dword ptr [EBP-0050h],EAX
 000025A6  B8 0000000A			mov	EAX,00000000Ah
 000025AB  89 45 AC			mov	dword ptr [EBP-0054h],EAX

				;{305}:area= length * width;
 000025AE  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 000025B1  50				push	EAX
 000025B2  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000025B5  59				pop	ECX
 000025B6  99				cdq	
 000025B7  0F AF C1			imul	EAX,ECX
 000025BA  50				push	EAX
 000025BB  52				push	EDX 
 000025BC  DF 2C 24			fild	qword ptr [ESP]
 000025BF  DD 5D A4			fstp	qword ptr [EBP-005Ch]

				;{307}:radius, ;
 000025C2  5A				pop	EDX
 000025C3  58				pop	EAX 
 000025C4  8B 55 9C			mov	EDX,dword ptr [EBP-0064h]
 000025C7  8B 45 A0			mov	EAX,dword ptr [EBP-0060h] 

				;{307}:circ;
 000025CA  8B 55 94			mov	EDX,dword ptr [EBP-006Ch]
 000025CD  8B 45 98			mov	EAX,dword ptr [EBP-0068h] 

				;{309}:letter= 'x';
 000025D0  B8 00000078			mov	EAX,000000078h
 000025D5  88 45 90			mov	byte ptr [EBP-0070h],AL

				;{311}:darea= (length * width) * 0.9;
 000025D8  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 000025DB  50				push	EAX
 000025DC  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000025DF  59				pop	ECX
 000025E0  99				cdq	
 000025E1  0F AF C1			imul	EAX,ECX
 000025E4  50				push	EAX
 000025E5  52				push	EDX 
 000025E6  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000025EB  B8 3FECCCCC			mov	EAX,03FECCCCCh 
 000025F0  9B DB E2			fclex
 000025F3  50				push	EAX
 000025F4  52				push	EDX 
 000025F5  DD 04 24			fld	qword ptr [ESP]
 000025F8  59				pop	ECX
 000025F9  59				pop	ECX 
 000025FA  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt64
 00002600  50				push	EAX
 00002601  52				push	EDX 
 00002602  DC 0C 24			fmul	qword ptr [ESP]
 00002605  DF 3C 24			fistp	qword ptr [ESP]
 00002608  DF 2C 24			fild	qword ptr [ESP]
 0000260B  DD 5D 88			fstp	qword ptr [EBP-0078h]

				;{313}:a= 2;
 0000260E  5A				pop	EDX
 0000260F  58				pop	EAX 
 00002610  B8 00000002			mov	EAX,000000002h
 00002615  66| 89 45 E0			mov	word ptr [EBP-0020h],AX

				;{315}:ternary= 4 >= a ? 999 < 1000 && 1 > 0 : 777 == 77.7 * 10;
 00002619  B8 00000004			mov	EAX,000000004h
 0000261E  50				push	EAX
 0000261F  33 C0			xor	EAX,EAX
 00002621  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 00002625  5A				pop	EDX
 00002626  3B D0			cmp	EDX,EAX
 00002628  0F 9D C0			setge	AL
 0000262B  84 C0			test	AL,AL
 0000262D  74 25			jz	 $L001029
 0000262F  B8 000003E7			mov	EAX,0000003E7h
 00002634  50				push	EAX
 00002635  B8 000003E8			mov	EAX,0000003E8h
 0000263A  5A				pop	EDX
 0000263B  3B D0			cmp	EDX,EAX
 0000263D  0F 9C C0			setl	AL
 00002640  50				push	EAX
 00002641  B8 00000001			mov	EAX,000000001h
 00002646  50				push	EAX
 00002647  33 C0			xor	EAX,EAX
 00002649  5A				pop	EDX
 0000264A  3B D0			cmp	EDX,EAX
 0000264C  0F 9F C0			setg	AL
 0000264F  5A				pop	EDX
 00002650  23 C2			and	EAX,EDX
 00002652  EB 40			jmp	 $L001030
 00002654			$L001029:
 00002654  B8 00000309			mov	EAX,000000309h
 00002659  50				push	EAX
 0000265A  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 0000265F  B8 40536CCC			mov	EAX,040536CCCh 
 00002664  50				push	EAX
 00002665  52				push	EDX 
 00002666  B8 0000000A			mov	EAX,00000000Ah
 0000266B  9B DB E2			fclex
 0000266E  50				push	EAX
 0000266F  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002675  50				push	EAX
 00002676  52				push	EDX 
 00002677  DD 04 24			fld	qword ptr [ESP]
 0000267A  59				pop	ECX
 0000267B  59				pop	ECX 
 0000267C  DC 0C 24			fmul	qword ptr [ESP]
 0000267F  DD 1C 24			fstp	qword ptr [ESP]
 00002682  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002688  50				push	EAX
 00002689  52				push	EDX 
 0000268A  E8 00000000 E		call	 FloatingPoint_Compare
 0000268F  85 C0			test	EAX,EAX
 00002691  0F 94 C0			setz	AL
 00002694			$L001030:
 00002694  5A				pop	EDX
 00002695  58				pop	EAX 
 00002696  88 45 84			mov	byte ptr [EBP-007Ch],AL

				;{315}:7 == 111;
 00002699  B8 00000007			mov	EAX,000000007h
 0000269E  50				push	EAX
 0000269F  B8 0000006F			mov	EAX,00000006Fh
 000026A4  5A				pop	EDX
 000026A5  3B D0			cmp	EDX,EAX
 000026A7  0F 94 C0			setz	AL

				;{317}:ternary= (4 >= a) ? 999 > 1000 && 1 > 0 : 777 / 7 == 111;
 000026AA  B8 00000004			mov	EAX,000000004h
 000026AF  50				push	EAX
 000026B0  33 C0			xor	EAX,EAX
 000026B2  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 000026B6  5A				pop	EDX
 000026B7  3B D0			cmp	EDX,EAX
 000026B9  0F 9D C0			setge	AL
 000026BC  84 C0			test	AL,AL
 000026BE  74 25			jz	 $L001031
 000026C0  B8 000003E7			mov	EAX,0000003E7h
 000026C5  50				push	EAX
 000026C6  B8 000003E8			mov	EAX,0000003E8h
 000026CB  5A				pop	EDX
 000026CC  3B D0			cmp	EDX,EAX
 000026CE  0F 9F C0			setg	AL
 000026D1  50				push	EAX
 000026D2  B8 00000001			mov	EAX,000000001h
 000026D7  50				push	EAX
 000026D8  33 C0			xor	EAX,EAX
 000026DA  5A				pop	EDX
 000026DB  3B D0			cmp	EDX,EAX
 000026DD  0F 9F C0			setg	AL
 000026E0  5A				pop	EDX
 000026E1  23 C2			and	EAX,EDX
 000026E3  EB 41			jmp	 $L001032
 000026E5			$L001031:
 000026E5  B8 00000309			mov	EAX,000000309h
 000026EA  50				push	EAX
 000026EB  B8 00000007			mov	EAX,000000007h
 000026F0  9B DB E2			fclex
 000026F3  50				push	EAX
 000026F4  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000026FA  50				push	EAX
 000026FB  52				push	EDX 
 000026FC  DD 04 24			fld	qword ptr [ESP]
 000026FF  59				pop	ECX
 00002700  59				pop	ECX 
 00002701  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002707  50				push	EAX
 00002708  52				push	EDX 
 00002709  DC 3C 24			fdivr	qword ptr [ESP]
 0000270C  DD 1C 24			fstp	qword ptr [ESP]
 0000270F  B8 0000006F			mov	EAX,00000006Fh
 00002714  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000271A  50				push	EAX
 0000271B  52				push	EDX 
 0000271C  E8 00000000 E		call	 FloatingPoint_Compare
 00002721  85 C0			test	EAX,EAX
 00002723  0F 94 C0			setz	AL
 00002726			$L001032:
 00002726  5A				pop	EDX
 00002727  58				pop	EAX 
 00002728  88 45 84			mov	byte ptr [EBP-007Ch],AL

				;{319}:ternary= 4 < a ? 999 > 1000 && 1 > 0 : 777 / (3 + 4) == 111;
 0000272B  B8 00000004			mov	EAX,000000004h
 00002730  50				push	EAX
 00002731  33 C0			xor	EAX,EAX
 00002733  66| 8B 45 E0			mov	AX,word ptr [EBP-0020h]
 00002737  5A				pop	EDX
 00002738  3B D0			cmp	EDX,EAX
 0000273A  0F 9C C0			setl	AL
 0000273D  84 C0			test	AL,AL
 0000273F  74 25			jz	 $L001033
 00002741  B8 000003E7			mov	EAX,0000003E7h
 00002746  50				push	EAX
 00002747  B8 000003E8			mov	EAX,0000003E8h
 0000274C  5A				pop	EDX
 0000274D  3B D0			cmp	EDX,EAX
 0000274F  0F 9F C0			setg	AL
 00002752  50				push	EAX
 00002753  B8 00000001			mov	EAX,000000001h
 00002758  50				push	EAX
 00002759  33 C0			xor	EAX,EAX
 0000275B  5A				pop	EDX
 0000275C  3B D0			cmp	EDX,EAX
 0000275E  0F 9F C0			setg	AL
 00002761  5A				pop	EDX
 00002762  23 C2			and	EAX,EDX
 00002764  EB 4A			jmp	 $L001034
 00002766			$L001033:
 00002766  B8 00000309			mov	EAX,000000309h
 0000276B  50				push	EAX
 0000276C  B8 00000003			mov	EAX,000000003h
 00002771  50				push	EAX
 00002772  B8 00000004			mov	EAX,000000004h
 00002777  5A				pop	EDX
 00002778  03 C2			add	EAX,EDX
 0000277A  9B DB E2			fclex
 0000277D  50				push	EAX
 0000277E  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002784  50				push	EAX
 00002785  52				push	EDX 
 00002786  DD 04 24			fld	qword ptr [ESP]
 00002789  59				pop	ECX
 0000278A  59				pop	ECX 
 0000278B  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002791  50				push	EAX
 00002792  52				push	EDX 
 00002793  DC 3C 24			fdivr	qword ptr [ESP]
 00002796  DD 1C 24			fstp	qword ptr [ESP]
 00002799  B8 0000006F			mov	EAX,00000006Fh
 0000279E  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000027A4  50				push	EAX
 000027A5  52				push	EDX 
 000027A6  E8 00000000 E		call	 FloatingPoint_Compare
 000027AB  85 C0			test	EAX,EAX
 000027AD  0F 94 C0			setz	AL
 000027B0			$L001034:
 000027B0  5A				pop	EDX
 000027B1  58				pop	EAX 
 000027B2  88 45 84			mov	byte ptr [EBP-007Ch],AL

				;{322}:return 
 000027B5  EB 00			jmp	OFFSET $L000692
				;}
 000027B7			$L000692:

 000027B7  5F				pop	EDI
 000027B8  5E				pop	ESI 
 000027B9  5B				pop	EBX 
 000027BA  C9				leave	
 000027BB  C3				ret	
 000027BC			UnitTesting_TestIntegers_TestExpressions ENDP

 000027BC			UnitTesting_TestSwitch_RunTest PROC NEAR 
				;void UnitTesting::TestSwitch::RunTest(int option);
 000027BC  55				push	EBP
 000027BD  8B EC			mov	EBP,ESP
 000027BF  51				push	ECX 
 000027C0  53				push	EBX 
 000027C1  56				push	ESI 
 000027C2  57				push	EDI 
				;{

				;{14}:switch(option)
 000027C3  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000027C6  8B F0			mov	ESI,EAX
 000027C8  B8 00000001			mov	EAX,000000001h
 000027CD  33 D2			xor	EDX,EDX
 000027CF  3B C6			cmp	EAX,ESI
 000027D1  74 35			jz	OFFSET $L001036
 000027D3  B8 00000002			mov	EAX,000000002h
 000027D8  33 D2			xor	EDX,EDX
 000027DA  3B C6			cmp	EAX,ESI
 000027DC  74 42			jz	OFFSET $L001037
 000027DE  B8 00000003			mov	EAX,000000003h
 000027E3  33 D2			xor	EDX,EDX
 000027E5  3B C6			cmp	EAX,ESI
 000027E7  74 4C			jz	OFFSET $L001038

 000027E9  B8 00000004			mov	EAX,000000004h
 000027EE  33 D2			xor	EDX,EDX
 000027F0  3B C6			cmp	EAX,ESI
 000027F2  74 56			jz	OFFSET $L001039
 000027F4  B8 00000005			mov	EAX,000000005h
 000027F9  3B C6			cmp	EAX,ESI
 000027FB  74 62			jz	OFFSET $L001040
 000027FD  B8 00000006			mov	EAX,000000006h
 00002802  3B C6			cmp	EAX,ESI 
 00002804  74 6C			jz	OFFSET $L001041 
 00002806  EB 7F			jmp	OFFSET $L001042
 00002808			$L001036:

				;{17}:Console::WriteLn("Opening file...");
 00002808  8D 05 000005D5 R		lea	EAX,OFFSET $S000564
 0000280E  6A 00			push	000000000h
 00002810  50				push	EAX 
 00002811  E8 00000000 E		call	 Console_WriteString
 00002816  E8 00000000 E		call	 Console_WriteCrLf 
 0000281B  E9 00000083			jmp	OFFSET $L001035

 00002820			$L001037:

				;{20}:Console::WriteLn("Closing file...");
 00002820  8D 05 00000439 R		lea	EAX,OFFSET $S000565
 00002826  6A 00			push	000000000h
 00002828  50				push	EAX 
 00002829  E8 00000000 E		call	 Console_WriteString
 0000282E  E8 00000000 E		call	 Console_WriteCrLf 
 00002833  EB 6E			jmp	OFFSET $L001035

 00002835			$L001038:

				;{23}:Console::WriteLn("Do Write to file...");
 00002835  8D 05 00000480 R		lea	EAX,OFFSET $S000566
 0000283B  6A 00			push	000000000h
 0000283D  50				push	EAX 
 0000283E  E8 00000000 E		call	 Console_WriteString
 00002843  E8 00000000 E		call	 Console_WriteCrLf 
 00002848  EB 59			jmp	OFFSET $L001035

 0000284A			$L001039:

				;{26}:Console::WriteLn("Do Read from file...");
 0000284A  8D 05 0000046B R		lea	EAX,OFFSET $S000567
 00002850  6A 00			push	000000000h
 00002852  50				push	EAX 
 00002853  E8 00000000 E		call	 Console_WriteString
 00002858  E8 00000000 E		call	 Console_WriteCrLf 
 0000285D  EB 44			jmp	OFFSET $L001035

 0000285F			$L001040:

				;{29}:Console::WriteLn("Do for 5 and follow to 6");
 0000285F  8D 05 00000494 R		lea	EAX,OFFSET $S000568
 00002865  6A 00			push	000000000h
 00002867  50				push	EAX 
 00002868  E8 00000000 E		call	 Console_WriteString
 0000286D  E8 00000000 E		call	 Console_WriteCrLf 

 00002872			$L001041:
				;{

				;{32}:Console::WriteLn("Do 6, then finish");
 00002872  8D 05 00000459 R		lea	EAX,OFFSET $S000570
 00002878  6A 00			push	000000000h
 0000287A  50				push	EAX 
 0000287B  E8 00000000 E		call	 Console_WriteString
 00002880  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002885  EB 1C			jmp	OFFSET $L001035

 00002887			$L001042:

				;{36}:Console::WriteLn("Invalid Option : ", option);
 00002887  8D 05 0000054B R		lea	EAX,OFFSET $S000571
 0000288D  6A 00			push	000000000h
 0000288F  50				push	EAX 
 00002890  E8 00000000 E		call	 Console_WriteString
 00002895  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002898  50				push	EAX 
 00002899  E8 00000000 E		call	 Console_WriteInteger 
 0000289E  E8 00000000 E		call	 Console_WriteCrLf 
 000028A3			$L001035:
				;}
 000028A3			$L000562:

 000028A3  5F				pop	EDI
 000028A4  5E				pop	ESI 
 000028A5  5B				pop	EBX 
 000028A6  C9				leave	
 000028A7  C2 0004			retn	000000004h
 000028AA			UnitTesting_TestSwitch_RunTest ENDP

 000028AA			UnitTesting_TestVirtuals_ExponentialRV_get_MU PROC NEAR 
				;double get::MU(void);
 000028AA  55				push	EBP
 000028AB  8B EC			mov	EBP,ESP
 000028AD  51				push	ECX 
 000028AE  53				push	EBX 
 000028AF  56				push	ESI 
 000028B0  57				push	EDI 
				;{

				;{125}:return mu
 000028B1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000028B4  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000028B7  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000028BA  EB 00			jmp	OFFSET $L000501
				;}
 000028BC			$L000501:

 000028BC  5F				pop	EDI
 000028BD  5E				pop	ESI 
 000028BE  5B				pop	EBX 
 000028BF  C9				leave	
 000028C0  C3				ret	
 000028C1			UnitTesting_TestVirtuals_ExponentialRV_get_MU ENDP

 000028C1			UnitTesting_TestVirtuals_ExponentialRV_Name PROC NEAR 
				;string Name(void);
 000028C1  55				push	EBP
 000028C2  8B EC			mov	EBP,ESP
 000028C4  51				push	ECX 
 000028C5  53				push	EBX 
 000028C6  56				push	ESI 
 000028C7  57				push	EDI 
				;{

				;{138}:return "An exponential variable"
 000028C8  8D 05 000003EE R		lea	EAX,OFFSET $S000506
 000028CE  EB 00			jmp	OFFSET $L000505
				;}
 000028D0			$L000505:

 000028D0  5F				pop	EDI
 000028D1  5E				pop	ESI 
 000028D2  5B				pop	EBX 
 000028D3  C9				leave	
 000028D4  C3				ret	
 000028D5			UnitTesting_TestVirtuals_ExponentialRV_Name ENDP

 000028D5			UnitTesting_TestVirtuals_ExponentialRV_Sample PROC NEAR 
				;double Sample(void);
 000028D5  55				push	EBP
 000028D6  8B EC			mov	EBP,ESP
 000028D8  51				push	ECX 
 000028D9  53				push	EBX 
 000028DA  56				push	ESI 
 000028DB  57				push	EDI 
				;{

				;{134}:return -MU * Math::log10(UnitTesting::Rnd::NextDblEx())
 000028DC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000028DF  E8 FFFFFFC6			call	 UnitTesting_TestVirtuals_ExponentialRV_get_MU
 000028E4  50				push	EAX
 000028E5  52				push	EDX 
 000028E6  E8 FFFFDFF2			call	 UnitTesting_Rnd_NextDblEx
 000028EB  50				push	EAX
 000028EC  52				push	EDX 
 000028ED  E8 00000000 E		call	 Math_log10
 000028F2  9B DB E2			fclex
 000028F5  50				push	EAX
 000028F6  52				push	EDX 
 000028F7  DD 04 24			fld	qword ptr [ESP]
 000028FA  59				pop	ECX
 000028FB  59				pop	ECX 
 000028FC  DC 0C 24			fmul	qword ptr [ESP]
 000028FF  DD 1C 24			fstp	qword ptr [ESP]
 00002902  DD 04 24			fld	qword ptr [ESP]
 00002905  D9 E0			fchs
 00002907  DD 1C 24			fstp	qword ptr [ESP]
 0000290A  5A				pop	EDX
 0000290B  58				pop	EAX 
 0000290C  EB 00			jmp	OFFSET $L000504
				;}
 0000290E			$L000504:

 0000290E  5F				pop	EDI
 0000290F  5E				pop	ESI 
 00002910  5B				pop	EBX 
 00002911  C9				leave	
 00002912  C3				ret	
 00002913			UnitTesting_TestVirtuals_ExponentialRV_Sample ENDP

 00002913			UnitTesting_TestVirtuals_ExponentialRV PROC NEAR 
				;void UnitTesting::TestVirtuals::ExponentialRV(double _mu);
 00002913  55				push	EBP
 00002914  8B EC			mov	EBP,ESP
 00002916  51				push	ECX 
 00002917  53				push	EBX 
 00002918  56				push	ESI 
 00002919  57				push	EDI 
 0000291A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000291D  E8 00000039			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00002922  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00002925  C7 01 00000030 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV 
				;{

				;{130}:mu= _mu;
 0000292B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000292E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002931  50				push	EAX
 00002932  52				push	EDX 
 00002933  DD 04 24			fld	qword ptr [ESP]
 00002936  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002939  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 0000293C  DD 1B			fstp	qword ptr [EBX]
				;}
 0000293E  5A				pop	EDX
 0000293F  58				pop	EAX 

 00002940  5F				pop	EDI
 00002941  5E				pop	ESI 
 00002942  5B				pop	EBX 
 00002943  C9				leave	
 00002944  C2 0008			retn	000000008h
 00002947			UnitTesting_TestVirtuals_ExponentialRV ENDP

 00002947			UnitTesting_TestVirtuals_RandomVariable_Name PROC NEAR 
				;string Name(void);
 00002947  55				push	EBP
 00002948  8B EC			mov	EBP,ESP
 0000294A  51				push	ECX 
 0000294B  53				push	EBX 
 0000294C  56				push	ESI 
 0000294D  57				push	EDI 
				;{

				;{62}:return "(none)"
 0000294E  8D 05 000003AF R		lea	EAX,OFFSET $S000473
 00002954  EB 00			jmp	OFFSET $L000472
				;}
 00002956			$L000472:

 00002956  5F				pop	EDI
 00002957  5E				pop	ESI 
 00002958  5B				pop	EBX 
 00002959  C9				leave	
 0000295A  C3				ret	
 0000295B			UnitTesting_TestVirtuals_RandomVariable_Name ENDP

 0000295B			UnitTesting_TestVirtuals_RandomVariable PROC NEAR 
				;void UnitTesting::TestVirtuals::RandomVariable(void);
 0000295B  55				push	EBP
 0000295C  8B EC			mov	EBP,ESP
 0000295E  51				push	ECX 
 0000295F  53				push	EBX 
 00002960  56				push	ESI 
 00002961  57				push	EDI 
 00002962  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002965  C7 01 00000038 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable 

 0000296B  5F				pop	EDI
 0000296C  5E				pop	ESI 
 0000296D  5B				pop	EBX 
 0000296E  C9				leave	
 0000296F  C3				ret	
 00002970			UnitTesting_TestVirtuals_RandomVariable ENDP

 00002970			UnitTesting_TestVirtuals_SimpleRV_Name PROC NEAR 
				;string Name(void);
 00002970  55				push	EBP
 00002971  8B EC			mov	EBP,ESP
 00002973  51				push	ECX 
 00002974  53				push	EBX 
 00002975  56				push	ESI 
 00002976  57				push	EDI 
				;{

				;{75}:return "A simple variable"
 00002977  8D 05 000003DC R		lea	EAX,OFFSET $S000478
 0000297D  EB 00			jmp	OFFSET $L000477
				;}
 0000297F			$L000477:

 0000297F  5F				pop	EDI
 00002980  5E				pop	ESI 
 00002981  5B				pop	EBX 
 00002982  C9				leave	
 00002983  C3				ret	
 00002984			UnitTesting_TestVirtuals_SimpleRV_Name ENDP

 00002984			UnitTesting_TestVirtuals_SimpleRV_Sample PROC NEAR 
				;double Sample(void);
 00002984  55				push	EBP
 00002985  8B EC			mov	EBP,ESP
 00002987  51				push	ECX 
 00002988  53				push	EBX 
 00002989  56				push	ESI 
 0000298A  57				push	EDI 
				;{

				;{70}:return UnitTesting::Rnd::NextDblEx()
 0000298B  E8 FFFFDF4D			call	 UnitTesting_Rnd_NextDblEx
 00002990  EB 00			jmp	OFFSET $L000476
				;}
 00002992			$L000476:

 00002992  5F				pop	EDI
 00002993  5E				pop	ESI 
 00002994  5B				pop	EBX 
 00002995  C9				leave	
 00002996  C3				ret	
 00002997			UnitTesting_TestVirtuals_SimpleRV_Sample ENDP

 00002997			UnitTesting_TestVirtuals_SimpleRV PROC NEAR 
				;void UnitTesting::TestVirtuals::SimpleRV(void);
 00002997  55				push	EBP
 00002998  8B EC			mov	EBP,ESP
 0000299A  51				push	ECX 
 0000299B  53				push	EBX 
 0000299C  56				push	ESI 
 0000299D  57				push	EDI 
 0000299E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000029A1  E8 FFFFFFB5			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 000029A6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 000029A9  C7 01 00000040 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV 

 000029AF  5F				pop	EDI
 000029B0  5E				pop	ESI 
 000029B1  5B				pop	EBX 
 000029B2  C9				leave	
 000029B3  C3				ret	
 000029B4			UnitTesting_TestVirtuals_SimpleRV ENDP

 000029B4			UnitTesting_TestVirtuals_UniformRV_Name PROC NEAR 
				;string Name(void);
 000029B4  55				push	EBP
 000029B5  8B EC			mov	EBP,ESP
 000029B7  51				push	ECX 
 000029B8  53				push	EBX 
 000029B9  56				push	ESI 
 000029BA  57				push	EDI 
				;{

				;{115}:return "An uniform variable"
 000029BB  8D 05 00000406 R		lea	EAX,OFFSET $S000496
 000029C1  EB 00			jmp	OFFSET $L000495
				;}
 000029C3			$L000495:

 000029C3  5F				pop	EDI
 000029C4  5E				pop	ESI 
 000029C5  5B				pop	EBX 
 000029C6  C9				leave	
 000029C7  C3				ret	
 000029C8			UnitTesting_TestVirtuals_UniformRV_Name ENDP

 000029C8			UnitTesting_TestVirtuals_UniformRV_Sample PROC NEAR 
				;double Sample(void);
 000029C8  55				push	EBP
 000029C9  8B EC			mov	EBP,ESP
 000029CB  51				push	ECX 
 000029CC  53				push	EBX 
 000029CD  56				push	ESI 
 000029CE  57				push	EDI 
				;{

				;{111}:return u + (v - u) * UnitTesting::Rnd::NextDblEx()
 000029CF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000029D2  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000029D5  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000029D8  50				push	EAX
 000029D9  52				push	EDX 
 000029DA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000029DD  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000029E0  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000029E3  50				push	EAX
 000029E4  52				push	EDX 
 000029E5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000029E8  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000029EB  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000029EE  50				push	EAX
 000029EF  52				push	EDX 
 000029F0  DD 04 24			fld	qword ptr [ESP]
 000029F3  59				pop	ECX
 000029F4  59				pop	ECX 
 000029F5  DD 04 24			fld	qword ptr [ESP]
 000029F8  D8 E1			fsub	st,st(1)
 000029FA  DD 1C 24			fstp	qword ptr [ESP]
 000029FD  E8 FFFFDEDB			call	 UnitTesting_Rnd_NextDblEx
 00002A02  9B DB E2			fclex
 00002A05  50				push	EAX
 00002A06  52				push	EDX 
 00002A07  DD 04 24			fld	qword ptr [ESP]
 00002A0A  59				pop	ECX
 00002A0B  59				pop	ECX 
 00002A0C  DC 0C 24			fmul	qword ptr [ESP]
 00002A0F  DD 1C 24			fstp	qword ptr [ESP]
 00002A12  DD 04 24			fld	qword ptr [ESP]
 00002A15  59				pop	ECX
 00002A16  59				pop	ECX 
 00002A17  DC 04 24			fadd	qword ptr [ESP]
 00002A1A  DD 1C 24			fstp	qword ptr [ESP]
 00002A1D  5A				pop	EDX
 00002A1E  58				pop	EAX 
 00002A1F  EB 00			jmp	OFFSET $L000494
				;}
 00002A21			$L000494:

 00002A21  5F				pop	EDI
 00002A22  5E				pop	ESI 
 00002A23  5B				pop	EBX 
 00002A24  C9				leave	
 00002A25  C3				ret	
 00002A26			UnitTesting_TestVirtuals_UniformRV_Sample ENDP

 00002A26			UnitTesting_TestVirtuals_UniformRV_get_U PROC NEAR 
				;double get::U(void);
 00002A26  55				push	EBP
 00002A27  8B EC			mov	EBP,ESP
 00002A29  51				push	ECX 
 00002A2A  53				push	EBX 
 00002A2B  56				push	ESI 
 00002A2C  57				push	EDI 
				;{

				;{86}:return u
 00002A2D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002A30  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00002A33  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00002A36  EB 00			jmp	OFFSET $L000484
				;}
 00002A38			$L000484:

 00002A38  5F				pop	EDI
 00002A39  5E				pop	ESI 
 00002A3A  5B				pop	EBX 
 00002A3B  C9				leave	
 00002A3C  C3				ret	
 00002A3D			UnitTesting_TestVirtuals_UniformRV_get_U ENDP

 00002A3D			UnitTesting_TestVirtuals_UniformRV_put_U PROC NEAR 
				;void put::U(double value);
 00002A3D  55				push	EBP
 00002A3E  8B EC			mov	EBP,ESP
 00002A40  51				push	ECX 
 00002A41  53				push	EBX 
 00002A42  56				push	ESI 
 00002A43  57				push	EDI 
				;{

				;{91}:u= value;
 00002A44  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002A47  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002A4A  50				push	EAX
 00002A4B  52				push	EDX 
 00002A4C  DD 04 24			fld	qword ptr [ESP]
 00002A4F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002A52  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002A55  DD 1B			fstp	qword ptr [EBX]
				;}
 00002A57			$L000485:
 00002A57  5A				pop	EDX
 00002A58  58				pop	EAX 

 00002A59  5F				pop	EDI
 00002A5A  5E				pop	ESI 
 00002A5B  5B				pop	EBX 
 00002A5C  C9				leave	
 00002A5D  C2 0008			retn	000000008h
 00002A60			UnitTesting_TestVirtuals_UniformRV_put_U ENDP

 00002A60			UnitTesting_TestVirtuals_UniformRV PROC NEAR 
				;void UnitTesting::TestVirtuals::UniformRV(double _u, double _v);
 00002A60  55				push	EBP
 00002A61  8B EC			mov	EBP,ESP
 00002A63  51				push	ECX 
 00002A64  53				push	EBX 
 00002A65  56				push	ESI 
 00002A66  57				push	EDI 
 00002A67  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002A6A  E8 FFFFFEEC			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00002A6F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00002A72  C7 01 00000048 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV 
				;{

				;{106}:U= _u;
 00002A78  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002A7B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002A7E  50				push	EAX
 00002A7F  52				push	EDX 
 00002A80  DD 04 24			fld	qword ptr [ESP]
 00002A83  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002A86  0E E8 FFFFFFB1		call	OFFSET UnitTesting_TestVirtuals_UniformRV_put_U

				;{106}:V= _v;
 00002A8C  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 00002A8F  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 00002A92  50				push	EAX
 00002A93  52				push	EDX 
 00002A94  DD 04 24			fld	qword ptr [ESP]
 00002A97  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002A9A  0E E8 0000001E		call	OFFSET UnitTesting_TestVirtuals_UniformRV_put_V
				;}

 00002AA0  5F				pop	EDI
 00002AA1  5E				pop	ESI 
 00002AA2  5B				pop	EBX 
 00002AA3  C9				leave	
 00002AA4  C2 0010			retn	000000010h
 00002AA7			UnitTesting_TestVirtuals_UniformRV ENDP

 00002AA7			UnitTesting_TestVirtuals_UniformRV_get_V PROC NEAR 
				;double get::V(void);
 00002AA7  55				push	EBP
 00002AA8  8B EC			mov	EBP,ESP
 00002AAA  51				push	ECX 
 00002AAB  53				push	EBX 
 00002AAC  56				push	ESI 
 00002AAD  57				push	EDI 
				;{

				;{96}:return v
 00002AAE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002AB1  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00002AB4  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00002AB7  EB 00			jmp	OFFSET $L000488
				;}
 00002AB9			$L000488:

 00002AB9  5F				pop	EDI
 00002ABA  5E				pop	ESI 
 00002ABB  5B				pop	EBX 
 00002ABC  C9				leave	
 00002ABD  C3				ret	
 00002ABE			UnitTesting_TestVirtuals_UniformRV_get_V ENDP

 00002ABE			UnitTesting_TestVirtuals_UniformRV_put_V PROC NEAR 
				;void put::V(double value);
 00002ABE  55				push	EBP
 00002ABF  8B EC			mov	EBP,ESP
 00002AC1  51				push	ECX 
 00002AC2  53				push	EBX 
 00002AC3  56				push	ESI 
 00002AC4  57				push	EDI 
				;{

				;{101}:v= value;
 00002AC5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002AC8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002ACB  50				push	EAX
 00002ACC  52				push	EDX 
 00002ACD  DD 04 24			fld	qword ptr [ESP]
 00002AD0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002AD3  8D 59 0C			lea	EBX,dword ptr [ECX+000Ch]
 00002AD6  DD 1B			fstp	qword ptr [EBX]
				;}
 00002AD8			$L000489:
 00002AD8  5A				pop	EDX
 00002AD9  58				pop	EAX 

 00002ADA  5F				pop	EDI
 00002ADB  5E				pop	ESI 
 00002ADC  5B				pop	EBX 
 00002ADD  C9				leave	
 00002ADE  C2 0008			retn	000000008h
 00002AE1			UnitTesting_TestVirtuals_UniformRV_put_V ENDP

 00002AE1			UnitTesting_Triangle_get_Base PROC NEAR 
				;double get::Base(void);
 00002AE1  55				push	EBP
 00002AE2  8B EC			mov	EBP,ESP
 00002AE4  51				push	ECX 
 00002AE5  53				push	EBX 
 00002AE6  56				push	ESI 
 00002AE7  57				push	EDI 
				;{

				;{147}:return dBase
 00002AE8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002AEB  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00002AEE  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00002AF1  EB 00			jmp	OFFSET $L000620
				;}
 00002AF3			$L000620:

 00002AF3  5F				pop	EDI
 00002AF4  5E				pop	ESI 
 00002AF5  5B				pop	EBX 
 00002AF6  C9				leave	
 00002AF7  C3				ret	
 00002AF8			UnitTesting_Triangle_get_Base ENDP

 00002AF8			UnitTesting_Triangle_put_Base PROC NEAR 
				;void put::Base(double value);
 00002AF8  55				push	EBP
 00002AF9  8B EC			mov	EBP,ESP
 00002AFB  51				push	ECX 
 00002AFC  53				push	EBX 
 00002AFD  56				push	ESI 
 00002AFE  57				push	EDI 
				;{

				;{152}:dBase= value;
 00002AFF  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002B02  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002B05  50				push	EAX
 00002B06  52				push	EDX 
 00002B07  DD 04 24			fld	qword ptr [ESP]
 00002B0A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B0D  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002B10  DD 1B			fstp	qword ptr [EBX]
				;}
 00002B12			$L000621:
 00002B12  5A				pop	EDX
 00002B13  58				pop	EAX 

 00002B14  5F				pop	EDI
 00002B15  5E				pop	ESI 
 00002B16  5B				pop	EBX 
 00002B17  C9				leave	
 00002B18  C2 0008			retn	000000008h
 00002B1B			UnitTesting_Triangle_put_Base ENDP

 00002B1B			UnitTesting_Triangle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00002B1B  55				push	EBP
 00002B1C  8B EC			mov	EBP,ESP
 00002B1E  51				push	ECX 
 00002B1F  53				push	EBX 
 00002B20  56				push	ESI 
 00002B21  57				push	EDI 
				;{

				;{181}:return Base * High / 2
 00002B22  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B25  E8 FFFFFFB7			call	 UnitTesting_Triangle_get_Base
 00002B2A  50				push	EAX
 00002B2B  52				push	EDX 
 00002B2C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B2F  E8 00000062			call	 UnitTesting_Triangle_get_High
 00002B34  9B DB E2			fclex
 00002B37  50				push	EAX
 00002B38  52				push	EDX 
 00002B39  DD 04 24			fld	qword ptr [ESP]
 00002B3C  59				pop	ECX
 00002B3D  59				pop	ECX 
 00002B3E  DC 0C 24			fmul	qword ptr [ESP]
 00002B41  DD 1C 24			fstp	qword ptr [ESP]
 00002B44  B8 00000002			mov	EAX,000000002h
 00002B49  9B DB E2			fclex
 00002B4C  50				push	EAX
 00002B4D  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 00002B53  50				push	EAX
 00002B54  52				push	EDX 
 00002B55  DD 04 24			fld	qword ptr [ESP]
 00002B58  59				pop	ECX 
 00002B59  59				pop	ECX 
 00002B5A  DC 3C 24			fdivr	qword ptr [ESP]
 00002B5D  DD 1C 24			fstp	qword ptr [ESP]
 00002B60  5A				pop	EDX
 00002B61  58				pop	EAX 
 00002B62  EB 00			jmp	OFFSET $L000632
				;}
 00002B64			$L000632:

 00002B64  5F				pop	EDI
 00002B65  5E				pop	ESI 
 00002B66  5B				pop	EBX 
 00002B67  C9				leave	
 00002B68  C3				ret	
 00002B69			UnitTesting_Triangle_ComputeArea ENDP

 00002B69			UnitTesting_Triangle_Destructor PROC NEAR 
				;void Destructor(void);
 00002B69  55				push	EBP
 00002B6A  8B EC			mov	EBP,ESP
 00002B6C  51				push	ECX 
 00002B6D  53				push	EBX 
 00002B6E  56				push	ESI 
 00002B6F  57				push	EDI 
				;{

;{186}:return 
 00002B70  EB 00			jmp	OFFSET $L000633
				;}
 00002B72			$L000633:

 00002B72  5F				pop	EDI
 00002B73  5E				pop	ESI 
 00002B74  5B				pop	EBX 
 00002B75  C9				leave	
 00002B76  C3				ret	
 00002B77			UnitTesting_Triangle_Destructor ENDP

 00002B77			UnitTesting_Triangle_Draw PROC NEAR 
				;void Draw(void);
 00002B77  55				push	EBP
 00002B78  8B EC			mov	EBP,ESP
 00002B7A  51				push	ECX 
 00002B7B  53				push	EBX 
 00002B7C  56				push	ESI 
 00002B7D  57				push	EDI 
				;{

				;{175}:Console::WriteLn("Drawing a Triangle!");
 00002B7E  8D 05 000004D1 R		lea	EAX,OFFSET $S000631
 00002B84  6A 00			push	000000000h
 00002B86  50				push	EAX 
 00002B87  E8 00000000 E		call	 Console_WriteString
 00002B8C  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002B91			$L000630:

 00002B91  5F				pop	EDI
 00002B92  5E				pop	ESI 
 00002B93  5B				pop	EBX 
 00002B94  C9				leave	
 00002B95  C3				ret	
 00002B96			UnitTesting_Triangle_Draw ENDP

 00002B96			UnitTesting_Triangle_get_High PROC NEAR 
				;double get::High(void);
 00002B96  55				push	EBP
 00002B97  8B EC			mov	EBP,ESP
 00002B99  51				push	ECX 
 00002B9A  53				push	EBX 
 00002B9B  56				push	ESI 
 00002B9C  57				push	EDI 
				;{

				;{157}:return dHigh
 00002B9D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002BA0  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00002BA3  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00002BA6  EB 00			jmp	OFFSET $L000624
				;}
 00002BA8			$L000624:

 00002BA8  5F				pop	EDI
 00002BA9  5E				pop	ESI 
 00002BAA  5B				pop	EBX 
 00002BAB  C9				leave	
 00002BAC  C3				ret	
 00002BAD			UnitTesting_Triangle_get_High ENDP

 00002BAD			UnitTesting_Triangle_put_High PROC NEAR 
				;void put::High(double value);
 00002BAD  55				push	EBP
 00002BAE  8B EC			mov	EBP,ESP
 00002BB0  51				push	ECX 
 00002BB1  53				push	EBX 
 00002BB2  56				push	ESI 
 00002BB3  57				push	EDI 
				;{

				;{162}:dHigh= value;
 00002BB4  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002BB7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002BBA  50				push	EAX
 00002BBB  52				push	EDX 
 00002BBC  DD 04 24			fld	qword ptr [ESP]
 00002BBF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002BC2  8D 59 0C			lea	EBX,dword ptr [ECX+000Ch]
 00002BC5  DD 1B			fstp	qword ptr [EBX]
				;}
 00002BC7			$L000625:
 00002BC7  5A				pop	EDX
 00002BC8  58				pop	EAX 

 00002BC9  5F				pop	EDI
 00002BCA  5E				pop	ESI 
 00002BCB  5B				pop	EBX 
 00002BCC  C9				leave	
 00002BCD  C2 0008			retn	000000008h
 00002BD0			UnitTesting_Triangle_put_High ENDP

 00002BD0			UnitTesting_Triangle_Name PROC NEAR 
				;string Name(void);
 00002BD0  55				push	EBP
 00002BD1  8B EC			mov	EBP,ESP
 00002BD3  51				push	ECX 
 00002BD4  53				push	EBX 
 00002BD5  56				push	ESI 
 00002BD6  57				push	EDI 
				;{

				;{170}:return "Triangle"
 00002BD7  8D 05 00000724 R		lea	EAX,OFFSET $S000629
 00002BDD  EB 00			jmp	OFFSET $L000628
				;}
 00002BDF			$L000628:

 00002BDF  5F				pop	EDI
 00002BE0  5E				pop	ESI 
 00002BE1  5B				pop	EBX 
 00002BE2  C9				leave	
 00002BE3  C3				ret	
 00002BE4			UnitTesting_Triangle_Name ENDP

 00002BE4			UnitTesting_Triangle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00002BE4  55				push	EBP
 00002BE5  8B EC			mov	EBP,ESP
 00002BE7  51				push	ECX 
 00002BE8  53				push	EBX 
 00002BE9  56				push	ESI 
 00002BEA  57				push	EDI 
				;{

				;{166}:return UnitTesting::stTriangle
 00002BEB  B8 00000003			mov	EAX,000000003h
 00002BF0  33 D2			xor	EDX,EDX
 00002BF2  EB 00			jmp	OFFSET $L000627
				;}
 00002BF4			$L000627:

 00002BF4  5F				pop	EDI
 00002BF5  5E				pop	ESI 
 00002BF6  5B				pop	EBX 
 00002BF7  C9				leave	
 00002BF8  C3				ret	
 00002BF9			UnitTesting_Triangle_Type ENDP

 00002BF9			UnitTesting_Triangle PROC NEAR 
				;void UnitTesting::Triangle(void);
 00002BF9  55				push	EBP
 00002BFA  8B EC			mov	EBP,ESP
 00002BFC  51				push	ECX 
 00002BFD  53				push	EBX 
 00002BFE  56				push	ESI 
 00002BFF  57				push	EDI 
 00002C00  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C03  E8 FFFFDEBC			call	 UnitTesting_Shape ;base constructor call
 00002C08  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00002C0B  C7 01 00000050 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Triangle 
 00002C11  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00002C14  E8 00000088			call	 __member_Init@UnitTesting_Triangle 

 00002C19  5F				pop	EDI
 00002C1A  5E				pop	ESI 
 00002C1B  5B				pop	EBX 
 00002C1C  C9				leave	
 00002C1D  C3				ret	
 00002C1E			UnitTesting_Triangle ENDP

 00002C1E			__member_Init@UnitTesting_Circle PROC NEAR

 00002C1E  55				push	EBP
 00002C1F  8B EC			mov	EBP,ESP
 00002C21  51				push	ECX 
 00002C22  53				push	EBX 
 00002C23  56				push	ESI 
 00002C24  57				push	EDI 
 00002C25  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{56}:radius= 0.0;
 00002C28  D9 EE			fldz
 00002C2A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C2D  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002C30  DD 1B			fstp	qword ptr [EBX]

 00002C32  5F				pop	EDI
 00002C33  5E				pop	ESI 
 00002C34  5B				pop	EBX 
 00002C35  C9				leave	
 00002C36  C3				ret	
 00002C37			__member_Init@UnitTesting_Circle ENDP
 00002C37			__member_Init@UnitTesting_Square PROC NEAR

 00002C37  55				push	EBP
 00002C38  8B EC			mov	EBP,ESP
 00002C3A  51				push	ECX 
 00002C3B  53				push	EBX 
 00002C3C  56				push	ESI 
 00002C3D  57				push	EDI 
 00002C3E  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{95}:dWidth= 0.0;
 00002C41  D9 EE			fldz
 00002C43  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C46  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002C49  DD 1B			fstp	qword ptr [EBX]

				;{95}:dHeight= 0.0;
 00002C4B  D9 EE			fldz
 00002C4D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C50  8D 59 0C			lea	EBX,dword ptr [ECX+000Ch]
 00002C53  DD 1B			fstp	qword ptr [EBX]

 00002C55  5F				pop	EDI
 00002C56  5E				pop	ESI 
 00002C57  5B				pop	EBX 
 00002C58  C9				leave	
 00002C59  C3				ret	
 00002C5A			__member_Init@UnitTesting_Square ENDP
 00002C5A			__member_Init@UnitTesting_TestIntegers PROC NEAR

 00002C5A  55				push	EBP
 00002C5B  8B EC			mov	EBP,ESP
 00002C5D  51				push	ECX 
 00002C5E  53				push	EBX 
 00002C5F  56				push	ESI 
 00002C60  57				push	EDI 
 00002C61  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:nWidth= 0;
 00002C64  33 C0			xor	EAX,EAX
 00002C66  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C69  8D 19			lea	EBX,dword ptr [ECX]
 00002C6B  89 03			mov	dword ptr [EBX],EAX

				;{0}:nHeight= 0;
 00002C6D  33 C0			xor	EAX,EAX
 00002C6F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C72  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002C75  89 03			mov	dword ptr [EBX],EAX

				;{118}:UnitTesting::TestIntegers::bigValue= 0x80000000h;
 00002C77  B8 80000000			mov	EAX,080000000h
 00002C7C  99				cdq	
 00002C7D  8D 1D 00000880 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 00002C83  89 13			mov	dword ptr [EBX],EDX
 00002C85  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{418}:member1= 0.0;
 00002C88  D9 EE			fldz
 00002C8A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C8D  8D 59 08			lea	EBX,dword ptr [ECX+0008h]
 00002C90  DD 1B	fstp	qword ptr [EBX]

				;{418}:member2= 1.0;
 00002C92  D9 E8			fld1
 00002C94  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C97  8D 59 10			lea	EBX,dword ptr [ECX+0010h]
 00002C9A  DD 1B			fstp	qword ptr [EBX]

 00002C9C  5F				pop	EDI
 00002C9D  5E				pop	ESI 
 00002C9E  5B				pop	EBX 
 00002C9F  C9				leave	
 00002CA0  C3				ret	
 00002CA1			__member_Init@UnitTesting_TestIntegers ENDP
 00002CA1			__member_Init@UnitTesting_Triangle PROC NEAR

 00002CA1  55				push	EBP
 00002CA2  8B EC			mov	EBP,ESP
 00002CA4  51				push	ECX 
 00002CA5  53				push	EBX 
 00002CA6  56				push	ESI 
 00002CA7  57				push	EDI 
 00002CA8  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{140}:dBase= 0.0;
 00002CAB  D9 EE			fldz
 00002CAD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002CB0  8D 59 04			lea	EBX,dword ptr [ECX+0004h]
 00002CB3  DD 1B			fstp	qword ptr [EBX]

				;{140}:dHigh= 0.0;
 00002CB5  D9 EE			fldz
 00002CB7  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002CBA  8D 59 0C			lea	EBX,dword ptr [ECX+000Ch]
 00002CBD  DD 1B			fstp	qword ptr [EBX]

 00002CBF  5F				pop	EDI
 00002CC0  5E				pop	ESI 
 00002CC1  5B				pop	EBX 
 00002CC2  C9				leave	
 00002CC3  C3				ret	
 00002CC4			__member_Init@UnitTesting_Triangle ENDP
 00002CC4			__User_Globals_Init PROC

 00002CC4  55				push	EBP
 00002CC5  8B EC			mov	EBP,ESP
 00002CC7  53				push	EBX 
 00002CC8  56				push	ESI 
 00002CC9  57				push	EDI 

 00002CCA  5F				pop	EDI
 00002CCB  5E				pop	ESI 
 00002CCC  5B				pop	EBX 
 00002CCD  C9				leave	
 00002CCE  C3				ret	
 00002CCF			__User_Globals_Init ENDP

 00002CCF			UnitTesting_Test1_TestRunner_main PROC 
				;void UnitTesting::Test1::TestRunner::main(int argc, string [] argv);
 00002CCF  55				push	EBP
 00002CD0  8B EC			mov	EBP,ESP
 00002CD2  81 EC 0000031C		sub	ESP,00000031Ch
 00002CD8  53				push	EBX 
 00002CD9  56				push	ESI 
 00002CDA  57				push	EDI 
 00002CDB  8D BD FFFFFCE4		lea	EDI,dword ptr [EBP-031Ch]
 00002CE1  B9 000000C7			mov	ECX,0000000C7h
 00002CE6  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002CEB  F3/ AB			rep stos	dword ptr [EDI]
 00002CED  E8 FFFFFFD2			call	 __User_Globals_Init
				;{

				;{577}:for(ac= 0; ac < argc; ac++ )
 00002CF2  33 C0			xor	EAX,EAX
 00002CF4  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00002CF7  EB 06			jmp	OFFSET $L001046
 00002CF9			$L001047:
 00002CF9  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00002CFC  FF 45 FC			inc	dword ptr [EBP-4]
 00002CFF			$L001046:
 00002CFF  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002D02  50				push	EAX
 00002D03  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002D06  5A				pop	EDX
 00002D07  3B D0			cmp	EDX,EAX
 00002D09  0F 9C C0			setl	AL
 00002D0C  85 C0			test	EAX,EAX
 00002D0E  74 48			jz	OFFSET $L001048
				;{

				;{579}:Console::WriteLn("Argument: [", ac, "]= ", argv[ac]);
 00002D10  8D 05 0000041A R		lea	EAX,OFFSET $S000868
 00002D16  6A 00			push	000000000h
 00002D18  50				push	EAX 
 00002D19  E8 00000000 E		call	 Console_WriteString
 00002D1E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002D21  50				push	EAX 
 00002D22  E8 00000000 E		call	 Console_WriteInteger 
 00002D27  8D 05 00000733 R		lea	EAX,OFFSET $S000869
 00002D2D  6A 00			push	000000000h 
 00002D2F  50				push	EAX 
 00002D30  E8 00000000 E		call	 Console_WriteString 
 00002D35  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002D38  8D 03			lea	EAX,dword ptr [EBX]
 00002D3A  8B F0			mov	ESI,EAX
 00002D3C  83 E1 00			and	ECX,000000000h
 00002D3F  51				push	ECX
 00002D40  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002D43  59				pop	ECX
 00002D44  03 C8			add	ECX,EAX
 00002D46  8B 04 8E			mov	EAX,dword ptr [ESI+ECX*0004h]
 00002D49  6A 00			push	000000000h 
 00002D4B  50				push	EAX 
 00002D4C  E8 00000000 E		call	 Console_WriteString 
 00002D51  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002D56  EB A1			jmp	OFFSET $L001047 
 00002D58			$L001048:

				;{581}:__HELLO_PART: hello();
 00002D58			__HELLO_PART:

				;{582}:hello();
 00002D58  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002D5B  E8 FFFFDA40			call	 UnitTesting_HelloWorld

				;{584}:say= "Hello World from H++!!!";
 00002D60  8D 05 0000051B R		lea	EAX,OFFSET $S000873
 00002D66  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{586}:hello.SayHello(say);
 00002D69  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002D6C  50				push	EAX
 00002D6D  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002D70  E8 FFFFD9D9			call	 UnitTesting_HelloWorld_SayHello

				;{588}:hello.ShowHello(say);
 00002D75  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002D78  50				push	EAX
 00002D79  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00002D7C  E8 FFFFD9F9			call	 UnitTesting_HelloWorld_ShowHello

				;{590}:tester1;
 00002D81  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002D84  E8 FFFFEF77			call	 UnitTesting_TestIntegers

				;{592}:tester1.Width= 0x400h * 1024;
 00002D89  B8 00000400			mov	EAX,000000400h
 00002D8E  50				push	EAX
 00002D8F  B8 00000400			mov	EAX,000000400h
 00002D94  59				pop	ECX
 00002D95  33 D2			xor	EDX,EDX
 00002D97  66| 0F AF C1			imul	AX,CX
 00002D9B  C1 E2 10			shl	EDX,000000010h
 00002D9E  0B C2			or	EAX,EDX
 00002DA0  50				push	EAX
 00002DA1  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DA4  0E E8 FFFFECD3		call	OFFSET UnitTesting_TestIntegers_put_Width

				;{593}:tester1.Height= 0x20h;
 00002DAA  B8 00000020			mov	EAX,000000020h
 00002DAF  50				push	EAX
 00002DB0  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DB3  0E E8 FFFFEC31		call	OFFSET UnitTesting_TestIntegers_put_Height

				;{595}:nWidth= tester1.Width, nHeight= tester1.Height;
 00002DB9  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DBC  E8 FFFFECA9			call	 UnitTesting_TestIntegers_get_Width
 00002DC1  89 45 C0			mov	dword ptr [EBP-0040h],EAX
 00002DC4  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DC7  E8 FFFFEC0A			call	 UnitTesting_TestIntegers_get_Height
 00002DCC  89 45 BC			mov	dword ptr [EBP-0044h],EAX

				;{598}:nArea= tester1.Width * tester1.Height;
 00002DCF  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DD2  E8 FFFFEC93			call	 UnitTesting_TestIntegers_get_Width
 00002DD7  50				push	EAX
 00002DD8  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DDB  E8 FFFFEBF6			call	 UnitTesting_TestIntegers_get_Height
 00002DE0  59				pop	ECX
 00002DE1  99				cdq	
 00002DE2  0F AF C1			imul	EAX,ECX
 00002DE5  89 55 B4			mov	dword ptr [EBP-004Ch],EDX
 00002DE8  89 45 B8			mov	dword ptr [EBP-0048h],EAX 

				;{600}:with(tester1)
				;{
 00002DEB  B8 00000666			mov	EAX,000000666h
 00002DF0  50				push	EAX
 00002DF1  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002DF4  0E E8 FFFFEC83		call	OFFSET UnitTesting_TestIntegers_put_Width
 00002DFA  B8 00000777			mov	EAX,000000777h
 00002DFF  50				push	EAX
 00002E00  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002E03  0E E8 FFFFEBE1		call	OFFSET UnitTesting_TestIntegers_put_Height
				;}

				;goto
 00002E09  E9 00000088			jmp	OFFSET __CALC_FACTORIAL
 00002E0E  CC				int	000000003h ;User breakpoint

				;{612}:nArea= nWidth * nHeight;
 00002E0F  8B 45 C0			mov	EAX,dword ptr [EBP-0040h]
 00002E12  50				push	EAX
 00002E13  8B 45 BC			mov	EAX,dword ptr [EBP-0044h]
 00002E16  59				pop	ECX
 00002E17  99				cdq	
 00002E18  0F AF C1			imul	EAX,ECX
 00002E1B  89 55 B4			mov	dword ptr [EBP-004Ch],EDX
 00002E1E  89 45 B8			mov	dword ptr [EBP-0048h],EAX 

				;{614}:n= 7;
 00002E21  B8 00000007			mov	EAX,000000007h
 00002E26  89 45 B0			mov	dword ptr [EBP-0050h],EAX

				;{616}:UnitTesting::Integers_Inline::Test();
 00002E29  E8 FFFFD991			call	 UnitTesting_Integers_Inline_Test

				;{618}:for(index= 0; index < 100; index++ )
 00002E2E  33 C0			xor	EAX,EAX
 00002E30  89 45 AC			mov	dword ptr [EBP-0054h],EAX
 00002E33  EB 06			jmp	OFFSET $L001049
 00002E35			$L001050:
 00002E35  8B 45 AC			mov	EAX,dword ptr [EBP-84]
 00002E38  FF 45 AC			inc	dword ptr [EBP-84]
 00002E3B			$L001049:
 00002E3B  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00002E3E  50				push	EAX
 00002E3F  B8 00000064			mov	EAX,000000064h
 00002E44  5A				pop	EDX
 00002E45  3B D0			cmp	EDX,EAX
 00002E47  0F 9C C0			setl	AL
 00002E4A  85 C0			test	EAX,EAX
 00002E4C  74 1E			jz	OFFSET $L001051
				;{

				;{620}:Console::WriteLn("Current Index :", index);
 00002E4E  8D 05 00000449 R		lea	EAX,OFFSET $S000884
 00002E54  6A 00			push	000000000h
 00002E56  50				push	EAX 
 00002E57  E8 00000000 E		call	 Console_WriteString
 00002E5C  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00002E5F  50				push	EAX 
 00002E60  E8 00000000 E		call	 Console_WriteInteger 
 00002E65  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002E6A  EB C9			jmp	OFFSET $L001050 
 00002E6C			$L001051:

				;{623}:for(; ; )
 00002E6C  EB 00			jmp	OFFSET $L001052
 00002E6E			$L001053:
 00002E6E			$L001052:
				;{

				;{626}:if(--index == 0)
 00002E6E  FF 4D AC			dec	dword ptr [EBP-84]
 00002E71  8B 45 AC			mov	EAX,dword ptr [EBP-84]
 00002E74  50				push	EAX
 00002E75  33 C0			xor	EAX,EAX
 00002E77  5A				pop	EDX
 00002E78  3B D0			cmp	EDX,EAX
 00002E7A  0F 94 C0			setz	AL
 00002E7D  84 C0			test	AL,AL
 00002E7F  74 02			jz	OFFSET $L001055

				;break;
 00002E81  EB 02			jmp	OFFSET $L001054
 00002E83			$L001055:
				;}
 00002E83  EB E9			jmp	OFFSET $L001053 
 00002E85			$L001054:

				;{630}:what= !(index == 0);
 00002E85  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00002E88  50				push	EAX
 00002E89  33 C0			xor	EAX,EAX
 00002E8B  5A				pop	EDX
 00002E8C  3B D0			cmp	EDX,EAX
 00002E8E  0F 94 C0			setz	AL
 00002E91  F7 D0			not	EAX
 00002E93  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{632}:__CALC_FACTORIAL: nf= tester1.Factorial(n);
 00002E96			__CALC_FACTORIAL:

				;{634}:nf= tester1.Factorial(n);
 00002E96  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00002E99  50				push	EAX
 00002E9A  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002E9D  E8 FFFFEAEC			call	 UnitTesting_TestIntegers_Factorial
 00002EA2  89 45 A4			mov	dword ptr [EBP-005Ch],EAX

				;{636}:--n;
 00002EA5  FF 4D B0			dec	dword ptr [EBP-80]
 00002EA8  8B 45 B0			mov	EAX,dword ptr [EBP-80]

				;{637}:if(n == 0)
 00002EAB  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00002EAE  50				push	EAX
 00002EAF  33 C0			xor	EAX,EAX
 00002EB1  5A				pop	EDX
 00002EB2  3B D0			cmp	EDX,EAX
 00002EB4  0F 94 C0			setz	AL
 00002EB7  84 C0			test	AL,AL
 00002EB9  74 02			jz	OFFSET $L001057

				;goto
 00002EBB  EB 02			jmp	OFFSET __END_FACTORIAL
 00002EBD			$L001057:

				;goto
 00002EBD  EB D7			jmp	OFFSET __CALC_FACTORIAL

				;{642}:__END_FACTORIAL: myRef1= 0;
 00002EBF			__END_FACTORIAL:

				;{645}:myRef1= 0;
 00002EBF  33 C0			xor	EAX,EAX
 00002EC1  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{646}:myVar1= 0;
 00002EC4  33 C0			xor	EAX,EAX
 00002EC6  89 45 9C			mov	dword ptr [EBP-0064h],EAX
 00002EC9  CC				int	000000003h ;User breakpoint

				;{650}:tester1.multiple_assignments(myRef1, myVar1);
 00002ECA  8B 45 9C			mov	EAX,dword ptr [EBP-0064h]
 00002ECD  50				push	EAX
 00002ECE  8D 45 A0			lea	EAX,dword ptr [EBP-0060h]
 00002ED1  50				push	EAX
 00002ED2  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002ED5  E8 FFFFED2C			call	 UnitTesting_TestIntegers_multiple_assignments

				;{652}:Console::WriteLn("The value of myRef1 must be 65536 ==", myRef1);
 00002EDA  8D 05 00000696 R		lea	EAX,OFFSET $S000890
 00002EE0  6A 00			push	000000000h
 00002EE2  50				push	EAX 
 00002EE3  E8 00000000 E		call	 Console_WriteString
 00002EE8  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 00002EEB  50				push	EAX 
 00002EEC  E8 00000000 E		call	 Console_WriteInteger 
 00002EF1  E8 00000000 E		call	 Console_WriteCrLf 

				;{653}:Console::WriteLn("The value of myVar1 is not 65536 but zero", myVar1);
 00002EF6  8D 05 000006BB R		lea	EAX,OFFSET $S000891
 00002EFC  6A 00			push	000000000h
 00002EFE  50				push	EAX 
 00002EFF  E8 00000000 E		call	 Console_WriteString
 00002F04  8B 45 9C			mov	EAX,dword ptr [EBP-0064h]
 00002F07  50				push	EAX 
 00002F08  E8 00000000 E		call	 Console_WriteInteger 
 00002F0D  E8 00000000 E		call	 Console_WriteCrLf 

				;{655}:Console::WriteLn("(int)the area is: ", tester1.getArea());
 00002F12  8D 05 00000386 R		lea	EAX,OFFSET $S000892
 00002F18  6A 00			push	000000000h
 00002F1A  50				push	EAX 
 00002F1B  E8 00000000 E		call	 Console_WriteString
 00002F20  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002F23  E8 FFFFEC43			call	 UnitTesting_TestIntegers_getArea
 00002F28  50				push	EAX 
 00002F29  E8 00000000 E		call	 Console_WriteInteger 
 00002F2E  E8 00000000 E		call	 Console_WriteCrLf 

				;{656}:Console::WriteLn("(double)the area is: ", tester1.getArea2());
 00002F33  8D 05 00000370 R		lea	EAX,OFFSET $S000893
 00002F39  6A 00			push	000000000h
 00002F3B  50				push	EAX 
 00002F3C  E8 00000000 E		call	 Console_WriteString
 00002F41  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002F44  E8 FFFFEC46			call	 UnitTesting_TestIntegers_getArea2
 00002F49  50				push	EAX 
 00002F4A  52				push	EDX 
 00002F4B  E8 00000000 E		call	 Console_WriteDouble 
 00002F50  E8 00000000 E		call	 Console_WriteCrLf 

				;{658}:result= 0;
 00002F55  33 C0			xor	EAX,EAX
 00002F57  89 45 98			mov	dword ptr [EBP-0068h],EAX

				;{659}:tester1.add(1024, 3072, result);
 00002F5A  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002F5D  50				push	EAX
 00002F5E  B8 00000C00			mov	EAX,000000C00h
 00002F63  50				push	EAX 
 00002F64  B8 00000400			mov	EAX,000000400h
 00002F69  50				push	EAX
 00002F6A  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002F6D  E8 FFFFEB23			call	 UnitTesting_TestIntegers_add

				;{661}:tester1.subs(1024, 3072, result);
 00002F72  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002F75  50				push	EAX
 00002F76  B8 00000C00			mov	EAX,000000C00h
 00002F7B  50				push	EAX 
 00002F7C  B8 00000400			mov	EAX,000000400h
 00002F81  50				push	EAX
 00002F82  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002F85  E8 FFFFED39			call	 UnitTesting_TestIntegers_subs

				;{663}:tester1.modulus(4096, 6, result);
 00002F8A  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002F8D  50				push	EAX
 00002F8E  B8 00000006			mov	EAX,000000006h
 00002F93  50				push	EAX 
 00002F94  B8 00001000			mov	EAX,000001000h
 00002F99  50				push	EAX
 00002F9A  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002F9D  E8 FFFFEC23			call	 UnitTesting_TestIntegers_modulus

				;{665}:tester1.multiply(3, 927, result);
 00002FA2  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002FA5  50				push	EAX
 00002FA6  B8 0000039F			mov	EAX,00000039Fh
 00002FAB  50				push	EAX 
 00002FAC  B8 00000003			mov	EAX,000000003h
 00002FB1  50				push	EAX
 00002FB2  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002FB5  E8 FFFFECCC			call	 UnitTesting_TestIntegers_multiply

				;{667}:tester1.divide(4096, 6, result);
 00002FBA  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002FBD  50				push	EAX
 00002FBE  B8 00000006			mov	EAX,000000006h
 00002FC3  50				push	EAX 
 00002FC4  B8 00001000			mov	EAX,000001000h
 00002FC9  50				push	EAX
 00002FCA  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002FCD  E8 FFFFEAFE			call	 UnitTesting_TestIntegers_divide

				;{669}:tester1.divide2(4096, 6, result);
 00002FD2  8D 45 98			lea	EAX,dword ptr [EBP-0068h]
 00002FD5  50				push	EAX
 00002FD6  B8 00000006			mov	EAX,000000006h
 00002FDB  50				push	EAX 
 00002FDC  B8 00001000			mov	EAX,000001000h
 00002FE1  50				push	EAX
 00002FE2  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00002FE5  E8 FFFFEB25			call	 UnitTesting_TestIntegers_divide2

				;{672}:UnitTesting::TestIntegers::TestExpressions();
 00002FEA  E8 FFFFED25			call	 UnitTesting_TestIntegers_TestExpressions

				;{674}:val1= 1, val2= 2;
 00002FEF  B8 00000001			mov	EAX,000000001h
 00002FF4  89 45 94			mov	dword ptr [EBP-006Ch],EAX
 00002FF7  B8 00000002			mov	EAX,000000002h
 00002FFC  89 45 90			mov	dword ptr [EBP-0070h],EAX

				;{676}:what= false;
 00002FFF  33 C0			xor	EAX,EAX
 00003001  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{678}:tester1.Swap(val1, val2);
 00003004  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00003007  50				push	EAX
 00003008  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 0000300B  50				push	EAX
 0000300C  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 0000300F  E8 FFFFE9EF			call	 UnitTesting_TestIntegers_Swap

				;{680}:what= val1 == 2 && val2 == 1;
 00003014  8B 45 94			mov	EAX,dword ptr [EBP-006Ch]
 00003017  50				push	EAX
 00003018  B8 00000002			mov	EAX,000000002h
 0000301D  5A				pop	EDX
 0000301E  3B D0			cmp	EDX,EAX
 00003020  0F 94 C0			setz	AL
 00003023  50				push	EAX
 00003024  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00003027  50				push	EAX
 00003028  B8 00000001			mov	EAX,000000001h
 0000302D  5A				pop	EDX
 0000302E  3B D0			cmp	EDX,EAX
 00003030  0F 94 C0			setz	AL
 00003033  5A				pop	EDX
 00003034  23 C2			and	EAX,EDX
 00003036  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{682}:tester1.Calc2(val1, val2);
 00003039  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 0000303C  50				push	EAX
 0000303D  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00003040  50				push	EAX
 00003041  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00003044  E8 FFFFE8C7			call	 UnitTesting_TestIntegers_Calc2

				;{684}:what= val1 == 27000 && val2 == 20000;
 00003049  8B 45 94			mov	EAX,dword ptr [EBP-006Ch]
 0000304C  50				push	EAX
 0000304D  B8 00006978			mov	EAX,000006978h
 00003052  5A				pop	EDX
 00003053  3B D0			cmp	EDX,EAX
 00003055  0F 94 C0			setz	AL
 00003058  50				push	EAX
 00003059  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 0000305C  50				push	EAX
 0000305D  B8 00004E20			mov	EAX,000004E20h
 00003062  5A				pop	EDX
 00003063  3B D0			cmp	EDX,EAX
 00003065  0F 94 C0			setz	AL
 00003068  5A				pop	EDX
 00003069  23 C2			and	EAX,EDX
 0000306B  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{686}:tester1.Swap(val1, val2);
 0000306E  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00003071  50				push	EAX
 00003072  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00003075  50				push	EAX
 00003076  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00003079  E8 FFFFE985			call	 UnitTesting_TestIntegers_Swap

				;{688}:tester1.SwapDebug(val1, val2);
 0000307E  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00003081  50				push	EAX
 00003082  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00003085  50				push	EAX
 00003086  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 00003089  E8 FFFFE9B4			call	 UnitTesting_TestIntegers_SwapDebug

				;{690}:what= val1 == 20000 && val2 == 27000;
 0000308E  8B 45 94			mov	EAX,dword ptr [EBP-006Ch]
 00003091  50				push	EAX
 00003092  B8 00004E20			mov	EAX,000004E20h
 00003097  5A				pop	EDX
 00003098  3B D0			cmp	EDX,EAX
 0000309A  0F 94 C0			setz	AL
 0000309D  50				push	EAX
 0000309E  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 000030A1  50				push	EAX
 000030A2  B8 00006978			mov	EAX,000006978h
 000030A7  5A				pop	EDX
 000030A8  3B D0			cmp	EDX,EAX
 000030AA  0F 94 C0			setz	AL
 000030AD  5A				pop	EDX
 000030AE  23 C2			and	EAX,EDX
 000030B0  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{692}:tester1.Calc1(val1, val2);
 000030B3  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 000030B6  50				push	EAX
 000030B7  8B 45 94			mov	EAX,dword ptr [EBP-006Ch]
 000030BA  50				push	EAX
 000030BB  8D 4D C4			lea	ECX,dword ptr [EBP-003Ch]
 000030BE  E8 FFFFE7A7			call	 UnitTesting_TestIntegers_Calc1

				;{694}:what= val2 != 27000;
 000030C3  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 000030C6  50				push	EAX
 000030C7  B8 00006978			mov	EAX,000006978h
 000030CC  5A				pop	EDX
 000030CD  3B D0			cmp	EDX,EAX
 000030CF  0F 95 C0			setnz	AL
 000030D2  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{696}:val1= val1 << 24;
 000030D5  8B 45 94			mov	EAX,dword ptr [EBP-006Ch]
 000030D8  50				push	EAX
 000030D9  B8 00000018			mov	EAX,000000018h
 000030DE  8A C8			mov	CL,AL
 000030E0  58				pop	EAX
 000030E1  D3 E0			shl	EAX,CL
 000030E3  89 45 94			mov	dword ptr [EBP-006Ch],EAX

				;{698}:fpTester();
 000030E6  8D 4D 8C			lea	ECX,dword ptr [EBP-0074h]
 000030E9  E8 FFFFE734			call	 UnitTesting_TestFloatingPoint

				;{700}:_pow= fpTester.Power(2.0, 32);
 000030EE  B8 00000020			mov	EAX,000000020h
 000030F3  50				push	EAX 
 000030F4  BA 00000000			mov	EDX,000000000h
 000030F9  B8 40000000			mov	EAX,040000000h 
 000030FE  50				push	EAX
 000030FF  52				push	EDX 
 00003100  8D 4D 8C			lea	ECX,dword ptr [EBP-0074h]
 00003103  E8 FFFFE60D			call	 UnitTesting_TestFloatingPoint_Power
 00003108  50				push	EAX
 00003109  52				push	EDX 
 0000310A  DD 04 24			fld	qword ptr [ESP]
 0000310D  DD 5D 84			fstp	qword ptr [EBP-007Ch]

				;{702}:array1;
 00003110  5A				pop	EDX
 00003111  58				pop	EAX 
 00003112  8D 85 FFFFFDF4		lea	EAX,dword ptr [EBP-020Ch]

				;{704}:for(index= 0; index < sizeof (array1); )
 00003118  33 C0			xor	EAX,EAX
 0000311A  89 45 AC			mov	dword ptr [EBP-0054h],EAX
 0000311D  EB 00			jmp	OFFSET $L001059
 0000311F			$L001060:
 0000311F			$L001059:
 0000311F  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00003122  50				push	EAX
 00003123  B8 00000190			mov	EAX,000000190h
 00003128  5A				pop	EDX
 00003129  3B D0	cmp	EDX,EAX
 0000312B  0F 9C C0			setl	AL
 0000312E  85 C0			test	EAX,EAX
 00003130  74 50			jz	OFFSET $L001061
				;{

				;{706}:array1[index]= FloatingPoint::ToInt((index + 1) * 9.45);
 00003132  8D 85 FFFFFDF4		lea	EAX,dword ptr [EBP-020Ch]
 00003138  8B F0			mov	ESI,EAX
 0000313A  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 0000313D  8B C8			mov	ECX,EAX
 0000313F  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 00003142  50				push	EAX

 00003143  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00003146  50				push	EAX
 00003147  B8 00000001			mov	EAX,000000001h
 0000314C  5A				pop	EDX
 0000314D  03 C2			add	EAX,EDX
 0000314F  50				push	EAX
 00003150  BA 66666667			mov	EDX,066666667h
 00003155  B8 4022E666			mov	EAX,04022E666h 
 0000315A  9B DB E2			fclex
 0000315D  50				push	EAX
 0000315E  52				push	EDX 
 0000315F  DD 04 24			fld	qword ptr [ESP]
 00003162  59				pop	ECX
 00003163  59				pop	ECX 
 00003164  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 0000316A  50				push	EAX
 0000316B  52				push	EDX 
 0000316C  DC 0C 24			fmul	qword ptr [ESP]
 0000316F  DD 1C 24			fstp	qword ptr [ESP]

 00003172  E8 00000000 E		call	 FloatingPoint_ToInt
 00003177  5B				pop	EBX
 00003178  89 03			mov	dword ptr [EBX],EAX

				;{707}:index++ ;
 0000317A  8B 45 AC			mov	EAX,dword ptr [EBP-84]
 0000317D  FF 45 AC			inc	dword ptr [EBP-84]
				;}
 00003180  EB 9D			jmp	OFFSET $L001060 
 00003182			$L001061:

				;{710}:UnitTesting::TestArrays::DoTest();
 00003182  E8 FFFFDE84			call	 UnitTesting_TestArrays_DoTest

				;{712}:rnd(Math::Round(0x400 * Math::log_10_base2() + 1.0));


 00003187  B8 00000400			mov	EAX,000000400h
 0000318C  50				push	EAX
 0000318D  E8 00000000 E		call	 Math_log_10_base2
 00003192  9B DB E2			fclex
 00003195  50				push	EAX
 00003196  52				push	EDX 
 00003197  DD 04 24			fld	qword ptr [ESP]
 0000319A  59				pop	ECX
 0000319B  59				pop	ECX 
 0000319C  FF 15 00000000 E		call	dword ptr FloatingPoint_FromInt
 000031A2  50				push	EAX
 000031A3  52				push	EDX 
 000031A4  DC 0C 24			fmul	qword ptr [ESP]
 000031A7  DD 1C 24			fstp	qword ptr [ESP]
 000031AA  D9 E8			fld1
 000031AC  DC 04 24			fadd	qword ptr [ESP]
 000031AF  DD 1C 24			fstp	qword ptr [ESP]

 000031B2  E8 00000000 E		call	 Math_Round
 000031B7  50				push	EAX

 000031B8  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 000031BE  E8 FFFFD6E8			call	 UnitTesting_Rnd

				;goto
 000031C3  E9 000000F1			jmp	OFFSET _BlockRndDoubles

				;{716}:Console::WriteLn("Pseudo-Random Integer values:");
 000031C8  8D 05 00000602 R		lea	EAX,OFFSET $S000908
 000031CE  6A 00			push	000000000h
 000031D0  50				push	EAX 
 000031D1  E8 00000000 E		call	 Console_WriteString
 000031D6  E8 00000000 E		call	 Console_WriteCrLf 

				;{717}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextInt());
 000031DB  8D 05 000000F4 R		lea	EAX,OFFSET $S000909
 000031E1  6A 00			push	000000000h
 000031E3  50				push	EAX 
 000031E4  E8 00000000 E		call	 Console_WriteString
 000031E9  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 000031EF  E8 FFFFD6A4			call	 UnitTesting_Rnd_NextInt
 000031F4  50				push	EAX 
 000031F5  52				push	EDX 
 000031F6  E8 00000000 E		call	 Console_WriteDouble 
 000031FB  E8 00000000 E		call	 Console_WriteCrLf 

				;{718}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextInt());
 00003200  8D 05 00000180 R		lea	EAX,OFFSET $S000910
 00003206  6A 00			push	000000000h
 00003208  50				push	EAX 
 00003209  E8 00000000 E		call	 Console_WriteString
 0000320E  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003214  E8 FFFFD67F			call	 UnitTesting_Rnd_NextInt
 00003219  50				push	EAX 
 0000321A  52				push	EDX 
 0000321B  E8 00000000 E		call	 Console_WriteDouble 
 00003220  E8 00000000 E		call	 Console_WriteCrLf 

				;{719}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextInt());
 00003225  8D 05 0000020C R		lea	EAX,OFFSET $S000911
 0000322B  6A 00			push	000000000h
 0000322D  50				push	EAX 
 0000322E  E8 00000000 E		call	 Console_WriteString
 00003233  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003239  E8 FFFFD65A			call	 UnitTesting_Rnd_NextInt
 0000323E  50				push	EAX 
 0000323F  52				push	EDX 
 00003240  E8 00000000 E		call	 Console_WriteDouble 
 00003245  E8 00000000 E		call	 Console_WriteCrLf 

				;{720}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextInt());
 0000324A  8D 05 00000298 R		lea	EAX,OFFSET $S000912
 00003250  6A 00			push	000000000h
 00003252  50				push	EAX 
 00003253  E8 00000000 E		call	 Console_WriteString
 00003258  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 0000325E  E8 FFFFD635			call	 UnitTesting_Rnd_NextInt
 00003263  50				push	EAX 
 00003264  52				push	EDX 
 00003265  E8 00000000 E		call	 Console_WriteDouble 
 0000326A  E8 00000000 E		call	 Console_WriteCrLf 

				;{721}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextInt());
 0000326F  8D 05 00000324 R		lea	EAX,OFFSET $S000913
 00003275  6A 00			push	000000000h
 00003277  50				push	EAX 
 00003278  E8 00000000 E		call	 Console_WriteString
 0000327D  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003283  E8 FFFFD610			call	 UnitTesting_Rnd_NextInt
 00003288  50				push	EAX 
 00003289  52				push	EDX 
 0000328A  E8 00000000 E		call	 Console_WriteDouble 
 0000328F  E8 00000000 E		call	 Console_WriteCrLf 

				;{722}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextInt());
 00003294  8D 05 0000033F R		lea	EAX,OFFSET $S000914
 0000329A  6A 00			push	000000000h
 0000329C  50				push	EAX 
 0000329D  E8 00000000 E		call	 Console_WriteString
 000032A2  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 000032A8  E8 FFFFD5EB			call	 UnitTesting_Rnd_NextInt
 000032AD  50				push	EAX 
 000032AE  52				push	EDX 
 000032AF  E8 00000000 E		call	 Console_WriteDouble 
 000032B4  E8 00000000 E		call	 Console_WriteCrLf 

				;{724}:_BlockRndDoubles: Console::WriteLn("Pseudo-Random Double values:");
 000032B9			_BlockRndDoubles:

				;{726}:Console::WriteLn("Pseudo-Random Double values:");
 000032B9  8D 05 000005E5 R		lea	EAX,OFFSET $S000915
 000032BF  6A 00			push	000000000h
 000032C1  50				push	EAX 
 000032C2  E8 00000000 E		call	 Console_WriteString
 000032C7  E8 00000000 E		call	 Console_WriteCrLf 

				;{727}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextDbl());
 000032CC  8D 05 000000F4 R		lea	EAX,OFFSET $S000909
 000032D2  6A 00			push	000000000h
 000032D4  50				push	EAX 
 000032D5  E8 00000000 E		call	 Console_WriteString
 000032DA  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 000032E0  E8 FFFFD5A0			call	 UnitTesting_Rnd_NextDbl
 000032E5  50				push	EAX 
 000032E6  52				push	EDX 
 000032E7  E8 00000000 E		call	 Console_WriteDouble 
 000032EC  E8 00000000 E		call	 Console_WriteCrLf 

				;{728}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextDbl());
 000032F1  8D 05 00000180 R		lea	EAX,OFFSET $S000910
 000032F7  6A 00			push	000000000h
 000032F9  50				push	EAX 
 000032FA  E8 00000000 E		call	 Console_WriteString
 000032FF  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003305  E8 FFFFD57B			call	 UnitTesting_Rnd_NextDbl
 0000330A  50				push	EAX 
 0000330B  52				push	EDX 
 0000330C  E8 00000000 E		call	 Console_WriteDouble 
 00003311  E8 00000000 E		call	 Console_WriteCrLf 

				;{729}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextDbl());
 00003316  8D 05 0000020C R		lea	EAX,OFFSET $S000911
 0000331C  6A 00			push	000000000h
 0000331E  50				push	EAX 
 0000331F  E8 00000000 E		call	 Console_WriteString
 00003324  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 0000332A  E8 FFFFD556			call	 UnitTesting_Rnd_NextDbl
 0000332F  50				push	EAX 
 00003330  52				push	EDX 
 00003331  E8 00000000 E		call	 Console_WriteDouble 
 00003336  E8 00000000 E		call	 Console_WriteCrLf 

				;{730}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextDbl());
 0000333B  8D 05 00000298 R		lea	EAX,OFFSET $S000912
 00003341  6A 00			push	000000000h
 00003343  50				push	EAX 
 00003344  E8 00000000 E		call	 Console_WriteString
 00003349  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 0000334F  E8 FFFFD531			call	 UnitTesting_Rnd_NextDbl
 00003354  50				push	EAX 
 00003355  52				push	EDX 
 00003356  E8 00000000 E		call	 Console_WriteDouble 
 0000335B  E8 00000000 E		call	 Console_WriteCrLf 

				;{731}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextDbl());
 00003360  8D 05 00000324 R		lea	EAX,OFFSET $S000913
 00003366  6A 00			push	000000000h
 00003368  50				push	EAX 
 00003369  E8 00000000 E		call	 Console_WriteString
 0000336E  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003374  E8 FFFFD50C			call	 UnitTesting_Rnd_NextDbl
 00003379  50				push	EAX 
 0000337A  52				push	EDX 
 0000337B  E8 00000000 E		call	 Console_WriteDouble 
 00003380  E8 00000000 E		call	 Console_WriteCrLf 

				;{732}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextDbl());
 00003385  8D 05 0000033F R		lea	EAX,OFFSET $S000914
 0000338B  6A 00			push	000000000h
 0000338D  50				push	EAX 
 0000338E  E8 00000000 E		call	 Console_WriteString
 00003393  8D 8D FFFFFDF0		lea	ECX,dword ptr [EBP-0210h]
 00003399  E8 FFFFD4E7			call	 UnitTesting_Rnd_NextDbl
 0000339E  50				push	EAX 
 0000339F  52				push	EDX 
 000033A0  E8 00000000 E		call	 Console_WriteDouble 
 000033A5  E8 00000000 E		call	 Console_WriteCrLf 

				;{737}:res= 0.0;
 000033AA  D9 EE			fldz
 000033AC  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{739}:srv;
 000033B2  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 000033B8  E8 FFFFF5DA			call	 UnitTesting_TestVirtuals_SimpleRV

				;{741}:res= srv.Sample();
 000033BD  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 000033C3  8B 11			mov	EDX,dword ptr [ECX]
 000033C5  FF 12			call	dword ptr [EDX]
 000033C7  50				push	EAX
 000033C8  52				push	EDX 
 000033C9  DD 04 24			fld	qword ptr [ESP]
 000033CC  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{742}:Console::WriteLn("(1)A simple random variable has : ", res, " as its value.");
 000033D2  5A				pop	EDX
 000033D3  58				pop	EAX 
 000033D4  8D 05 0000010F R		lea	EAX,OFFSET $S000918
 000033DA  6A 00			push	000000000h
 000033DC  50				push	EAX 
 000033DD  E8 00000000 E		call	 Console_WriteString
 000033E2  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000033E8  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000033EE  50				push	EAX 
 000033EF  52				push	EDX 
 000033F0  E8 00000000 E		call	 Console_WriteDouble 
 000033F5  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 000033FB  6A 00			push	000000000h 
 000033FD  50				push	EAX 
 000033FE  E8 00000000 E		call	 Console_WriteString 
 00003403  E8 00000000 E		call	 Console_WriteCrLf 

				;{743}:res= srv.Sample();
 00003408  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 0000340E  8B 11			mov	EDX,dword ptr [ECX]
 00003410  FF 12			call	dword ptr [EDX]
 00003412  50				push	EAX
 00003413  52				push	EDX 
 00003414  DD 04 24			fld	qword ptr [ESP]
 00003417  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{744}:Console::WriteLn("(2)A simple random variable has : ", res, " as its value.");
 0000341D  5A				pop	EDX
 0000341E  58				pop	EAX 
 0000341F  8D 05 0000019B R		lea	EAX,OFFSET $S000920
 00003425  6A 00			push	000000000h
 00003427  50				push	EAX 
 00003428  E8 00000000 E		call	 Console_WriteString
 0000342D  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 00003433  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003439  50				push	EAX 
 0000343A  52				push	EDX 
 0000343B  E8 00000000 E		call	 Console_WriteDouble 
 00003440  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 00003446  6A 00			push	000000000h 
 00003448  50				push	EAX 
 00003449  E8 00000000 E		call	 Console_WriteString 
 0000344E  E8 00000000 E		call	 Console_WriteCrLf 

				;{745}:res= srv.Sample();
 00003453  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 00003459  8B 11			mov	EDX,dword ptr [ECX]
 0000345B  FF 12			call	dword ptr [EDX]
 0000345D  50				push	EAX
 0000345E  52				push	EDX 
 0000345F  DD 04 24			fld	qword ptr [ESP]
 00003462  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{746}:Console::WriteLn("(3)A simple random variable has : ", res, " as its value.");
 00003468  5A				pop	EDX
 00003469  58				pop	EAX 
 0000346A  8D 05 00000227 R		lea	EAX,OFFSET $S000921
 00003470  6A 00			push	000000000h
 00003472  50				push	EAX 
 00003473  E8 00000000 E		call	 Console_WriteString
 00003478  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 0000347E  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003484  50				push	EAX 
 00003485  52				push	EDX 
 00003486  E8 00000000 E		call	 Console_WriteDouble 
 0000348B  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 00003491  6A 00			push	000000000h 
 00003493  50				push	EAX 
 00003494  E8 00000000 E		call	 Console_WriteString 
 00003499  E8 00000000 E		call	 Console_WriteCrLf 

				;{747}:res= srv.Sample();
 0000349E  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 000034A4  8B 11			mov	EDX,dword ptr [ECX]
 000034A6  FF 12			call	dword ptr [EDX]
 000034A8  50				push	EAX
 000034A9  52				push	EDX 
 000034AA  DD 04 24			fld	qword ptr [ESP]
 000034AD  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{748}:Console::WriteLn("(4)A simple random variable has : ", res, " as its value.");
 000034B3  5A				pop	EDX
 000034B4  58				pop	EAX 
 000034B5  8D 05 000002B3 R		lea	EAX,OFFSET $S000922
 000034BB  6A 00			push	000000000h
 000034BD  50				push	EAX 
 000034BE  E8 00000000 E		call	 Console_WriteString
 000034C3  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000034C9  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000034CF  50				push	EAX 
 000034D0  52				push	EDX 
 000034D1  E8 00000000 E		call	 Console_WriteDouble 
 000034D6  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 000034DC  6A 00			push	000000000h 
 000034DE  50				push	EAX 
 000034DF  E8 00000000 E		call	 Console_WriteString 
 000034E4  E8 00000000 E		call	 Console_WriteCrLf 

				;{749}:Console::WriteLn("my name is", srv.Name());
 000034E9  8D 05 0000078F R		lea	EAX,OFFSET $S000923
 000034EF  6A 00			push	000000000h
 000034F1  50				push	EAX 
 000034F2  E8 00000000 E		call	 Console_WriteString
 000034F7  8D 8D FFFFFDE4		lea	ECX,dword ptr [EBP-021Ch]
 000034FD  8B 11			mov	EDX,dword ptr [ECX]
 000034FF  FF 52 04			call	dword ptr [EDX+0004h]
 00003502  6A 00			push	000000000h 
 00003504  50				push	EAX 
 00003505  E8 00000000 E		call	 Console_WriteString 
 0000350A  E8 00000000 E		call	 Console_WriteCrLf 

				;{751}:res= 1.0;
 0000350F  D9 E8			fld1
 00003511  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{753}:urv(Math::log_e_base2(), Math::log_2_base_e());
 00003517  E8 00000000 E		call	 Math_log_2_base_e
 0000351C  50				push	EAX 
 0000351D  52				push	EDX 
 0000351E  E8 00000000 E		call	 Math_log_e_base2
 00003523  50				push	EAX
 00003524  52				push	EDX 
 00003525  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 0000352B  E8 FFFFF530			call	 UnitTesting_TestVirtuals_UniformRV

				;{755}:res= urv.Sample();
 00003530  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 00003536  8B 11			mov	EDX,dword ptr [ECX]
 00003538  FF 12			call	dword ptr [EDX]
 0000353A  50				push	EAX
 0000353B  52				push	EDX 
 0000353C  DD 04 24			fld	qword ptr [ESP]
 0000353F  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{756}:Console::WriteLn("(1)An uniform random variable has : ", res, " as its value.");
 00003545  5A				pop	EDX
 00003546  58				pop	EAX 
 00003547  8D 05 0000015B R		lea	EAX,OFFSET $S000925
 0000354D  6A 00			push	000000000h
 0000354F  50				push	EAX 
 00003550  E8 00000000 E		call	 Console_WriteString
 00003555  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 0000355B  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003561  50				push	EAX 
 00003562  52				push	EDX 
 00003563  E8 00000000 E		call	 Console_WriteDouble 
 00003568  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 0000356E  6A 00			push	000000000h 
 00003570  50				push	EAX 
 00003571  E8 00000000 E		call	 Console_WriteString 
 00003576  E8 00000000 E		call	 Console_WriteCrLf 

				;{757}:res= urv.Sample();
 0000357B  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 00003581  8B 11			mov	EDX,dword ptr [ECX]
 00003583  FF 12			call	dword ptr [EDX]
 00003585  50				push	EAX
 00003586  52				push	EDX 
 00003587  DD 04 24			fld	qword ptr [ESP]
 0000358A  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{758}:Console::WriteLn("(2)An uniform random variable has : ", res, " as its value.");
 00003590  5A				pop	EDX
 00003591  58				pop	EAX 
 00003592  8D 05 000001E7 R		lea	EAX,OFFSET $S000926
 00003598  6A 00			push	000000000h
 0000359A  50				push	EAX 
 0000359B  E8 00000000 E		call	 Console_WriteString
 000035A0  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000035A6  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000035AC  50				push	EAX 
 000035AD  52				push	EDX 
 000035AE  E8 00000000 E		call	 Console_WriteDouble 
 000035B3  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 000035B9  6A 00			push	000000000h 
 000035BB  50				push	EAX 
 000035BC  E8 00000000 E		call	 Console_WriteString 
 000035C1  E8 00000000 E		call	 Console_WriteCrLf 

				;{759}:res= urv.Sample();
 000035C6  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 000035CC  8B 11			mov	EDX,dword ptr [ECX]
 000035CE  FF 12			call	dword ptr [EDX]
 000035D0  50				push	EAX
 000035D1  52				push	EDX 
 000035D2  DD 04 24			fld	qword ptr [ESP]
 000035D5  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{760}:Console::WriteLn("(3)An uniform random variable has : ", res, " as its value.");
 000035DB  5A				pop	EDX
 000035DC  58				pop	EAX 
 000035DD  8D 05 00000273 R		lea	EAX,OFFSET $S000927
 000035E3  6A 00			push	000000000h
 000035E5  50				push	EAX 
 000035E6  E8 00000000 E		call	 Console_WriteString
 000035EB  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000035F1  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000035F7  50				push	EAX 
 000035F8  52				push	EDX 
 000035F9  E8 00000000 E		call	 Console_WriteDouble 
 000035FE  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 00003604  6A 00			push	000000000h 
 00003606  50				push	EAX 
 00003607  E8 00000000 E		call	 Console_WriteString 
 0000360C  E8 00000000 E		call	 Console_WriteCrLf 

				;{761}:res= urv.Sample();
 00003611  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 00003617  8B 11			mov	EDX,dword ptr [ECX]
 00003619  FF 12			call	dword ptr [EDX]
 0000361B  50				push	EAX
 0000361C  52				push	EDX 
 0000361D  DD 04 24			fld	qword ptr [ESP]
 00003620  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{762}:Console::WriteLn("(4)An uniform random variable has : ", res, " as its value.");
 00003626  5A				pop	EDX
 00003627  58				pop	EAX 
 00003628  8D 05 000002FF R		lea	EAX,OFFSET $S000928
 0000362E  6A 00			push	000000000h
 00003630  50				push	EAX 
 00003631  E8 00000000 E		call	 Console_WriteString
 00003636  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 0000363C  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003642  50				push	EAX 
 00003643  52				push	EDX 
 00003644  E8 00000000 E		call	 Console_WriteDouble 
 00003649  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 0000364F  6A 00			push	000000000h 
 00003651  50				push	EAX 
 00003652  E8 00000000 E		call	 Console_WriteString 
 00003657  E8 00000000 E		call	 Console_WriteCrLf 

				;{763}:Console::WriteLn("my name is", urv.Name());
 0000365C  8D 05 0000078F R		lea	EAX,OFFSET $S000923
 00003662  6A 00			push	000000000h
 00003664  50				push	EAX 
 00003665  E8 00000000 E		call	 Console_WriteString
 0000366A  8D 8D FFFFFDD0		lea	ECX,dword ptr [EBP-0230h]
 00003670  8B 11			mov	EDX,dword ptr [ECX]
 00003672  FF 52 04			call	dword ptr [EDX+0004h]
 00003675  6A 00			push	000000000h 
 00003677  50				push	EAX 
 00003678  E8 00000000 E		call	 Console_WriteString 
 0000367D  E8 00000000 E		call	 Console_WriteCrLf 

				;{765}:res= 0.0;
 00003682  D9 EE			fldz
 00003684  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{767}:erv(Math::pi());
 0000368A  E8 00000000 E		call	 Math_pi
 0000368F  50				push	EAX
 00003690  52				push	EDX 
 00003691  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 00003697  E8 FFFFF277			call	 UnitTesting_TestVirtuals_ExponentialRV

				;{769}:res= erv.Sample();
 0000369C  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 000036A2  8B 11			mov	EDX,dword ptr [ECX]
 000036A4  FF 12			call	dword ptr [EDX]
 000036A6  50				push	EAX
 000036A7  52				push	EDX 
 000036A8  DD 04 24			fld	qword ptr [ESP]
 000036AB  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{770}:Console::WriteLn("(1)An exponential random variable has : ", res, " as its value.");
 000036B1  5A				pop	EDX
 000036B2  58				pop	EAX 
 000036B3  8D 05 00000132 R		lea	EAX,OFFSET $S000930
 000036B9  6A 00			push	000000000h
 000036BB  50				push	EAX 
 000036BC  E8 00000000 E		call	 Console_WriteString
 000036C1  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000036C7  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000036CD  50				push	EAX 
 000036CE  52				push	EDX 
 000036CF  E8 00000000 E		call	 Console_WriteDouble 
 000036D4  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 000036DA  6A 00			push	000000000h 
 000036DC  50				push	EAX 
 000036DD  E8 00000000 E		call	 Console_WriteString 
 000036E2  E8 00000000 E		call	 Console_WriteCrLf 

				;{771}:res= erv.Sample();
 000036E7  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 000036ED  8B 11			mov	EDX,dword ptr [ECX]
 000036EF  FF 12			call	dword ptr [EDX]
 000036F1  50				push	EAX
 000036F2  52				push	EDX 
 000036F3  DD 04 24			fld	qword ptr [ESP]
 000036F6  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{772}:Console::WriteLn("(2)An exponential random variable has : ", res, " as its value.");
 000036FC  5A				pop	EDX
 000036FD  58				pop	EAX 
 000036FE  8D 05 000001BE R		lea	EAX,OFFSET $S000931
 00003704  6A 00			push	000000000h
 00003706  50				push	EAX 
 00003707  E8 00000000 E		call	 Console_WriteString
 0000370C  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 00003712  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003718  50				push	EAX 
 00003719  52				push	EDX 
 0000371A  E8 00000000 E		call	 Console_WriteDouble 
 0000371F  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 00003725  6A 00			push	000000000h 
 00003727  50				push	EAX 
 00003728  E8 00000000 E		call	 Console_WriteString 
 0000372D  E8 00000000 E		call	 Console_WriteCrLf 

				;{773}:res= erv.Sample();
 00003732  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 00003738  8B 11			mov	EDX,dword ptr [ECX]
 0000373A  FF 12			call	dword ptr [EDX]
 0000373C  50				push	EAX
 0000373D  52				push	EDX 
 0000373E  DD 04 24			fld	qword ptr [ESP]
 00003741  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{774}:Console::WriteLn("(3)An exponential random variable has : ", res, " as its value.");
 00003747  5A				pop	EDX
 00003748  58				pop	EAX 
 00003749  8D 05 0000024A R		lea	EAX,OFFSET $S000932
 0000374F  6A 00			push	000000000h
 00003751  50				push	EAX 
 00003752  E8 00000000 E		call	 Console_WriteString
 00003757  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 0000375D  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 00003763  50				push	EAX 
 00003764  52				push	EDX 
 00003765  E8 00000000 E		call	 Console_WriteDouble 
 0000376A  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 00003770  6A 00			push	000000000h 
 00003772  50				push	EAX 
 00003773  E8 00000000 E		call	 Console_WriteString 
 00003778  E8 00000000 E		call	 Console_WriteCrLf 

				;{775}:res= erv.Sample();
 0000377D  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 00003783  8B 11			mov	EDX,dword ptr [ECX]
 00003785  FF 12			call	dword ptr [EDX]
 00003787  50				push	EAX
 00003788  52				push	EDX 
 00003789  DD 04 24			fld	qword ptr [ESP]
 0000378C  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{776}:Console::WriteLn("(4)An exponential random variable has : ", res, " as its value.");
 00003792  5A				pop	EDX
 00003793  58				pop	EAX 
 00003794  8D 05 000002D6 R		lea	EAX,OFFSET $S000933
 0000379A  6A 00			push	000000000h
 0000379C  50				push	EAX 
 0000379D  E8 00000000 E		call	 Console_WriteString
 000037A2  8B 95 FFFFFDE8		mov	EDX,dword ptr [EBP-0218h]
 000037A8  8B 85 FFFFFDEC		mov	EAX,dword ptr [EBP-0214h] 
 000037AE  50				push	EAX 
 000037AF  52				push	EDX 
 000037B0  E8 00000000 E		call	 Console_WriteDouble 
 000037B5  8D 05 000000A9 R		lea	EAX,OFFSET $S000919
 000037BB  6A 00			push	000000000h 
 000037BD  50				push	EAX 
 000037BE  E8 00000000 E		call	 Console_WriteString 
 000037C3  E8 00000000 E		call	 Console_WriteCrLf 

				;{777}:Console::WriteLn("my name is", erv.Name());
 000037C8  8D 05 0000078F R		lea	EAX,OFFSET $S000923
 000037CE  6A 00			push	000000000h
 000037D0  50				push	EAX 
 000037D1  E8 00000000 E		call	 Console_WriteString
 000037D6  8D 8D FFFFFDC4		lea	ECX,dword ptr [EBP-023Ch]
 000037DC  8B 11			mov	EDX,dword ptr [ECX]
 000037DE  FF 52 04			call	dword ptr [EDX+0004h]
 000037E1  6A 00			push	000000000h 
 000037E3  50				push	EAX 
 000037E4  E8 00000000 E		call	 Console_WriteString 
 000037E9  E8 00000000 E		call	 Console_WriteCrLf 

				;{781}:UnitTesting::TestSwitch::RunTest(UnitTesting::TestSwitch::open);
 000037EE  B8 00000001			mov	EAX,000000001h
 000037F3  33 D2			xor	EDX,EDX
 000037F5  50				push	EAX
 000037F6  E8 FFFFEFC1			call	 UnitTesting_TestSwitch_RunTest

				;{785}:p= new double;
 000037FB  6A 08			push	000000008h
 000037FD  E8 00000000 E		call	 System_Memory_New
 00003802  85 C0			test	EAX,EAX
 00003804  74 18			jz	 $L001062
 00003806  8B F0			mov	ESI,EAX
 00003808  8D 3E			lea	EDI,dword ptr [ESI]
 0000380A  B9 00000002			mov	ECX,000000002h 
 0000380F  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003814  F3/ AB			rep stos	dword ptr [EDI]
 00003816  89 B5 FFFFFDC0		mov	dword ptr [EBP-0240h],ESI 
 0000381C  74 02			jz	 $L001063 
 0000381E			$L001062:
 0000381E  33 F6			xor	ESI,ESI
 00003820			$L001063:
 00003820  8B C6			mov	EAX,ESI 

				;{788}:*p= 3.141516927;
 00003822  8B 85 FFFFFDC0		mov	EAX,dword ptr [EBP-576]
 00003828  50				push	EAX
 00003829  BA A06A5D05			mov	EDX,0A06A5D05h
 0000382E  B8 400921D3			mov	EAX,0400921D3h 
 00003833  50				push	EAX
 00003834  52				push	EDX 
 00003835  DD 04 24			fld	qword ptr [ESP]
 00003838  5A				pop	EDX
 00003839  58				pop	EAX 
 0000383A  5B				pop	EBX
 0000383B  DD 1B			fstp	qword ptr [EBX]

				;{790}:res= *p;
 0000383D  8B 85 FFFFFDC0		mov	EAX,dword ptr [EBP-576]
 00003843  8B 10			mov	EDX,dword ptr [EAX]
 00003845  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00003848  50				push	EAX
 00003849  52				push	EDX 
 0000384A  DD 04 24			fld	qword ptr [ESP]
 0000384D  DD 9D FFFFFDE8		fstp	qword ptr [EBP-0218h]

				;{793}:destroy p;
 00003853  5A				pop	EDX
 00003854  58				pop	EAX 
 00003855  8B 85 FFFFFDC0		mov	EAX,dword ptr [EBP-576]
 0000385B  50				push	EAX
 0000385C  E8 00000000 E		call	 System_Memory_Destroy

				;{801}:fpTester_ptr= new UnitTesting::TestFloatingPoint();
 00003861  6A 01			push	000000001h
 00003863  E8 00000000 E		call	 System_Memory_New
 00003868  85 C0			test	EAX,EAX
 0000386A  74 11			jz	 $L001064
 0000386C  8B F0			mov	ESI,EAX
 0000386E  89 B5 FFFFFDBC		mov	dword ptr [EBP-0244h],ESI 
 00003874  8B CE			mov	ECX,ESI 
 00003876  E8 FFFFDFA7			call	 UnitTesting_TestFloatingPoint
 0000387B  74 02			jz	 $L001065 
 0000387D			$L001064:
 0000387D  33 F6			xor	ESI,ESI
 0000387F			$L001065:
 0000387F  8B C6			mov	EAX,ESI 

				;{803}:_pow= fpTester_ptr.Power(2.0, 64);
 00003881  B8 00000040			mov	EAX,000000040h
 00003886  50				push	EAX 
 00003887  BA 00000000			mov	EDX,000000000h
 0000388C  B8 40000000			mov	EAX,040000000h 
 00003891  50				push	EAX
 00003892  52				push	EDX 
 00003893  8B 85 FFFFFDBC		mov	EAX,dword ptr [EBP-580]
 00003899  8B C8			mov	ECX,EAX 
 0000389B  E8 FFFFDE75			call	 UnitTesting_TestFloatingPoint_Power
 000038A0  50				push	EAX
 000038A1  52				push	EDX 
 000038A2  DD 04 24			fld	qword ptr [ESP]
 000038A5  DD 5D 84			fstp	qword ptr [EBP-007Ch]

				;{805}:destroy fpTester_ptr;
 000038A8  5A				pop	EDX
 000038A9  58				pop	EAX 
 000038AA  8B 85 FFFFFDBC		mov	EAX,dword ptr [EBP-580]
 000038B0  8B C8			mov	ECX,EAX 
 000038B2  8B F1			mov	ESI,ECX
 000038B4  E8 FFFFDE44			call	 UnitTesting_TestFloatingPoint_Destructor
 000038B9  56				push	ESI
 000038BA  E8 00000000 E		call	 System_Memory_Destroy

				;{808}:iptr= new int;
 000038BF  68 00000190			push	000000190h
 000038C4  E8 00000000 E		call	 System_Memory_New
 000038C9  85 C0			test	EAX,EAX
 000038CB  74 18			jz	 $L001066
 000038CD  8B F0			mov	ESI,EAX
 000038CF  8D 3E			lea	EDI,dword ptr [ESI]
 000038D1  B9 00000064			mov	ECX,000000064h 
 000038D6  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000038DB  F3/ AB			rep stos	dword ptr [EDI]
 000038DD  89 B5 FFFFFDB8		mov	dword ptr [EBP-0248h],ESI 
 000038E3  74 02			jz	 $L001067 
 000038E5			$L001066:
 000038E5  33 F6			xor	ESI,ESI
 000038E7			$L001067:
 000038E7  8B C6			mov	EAX,ESI 

				;{810}:iptr[0][0]= 145;
 000038E9  8B 85 FFFFFDB8		mov	EAX,dword ptr [EBP-584]
 000038EF  8B F0			mov	ESI,EAX
 000038F1  83 E1 00			and	ECX,000000000h
 000038F4  51				push	ECX
 000038F5  33 C0			xor	EAX,EAX
 000038F7  B9 0000000A			mov	ECX,00000000Ah
 000038FC  F7 E9			imul	ECX
 000038FE  59				pop	ECX
 000038FF  03 C8			add	ECX,EAX
 00003901  51				push	ECX 
 00003902  33 C0			xor	EAX,EAX
 00003904  59				pop	ECX 
 00003905  03 C8			add	ECX,EAX 
 00003907  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000390A  50				push	EAX
 0000390B  B8 00000091			mov	EAX,000000091h
 00003910  5B				pop	EBX
 00003911  89 03			mov	dword ptr [EBX],EAX

				;{811}:iptr[1][9]= 541;
 00003913  8B 85 FFFFFDB8		mov	EAX,dword ptr [EBP-584]
 00003919  8B F0			mov	ESI,EAX
 0000391B  83 E1 00			and	ECX,000000000h
 0000391E  51				push	ECX
 0000391F  B8 00000001			mov	EAX,000000001h
 00003924  B9 0000000A			mov	ECX,00000000Ah
 00003929  F7 E9			imul	ECX
 0000392B  59				pop	ECX
 0000392C  03 C8			add	ECX,EAX
 0000392E  51				push	ECX 
 0000392F  B8 00000009			mov	EAX,000000009h
 00003934  59				pop	ECX 
 00003935  03 C8			add	ECX,EAX 
 00003937  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000393A  50				push	EAX
 0000393B  B8 0000021D			mov	EAX,00000021Dh
 00003940  5B				pop	EBX
 00003941  89 03			mov	dword ptr [EBX],EAX

				;{812}:iptr[2][7]= 561;
 00003943  8B 85 FFFFFDB8		mov	EAX,dword ptr [EBP-584]
 00003949  8B F0			mov	ESI,EAX
 0000394B  83 E1 00			and	ECX,000000000h
 0000394E  51				push	ECX
 0000394F  B8 00000002			mov	EAX,000000002h
 00003954  B9 0000000A			mov	ECX,00000000Ah
 00003959  F7 E9			imul	ECX
 0000395B  59				pop	ECX
 0000395C  03 C8			add	ECX,EAX
 0000395E  51				push	ECX 
 0000395F  B8 00000007			mov	EAX,000000007h
 00003964  59				pop	ECX 
 00003965  03 C8			add	ECX,EAX 
 00003967  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000396A  50				push	EAX
 0000396B  B8 00000231			mov	EAX,000000231h
 00003970  5B				pop	EBX
 00003971  89 03			mov	dword ptr [EBX],EAX

				;{813}:iptr[3][9]= 123;
 00003973  8B 85 FFFFFDB8		mov	EAX,dword ptr [EBP-584]
 00003979  8B F0			mov	ESI,EAX
 0000397B  83 E1 00			and	ECX,000000000h
 0000397E  51				push	ECX
 0000397F  B8 00000003			mov	EAX,000000003h
 00003984  B9 0000000A			mov	ECX,00000000Ah
 00003989  F7 E9			imul	ECX
 0000398B  59				pop	ECX
 0000398C  03 C8			add	ECX,EAX
 0000398E  51				push	ECX 
 0000398F  B8 00000009			mov	EAX,000000009h
 00003994  59				pop	ECX 
 00003995  03 C8			add	ECX,EAX 
 00003997  8D 04 8E			lea	EAX,dword ptr [ESI+ECX*0004h]
 0000399A  50				push	EAX
 0000399B  B8 0000007B			mov	EAX,00000007Bh
 000039A0  5B				pop	EBX
 000039A1  89 03			mov	dword ptr [EBX],EAX

				;{815}:destroy iptr;
 000039A3  8B 85 FFFFFDB8		mov	EAX,dword ptr [EBP-584]
 000039A9  50				push	EAX
 000039AA  E8 00000000 E		call	 System_Memory_Destroy

				;{817}:iptr= null;
 000039AF  33 C0			xor	EAX,EAX
 000039B1  8D 9D FFFFFDB8		lea	EBX,dword ptr [EBP-0248h]
 000039B7  89 03			mov	dword ptr [EBX],EAX

				;{819}:xptr= null;
 000039B9  33 C0			xor	EAX,EAX
 000039BB  89 85 FFFFFDB4		mov	dword ptr [EBP-024Ch],EAX

				;{821}:xptr= new int;
 000039C1  6A 04			push	000000004h
 000039C3  E8 00000000 E		call	 System_Memory_New
 000039C8  85 C0			test	EAX,EAX
 000039CA  74 18			jz	 $L001068
 000039CC  8B F0			mov	ESI,EAX
 000039CE  8D 3E			lea	EDI,dword ptr [ESI]
 000039D0  B9 00000001			mov	ECX,000000001h 
 000039D5  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000039DA  F3/ AB			rep stos	dword ptr [EDI]
 000039DC  89 B5 FFFFFDB4		mov	dword ptr [EBP-024Ch],ESI 
 000039E2  74 02			jz	 $L001069 
 000039E4			$L001068:
 000039E4  33 F6			xor	ESI,ESI
 000039E6			$L001069:
 000039E6  8B C6			mov	EAX,ESI 

				;{823}:destroy xptr;
 000039E8  8B 85 FFFFFDB4		mov	EAX,dword ptr [EBP-588]
 000039EE  50				push	EAX
 000039EF  E8 00000000 E		call	 System_Memory_Destroy

				;{825}:ii2ptr= null;
 000039F4  33 C0			xor	EAX,EAX
 000039F6  8D 9D FFFFFDB0		lea	EBX,dword ptr [EBP-0250h]
 000039FC  89 03			mov	dword ptr [EBX],EAX

				;{827}:xtarget, ;
 000039FE  8D 8D FFFFFD80		lea	ECX,dword ptr [EBP-0280h]
 00003A04  E8 FFFFE2F7			call	 UnitTesting_TestIntegers

				;{828}:ysource;
 00003A09  8D 8D FFFFFD50		lea	ECX,dword ptr [EBP-02B0h]
 00003A0F  E8 FFFFE2EC			call	 UnitTesting_TestIntegers

				;{830}:ysource.Width= 0x666;
 00003A14  B8 00000666			mov	EAX,000000666h
 00003A19  50				push	EAX
 00003A1A  8D 8D FFFFFD50		lea	ECX,dword ptr [EBP-02B0h]
 00003A20  0E E8 FFFFE057		call	OFFSET UnitTesting_TestIntegers_put_Width

				;{831}:ysource.Height= 0x777;
 00003A26  B8 00000777			mov	EAX,000000777h
 00003A2B  50				push	EAX
 00003A2C  8D 8D FFFFFD50		lea	ECX,dword ptr [EBP-02B0h]
 00003A32  0E E8 FFFFDFB2		call	OFFSET UnitTesting_TestIntegers_put_Height

				;{834}:xtarget= ysource;
 00003A38  8D 8D FFFFFD50		lea	ECX,dword ptr [EBP-02B0h]
 00003A3E  8B F1			mov	ESI,ECX
 00003A40  8D BD FFFFFD80		lea	EDI,dword ptr [EBP-0280h]
 00003A46  B9 00000030			mov	ECX,000000030h 
 00003A4B  FC				cld	
 00003A4C  F3/ A4			rep movsb	

				;{836}:val1= 5, val2= 3;
 00003A4E  B8 00000005			mov	EAX,000000005h
 00003A53  89 45 94			mov	dword ptr [EBP-006Ch],EAX
 00003A56  B8 00000003			mov	EAX,000000003h
 00003A5B  89 45 90			mov	dword ptr [EBP-0070h],EAX

				;{838}:xptr= xptr + 1;
 00003A5E  8B 85 FFFFFDB4		mov	EAX,dword ptr [EBP-588]
 00003A64  50				push	EAX
 00003A65  B8 00000001			mov	EAX,000000001h
 00003A6A  5A				pop	EDX
 00003A6B  03 C2			add	EAX,EDX
 00003A6D  89 85 FFFFFDB4		mov	dword ptr [EBP-024Ch],EAX

				;{847}:npi= sizeof (UnitTesting::misc1::pi);
 00003A73  B8 00000008			mov	EAX,000000008h
 00003A78  89 85 FFFFFD4C		mov	dword ptr [EBP-02B4h],EAX

				;{849}:npi= sizeof UnitTesting::misc1::pi;
 00003A7E  B8 00000008			mov	EAX,000000008h
 00003A83  89 85 FFFFFD4C		mov	dword ptr [EBP-02B4h],EAX

				;{851}:nint= sizeof (int), ndbl= sizeof (double), ni64= sizeof Int64, ntit= sizeof (UnitTesting::TestIntegers), nptr= sizeof (p), narr= sizeof (iptr), nar2= sizeof (array1), nar3= sizeof (UnitTesting::misc1::array);
 00003A89  B8 00000004			mov	EAX,000000004h
 00003A8E  89 85 FFFFFD48		mov	dword ptr [EBP-02B8h],EAX
 00003A94  B8 00000008			mov	EAX,000000008h
 00003A99  89 85 FFFFFD44		mov	dword ptr [EBP-02BCh],EAX
 00003A9F  B8 00000008			mov	EAX,000000008h
 00003AA4  89 85 FFFFFD40		mov	dword ptr [EBP-02C0h],EAX
 00003AAA  B8 00000030			mov	EAX,000000030h
 00003AAF  89 85 FFFFFD3C		mov	dword ptr [EBP-02C4h],EAX
 00003AB5  B8 00000004			mov	EAX,000000004h
 00003ABA  89 85 FFFFFD38		mov	dword ptr [EBP-02C8h],EAX
 00003AC0  B8 00000004			mov	EAX,000000004h
 00003AC5  89 85 FFFFFD34		mov	dword ptr [EBP-02CCh],EAX
 00003ACB  B8 00000190			mov	EAX,000000190h
 00003AD0  89 85 FFFFFD30		mov	dword ptr [EBP-02D0h],EAX
 00003AD6  B8 00000050			mov	EAX,SIZEOF UnitTesting_misc1_array
 00003ADB  89 85 FFFFFD2C		mov	dword ptr [EBP-02D4h],EAX

				;{860}:nint= sizeof int + sizeof double;
 00003AE1  B8 00000004			mov	EAX,000000004h
 00003AE6  50				push	EAX
 00003AE7  B8 00000008			mov	EAX,000000008h
 00003AEC  5A				pop	EDX
 00003AED  03 C2			add	EAX,EDX
 00003AEF  89 85 FFFFFD48		mov	dword ptr [EBP-02B8h],EAX

				;{862}:nint= sizeof (int) + sizeof (Int64);
 00003AF5  B8 00000004			mov	EAX,000000004h
 00003AFA  50				push	EAX
 00003AFB  B8 00000008			mov	EAX,000000008h
 00003B00  5A				pop	EDX
 00003B01  03 C2			add	EAX,EDX
 00003B03  89 85 FFFFFD48		mov	dword ptr [EBP-02B8h],EAX

				;{864}:if(nint >= ndbl && ni64 < ntit)
 00003B09  8B 85 FFFFFD48		mov	EAX,dword ptr [EBP-02B8h]
 00003B0F  50				push	EAX
 00003B10  8B 85 FFFFFD44		mov	EAX,dword ptr [EBP-02BCh]
 00003B16  5A				pop	EDX
 00003B17  3B D0			cmp	EDX,EAX
 00003B19  0F 9D C0			setge	AL
 00003B1C  50				push	EAX
 00003B1D  8B 85 FFFFFD40		mov	EAX,dword ptr [EBP-02C0h]
 00003B23  50				push	EAX
 00003B24  8B 85 FFFFFD3C		mov	EAX,dword ptr [EBP-02C4h]
 00003B2A  5A				pop	EDX
 00003B2B  3B D0			cmp	EDX,EAX
 00003B2D  0F 9C C0			setl	AL
 00003B30  5A				pop	EDX
 00003B31  23 C2			and	EAX,EDX
 00003B33  84 C0			test	AL,AL
 00003B35  74 13			jz	OFFSET $L001070
				;{

				;{866}:Console::WriteLn("This is getting complex and better each time!");
 00003B37  8D 05 000006F6 R		lea	EAX,OFFSET $S000958
 00003B3D  6A 00			push	000000000h
 00003B3F  50				push	EAX 
 00003B40  E8 00000000 E		call	 Console_WriteString
 00003B45  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00003B4A			$L001070:

				;{869}:obj;
 00003B4A  8D 8D FFFFFD20		lea	ECX,dword ptr [EBP-02E0h]
 00003B50  E8 FFFFCBB5			call	 UnitTesting_Circle

				;{871}:obj.Radius= 115.456;
 00003B55  BA 1A9FBE77			mov	EDX,01A9FBE77h
 00003B5A  B8 405CDD2F			mov	EAX,0405CDD2Fh 
 00003B5F  50				push	EAX
 00003B60  52				push	EDX 
 00003B61  DD 04 24			fld	qword ptr [ESP]
 00003B64  8D 8D FFFFFD20		lea	ECX,dword ptr [EBP-02E0h]
 00003B6A  0E E8 FFFFCB62		call	OFFSET UnitTesting_Circle_put_Radius

				;{873}:area= obj.ComputeArea();
 00003B70  8D 8D FFFFFD20		lea	ECX,dword ptr [EBP-02E0h]
 00003B76  8B 11			mov	EDX,dword ptr [ECX]
 00003B78  FF 52 04			call	dword ptr [EDX+0004h]
 00003B7B  50				push	EAX
 00003B7C  52				push	EDX 
 00003B7D  DD 04 24			fld	qword ptr [ESP]
 00003B80  DD 9D FFFFFD18		fstp	qword ptr [EBP-02E8h]

				;{875}:obj2= obj;
 00003B86  5A				pop	EDX
 00003B87  58				pop	EAX 
 00003B88  8D 8D FFFFFD0C		lea	ECX,dword ptr [EBP-02F4h]
 00003B8E  E8 FFFFCB77			call	 UnitTesting_Circle
 00003B93  8D 8D FFFFFD20		lea	ECX,dword ptr [EBP-02E0h]
 00003B99  8B F1			mov	ESI,ECX
 00003B9B  8D BD FFFFFD0C		lea	EDI,dword ptr [EBP-02F4h]
 00003BA1  B9 0000000C			mov	ECX,00000000Ch 
 00003BA6  FC				cld	
 00003BA7  F3/ A4			rep movsb	

				;{877}:what= (area == obj2.ComputeArea());
 00003BA9  8B 95 FFFFFD18		mov	EDX,dword ptr [EBP-02E8h]
 00003BAF  8B 85 FFFFFD1C		mov	EAX,dword ptr [EBP-02E4h] 
 00003BB5  50				push	EAX
 00003BB6  52				push	EDX 
 00003BB7  8D 8D FFFFFD0C		lea	ECX,dword ptr [EBP-02F4h]
 00003BBD  8B 11			mov	EDX,dword ptr [ECX]
 00003BBF  FF 52 04			call	dword ptr [EDX+0004h]
 00003BC2  50				push	EAX
 00003BC3  52				push	EDX 
 00003BC4  E8 00000000 E		call	 FloatingPoint_Compare
 00003BC9  85 C0			test	EAX,EAX
 00003BCB  0F 94 C0			setz	AL
 00003BCE  88 45 A8			mov	byte ptr [EBP-0058h],AL

				;{879}:sq;
 00003BD1  8D 8D FFFFFCF8		lea	ECX,dword ptr [EBP-0308h]
 00003BD7  E8 FFFFCFEB			call	 UnitTesting_Square

				;{881}:sq.Width= 500.456;
 00003BDC  BA C6A7EF9E			mov	EDX,0C6A7EF9Eh
 00003BE1  B8 407F474B			mov	EAX,0407F474Bh 
 00003BE6  50				push	EAX
 00003BE7  52				push	EDX 
 00003BE8  DD 04 24			fld	qword ptr [ESP]
 00003BEB  8D 8D FFFFFCF8		lea	ECX,dword ptr [EBP-0308h]
 00003BF1  0E E8 FFFFCFAD		call	OFFSET UnitTesting_Square_put_Width

				;{882}:sq.Height= 1045.4564;
 00003BF7  BA 5A858794			mov	EDX,05A858794h
 00003BFC  B8 409055D3			mov	EAX,0409055D3h 
 00003C01  50				push	EAX
 00003C02  52				push	EDX 
 00003C03  DD 04 24			fld	qword ptr [ESP]
 00003C06  8D 8D FFFFFCF8		lea	ECX,dword ptr [EBP-0308h]
 00003C0C  0E E8 FFFFCF2F		call	OFFSET UnitTesting_Square_put_Height

				;{884}:sq.ComputeArea();
 00003C12  8D 8D FFFFFCF8		lea	ECX,dword ptr [EBP-0308h]
 00003C18  8B 11			mov	EDX,dword ptr [ECX]
 00003C1A  FF 52 04			call	dword ptr [EDX+0004h]

				;{886}:tri;
 00003C1D  8D 8D FFFFFCE4		lea	ECX,dword ptr [EBP-031Ch]
 00003C23  E8 FFFFEFD1			call	 UnitTesting_Triangle

				;{888}:tri.Base= 450.4564;
 00003C28  BA 6A161E50			mov	EDX,06A161E50h
 00003C2D  B8 407C274D			mov	EAX,0407C274Dh 
 00003C32  50				push	EAX
 00003C33  52				push	EDX 
 00003C34  DD 04 24			fld	qword ptr [ESP]
 00003C37  8D 8D FFFFFCE4		lea	ECX,dword ptr [EBP-031Ch]
 00003C3D  0E E8 FFFFEEB5		call	OFFSET UnitTesting_Triangle_put_Base

				;{889}:tri.High= 4572.4564;
 00003C43  BA D6A161E5			mov	EDX,0D6A161E5h
 00003C48  B8 40B1DC74			mov	EAX,040B1DC74h 
 00003C4D  50				push	EAX
 00003C4E  52				push	EDX 
 00003C4F  DD 04 24			fld	qword ptr [ESP]
 00003C52  8D 8D FFFFFCE4		lea	ECX,dword ptr [EBP-031Ch]
 00003C58  0E E8 FFFFEF4F		call	OFFSET UnitTesting_Triangle_put_High

				;{891}:tri.ComputeArea();
 00003C5E  8D 8D FFFFFCE4		lea	ECX,dword ptr [EBP-031Ch]
 00003C64  8B 11			mov	EDX,dword ptr [ECX]
 00003C66  FF 52 04			call	dword ptr [EDX+0004h]

				;{895}:Console::WriteLn("I'm tired of waiting!!!");
 00003C69  8D 05 00000533 R		lea	EAX,OFFSET $S000970
 00003C6F  6A 00			push	000000000h
 00003C71  50				push	EAX 
 00003C72  E8 00000000 E		call	 Console_WriteString
 00003C77  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00003C7C			$L000864:
 00003C7C  8D 8D FFFFFCE4		lea	ECX,dword ptr [EBP-031Ch]
 00003C82  8B F1			mov	ESI,ECX
 00003C84  E8 FFFFEEE0			call	 UnitTesting_Triangle_Destructor
 00003C89  8D 4D 8C			lea	ECX,dword ptr [EBP-0074h]
 00003C8C  8B F1			mov	ESI,ECX
 00003C8E  E8 FFFFDA6A			call	 UnitTesting_TestFloatingPoint_Destructor
 00003C93  8D 4D F8			lea	ECX,dword ptr [EBP-0008h]
 00003C96  8B F1			mov	ESI,ECX
 00003C98  E8 FFFFCA92			call	 UnitTesting_HelloWorld_Destructor

 00003C9D  5F				pop	EDI
 00003C9E  5E				pop	ESI 
 00003C9F  5B				pop	EBX 
 00003CA0  C9				leave	
 00003CA1  C2 0008			retn	000000008h
 00003CA4			UnitTesting_Test1_TestRunner_main ENDP

 00003CA4			__System_Hpp_Runtime_Init PROC

 00003CA4  55				push	EBP
 00003CA5  8B EC			mov	EBP,ESP
 00003CA7  51				push	ECX 
 00003CA8  53				push	EBX 
 00003CA9  56				push	ESI 
 00003CAA  57				push	EDI 
 00003CAB  E8 00000000 E		call	 GetVersion
 00003CB0  A3 000007F4 R		mov	 __osver,EAX ;os version
 00003CB5  A1 000007F4 R		mov	EAX, __osver 
 00003CBA  C1 E8 08			shr	EAX,000000008h
 00003CBD  25 000000FF			and	EAX,0000000FFh
 00003CC2  A3 000007F8 R		mov	 __winminor,EAX ;windows minor
 00003CC7  8B 0D 000007F4 R		mov	ECX, __osver 
 00003CCD  81 E1 000000FF		and	ECX,0000000FFh 
 00003CD3  89 0D 000007FC R		mov	 __winmajor,ECX ;windows major
 00003CD9  8B 15 000007FC R		mov	EDX,dword ptr __winmajor 
 00003CDF  C1 E2 08			shl	EDX,000000008h
 00003CE2  03 15 000007F8 R		add	EDX,dword ptr __winminor
 00003CE8  89 15 00000800 R		mov	dword ptr __winver,EDX ;windows version
 00003CEE  A1 000007F4 R		mov	EAX, __osver 
 00003CF3  C1 E8 10			shr	EAX,000000010h 
 00003CF6  25 0000FFFF			and	EAX,00000FFFFh 
 00003CFB  A3 000007F4 R		mov	 __osver,EAX 
 00003D00  8D 1D 00000818 R		lea	EBX,dword ptr ___argc
 00003D06  53				push	EBX
 00003D07  E8 00000000 E		call	 System_GetCommandLineArgv 
 00003D0C  A3 00000814 R		mov	dword ptr ___argv,EAX 
 00003D11  50				push	EAX 
 00003D12  8B 0D 00000818 R		mov	ECX,dword ptr ___argc 
 00003D18  51				push	ECX 
 00003D19  E8 FFFFEFB1			call	 UnitTesting_Test1_TestRunner_main ;user entry point (stdcall calling convention)
 00003D1E  50				push	EAX 
 00003D1F  A1 00000814 R		mov	EAX,dword ptr ___argv 
 00003D24  50				push	EAX 
 00003D25  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00003D2A  50				push	EAX 
 00003D2B  E8 00000000 E		call	 System_Memory_Free 
 00003D30  E8 00000000 E		call	 System_Exit 

 00003D35  5F				pop	EDI
 00003D36  5E				pop	ESI 
 00003D37  5B				pop	EBX 
 00003D38  C9				leave	
 00003D39  C3				ret	
 00003D3A			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 00000000 000006F5 R		@@class_vptr_vtbl@@__UnitTesting_Circle	DWORD	OFFSET UnitTesting_Circle_Type,
	   00000652 R
	   000006A7 R
	   00000688 R
										OFFSET UnitTesting_Circle_ComputeArea,
										OFFSET UnitTesting_Circle_Name,
										OFFSET UnitTesting_Circle_Draw

 00000010 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Shape	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 00000020 00000B78 R		@@class_vptr_vtbl@@__UnitTesting_Square	DWORD	OFFSET UnitTesting_Square_Type,
	   00000AD9 R
	   00000B64 R
	   00000B0B R
										OFFSET UnitTesting_Square_ComputeArea,
										OFFSET UnitTesting_Square_Name,
										OFFSET UnitTesting_Square_Draw

 00000030 000028D5 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV	DWORD	OFFSET UnitTesting_TestVirtuals_ExponentialRV_Sample,
	   000028C1 R
										OFFSET UnitTesting_TestVirtuals_ExponentialRV_Name

 00000038 00000000 E		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable	DWORD	OFFSET __purecall,
	   00002947 R
										OFFSET UnitTesting_TestVirtuals_RandomVariable_Name

 00000040 00002984 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV	DWORD	OFFSET UnitTesting_TestVirtuals_SimpleRV_Sample,
	   00002970 R
										OFFSET UnitTesting_TestVirtuals_SimpleRV_Name

 00000048 000029C8 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV	DWORD	OFFSET UnitTesting_TestVirtuals_UniformRV_Sample,
	   000029B4 R
										OFFSET UnitTesting_TestVirtuals_UniformRV_Name

 00000050 00002BE4 R		@@class_vptr_vtbl@@__UnitTesting_Triangle	DWORD	OFFSET UnitTesting_Triangle_Type,
	   00002B1B R
	   00002BD0 R
	   00002B77 R
										OFFSET UnitTesting_Triangle_ComputeArea,
										OFFSET UnitTesting_Triangle_Name,
										OFFSET UnitTesting_Triangle_Draw

 00000060			.DATA ;data segment
 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh
 = 00000001			UnitTesting_TestSwitch_open	=	000000001h
 = 00000002			UnitTesting_TestSwitch_close	=	000000002h
 = 00000003			UnitTesting_TestSwitch_write	=	000000003h
 = 00000004			UnitTesting_TestSwitch_read	=	000000004h
 = 0000000A			UnitTesting_ten	=	00000000Ah
 = FFFFFFF6			UnitTesting_minusten	=	0FFFFFFF6h
 = 00000064			UnitTesting_hundred	=	000000064h
 = 00000050			UnitTesting_max_length	=	000000050h
 00000060			UnitTesting_max_64	QWORD	00000000002893052h
	   0000000002893052
 00000068			UnitTesting_max_64_neg	QWORD	0FFFFFFFFFD76CFAEh
	   FFFFFFFFFD76CFAE
 00000070			UnitTesting_misc1_pi	REAL8	3.141593
	   400921FB82C2BD7F
 00000078 400D8794		UnitTesting_misc1_e	REAL4	2.211400
 = 0000000A			UnitTesting_misc1_ten_plus	=	00000000Ah
 = 00000061			UnitTesting_misc1_ch1	=	'a'
 = 0000007A			UnitTesting_misc1_ch2	=	'z'
 0000007C 68 65 6C 6C 6F	UnitTesting_misc1_hello	BYTE "hello, world.",0
	   2C 20 77 6F 72
	   6C 64 2E 00
 0000008A 68 75 6D 61 6E	UnitTesting_misc1_hell	BYTE "human",0
	   00
 00000090 6D 69 73 74 61	UnitTesting_misc1_boy	BYTE "mistakes",0
	   6B 65 73 00
 00000099			UnitTesting_misc1_dX	REAL8	4.990000
	   4013F5C28F5C28F6
 000000A1			UnitTesting_misc1_dY	REAL8	9.456700
	   4022E9D495182A99

 000000A9 20 61 73 20 69	$S000919 		BYTE 	" as its value.",0
	   74 73 20 76 61
	   6C 75 65 2E 00
 000000B8 28 2A 29 20 74	$S000777 		BYTE 	"(*) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000000CC 28 2B 29 20 74	$S000767 		BYTE 	"(+) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000000E0 28 2D 29 20 74	$S000772 		BYTE 	"(-) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000000F4 28 31 29 41 20	$S000909 		BYTE 	"(1)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000010F 28 31 29 41 20	$S000918 		BYTE 	"(1)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 00000132 28 31 29 41 6E	$S000930 		BYTE 	"(1)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 0000015B 28 31 29 41 6E	$S000925 		BYTE 	"(1)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 00000180 28 32 29 41 20	$S000910 		BYTE 	"(2)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000019B 28 32 29 41 20	$S000920 		BYTE 	"(2)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000001BE 28 32 29 41 6E	$S000931 		BYTE 	"(2)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000001E7 28 32 29 41 6E	$S000926 		BYTE 	"(2)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 0000020C 28 33 29 41 20	$S000911 		BYTE 	"(3)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000227 28 33 29 41 20	$S000921 		BYTE 	"(3)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 0000024A 28 33 29 41 6E	$S000932 		BYTE 	"(3)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 00000273 28 33 29 41 6E	$S000927 		BYTE 	"(3)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 00000298 28 34 29 41 20	$S000912 		BYTE 	"(4)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 000002B3 28 34 29 41 20	$S000922 		BYTE 	"(4)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000002D6 28 34 29 41 6E	$S000933 		BYTE 	"(4)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000002FF 28 34 29 41 6E	$S000928 		BYTE 	"(4)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 00000324 28 35 29 41 20	$S000913 		BYTE 	"(5)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000033F 28 36 29 41 20	$S000914 		BYTE 	"(6)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000035A 28 64 69 76 29	$S000782 		BYTE 	"(div) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 00000370 28 64 6F 75 62	$S000893 		BYTE 	"(double)the area is: ",0
	   6C 65 29 74 68
	   65 20 61 72 65
	   61 20 69 73 3A
	   20 00
 00000386 28 69 6E 74 29	$S000892 		BYTE 	"(int)the area is: ",0
	   74 68 65 20 61
	   72 65 61 20 69
	   73 3A 20 00
 00000399 28 6D 6F 64 29	$S000787 		BYTE 	"(mod) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000003AF 28 6E 6F 6E 65	$S000473 		BYTE 	"(none)",0
	   29 00
 000003B6 28 72 6F 75 6E	$S000792 		BYTE 	"(round(/)) the result is: ",0
	   64 28 2F 29 29
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000003D1 2C 20 61 6E 64	$S000552 		BYTE 	", and b = ",0
	   20 62 20 3D 20
	   00
 000003DC 41 20 73 69 6D	$S000478 		BYTE 	"A simple variable",0
	   70 6C 65 20 76
	   61 72 69 61 62
	   6C 65 00
 000003EE 41 6E 20 65 78	$S000506 		BYTE 	"An exponential variable",0
	   70 6F 6E 65 6E
	   74 69 61 6C 20
	   76 61 72 69 61
	   62 6C 65 00
 00000406 41 6E 20 75 6E	$S000496 		BYTE 	"An uniform variable",0
	   69 66 6F 72 6D
	   20 76 61 72 69
	   61 62 6C 65 00
 0000041A 41 72 67 75 6D	$S000868 		BYTE 	"Argument: [",0
	   65 6E 74 3A 20
	   5B 00
 00000426 43 68 61 72 20	$S000835 		BYTE 	"Char at i:[",0
	   61 74 20 69 3A
	   5B 00
 00000432 43 69 72 63 6C	$S000593 		BYTE 	"Circle",0
	   65 00
 00000439 43 6C 6F 73 69	$S000565 		BYTE 	"Closing file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 00000449 43 75 72 72 65	$S000884 		BYTE 	"Current Index :",0
	   6E 74 20 49 6E
	   64 65 78 20 3A
	   00
 00000459 44 6F 20 36 2C	$S000570 		BYTE 	"Do 6, then finish",0
	   20 74 68 65 6E
	   20 66 69 6E 69
	   73 68 00
 0000046B 44 6F 20 52 65	$S000567 		BYTE 	"Do Read from file...",0
	   61 64 20 66 72
	   6F 6D 20 66 69
	   6C 65 2E 2E 2E
	   00
 00000480 44 6F 20 57 72	$S000566 		BYTE 	"Do Write to file...",0
	   69 74 65 20 74
	   6F 20 66 69 6C
	   65 2E 2E 2E 00
 00000494 44 6F 20 66 6F	$S000568 		BYTE 	"Do for 5 and follow to 6",0
	   72 20 35 20 61
	   6E 64 20 66 6F
	   6C 6C 6F 77 20
	   74 6F 20 36 00
 000004AD 44 72 61 77 69	$S000595 		BYTE 	"Drawing a Circle!",0
	   6E 67 20 61 20
	   43 69 72 63 6C
	   65 21 00
 000004BF 44 72 61 77 69	$S000614 		BYTE 	"Drawing a Square!",0
	   6E 67 20 61 20
	   53 71 75 61 72
	   65 21 00
 000004D1 44 72 61 77 69	$S000631 		BYTE 	"Drawing a Triangle!",0
	   6E 67 20 61 20
	   54 72 69 61 6E
	   67 6C 65 21 00
 000004E5 47 61 6D 6D 61	$S000541 		BYTE 	"Gamma y = ",0
	   20 79 20 3D 20
	   00
 000004F0 48 2B 2B 20 46	$S000642 		BYTE 	"H++ First program",0
	   69 72 73 74 20
	   70 72 6F 67 72
	   61 6D 00
 00000502 48 61 72 6F 6C	$S000857 		BYTE 	"Harold ",0
	   64 20 00
 0000050A 48 61 72 6F 6C	$S000845 		BYTE 	"Harold L. Marzan",0
	   64 20 4C 2E 20
	   4D 61 72 7A 61
	   6E 00
 0000051B 48 65 6C 6C 6F	$S000873 		BYTE 	"Hello World from H++!!!",0
	   20 57 6F 72 6C
	   64 20 66 72 6F
	   6D 20 48 2B 2B
	   21 21 21 00
 00000533 49 27 6D 20 74	$S000970 		BYTE 	"I'm tired of waiting!!!",0
	   69 72 65 64 20
	   6F 66 20 77 61
	   69 74 69 6E 67
	   21 21 21 00
 0000054B 49 6E 76 61 6C	$S000571 		BYTE 	"Invalid Option : ",0
	   69 64 20 4F 70
	   74 69 6F 6E 20
	   3A 20 00
 0000055D 4C 61 77 72 65	$S000858 		BYTE 	"Lawrence ",0
	   6E 63 65 20 00
 00000567 4D 61 72 7A 61	$S000859 		BYTE 	"Marzan ",0
	   6E 20 00
 0000056F 4D 65 72 63 61	$S000860 		BYTE 	"Mercado.",0
	   64 6F 2E 00
 00000578 4D 79 20 6E 61	$S000854 		BYTE 	"My name is :",0
	   6D 65 20 69 73
	   20 3A 00
 00000585 4F 6F 70 73 21	$S000837 		BYTE 	"Oops! there was a bug in this code!",0
	   20 74 68 65 72
	   65 20 77 61 73
	   20 61 20 62 75
	   67 20 69 6E 20
	   74 68 69 73 20
	   63 6F 64 65 21
	   00
 000005A9 4F 6F 70 73 21	$S000838 		BYTE 	"Oops! there was a serious bug in this code!",0
	   20 74 68 65 72
	   65 20 77 61 73
	   20 61 20 73 65
	   72 69 6F 75 73
	   20 62 75 67 20
	   69 6E 20 74 68
	   69 73 20 63 6F
	   64 65 21 00
 000005D5 4F 70 65 6E 69	$S000564 		BYTE 	"Opening file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 000005E5 50 73 65 75 64	$S000915 		BYTE 	"Pseudo-Random Double values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 44
	   6F 75 62 6C 65
	   20 76 61 6C 75
	   65 73 3A 00
 00000602 50 73 65 75 64	$S000908 		BYTE 	"Pseudo-Random Integer values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 49
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 73 3A 00
 00000620 53 71 75 61 72	$S000612 		BYTE 	"Square",0
	   65 00
 00000627 53 77 61 70 69	$S000804 		BYTE 	"Swaping values...",0
	   6E 67 20 76 61
	   6C 75 65 73 2E
	   2E 2E 00
 00000639 54 68 65 20 48	$S000636 		BYTE 	"The HelloWorld constructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   63 6F 6E 73 74
	   72 75 63 74 6F
	   72 00
 00000654 54 68 65 20 48	$S000644 		BYTE 	"The HelloWorld destructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   64 65 73 74 72
	   75 63 74 6F 72
	   00
 0000066E 54 68 65 20 6D	$S000554 		BYTE 	"The max value is = ",0
	   61 78 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000682 54 68 65 20 6D	$S000556 		BYTE 	"The min value is = ",0
	   69 6E 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000696 54 68 65 20 76	$S000890 		BYTE 	"The value of myRef1 must be 65536 ==",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   52 65 66 31 20
	   6D 75 73 74 20
	   62 65 20 36 35
	   35 33 36 20 3D
	   3D 00
 000006BB 54 68 65 20 76	$S000891 		BYTE 	"The value of myVar1 is not 65536 but zero",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   56 61 72 31 20
	   69 73 20 6E 6F
	   74 20 36 35 35
	   33 36 20 62 75
	   74 20 7A 65 72
	   6F 00
 000006E5 54 68 65 20 76	$S000551 		BYTE 	"The values: a = ",0
	   61 6C 75 65 73
	   3A 20 61 20 3D
	   20 00
 000006F6 54 68 69 73 20	$S000958 		BYTE 	"This is getting complex and better each time!",0
	   69 73 20 67 65
	   74 74 69 6E 67
	   20 63 6F 6D 70
	   6C 65 78 20 61
	   6E 64 20 62 65
	   74 74 65 72 20
	   65 61 63 68 20
	   74 69 6D 65 21
	   00
 00000724 54 72 69 61 6E	$S000629 		BYTE 	"Triangle",0
	   67 6C 65 00
 0000072D 5D 20 3D 3D 20	$S000836 		BYTE 	"] == ",0
	   00
 00000733 5D 3D 20 00		$S000869 		BYTE 	"]= ",0
 00000737 63 6F 6E 73 74	$S000811 		BYTE 	"constructing a TestFloatingPoint() object...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   54 65 73 74 46
	   6C 6F 61 74 69
	   6E 67 50 6F 69
	   6E 74 28 29 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000764 64 65 73 74 72	$S000813 		BYTE 	"destroying a TestFloatingPoint() object...",0
	   6F 79 69 6E 67
	   20 61 20 54 65
	   73 74 46 6C 6F
	   61 74 69 6E 67
	   50 6F 69 6E 74
	   28 29 20 6F 62
	   6A 65 63 74 2E
	   2E 2E 00
 0000078F 6D 79 20 6E 61	$S000923 		BYTE 	"my name is",0
	   6D 65 20 69 73
	   00
 0000079A 74 68 65 20 76	$S000728 		BYTE 	"the value is: ",0
	   61 6C 75 65 20
	   69 73 3A 20 00
 000007A9 74 68 65 20 76	$S000727 		BYTE 	"the value of x is: ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 3A 20 00
 000007BD 74 68 69 73 20	$S000639 		BYTE 	"this is what I have to say for the first time in H++ :",0
	   69 73 20 77 68
	   61 74 20 49 20
	   68 61 76 65 20
	   74 6F 20 73 61
	   79 20 66 6F 72
	   20 74 68 65 20
	   66 69 72 73 74
	   20 74 69 6D 65
	   20 69 6E 20 48
	   2B 2B 20 3A 00

 000007F4 00000000		__osver 		DWORD 	0;Windows OS version
 000007F8 00000000		__winminor 		DWORD 	0;Windows minor version
 000007FC 00000000		__winmajor 		DWORD 	0;Windows major version
 00000800 00000000		__winver 		DWORD 	0;Windows version
 00000804  00000010 [		__computer 		BYTE 	000000010h DUP(?);Computer name
	    00
	   ]
 00000814 00000000		___argv 		DWORD 	0;Array of argument values
 00000818 00000000		___argc 		DWORD 	0;Argument count
 0000081C 00000000		UnitTesting_Rnd_seed	 DWORD	0
 00000820 00000000		UnitTesting_Rnd_a	 DWORD	0
 00000824 00000000		UnitTesting_Rnd_m	 DWORD	0
 00000828 00000000		UnitTesting_Rnd_q	 DWORD	0
 0000082C 00000000		UnitTesting_Rnd_r	 DWORD	0
 00000830  0000000A [		UnitTesting_misc1_array	 REAL8 00000000Ah DUP(?) 
	    0000000000000000
	   ]
 00000880			UnitTesting_TestIntegers_bigValue	 DQ	0
	   0000000000000000

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 6.15.8803		    12/18/08 02:22:01
c:\hcc\hcc\TestSource\unittesting1.hpp			     Symbols 2 - 1
This file was automatically generated by the 32-bit H++ Comp



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000888 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00003D3A Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004B Public STDCALL
  $L000407 . . . . . . . . . . .	L Near	 00000044 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000AA _TEXT	Length= 00000061 Public STDCALL
  $L000430 . . . . . . . . . . .	L Near	 00000104 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004B _TEXT	Length= 0000005F Public STDCALL
  $L000424 . . . . . . . . . . .	L Near	 000000A3 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 0000010B _TEXT	Length= 00000084 Public STDCALL
  $L000432 . . . . . . . . . . .	L Near	 00000188 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 0000018F _TEXT	Length= 0000005F Public STDCALL
  $L000428 . . . . . . . . . . .	L Near	 000001E7 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001EE _TEXT	Length= 00000061 Public STDCALL
  $L000421 . . . . . . . . . . .	L Near	 00000248 _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 0000024F _TEXT	Length= 00000084 Public STDCALL
  $L000426 . . . . . . . . . . .	L Near	 000002CC _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 0000033B _TEXT	Length= 0000009F Public STDCALL
  $L000444 . . . . . . . . . . .	L Near	 000003D3 _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002D3 _TEXT	Length= 00000068 Public STDCALL
  $L000438 . . . . . . . . . . .	L Near	 00000334 _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003DA _TEXT	Length= 00000087 Public STDCALL
  $L000446 . . . . . . . . . . .	L Near	 0000045A _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 00000461 _TEXT	Length= 0000008A Public STDCALL
  $L000442 . . . . . . . . . . .	L Near	 000004E4 _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004EB _TEXT	Length= 00000066 Public STDCALL
  $L000435 . . . . . . . . . . .	L Near	 0000054A _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 00000551 _TEXT	Length= 00000087 Public STDCALL
  $L000440 . . . . . . . . . . .	L Near	 000005D1 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005D8 _TEXT	Length= 0000004B Public STDCALL
  $L000404 . . . . . . . . . . .	L Near	 0000061C _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnitTesting_Circle_Circumference .	P Near	 00000623 _TEXT	Length= 0000002F Public STDCALL
  $L000590 . . . . . . . . . . .	L Near	 0000064D _TEXT	
UnitTesting_Circle_ComputeArea .	P Near	 00000652 _TEXT	Length= 00000036 Public STDCALL
  $L000596 . . . . . . . . . . .	L Near	 00000683 _TEXT	
UnitTesting_Circle_Draw  . . . .	P Near	 00000688 _TEXT	Length= 0000001F Public STDCALL
  $L000594 . . . . . . . . . . .	L Near	 000006A2 _TEXT	
UnitTesting_Circle_Name  . . . .	P Near	 000006A7 _TEXT	Length= 00000014 Public STDCALL
  $L000592 . . . . . . . . . . .	L Near	 000006B6 _TEXT	
UnitTesting_Circle_Type  . . . .	P Near	 000006F5 _TEXT	Length= 00000015 Public STDCALL
  $L000591 . . . . . . . . . . .	L Near	 00000705 _TEXT	
UnitTesting_Circle_get_Radius  .	P Near	 000006BB _TEXT	Length= 00000017 Public STDCALL
  $L000587 . . . . . . . . . . .	L Near	 000006CD _TEXT	
UnitTesting_Circle_put_Radius  .	P Near	 000006D2 _TEXT	Length= 00000023 Public STDCALL
  $L000588 . . . . . . . . . . .	L Near	 000006EC _TEXT	
UnitTesting_Circle . . . . . . .	P Near	 0000070A _TEXT	Length= 00000025 Public STDCALL
UnitTesting_HelloWorld_Destructor 	P Near	 0000072F _TEXT	Length= 0000001F Public STDCALL
  $L000643 . . . . . . . . . . .	L Near	 00000749 _TEXT	
UnitTesting_HelloWorld_SayHello 	P Near	 0000074E _TEXT	Length= 0000002C Public STDCALL
  $L000637 . . . . . . . . . . .	L Near	 00000773 _TEXT	
UnitTesting_HelloWorld_ShowHello .	P Near	 0000077A _TEXT	Length= 00000026 Public STDCALL
  $L000640 . . . . . . . . . . .	L Near	 00000799 _TEXT	
UnitTesting_HelloWorld . . . . .	P Near	 000007A0 _TEXT	Length= 0000001F Public STDCALL
UnitTesting_Integers_Inline_Test .	P Near	 000007BF _TEXT	Length= 000000C6 Public STDCALL
  $L000546 . . . . . . . . . . .	L Near	 00000880 _TEXT	
UnitTesting_Rnd_NextDblEx  . . .	P Near	 000008DD _TEXT	Length= 00000105 Public STDCALL
  $L000972 . . . . . . . . . . .	L Near	 0000099E _TEXT	
  $L000973 . . . . . . . . . . .	L Near	 000009A0 _TEXT	
  $L000463 . . . . . . . . . . .	L Near	 000009DD _TEXT	
UnitTesting_Rnd_NextDbl  . . . .	P Near	 00000885 _TEXT	Length= 00000013 Public STDCALL
  $L000466 . . . . . . . . . . .	L Near	 00000893 _TEXT	
UnitTesting_Rnd_NextIntEx  . . .	P Near	 000009E2 _TEXT	Length= 000000E2 Public STDCALL
  $L000974 . . . . . . . . . . .	L Near	 00000A98 _TEXT	
  $L000975 . . . . . . . . . . .	L Near	 00000A9A _TEXT	
  $L000465 . . . . . . . . . . .	L Near	 00000ABF _TEXT	
UnitTesting_Rnd_NextInt  . . . .	P Near	 00000898 _TEXT	Length= 00000013 Public STDCALL
  $L000467 . . . . . . . . . . .	L Near	 000008A6 _TEXT	
UnitTesting_Rnd_setSeed  . . . .	P Near	 000008C4 _TEXT	Length= 00000019 Public STDCALL
  $L000461 . . . . . . . . . . .	L Near	 000008D6 _TEXT	
UnitTesting_Rnd  . . . . . . . .	P Near	 000008AB _TEXT	Length= 00000019 Public STDCALL
UnitTesting_Shape  . . . . . . .	P Near	 00000AC4 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Square_ComputeArea .	P Near	 00000AD9 _TEXT	Length= 00000032 Public STDCALL
  $L000609 . . . . . . . . . . .	L Near	 00000B06 _TEXT	
UnitTesting_Square_Draw  . . . .	P Near	 00000B0B _TEXT	Length= 0000001F Public STDCALL
  $L000613 . . . . . . . . . . .	L Near	 00000B25 _TEXT	
UnitTesting_Square_Name  . . . .	P Near	 00000B64 _TEXT	Length= 00000014 Public STDCALL
  $L000611 . . . . . . . . . . .	L Near	 00000B73 _TEXT	
UnitTesting_Square_Type  . . . .	P Near	 00000B78 _TEXT	Length= 00000015 Public STDCALL
  $L000610 . . . . . . . . . . .	L Near	 00000B88 _TEXT	
UnitTesting_Square_get_Height  .	P Near	 00000B2A _TEXT	Length= 00000017 Public STDCALL
  $L000606 . . . . . . . . . . .	L Near	 00000B3C _TEXT	
UnitTesting_Square_get_Width . .	P Near	 00000B8D _TEXT	Length= 00000017 Public STDCALL
  $L000602 . . . . . . . . . . .	L Near	 00000B9F _TEXT	
UnitTesting_Square_put_Height  .	P Near	 00000B41 _TEXT	Length= 00000023 Public STDCALL
  $L000607 . . . . . . . . . . .	L Near	 00000B5B _TEXT	
UnitTesting_Square_put_Width . .	P Near	 00000BA4 _TEXT	Length= 00000023 Public STDCALL
  $L000603 . . . . . . . . . . .	L Near	 00000BBE _TEXT	
UnitTesting_Square . . . . . . .	P Near	 00000BC7 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_SummationSeries_Ackermman 	P Near	 00000BEC _TEXT	Length= 000000AA Public STDCALL
  $L000978 . . . . . . . . . . .	L Near	 00000C21 _TEXT	
  $L000980 . . . . . . . . . . .	L Near	 00000C60 _TEXT	
  $L000981 . . . . . . . . . . .	L Near	 00000C8F _TEXT	
  $L000979 . . . . . . . . . . .	L Near	 00000C8F _TEXT	
  $L000542 . . . . . . . . . . .	L Near	 00000C8F _TEXT	
UnitTesting_SummationSeries_ComputeRenderGamma . P Near	  00000C96 _TEXT	Length= 000000DF Public STDCALL
  $L000983 . . . . . . . . . . .	L Near	 00000CC3 _TEXT	
  $L000982 . . . . . . . . . . .	L Near	 00000CC9 _TEXT	
  $L000984 . . . . . . . . . . .	L Near	 00000D50 _TEXT	
  $L000536 . . . . . . . . . . .	L Near	 00000D70 _TEXT	
UnitTesting_SummationSeries_GeometricSeriesClosedSum . P Near   00000D75 _TEXT	Length= 0000007D Public STDCALL
  $L000533 . . . . . . . . . . .	L Near	 00000DEB _TEXT	
UnitTesting_SummationSeries_GeometricSeriesSum . P Near	  00000DF2 _TEXT	Length= 00000095 Public STDCALL
  $L000986 . . . . . . . . . . .	L Near	 00000E2A _TEXT	
  $L000985 . . . . . . . . . . .	L Near	 00000E30 _TEXT	
  $L000989 . . . . . . . . . . .	L Near	 00000E50 _TEXT	
  $L000988 . . . . . . . . . . .	L Near	 00000E56 _TEXT	
  $L000990 . . . . . . . . . . .	L Near	 00000E72 _TEXT	
  $L000987 . . . . . . . . . . .	L Near	 00000E7B _TEXT	
  $L000512 . . . . . . . . . . .	L Near	 00000E80 _TEXT	
UnitTesting_SummationSeries_Horner_GeometricSeriesSum  P Near   00000E87 _TEXT	Length= 0000007D Public STDCALL
  $L000992 . . . . . . . . . . .	L Near	 00000EAB _TEXT	
  $L000991 . . . . . . . . . . .	L Near	 00000EB1 _TEXT	
  $L000993 . . . . . . . . . . .	L Near	 00000EF8 _TEXT	
  $L000528 . . . . . . . . . . .	L Near	 00000EFD _TEXT	
UnitTesting_SummationSeries_Horner_Horner  P Near   00000F04 _TEXT	Length= 0000007D Public STDCALL
  $L000995 . . . . . . . . . . .	L Near	 00000F41 _TEXT	
  $L000994 . . . . . . . . . . .	L Near	 00000F47 _TEXT	
  $L000996 . . . . . . . . . . .	L Near	 00000F75 _TEXT	
  $L000522 . . . . . . . . . . .	L Near	 00000F7A _TEXT	
UnitTesting_SummationSeries_SimpleSum 	P Near	 00000F81 _TEXT	Length= 00000053 Public STDCALL
  $L000998 . . . . . . . . . . .	L Near	 00000FA8 _TEXT	
  $L000997 . . . . . . . . . . .	L Near	 00000FAE _TEXT	
  $L000999 . . . . . . . . . . .	L Near	 00000FC8 _TEXT	
  $L000508 . . . . . . . . . . .	L Near	 00000FCD _TEXT	
UnitTesting_Test1_TestRunner_main 	P Near	 00002CCF _TEXT	Length= 00000FD5 Public STDCALL
  $L001047 . . . . . . . . . . .	L Near	 00002CF9 _TEXT	
  $L001046 . . . . . . . . . . .	L Near	 00002CFF _TEXT	
  $L001048 . . . . . . . . . . .	L Near	 00002D58 _TEXT	
  __HELLO_PART . . . . . . . . .	L Near	 00002D58 _TEXT	
  $L001050 . . . . . . . . . . .	L Near	 00002E35 _TEXT	
  $L001049 . . . . . . . . . . .	L Near	 00002E3B _TEXT	
  $L001051 . . . . . . . . . . .	L Near	 00002E6C _TEXT	
  $L001053 . . . . . . . . . . .	L Near	 00002E6E _TEXT	
  $L001052 . . . . . . . . . . .	L Near	 00002E6E _TEXT	
  $L001055 . . . . . . . . . . .	L Near	 00002E83 _TEXT	
  $L001054 . . . . . . . . . . .	L Near	 00002E85 _TEXT	
  __CALC_FACTORIAL . . . . . . .	L Near	 00002E96 _TEXT	
  $L001057 . . . . . . . . . . .	L Near	 00002EBD _TEXT	
  __END_FACTORIAL  . . . . . . .	L Near	 00002EBF _TEXT	
  $L001060 . . . . . . . . . . .	L Near	 0000311F _TEXT	
  $L001059 . . . . . . . . . . .	L Near	 0000311F _TEXT	
  $L001061 . . . . . . . . . . .	L Near	 00003182 _TEXT	
  _BlockRndDoubles . . . . . . .	L Near	 000032B9 _TEXT	
  $L001062 . . . . . . . . . . .	L Near	 0000381E _TEXT	
  $L001063 . . . . . . . . . . .	L Near	 00003820 _TEXT	
  $L001064 . . . . . . . . . . .	L Near	 0000387D _TEXT	
  $L001065 . . . . . . . . . . .	L Near	 0000387F _TEXT	
  $L001066 . . . . . . . . . . .	L Near	 000038E5 _TEXT	
  $L001067 . . . . . . . . . . .	L Near	 000038E7 _TEXT	
  $L001068 . . . . . . . . . . .	L Near	 000039E4 _TEXT	
  $L001069 . . . . . . . . . . .	L Near	 000039E6 _TEXT	
  $L001070 . . . . . . . . . . .	L Near	 00003B4A _TEXT	
  $L000864 . . . . . . . . . . .	L Near	 00003C7C _TEXT	
UnitTesting_TestArrays_DoTest  .	P Near	 0000100B _TEXT	Length= 00000556 Public STDCALL
  $L001002 . . . . . . . . . . .	L Near	 000014C2 _TEXT	
  $L001001 . . . . . . . . . . .	L Near	 000014CE _TEXT	
  $L001003 . . . . . . . . . . .	L Near	 00001523 _TEXT	
  $L000839 . . . . . . . . . . .	L Near	 0000155C _TEXT	
UnitTesting_TestArrays_get_Name 	P Near	 00000FD4 _TEXT	Length= 00000013 Public STDCALL
  $L000828 . . . . . . . . . . .	L Near	 00000FE2 _TEXT	
UnitTesting_TestArrays_printChars 	P Near	 00001561 _TEXT	Length= 0000011C Public STDCALL
  $L001009 . . . . . . . . . . .	L Near	 00001595 _TEXT	
  $L001008 . . . . . . . . . . .	L Near	 0000159B _TEXT	
  $L001010 . . . . . . . . . . .	L Near	 000015ED _TEXT	
  __except_handlerXXX001005  . .	L Near	 00001602 _TEXT	
  $L001011 . . . . . . . . . . .	L Near	 0000163E _TEXT	
  $L001012 . . . . . . . . . . .	L Near	 0000165C _TEXT	
  $L001004 . . . . . . . . . . .	L Near	 0000165E _TEXT	
  $L001007 . . . . . . . . . . .	L Near	 00001676 _TEXT	
  $L000831 . . . . . . . . . . .	L Near	 00001676 _TEXT	
UnitTesting_TestArrays_put_Name 	P Near	 00000FE7 _TEXT	Length= 00000018 Public STDCALL
  $L000829 . . . . . . . . . . .	L Near	 00000FF8 _TEXT	
UnitTesting_TestArrays . . . . .	P Near	 00000FFF _TEXT	Length= 0000000C Public STDCALL
UnitTesting_TestFloatingPoint_Area .	P Near	 0000167D _TEXT	Length= 00000080 Public STDCALL
  $L000820 . . . . . . . . . . .	L Near	 000016F6 _TEXT	
UnitTesting_TestFloatingPoint_Destructor . P Near   000016FD _TEXT	Length= 00000018 Public STDCALL
  $L000812 . . . . . . . . . . .	L Near	 00001710 _TEXT	
UnitTesting_TestFloatingPoint_Power 	P Near	 00001715 _TEXT	Length= 0000010D Public STDCALL
  $L001013 . . . . . . . . . . .	L Near	 00001736 _TEXT	
  $L001015 . . . . . . . . . . .	L Near	 000017AB _TEXT	
  $L001016 . . . . . . . . . . .	L Near	 0000181B _TEXT	
  $L000814 . . . . . . . . . . .	L Near	 0000181B _TEXT	
UnitTesting_TestFloatingPoint_speed 	P Near	 0000183A _TEXT	Length= 00000030 Public STDCALL
  $L000817 . . . . . . . . . . .	L Near	 00001863 _TEXT	
UnitTesting_TestFloatingPoint  .	P Near	 00001822 _TEXT	Length= 00000018 Public STDCALL
UnitTesting_TestIntegers_Calc1 .	P Near	 0000186A _TEXT	Length= 000000A6 Public STDCALL
  $L000750 . . . . . . . . . . .	L Near	 00001909 _TEXT	
UnitTesting_TestIntegers_Calc2 .	P Near	 00001910 _TEXT	Length= 0000007E Public STDCALL
  $L000758 . . . . . . . . . . .	L Near	 00001987 _TEXT	
UnitTesting_TestIntegers_Factorial .	P Near	 0000198E _TEXT	Length= 00000048 Public STDCALL
  $L001017 . . . . . . . . . . .	L Near	 000019AD _TEXT	
  $L001018 . . . . . . . . . . .	L Near	 000019CF _TEXT	
  $L000799 . . . . . . . . . . .	L Near	 000019CF _TEXT	
UnitTesting_TestIntegers_SwapDebug .	P Near	 00001A42 _TEXT	Length= 00000028 Public STDCALL
  $L000801 . . . . . . . . . . .	L Near	 00001A63 _TEXT	
UnitTesting_TestIntegers_Swap  .	P Near	 00001A03 _TEXT	Length= 0000003F Public STDCALL
  $L000754 . . . . . . . . . . .	L Near	 00001A3B _TEXT	
UnitTesting_TestIntegers_TestExpressions . P Near   00001D14 _TEXT	Length= 00000AA8 Public STDCALL
  $L001020 . . . . . . . . . . .	L Near	 00001D79 _TEXT	
  $L001022 . . . . . . . . . . .	L Near	 00001DBB _TEXT	
  $L001021 . . . . . . . . . . .	L Near	 00001DDD _TEXT	
  $L001024 . . . . . . . . . . .	L Near	 00001DEF _TEXT	
  $L001027 . . . . . . . . . . .	L Near	 00001E22 _TEXT	
  $L001025 . . . . . . . . . . .	L Near	 00001E22 _TEXT	
  $L001026 . . . . . . . . . . .	L Near	 00001E32 _TEXT	
  $L001029 . . . . . . . . . . .	L Near	 00002654 _TEXT	
  $L001030 . . . . . . . . . . .	L Near	 00002694 _TEXT	
  $L001031 . . . . . . . . . . .	L Near	 000026E5 _TEXT	
  $L001032 . . . . . . . . . . .	L Near	 00002726 _TEXT	
  $L001033 . . . . . . . . . . .	L Near	 00002766 _TEXT	
  $L001034 . . . . . . . . . . .	L Near	 000027B0 _TEXT	
  $L000692 . . . . . . . . . . .	L Near	 000027B7 _TEXT	
UnitTesting_TestIntegers_add . .	P Near	 00001A95 _TEXT	Length= 0000003B Public STDCALL
  $L000763 . . . . . . . . . . .	L Near	 00001AC9 _TEXT	
UnitTesting_TestIntegers_divide2 .	P Near	 00001B0F _TEXT	Length= 0000005C Public STDCALL
  $L000788 . . . . . . . . . . .	L Near	 00001B64 _TEXT	
UnitTesting_TestIntegers_divide 	P Near	 00001AD0 _TEXT	Length= 0000003F Public STDCALL
  $L000778 . . . . . . . . . . .	L Near	 00001B08 _TEXT	
UnitTesting_TestIntegers_getArea2 	P Near	 00001B8F _TEXT	Length= 00000036 Public STDCALL
  $L000689 . . . . . . . . . . .	L Near	 00001BC0 _TEXT	
UnitTesting_TestIntegers_getArea .	P Near	 00001B6B _TEXT	Length= 00000024 Public STDCALL
  $L000688 . . . . . . . . . . .	L Near	 00001B8A _TEXT	
UnitTesting_TestIntegers_get_Height 	P Near	 000019D6 _TEXT	Length= 00000014 Public STDCALL
  $L000685 . . . . . . . . . . .	L Near	 000019E5 _TEXT	
UnitTesting_TestIntegers_get_Width .	P Near	 00001A6A _TEXT	Length= 00000013 Public STDCALL
  $L000681 . . . . . . . . . . .	L Near	 00001A78 _TEXT	
UnitTesting_TestIntegers_modulus .	P Near	 00001BC5 _TEXT	Length= 00000041 Public STDCALL
  $L000783 . . . . . . . . . . .	L Near	 00001BFF _TEXT	
UnitTesting_TestIntegers_multiple_assignments  P Near   00001C06 _TEXT	Length= 00000080 Public STDCALL
  $L000793 . . . . . . . . . . .	L Near	 00001C7F _TEXT	
UnitTesting_TestIntegers_multiply 	P Near	 00001C86 _TEXT	Length= 0000003D Public STDCALL
  $L000773 . . . . . . . . . . .	L Near	 00001CBC _TEXT	
UnitTesting_TestIntegers_put_Height 	P Near	 000019EA _TEXT	Length= 00000019 Public STDCALL
  $L000686 . . . . . . . . . . .	L Near	 000019FC _TEXT	
UnitTesting_TestIntegers_put_Width .	P Near	 00001A7D _TEXT	Length= 00000018 Public STDCALL
  $L000682 . . . . . . . . . . .	L Near	 00001A8E _TEXT	
UnitTesting_TestIntegers_subs  .	P Near	 00001CC3 _TEXT	Length= 0000003D Public STDCALL
  $L000768 . . . . . . . . . . .	L Near	 00001CF9 _TEXT	
UnitTesting_TestIntegers . . . .	P Near	 00001D00 _TEXT	Length= 00000014 Public STDCALL
UnitTesting_TestSwitch_RunTest .	P Near	 000027BC _TEXT	Length= 000000EE Public STDCALL
  $L001036 . . . . . . . . . . .	L Near	 00002808 _TEXT	
  $L001037 . . . . . . . . . . .	L Near	 00002820 _TEXT	
  $L001038 . . . . . . . . . . .	L Near	 00002835 _TEXT	
  $L001039 . . . . . . . . . . .	L Near	 0000284A _TEXT	
  $L001040 . . . . . . . . . . .	L Near	 0000285F _TEXT	
  $L001041 . . . . . . . . . . .	L Near	 00002872 _TEXT	
  $L001042 . . . . . . . . . . .	L Near	 00002887 _TEXT	
  $L001035 . . . . . . . . . . .	L Near	 000028A3 _TEXT	
  $L000562 . . . . . . . . . . .	L Near	 000028A3 _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Name  P Near   000028C1 _TEXT	Length= 00000014 Public STDCALL
  $L000505 . . . . . . . . . . .	L Near	 000028D0 _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Sample  P Near   000028D5 _TEXT	Length= 0000003E Public STDCALL
  $L000504 . . . . . . . . . . .	L Near	 0000290E _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_get_MU  P Near   000028AA _TEXT	Length= 00000017 Public STDCALL
  $L000501 . . . . . . . . . . .	L Near	 000028BC _TEXT	
UnitTesting_TestVirtuals_ExponentialRV . P Near	  00002913 _TEXT	Length= 00000034 Public STDCALL
UnitTesting_TestVirtuals_RandomVariable_Name . P Near   00002947 _TEXT	Length= 00000014 Public STDCALL
  $L000472 . . . . . . . . . . .	L Near	 00002956 _TEXT	
UnitTesting_TestVirtuals_RandomVariable  P Near	  0000295B _TEXT	Length= 00000015 Public STDCALL
UnitTesting_TestVirtuals_SimpleRV_Name . P Near	  00002970 _TEXT	Length= 00000014 Public STDCALL
  $L000477 . . . . . . . . . . .	L Near	 0000297F _TEXT	
UnitTesting_TestVirtuals_SimpleRV_Sample . P Near   00002984 _TEXT	Length= 00000013 Public STDCALL
  $L000476 . . . . . . . . . . .	L Near	 00002992 _TEXT	
UnitTesting_TestVirtuals_SimpleRV 	P Near	 00002997 _TEXT	Length= 0000001D Public STDCALL
UnitTesting_TestVirtuals_UniformRV_Name  P Near	  000029B4 _TEXT	Length= 00000014 Public STDCALL
  $L000495 . . . . . . . . . . .	L Near	 000029C3 _TEXT	
UnitTesting_TestVirtuals_UniformRV_Sample  P Near   000029C8 _TEXT	Length= 0000005E Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 00002A21 _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_U . P Near   00002A26 _TEXT	Length= 00000017 Public STDCALL
  $L000484 . . . . . . . . . . .	L Near	 00002A38 _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_V . P Near   00002AA7 _TEXT	Length= 00000017 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 00002AB9 _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_U . P Near   00002A3D _TEXT	Length= 00000023 Public STDCALL
  $L000485 . . . . . . . . . . .	L Near	 00002A57 _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_V . P Near   00002ABE _TEXT	Length= 00000023 Public STDCALL
  $L000489 . . . . . . . . . . .	L Near	 00002AD8 _TEXT	
UnitTesting_TestVirtuals_UniformRV .	P Near	 00002A60 _TEXT	Length= 00000047 Public STDCALL
UnitTesting_Triangle_ComputeArea .	P Near	 00002B1B _TEXT	Length= 0000004E Public STDCALL
  $L000632 . . . . . . . . . . .	L Near	 00002B64 _TEXT	
UnitTesting_Triangle_Destructor 	P Near	 00002B69 _TEXT	Length= 0000000E Public STDCALL
  $L000633 . . . . . . . . . . .	L Near	 00002B72 _TEXT	
UnitTesting_Triangle_Draw  . . .	P Near	 00002B77 _TEXT	Length= 0000001F Public STDCALL
  $L000630 . . . . . . . . . . .	L Near	 00002B91 _TEXT	
UnitTesting_Triangle_Name  . . .	P Near	 00002BD0 _TEXT	Length= 00000014 Public STDCALL
  $L000628 . . . . . . . . . . .	L Near	 00002BDF _TEXT	
UnitTesting_Triangle_Type  . . .	P Near	 00002BE4 _TEXT	Length= 00000015 Public STDCALL
  $L000627 . . . . . . . . . . .	L Near	 00002BF4 _TEXT	
UnitTesting_Triangle_get_Base  .	P Near	 00002AE1 _TEXT	Length= 00000017 Public STDCALL
  $L000620 . . . . . . . . . . .	L Near	 00002AF3 _TEXT	
UnitTesting_Triangle_get_High  .	P Near	 00002B96 _TEXT	Length= 00000017 Public STDCALL
  $L000624 . . . . . . . . . . .	L Near	 00002BA8 _TEXT	
UnitTesting_Triangle_put_Base  .	P Near	 00002AF8 _TEXT	Length= 00000023 Public STDCALL
  $L000621 . . . . . . . . . . .	L Near	 00002B12 _TEXT	
UnitTesting_Triangle_put_High  .	P Near	 00002BAD _TEXT	Length= 00000023 Public STDCALL
  $L000625 . . . . . . . . . . .	L Near	 00002BC7 _TEXT	
UnitTesting_Triangle . . . . . .	P Near	 00002BF9 _TEXT	Length= 00000025 Public STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00003CA4 _TEXT	Length= 00000096 Public STDCALL
__User_Globals_Init  . . . . . .	P Near	 00002CC4 _TEXT	Length= 0000000B Public STDCALL
__member_Init@UnitTesting_Circle .	P Near	 00002C1E _TEXT	Length= 00000019 Public STDCALL
__member_Init@UnitTesting_Square .	P Near	 00002C37 _TEXT	Length= 00000023 Public STDCALL
__member_Init@UnitTesting_TestIntegers . P Near	  00002C5A _TEXT	Length= 00000047 Public STDCALL
__member_Init@UnitTesting_Triangle .	P Near	 00002CA1 _TEXT	Length= 00000023 Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000473 . . . . . . . . . . . .	Byte	 000003AF _DATA	
$S000478 . . . . . . . . . . . .	Byte	 000003DC _DATA	
$S000496 . . . . . . . . . . . .	Byte	 00000406 _DATA	
$S000506 . . . . . . . . . . . .	Byte	 000003EE _DATA	
$S000541 . . . . . . . . . . . .	Byte	 000004E5 _DATA	
$S000551 . . . . . . . . . . . .	Byte	 000006E5 _DATA	
$S000552 . . . . . . . . . . . .	Byte	 000003D1 _DATA	
$S000554 . . . . . . . . . . . .	Byte	 0000066E _DATA	
$S000556 . . . . . . . . . . . .	Byte	 00000682 _DATA	
$S000564 . . . . . . . . . . . .	Byte	 000005D5 _DATA	
$S000565 . . . . . . . . . . . .	Byte	 00000439 _DATA	
$S000566 . . . . . . . . . . . .	Byte	 00000480 _DATA	
$S000567 . . . . . . . . . . . .	Byte	 0000046B _DATA	
$S000568 . . . . . . . . . . . .	Byte	 00000494 _DATA	
$S000570 . . . . . . . . . . . .	Byte	 00000459 _DATA	
$S000571 . . . . . . . . . . . .	Byte	 0000054B _DATA	
$S000593 . . . . . . . . . . . .	Byte	 00000432 _DATA	
$S000595 . . . . . . . . . . . .	Byte	 000004AD _DATA	
$S000612 . . . . . . . . . . . .	Byte	 00000620 _DATA	
$S000614 . . . . . . . . . . . .	Byte	 000004BF _DATA	
$S000629 . . . . . . . . . . . .	Byte	 00000724 _DATA	
$S000631 . . . . . . . . . . . .	Byte	 000004D1 _DATA	
$S000636 . . . . . . . . . . . .	Byte	 00000639 _DATA	
$S000639 . . . . . . . . . . . .	Byte	 000007BD _DATA	
$S000642 . . . . . . . . . . . .	Byte	 000004F0 _DATA	
$S000644 . . . . . . . . . . . .	Byte	 00000654 _DATA	
$S000727 . . . . . . . . . . . .	Byte	 000007A9 _DATA	
$S000728 . . . . . . . . . . . .	Byte	 0000079A _DATA	
$S000767 . . . . . . . . . . . .	Byte	 000000CC _DATA	
$S000772 . . . . . . . . . . . .	Byte	 000000E0 _DATA	
$S000777 . . . . . . . . . . . .	Byte	 000000B8 _DATA	
$S000782 . . . . . . . . . . . .	Byte	 0000035A _DATA	
$S000787 . . . . . . . . . . . .	Byte	 00000399 _DATA	
$S000792 . . . . . . . . . . . .	Byte	 000003B6 _DATA	
$S000804 . . . . . . . . . . . .	Byte	 00000627 _DATA	
$S000811 . . . . . . . . . . . .	Byte	 00000737 _DATA	
$S000813 . . . . . . . . . . . .	Byte	 00000764 _DATA	
$S000835 . . . . . . . . . . . .	Byte	 00000426 _DATA	
$S000836 . . . . . . . . . . . .	Byte	 0000072D _DATA	
$S000837 . . . . . . . . . . . .	Byte	 00000585 _DATA	
$S000838 . . . . . . . . . . . .	Byte	 000005A9 _DATA	
$S000845 . . . . . . . . . . . .	Byte	 0000050A _DATA	
$S000854 . . . . . . . . . . . .	Byte	 00000578 _DATA	
$S000857 . . . . . . . . . . . .	Byte	 00000502 _DATA	
$S000858 . . . . . . . . . . . .	Byte	 0000055D _DATA	
$S000859 . . . . . . . . . . . .	Byte	 00000567 _DATA	
$S000860 . . . . . . . . . . . .	Byte	 0000056F _DATA	
$S000868 . . . . . . . . . . . .	Byte	 0000041A _DATA	
$S000869 . . . . . . . . . . . .	Byte	 00000733 _DATA	
$S000873 . . . . . . . . . . . .	Byte	 0000051B _DATA	
$S000884 . . . . . . . . . . . .	Byte	 00000449 _DATA	
$S000890 . . . . . . . . . . . .	Byte	 00000696 _DATA	
$S000891 . . . . . . . . . . . .	Byte	 000006BB _DATA	
$S000892 . . . . . . . . . . . .	Byte	 00000386 _DATA	
$S000893 . . . . . . . . . . . .	Byte	 00000370 _DATA	
$S000908 . . . . . . . . . . . .	Byte	 00000602 _DATA	
$S000909 . . . . . . . . . . . .	Byte	 000000F4 _DATA	
$S000910 . . . . . . . . . . . .	Byte	 00000180 _DATA	
$S000911 . . . . . . . . . . . .	Byte	 0000020C _DATA	
$S000912 . . . . . . . . . . . .	Byte	 00000298 _DATA	
$S000913 . . . . . . . . . . . .	Byte	 00000324 _DATA	
$S000914 . . . . . . . . . . . .	Byte	 0000033F _DATA	
$S000915 . . . . . . . . . . . .	Byte	 000005E5 _DATA	
$S000918 . . . . . . . . . . . .	Byte	 0000010F _DATA	
$S000919 . . . . . . . . . . . .	Byte	 000000A9 _DATA	
$S000920 . . . . . . . . . . . .	Byte	 0000019B _DATA	
$S000921 . . . . . . . . . . . .	Byte	 00000227 _DATA	
$S000922 . . . . . . . . . . . .	Byte	 000002B3 _DATA	
$S000923 . . . . . . . . . . . .	Byte	 0000078F _DATA	
$S000925 . . . . . . . . . . . .	Byte	 0000015B _DATA	
$S000926 . . . . . . . . . . . .	Byte	 000001E7 _DATA	
$S000927 . . . . . . . . . . . .	Byte	 00000273 _DATA	
$S000928 . . . . . . . . . . . .	Byte	 000002FF _DATA	
$S000930 . . . . . . . . . . . .	Byte	 00000132 _DATA	
$S000931 . . . . . . . . . . . .	Byte	 000001BE _DATA	
$S000932 . . . . . . . . . . . .	Byte	 0000024A _DATA	
$S000933 . . . . . . . . . . . .	Byte	 000002D6 _DATA	
$S000958 . . . . . . . . . . . .	Byte	 000006F6 _DATA	
$S000970 . . . . . . . . . . . .	Byte	 00000533 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Circle  DWord	  00000000 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Shape . DWord	  00000010 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Square  DWord	  00000020 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV  DWord    00000030 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable . DWord    00000038 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV . DWord	  00000040 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV  DWord	  00000048 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Triangle  DWord    00000050 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UnitTesting_Rnd_a  . . . . . . .	DWord	 00000820 _DATA	
UnitTesting_Rnd_m  . . . . . . .	DWord	 00000824 _DATA	
UnitTesting_Rnd_q  . . . . . . .	DWord	 00000828 _DATA	
UnitTesting_Rnd_r  . . . . . . .	DWord	 0000082C _DATA	
UnitTesting_Rnd_seed . . . . . .	DWord	 0000081C _DATA	
UnitTesting_TestIntegers_bigValue 	QWord	 00000880 _DATA	
UnitTesting_TestSwitch_close . .	Number	 00000002h   
UnitTesting_TestSwitch_open  . .	Number	 00000001h   
UnitTesting_TestSwitch_read  . .	Number	 00000004h   
UnitTesting_TestSwitch_write . .	Number	 00000003h   
UnitTesting_hundred  . . . . . .	Number	 00000064h   
UnitTesting_max_64_neg . . . . .	QWord	 00000068 _DATA	
UnitTesting_max_64 . . . . . . .	QWord	 00000060 _DATA	
UnitTesting_max_length . . . . .	Number	 00000050h   
UnitTesting_minusten . . . . . .	Number	 FFFFFFF6h   
UnitTesting_misc1_array  . . . .	QWord	 00000830 _DATA	
UnitTesting_misc1_boy  . . . . .	Byte	 00000090 _DATA	
UnitTesting_misc1_ch1  . . . . .	Number	 00000061h   
UnitTesting_misc1_ch2  . . . . .	Number	 0000007Ah   
UnitTesting_misc1_dX . . . . . .	QWord	 00000099 _DATA	
UnitTesting_misc1_dY . . . . . .	QWord	 000000A1 _DATA	
UnitTesting_misc1_e  . . . . . .	DWord	 00000078 _DATA	
UnitTesting_misc1_hello  . . . .	Byte	 0000007C _DATA	
UnitTesting_misc1_hell . . . . .	Byte	 0000008A _DATA	
UnitTesting_misc1_pi . . . . . .	QWord	 00000070 _DATA	
UnitTesting_misc1_ten_plus . . .	Number	 0000000Ah   
UnitTesting_ten  . . . . . . . .	Number	 0000000Ah   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 00000818 _DATA	
___argv  . . . . . . . . . . . .	DWord	 00000814 _DATA	
__computer . . . . . . . . . . .	Byte	 00000804 _DATA	
__osver  . . . . . . . . . . . .	DWord	 000007F4 _DATA	
__winmajor . . . . . . . . . . .	DWord	 000007FC _DATA	
__winminor . . . . . . . . . . .	DWord	 000007F8 _DATA	
__winver . . . . . . . . . . . .	DWord	 00000800 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
