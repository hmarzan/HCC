Microsoft (R) Macro Assembler Version 8.00.50727.762	    03/03/09 12:30:56
&c:\hcc\hcc\TestSource\unittesting1.hp			     Page 1 - 1


				TITLE	 c:\hcc\hcc\TestSource\unittesting1.hpp
				SUBTITLE This file was automatically generated by the 32-bit H++ Compiler


					.486P
					.MODEL flat,stdcall
					.STACK 000100000h
					INCLUDE stdhpp\hcclib32.INC	; the H++ library.
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; when the "C" calling convension is used, then we must use :PROC;
			      C ; when the stdcall calling convension is used, we must use :PROTO;
			      C 
			      C EXTERN __purecall: PROTO;
			      C 
			      C ; H++  C O N S O L E   A P I s 
			      C 
			      C EXTERN Console_ClearScreen:PROTO;
			      C EXTERN Console_ReadString:PROTO;
			      C EXTERN Console_ReadChar:PROTO;
			      C EXTERN Console_WriteString:PROTO;
			      C EXTERN Console_WriteCrlf:PROTO;
			      C EXTERN Console_WriteChar:PROTO;
			      C EXTERN Console_SetCursorPos:PROTO;
			      C EXTERN Console_SetTextColor:PROTO;
			      C EXTERN Console_SetConsoleSize:PROTO;
			      C EXTERN Console_SetTitle:PROTO;
			      C EXTERN Console_GetTitle:PROTO;
			      C EXTERN Console_MoveWindow:PROTO;
			      C 
			      C EXTERN Console_ReadDouble:PROTO;
			      C EXTERN Console_ReadInteger:PROTO;
			      C EXTERN Console_WriteDouble:PROTO;
			      C EXTERN Console_WriteInteger:PROTO;
			      C EXTERN Console_WriteInteger64:PROTO;
			      C EXTERN Console_WriteBoolean:PROTO;
			      C 
			      C ; H++  F I L E   A P I s 
			      C 
			      C EXTERN File_Open:PROTO;
			      C EXTERN File_Close:PROTO;
			      C EXTERN File_Read:PROTO;
			      C EXTERN File_Write:PROTO;
			      C EXTERN File_Seek:PROTO;
			      C EXTERN File_FileSize:PROTO;
			      C 
			      C ; H++  S Y S T E M   A P I s 
			      C 
			      C EXTERN System_Exit:PROTO;
			      C EXTERN System_LastError:PROTO;
			      C EXTERN System_CommandLineArgs:PROTO;
			      C EXTERN System_Execute:PROTO;
			      C EXTERN System_GetTickCount:PROTO;
			      C EXTERN System_Sleep:PROTO;
			      C EXTERN System_Debug_OutputString:PROTO;
			      C EXTERN System_BreakPoint:PROTO;
			      C EXTERN System_IsDebuggerPresent:PROTO;
			      C 
			      C ; H++  M A T H   A P I s
			      C 
			      C EXTERN Math_Init:PROTO;
			      C EXTERN Math_Abs:PROTO;
			      C EXTERN Math_ChangeSign:PROTO;
			      C EXTERN Math_Sqrt:PROTO;
			      C EXTERN Math_Sqr:PROTO;
			      C 
			      C EXTERN Math_Sin:PROTO;
			      C EXTERN Math_Cos:PROTO;
			      C EXTERN Math_Tan:PROTO;
			      C EXTERN Math_ArcTan:PROTO;
			      C EXTERN Math_Round:PROTO;
			      C 
			      C EXTERN Math_Modulus:PROTO;
			      C EXTERN Math_IEEEModulus:PROTO;
			      C EXTERN Math_ModulusTruncateDivisor:PROTO;
			      C 
			      C EXTERN Math_Ln:PROTO;
			      C EXTERN Math_log2:PROTO;
			      C EXTERN Math_log10:PROTO;
			      C EXTERN Math_Exp:PROTO;
			      C 
			      C EXTERN Math_MantissaOf:PROTO;
			      C EXTERN Math_GetNumberFrom:PROTO;
			      C EXTERN Math_LogN_base:PROTO;
			      C 
			      C EXTERN Math_Max:PROTO;
			      C EXTERN Math_Min:PROTO;
			      C EXTERN Math_Sign:PROTO;
			      C EXTERN Math_Pow2:PROTO;
			      C EXTERN Math_Pow:PROTO;
			      C EXTERN Math_Gcd:PROTO;
			      C EXTERN Math_Odd:PROTO;
			      C EXTERN Math_Even:PROTO;
			      C EXTERN Math_Trunc:PROTO;
			      C 
			      C ; N O N - I N T R I N S I C   M A T H   F U N C T I O N S 
			      C 
			      C EXTERN Math_Cotan:PROTO;
			      C EXTERN Math_Sec:PROTO;
			      C EXTERN Math_Cosec:PROTO;
			      C EXTERN Math_Inverse_Arcsin:PROTO;
			      C EXTERN Math_Inverse_Arccos:PROTO;
			      C EXTERN Math_Inverse_Arcsec:PROTO;
			      C EXTERN Math_Inverse_Arccosec:PROTO;
			      C EXTERN Math_Inverse_Arccotan:PROTO;
			      C 
			      C ; M A T H   C O N S T A N T S  
			      C EXTERN Math_pi:PROTO;
			      C EXTERN Math_log_10_base2:PROTO;
			      C EXTERN Math_log_e_base2:PROTO;
			      C EXTERN Math_log_2_base10:PROTO;
			      C EXTERN Math_log_2_base_e:PROTO;
			      C 
			      C 
			      C ; I N T E G E R   S P E C I F I C S   ( U T I L I T I E S )
			      C EXTERN Integer_toStringEx:PROTO;
			      C EXTERN Integer_toString:PROTO;
			      C EXTERN Integer_fromString:PROTO;
			      C 
			      C 
			      C ; F L O A T I N G   P O I N T   S P E C I F I C  (U T I L I T I E S )
			      C 
			      C EXTERN FloatingPoint_Compare:PROTO;
			      C EXTERN FloatingPoint_CompareToInteger:PROTO;
			      C EXTERN FloatingPoint_ToInt:PROTO;
			      C EXTERN FloatingPoint_ToInt64:PROTO;
			      C EXTERN FloatingPoint_FromInt:PROTO;
			      C EXTERN FloatingPoint_FromInt64:PROTO;
			      C 
			      C EXTERN FloatingPoint_toString:PROTO;
			      C EXTERN FloatingPoint_toStringEx:PROTO;
			      C EXTERN FloatingPoint_fromString:PROTO;
			      C 
			      C ; H++  S T R I N G  H A N D L I N G   A P I s 
			      C 
			      C EXTERN StringHandling_StringLength2:PROTO;
			      C EXTERN StringHandling_StringLength:PROTO;
			      C EXTERN StringHandling_StringCopy:PROTO;
			      C EXTERN StringHandling_StringCompare:PROTO;
			      C EXTERN StringHandling_StringUCase:PROTO;
			      C EXTERN StringHandling_StringLCase:PROTO;
			      C EXTERN StringHandling_StringSet:PROTO;
			      C 
			      C ; H++  M E M O R Y   H A N D L I N G   A P I s
			      C 
			      C EXTERN System_Memory_Memset:PROTO;
			      C EXTERN System_Memory_GetProcessHeap:PROTO
			      C EXTERN System_Memory_Alloc:PROTO
			      C EXTERN System_Memory_Free:PROTO
			      C EXTERN System_Memory_Size:PROTO
			      C EXTERN System_Memory_New:PROTO
			      C EXTERN System_Memory_Destroy:PROTO
			      C EXTERN System_Memory_SizeFor:PROTO
			      C 
			      C 
			      C EXTERN System_GetCommandLineArgv:PROTO;
			      C 
			      C EXTERN System_ShowMessage:PROTO;
			      C 
			      C EXTERN ConsoleHandle:DWORD;
			      C ;
			      C .LIST
			      C 

				;Windows API prototypes
				GetVersion PROTO

				;This assembly file was generated by the 32-bit H++ Compiler

 00000000			.CODE ;code segment
 00000000			Math_DegreesToRadians PROC NEAR 
				;double Math::DegreesToRadians(double deg);
 00000000  55				push	EBP
 00000001  8B EC			mov	EBP,ESP
 00000003  51				push	ECX 
 00000004  53				push	EBX 
 00000005  56				push	ESI 
 00000006  57				push	EDI 
				;{

				;{381}:return (deg * Math::pi()) / 180
 00000007  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000000A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000000D  50				push	EAX
 0000000E  52				push	EDX 
 0000000F  E8 00000000 E		call	 Math_pi
 00000014  9B DB E2			fclex
 00000017  50				push	EAX
 00000018  52				push	EDX 
 00000019  DD 04 24			fld	qword ptr [ESP]
 0000001C  59				pop	ECX
 0000001D  59				pop	ECX 
 0000001E  DC 0C 24			fmul	qword ptr [ESP]
 00000021  DD 1C 24			fstp	qword ptr [ESP]
 00000024  B8 000000B4			mov	EAX,0000000B4h
 00000029  9B DB E2			fclex
 0000002C  50				push	EAX
 0000002D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000032  50				push	EAX
 00000033  52				push	EDX 
 00000034  DD 04 24			fld	qword ptr [ESP]
 00000037  59				pop	ECX
 00000038  59				pop	ECX 
 00000039  DC 3C 24			fdivr	qword ptr [ESP]
 0000003C  DD 1C 24			fstp	qword ptr [ESP]
 0000003F  5A				pop	EDX
 00000040  58				pop	EAX 
 00000041  EB 00			jmp	OFFSET $L000463
				;}
 00000043			$L000463:

 00000043  5F				pop	EDI
 00000044  5E				pop	ESI 
 00000045  5B				pop	EBX 
 00000046  C9				leave	
 00000047  C2 0008			retn	000000008h
 0000004A			Math_DegreesToRadians ENDP

 0000004A			Math_Hyperbolic_HCos PROC NEAR 
				;double Math::Hyperbolic::HCos(double X);
 0000004A  55				push	EBP
 0000004B  8B EC			mov	EBP,ESP
 0000004D  51				push	ECX 
 0000004E  53				push	EBX 
 0000004F  56				push	ESI 
 00000050  57				push	EDI 
				;{

				;{444}:return (Math::Exp(X) + Math::Exp(-X)) / 2
 00000051  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000054  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000057  50				push	EAX
 00000058  52				push	EDX 
 00000059  E8 00000000 E		call	 Math_Exp
 0000005E  50				push	EAX
 0000005F  52				push	EDX 
 00000060  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000063  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000066  50				push	EAX
 00000067  52				push	EDX 
 00000068  DD 04 24			fld	qword ptr [ESP]
 0000006B  D9 E0			fchs
 0000006D  DD 1C 24			fstp	qword ptr [ESP]
 00000070  E8 00000000 E		call	 Math_Exp
 00000075  50				push	EAX
 00000076  52				push	EDX 
 00000077  DD 04 24			fld	qword ptr [ESP]
 0000007A  59				pop	ECX
 0000007B  59				pop	ECX 
 0000007C  DC 04 24			fadd	qword ptr [ESP]
 0000007F  DD 1C 24			fstp	qword ptr [ESP]
 00000082  B8 00000002			mov	EAX,000000002h
 00000087  9B DB E2			fclex
 0000008A  50				push	EAX
 0000008B  E8 00000000 E		call	 FloatingPoint_FromInt
 00000090  50				push	EAX
 00000091  52				push	EDX 
 00000092  DD 04 24			fld	qword ptr [ESP]
 00000095  59				pop	ECX
 00000096  59				pop	ECX 
 00000097  DC 3C 24			fdivr	qword ptr [ESP]
 0000009A  DD 1C 24			fstp	qword ptr [ESP]
 0000009D  5A				pop	EDX
 0000009E  58				pop	EAX 
 0000009F  EB 00			jmp	OFFSET $L000480
				;}
 000000A1			$L000480:

 000000A1  5F				pop	EDI
 000000A2  5E				pop	ESI 
 000000A3  5B				pop	EBX 
 000000A4  C9				leave	
 000000A5  C2 0008			retn	000000008h
 000000A8			Math_Hyperbolic_HCos ENDP

 000000A8			Math_Hyperbolic_HCosec PROC NEAR 
				;double Math::Hyperbolic::HCosec(double X);
 000000A8  55				push	EBP
 000000A9  8B EC			mov	EBP,ESP
 000000AB  51				push	ECX 
 000000AC  53				push	EBX 
 000000AD  56				push	ESI 
 000000AE  57				push	EDI 
				;{

				;{456}:return 2 / (Math::Exp(X) - Math::Exp(-X))
 000000AF  B8 00000002			mov	EAX,000000002h
 000000B4  50				push	EAX
 000000B5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000B8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000BB  50				push	EAX
 000000BC  52				push	EDX 
 000000BD  E8 00000000 E		call	 Math_Exp
 000000C2  50				push	EAX
 000000C3  52				push	EDX 
 000000C4  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000000C7  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000000CA  50				push	EAX
 000000CB  52				push	EDX 
 000000CC  DD 04 24			fld	qword ptr [ESP]
 000000CF  D9 E0			fchs
 000000D1  DD 1C 24			fstp	qword ptr [ESP]
 000000D4  E8 00000000 E		call	 Math_Exp
 000000D9  50				push	EAX
 000000DA  52				push	EDX 
 000000DB  DD 04 24			fld	qword ptr [ESP]
 000000DE  59				pop	ECX
 000000DF  59				pop	ECX 
 000000E0  DD 04 24			fld	qword ptr [ESP]
 000000E3  D8 E1			fsub	st,st(1)
 000000E5  DD 1C 24			fstp	qword ptr [ESP]
 000000E8  9B DB E2			fclex
 000000EB  DD 04 24			fld	qword ptr [ESP]
 000000EE  59				pop	ECX
 000000EF  59				pop	ECX 
 000000F0  E8 00000000 E		call	 FloatingPoint_FromInt
 000000F5  50				push	EAX
 000000F6  52				push	EDX 
 000000F7  DC 3C 24			fdivr	qword ptr [ESP]
 000000FA  DD 1C 24			fstp	qword ptr [ESP]
 000000FD  5A				pop	EDX
 000000FE  58				pop	EAX 
 000000FF  EB 00			jmp	OFFSET $L000486
				;}
 00000101			$L000486:

 00000101  5F				pop	EDI
 00000102  5E				pop	ESI 
 00000103  5B				pop	EBX 
 00000104  C9				leave	
 00000105  C2 0008			retn	000000008h
 00000108			Math_Hyperbolic_HCosec ENDP

 00000108			Math_Hyperbolic_HCotan PROC NEAR 
				;double Math::Hyperbolic::HCotan(double X);
 00000108  55				push	EBP
 00000109  8B EC			mov	EBP,ESP
 0000010B  51				push	ECX 
 0000010C  53				push	EBX 
 0000010D  56				push	ESI 
 0000010E  57				push	EDI 
				;{

				;{460}:return (Math::Exp(X) + Math::Exp(-X)) / (Math::Exp(X) - Math::Exp(-X))
 0000010F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000112  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000115  50				push	EAX
 00000116  52				push	EDX 
 00000117  E8 00000000 E		call	 Math_Exp
 0000011C  50				push	EAX
 0000011D  52				push	EDX 
 0000011E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000121  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000124  50				push	EAX
 00000125  52				push	EDX 
 00000126  DD 04 24			fld	qword ptr [ESP]
 00000129  D9 E0			fchs
 0000012B  DD 1C 24			fstp	qword ptr [ESP]
 0000012E  E8 00000000 E		call	 Math_Exp
 00000133  50				push	EAX
 00000134  52				push	EDX 
 00000135  DD 04 24			fld	qword ptr [ESP]
 00000138  59				pop	ECX
 00000139  59				pop	ECX 
 0000013A  DC 04 24			fadd	qword ptr [ESP]
 0000013D  DD 1C 24			fstp	qword ptr [ESP]
 00000140  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000143  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000146  50				push	EAX
 00000147  52				push	EDX 
 00000148  E8 00000000 E		call	 Math_Exp
 0000014D  50				push	EAX
 0000014E  52				push	EDX 
 0000014F  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000152  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000155  50				push	EAX
 00000156  52				push	EDX 
 00000157  DD 04 24			fld	qword ptr [ESP]
 0000015A  D9 E0			fchs
 0000015C  DD 1C 24			fstp	qword ptr [ESP]
 0000015F  E8 00000000 E		call	 Math_Exp
 00000164  50				push	EAX
 00000165  52				push	EDX 
 00000166  DD 04 24			fld	qword ptr [ESP]
 00000169  59				pop	ECX
 0000016A  59				pop	ECX 
 0000016B  DD 04 24			fld	qword ptr [ESP]
 0000016E  D8 E1			fsub	st,st(1)
 00000170  DD 1C 24			fstp	qword ptr [ESP]
 00000173  9B DB E2			fclex
 00000176  DD 04 24			fld	qword ptr [ESP]
 00000179  59				pop	ECX
 0000017A  59				pop	ECX 
 0000017B  DC 3C 24			fdivr	qword ptr [ESP]
 0000017E  DD 1C 24			fstp	qword ptr [ESP]
 00000181  5A				pop	EDX
 00000182  58				pop	EAX 
 00000183  EB 00			jmp	OFFSET $L000488
				;}
 00000185			$L000488:

 00000185  5F				pop	EDI
 00000186  5E				pop	ESI 
 00000187  5B				pop	EBX 
 00000188  C9				leave	
 00000189  C2 0008			retn	000000008h
 0000018C			Math_Hyperbolic_HCotan ENDP

 0000018C			Math_Hyperbolic_HSec PROC NEAR 
				;double Math::Hyperbolic::HSec(double X);
 0000018C  55				push	EBP
 0000018D  8B EC			mov	EBP,ESP
 0000018F  51				push	ECX 
 00000190  53				push	EBX 
 00000191  56				push	ESI 
 00000192  57				push	EDI 
				;{

				;{452}:return 2 / (Math::Exp(X) + Math::Exp(-X))
 00000193  B8 00000002			mov	EAX,000000002h
 00000198  50				push	EAX
 00000199  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000019C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000019F  50				push	EAX
 000001A0  52				push	EDX 
 000001A1  E8 00000000 E		call	 Math_Exp
 000001A6  50				push	EAX
 000001A7  52				push	EDX 
 000001A8  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001AB  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001AE  50				push	EAX
 000001AF  52				push	EDX 
 000001B0  DD 04 24			fld	qword ptr [ESP]
 000001B3  D9 E0			fchs
 000001B5  DD 1C 24			fstp	qword ptr [ESP]
 000001B8  E8 00000000 E		call	 Math_Exp
 000001BD  50				push	EAX
 000001BE  52				push	EDX 
 000001BF  DD 04 24			fld	qword ptr [ESP]
 000001C2  59				pop	ECX
 000001C3  59				pop	ECX 
 000001C4  DC 04 24			fadd	qword ptr [ESP]
 000001C7  DD 1C 24			fstp	qword ptr [ESP]
 000001CA  9B DB E2			fclex
 000001CD  DD 04 24			fld	qword ptr [ESP]
 000001D0  59				pop	ECX
 000001D1  59				pop	ECX 
 000001D2  E8 00000000 E		call	 FloatingPoint_FromInt
 000001D7  50				push	EAX
 000001D8  52				push	EDX 
 000001D9  DC 3C 24			fdivr	qword ptr [ESP]
 000001DC  DD 1C 24			fstp	qword ptr [ESP]
 000001DF  5A				pop	EDX
 000001E0  58				pop	EAX 
 000001E1  EB 00			jmp	OFFSET $L000484
				;}
 000001E3			$L000484:

 000001E3  5F				pop	EDI
 000001E4  5E				pop	ESI 
 000001E5  5B				pop	EBX 
 000001E6  C9				leave	
 000001E7  C2 0008			retn	000000008h
 000001EA			Math_Hyperbolic_HSec ENDP

 000001EA			Math_Hyperbolic_HSin PROC NEAR 
				;double Math::Hyperbolic::HSin(double X);
 000001EA  55				push	EBP
 000001EB  8B EC			mov	EBP,ESP
 000001ED  51				push	ECX 
 000001EE  53				push	EBX 
 000001EF  56				push	ESI 
 000001F0  57				push	EDI 
				;{

				;{440}:return (Math::Exp(X) - Math::Exp(-X)) / 2
 000001F1  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000001F4  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000001F7  50				push	EAX
 000001F8  52				push	EDX 
 000001F9  E8 00000000 E		call	 Math_Exp
 000001FE  50				push	EAX
 000001FF  52				push	EDX 
 00000200  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000203  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000206  50				push	EAX
 00000207  52				push	EDX 
 00000208  DD 04 24			fld	qword ptr [ESP]
 0000020B  D9 E0			fchs
 0000020D  DD 1C 24			fstp	qword ptr [ESP]
 00000210  E8 00000000 E		call	 Math_Exp
 00000215  50				push	EAX
 00000216  52				push	EDX 
 00000217  DD 04 24			fld	qword ptr [ESP]
 0000021A  59				pop	ECX
 0000021B  59				pop	ECX 
 0000021C  DD 04 24			fld	qword ptr [ESP]
 0000021F  D8 E1			fsub	st,st(1)
 00000221  DD 1C 24			fstp	qword ptr [ESP]
 00000224  B8 00000002			mov	EAX,000000002h
 00000229  9B DB E2			fclex
 0000022C  50				push	EAX
 0000022D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000232  50				push	EAX
 00000233  52				push	EDX 
 00000234  DD 04 24			fld	qword ptr [ESP]
 00000237  59				pop	ECX
 00000238  59				pop	ECX 
 00000239  DC 3C 24			fdivr	qword ptr [ESP]
 0000023C  DD 1C 24			fstp	qword ptr [ESP]
 0000023F  5A				pop	EDX
 00000240  58				pop	EAX 
 00000241  EB 00			jmp	OFFSET $L000477
				;}
 00000243			$L000477:

 00000243  5F				pop	EDI
 00000244  5E				pop	ESI 
 00000245  5B				pop	EBX 
 00000246  C9				leave	
 00000247  C2 0008			retn	000000008h
 0000024A			Math_Hyperbolic_HSin ENDP

 0000024A			Math_Hyperbolic_HTan PROC NEAR 
				;double Math::Hyperbolic::HTan(double X);
 0000024A  55				push	EBP
 0000024B  8B EC			mov	EBP,ESP
 0000024D  51				push	ECX 
 0000024E  53				push	EBX 
 0000024F  56				push	ESI 
 00000250  57				push	EDI 
				;{

				;{448}:return (Math::Exp(X) - Math::Exp(-X)) / (Math::Exp(X) + Math::Exp(-X))
 00000251  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000254  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000257  50				push	EAX
 00000258  52				push	EDX 
 00000259  E8 00000000 E		call	 Math_Exp
 0000025E  50				push	EAX
 0000025F  52				push	EDX 
 00000260  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000263  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000266  50				push	EAX
 00000267  52				push	EDX 
 00000268  DD 04 24			fld	qword ptr [ESP]
 0000026B  D9 E0			fchs
 0000026D  DD 1C 24			fstp	qword ptr [ESP]
 00000270  E8 00000000 E		call	 Math_Exp
 00000275  50				push	EAX
 00000276  52				push	EDX 
 00000277  DD 04 24			fld	qword ptr [ESP]
 0000027A  59				pop	ECX
 0000027B  59				pop	ECX 
 0000027C  DD 04 24			fld	qword ptr [ESP]
 0000027F  D8 E1			fsub	st,st(1)
 00000281  DD 1C 24			fstp	qword ptr [ESP]
 00000284  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000287  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000028A  50				push	EAX
 0000028B  52				push	EDX 
 0000028C  E8 00000000 E		call	 Math_Exp
 00000291  50				push	EAX
 00000292  52				push	EDX 
 00000293  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000296  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000299  50				push	EAX
 0000029A  52				push	EDX 
 0000029B  DD 04 24			fld	qword ptr [ESP]
 0000029E  D9 E0			fchs
 000002A0  DD 1C 24			fstp	qword ptr [ESP]
 000002A3  E8 00000000 E		call	 Math_Exp
 000002A8  50				push	EAX
 000002A9  52				push	EDX 
 000002AA  DD 04 24			fld	qword ptr [ESP]
 000002AD  59				pop	ECX
 000002AE  59				pop	ECX 
 000002AF  DC 04 24			fadd	qword ptr [ESP]
 000002B2  DD 1C 24			fstp	qword ptr [ESP]
 000002B5  9B DB E2			fclex
 000002B8  DD 04 24			fld	qword ptr [ESP]
 000002BB  59				pop	ECX
 000002BC  59				pop	ECX 
 000002BD  DC 3C 24			fdivr	qword ptr [ESP]
 000002C0  DD 1C 24			fstp	qword ptr [ESP]
 000002C3  5A				pop	EDX
 000002C4  58				pop	EAX 
 000002C5  EB 00			jmp	OFFSET $L000482
				;}
 000002C7			$L000482:

 000002C7  5F				pop	EDI
 000002C8  5E				pop	ESI 
 000002C9  5B				pop	EBX 
 000002CA  C9				leave	
 000002CB  C2 0008			retn	000000008h
 000002CE			Math_Hyperbolic_HTan ENDP

 000002CE			Math_Hyperbolic_Inverse_HArccos PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccos(double X);
 000002CE  55				push	EBP
 000002CF  8B EC			mov	EBP,ESP
 000002D1  51				push	ECX 
 000002D2  53				push	EBX 
 000002D3  56				push	ESI 
 000002D4  57				push	EDI 
				;{

				;{471}:return Math::log10(X + Math::Sqrt(X * X - 1))
 000002D5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002D8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002DB  50				push	EAX
 000002DC  52				push	EDX 
 000002DD  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002E3  50				push	EAX
 000002E4  52				push	EDX 
 000002E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000002E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000002EB  9B DB E2			fclex
 000002EE  50				push	EAX
 000002EF  52				push	EDX 
 000002F0  DD 04 24			fld	qword ptr [ESP]
 000002F3  59				pop	ECX
 000002F4  59				pop	ECX 
 000002F5  DC 0C 24			fmul	qword ptr [ESP]
 000002F8  DD 1C 24			fstp	qword ptr [ESP]
 000002FB  B8 00000001			mov	EAX,000000001h
 00000300  50				push	EAX
 00000301  E8 00000000 E		call	 FloatingPoint_FromInt
 00000306  50				push	EAX
 00000307  52				push	EDX 
 00000308  DD 04 24			fld	qword ptr [ESP]
 0000030B  59				pop	ECX
 0000030C  59				pop	ECX 
 0000030D  DD 04 24			fld	qword ptr [ESP]
 00000310  D8 E1			fsub	st,st(1)
 00000312  DD 1C 24			fstp	qword ptr [ESP]
 00000315  E8 00000000 E		call	 Math_Sqrt
 0000031A  50				push	EAX
 0000031B  52				push	EDX 
 0000031C  DD 04 24			fld	qword ptr [ESP]
 0000031F  59				pop	ECX
 00000320  59				pop	ECX 
 00000321  DC 04 24			fadd	qword ptr [ESP]
 00000324  DD 1C 24			fstp	qword ptr [ESP]
 00000327  E8 00000000 E		call	 Math_log10
 0000032C  EB 00			jmp	OFFSET $L000494
				;}
 0000032E			$L000494:

 0000032E  5F				pop	EDI
 0000032F  5E				pop	ESI 
 00000330  5B				pop	EBX 
 00000331  C9				leave	
 00000332  C2 0008			retn	000000008h
 00000335			Math_Hyperbolic_Inverse_HArccos ENDP

 00000335			Math_Hyperbolic_Inverse_HArccosec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccosec(double X);
 00000335  55				push	EBP
 00000336  8B EC			mov	EBP,ESP
 00000338  51				push	ECX 
 00000339  53				push	EBX 
 0000033A  56				push	ESI 
 0000033B  57				push	EDI 
				;{

				;{483}:return Math::log10((Math::Sign(X) * Math::Sqrt(X * X + 1) + 1) / X)
 0000033C  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000033F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000342  50				push	EAX
 00000343  52				push	EDX 
 00000344  E8 00000000 E		call	 Math_Sign
 00000349  50				push	EAX
 0000034A  52				push	EDX 
 0000034B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000034E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000351  50				push	EAX
 00000352  52				push	EDX 
 00000353  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000356  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000359  9B DB E2			fclex
 0000035C  50				push	EAX
 0000035D  52				push	EDX 
 0000035E  DD 04 24			fld	qword ptr [ESP]
 00000361  59				pop	ECX
 00000362  59				pop	ECX 
 00000363  DC 0C 24			fmul	qword ptr [ESP]
 00000366  DD 1C 24			fstp	qword ptr [ESP]
 00000369  B8 00000001			mov	EAX,000000001h
 0000036E  50				push	EAX
 0000036F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000374  50				push	EAX
 00000375  52				push	EDX 
 00000376  DD 04 24			fld	qword ptr [ESP]
 00000379  59				pop	ECX
 0000037A  59				pop	ECX 
 0000037B  DC 04 24			fadd	qword ptr [ESP]
 0000037E  DD 1C 24			fstp	qword ptr [ESP]
 00000381  E8 00000000 E		call	 Math_Sqrt
 00000386  9B DB E2			fclex
 00000389  50				push	EAX
 0000038A  52				push	EDX 
 0000038B  DD 04 24			fld	qword ptr [ESP]
 0000038E  59				pop	ECX
 0000038F  59				pop	ECX 
 00000390  DC 0C 24			fmul	qword ptr [ESP]
 00000393  DD 1C 24			fstp	qword ptr [ESP]
 00000396  B8 00000001			mov	EAX,000000001h
 0000039B  50				push	EAX
 0000039C  E8 00000000 E		call	 FloatingPoint_FromInt
 000003A1  50				push	EAX
 000003A2  52				push	EDX 
 000003A3  DD 04 24			fld	qword ptr [ESP]
 000003A6  59				pop	ECX
 000003A7  59				pop	ECX 
 000003A8  DC 04 24			fadd	qword ptr [ESP]
 000003AB  DD 1C 24			fstp	qword ptr [ESP]
 000003AE  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003B1  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003B4  9B DB E2			fclex
 000003B7  50				push	EAX
 000003B8  52				push	EDX 
 000003B9  DD 04 24			fld	qword ptr [ESP]
 000003BC  59				pop	ECX
 000003BD  59				pop	ECX 
 000003BE  DC 3C 24			fdivr	qword ptr [ESP]
 000003C1  DD 1C 24			fstp	qword ptr [ESP]
 000003C4  E8 00000000 E		call	 Math_log10
 000003C9  EB 00			jmp	OFFSET $L000500
				;}
 000003CB			$L000500:

 000003CB  5F				pop	EDI
 000003CC  5E				pop	ESI 
 000003CD  5B				pop	EBX 
 000003CE  C9				leave	
 000003CF  C2 0008			retn	000000008h
 000003D2			Math_Hyperbolic_Inverse_HArccosec ENDP

 000003D2			Math_Hyperbolic_Inverse_HArccotan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArccotan(double X);
 000003D2  55				push	EBP
 000003D3  8B EC			mov	EBP,ESP
 000003D5  51				push	ECX 
 000003D6  53				push	EBX 
 000003D7  56				push	ESI 
 000003D8  57				push	EDI 
				;{

				;{487}:return Math::log10((X + 1) / (X - 1)) / 2
 000003D9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003DC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003DF  50				push	EAX
 000003E0  52				push	EDX 
 000003E1  B8 00000001			mov	EAX,000000001h
 000003E6  50				push	EAX
 000003E7  E8 00000000 E		call	 FloatingPoint_FromInt
 000003EC  50				push	EAX
 000003ED  52				push	EDX 
 000003EE  DD 04 24			fld	qword ptr [ESP]
 000003F1  59				pop	ECX
 000003F2  59				pop	ECX 
 000003F3  DC 04 24			fadd	qword ptr [ESP]
 000003F6  DD 1C 24			fstp	qword ptr [ESP]
 000003F9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000003FC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000003FF  50				push	EAX
 00000400  52				push	EDX 
 00000401  B8 00000001			mov	EAX,000000001h
 00000406  50				push	EAX
 00000407  E8 00000000 E		call	 FloatingPoint_FromInt
 0000040C  50				push	EAX
 0000040D  52				push	EDX 
 0000040E  DD 04 24			fld	qword ptr [ESP]
 00000411  59				pop	ECX
 00000412  59				pop	ECX 
 00000413  DD 04 24			fld	qword ptr [ESP]
 00000416  D8 E1			fsub	st,st(1)
 00000418  DD 1C 24			fstp	qword ptr [ESP]
 0000041B  9B DB E2			fclex
 0000041E  DD 04 24			fld	qword ptr [ESP]
 00000421  59				pop	ECX
 00000422  59				pop	ECX 
 00000423  DC 3C 24			fdivr	qword ptr [ESP]
 00000426  DD 1C 24			fstp	qword ptr [ESP]
 00000429  E8 00000000 E		call	 Math_log10
 0000042E  50				push	EAX
 0000042F  52				push	EDX 
 00000430  B8 00000002			mov	EAX,000000002h
 00000435  9B DB E2			fclex
 00000438  50				push	EAX
 00000439  E8 00000000 E		call	 FloatingPoint_FromInt
 0000043E  50				push	EAX
 0000043F  52				push	EDX 
 00000440  DD 04 24			fld	qword ptr [ESP]
 00000443  59				pop	ECX
 00000444  59				pop	ECX 
 00000445  DC 3C 24			fdivr	qword ptr [ESP]
 00000448  DD 1C 24			fstp	qword ptr [ESP]
 0000044B  5A				pop	EDX
 0000044C  58				pop	EAX 
 0000044D  EB 00			jmp	OFFSET $L000502
				;}
 0000044F			$L000502:

 0000044F  5F				pop	EDI
 00000450  5E				pop	ESI 
 00000451  5B				pop	EBX 
 00000452  C9				leave	
 00000453  C2 0008			retn	000000008h
 00000456			Math_Hyperbolic_Inverse_HArccotan ENDP

 00000456			Math_Hyperbolic_Inverse_HArcsec PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsec(double X);
 00000456  55				push	EBP
 00000457  8B EC			mov	EBP,ESP
 00000459  51				push	ECX 
 0000045A  53				push	EBX 
 0000045B  56				push	ESI 
 0000045C  57				push	EDI 
				;{

				;{479}:return Math::log10((Math::Sqrt(-X * X + 1) + 1) / X)
 0000045D  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000460  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000463  50				push	EAX
 00000464  52				push	EDX 
 00000465  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000468  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000046B  9B DB E2			fclex
 0000046E  50				push	EAX
 0000046F  52				push	EDX 
 00000470  DD 04 24			fld	qword ptr [ESP]
 00000473  59				pop	ECX
 00000474  59				pop	ECX 
 00000475  DC 0C 24			fmul	qword ptr [ESP]
 00000478  DD 1C 24			fstp	qword ptr [ESP]
 0000047B  DD 04 24			fld	qword ptr [ESP]
 0000047E  D9 E0			fchs
 00000480  DD 1C 24			fstp	qword ptr [ESP]
 00000483  B8 00000001			mov	EAX,000000001h
 00000488  50				push	EAX
 00000489  E8 00000000 E		call	 FloatingPoint_FromInt
 0000048E  50				push	EAX
 0000048F  52				push	EDX 
 00000490  DD 04 24			fld	qword ptr [ESP]
 00000493  59				pop	ECX
 00000494  59				pop	ECX 
 00000495  DC 04 24			fadd	qword ptr [ESP]
 00000498  DD 1C 24			fstp	qword ptr [ESP]
 0000049B  E8 00000000 E		call	 Math_Sqrt
 000004A0  50				push	EAX
 000004A1  52				push	EDX 
 000004A2  B8 00000001			mov	EAX,000000001h
 000004A7  50				push	EAX
 000004A8  E8 00000000 E		call	 FloatingPoint_FromInt
 000004AD  50				push	EAX
 000004AE  52				push	EDX 
 000004AF  DD 04 24			fld	qword ptr [ESP]
 000004B2  59				pop	ECX
 000004B3  59				pop	ECX 
 000004B4  DC 04 24			fadd	qword ptr [ESP]
 000004B7  DD 1C 24			fstp	qword ptr [ESP]
 000004BA  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004BD  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004C0  9B DB E2			fclex
 000004C3  50				push	EAX
 000004C4  52				push	EDX 
 000004C5  DD 04 24			fld	qword ptr [ESP]
 000004C8  59				pop	ECX
 000004C9  59				pop	ECX 
 000004CA  DC 3C 24			fdivr	qword ptr [ESP]
 000004CD  DD 1C 24			fstp	qword ptr [ESP]
 000004D0  E8 00000000 E		call	 Math_log10
 000004D5  EB 00			jmp	OFFSET $L000498
				;}
 000004D7			$L000498:

 000004D7  5F				pop	EDI
 000004D8  5E				pop	ESI 
 000004D9  5B				pop	EBX 
 000004DA  C9				leave	
 000004DB  C2 0008			retn	000000008h
 000004DE			Math_Hyperbolic_Inverse_HArcsec ENDP

 000004DE			Math_Hyperbolic_Inverse_HArcsin PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArcsin(double X);
 000004DE  55				push	EBP
 000004DF  8B EC			mov	EBP,ESP
 000004E1  51				push	ECX 
 000004E2  53				push	EBX 
 000004E3  56				push	ESI 
 000004E4  57				push	EDI 
				;{

				;{467}:return Math::log10(X + Math::Sqrt(X * X + 1))
 000004E5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004E8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004EB  50				push	EAX
 000004EC  52				push	EDX 
 000004ED  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004F3  50				push	EAX
 000004F4  52				push	EDX 
 000004F5  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000004F8  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000004FB  9B DB E2			fclex
 000004FE  50				push	EAX
 000004FF  52				push	EDX 
 00000500  DD 04 24			fld	qword ptr [ESP]
 00000503  59				pop	ECX
 00000504  59				pop	ECX 
 00000505  DC 0C 24			fmul	qword ptr [ESP]
 00000508  DD 1C 24			fstp	qword ptr [ESP]
 0000050B  B8 00000001			mov	EAX,000000001h
 00000510  50				push	EAX
 00000511  E8 00000000 E		call	 FloatingPoint_FromInt
 00000516  50				push	EAX
 00000517  52				push	EDX 
 00000518  DD 04 24			fld	qword ptr [ESP]
 0000051B  59				pop	ECX
 0000051C  59				pop	ECX 
 0000051D  DC 04 24			fadd	qword ptr [ESP]
 00000520  DD 1C 24			fstp	qword ptr [ESP]
 00000523  E8 00000000 E		call	 Math_Sqrt
 00000528  50				push	EAX
 00000529  52				push	EDX 
 0000052A  DD 04 24			fld	qword ptr [ESP]
 0000052D  59				pop	ECX
 0000052E  59				pop	ECX 
 0000052F  DC 04 24			fadd	qword ptr [ESP]
 00000532  DD 1C 24			fstp	qword ptr [ESP]
 00000535  E8 00000000 E		call	 Math_log10
 0000053A  EB 00			jmp	OFFSET $L000491
				;}
 0000053C			$L000491:

 0000053C  5F				pop	EDI
 0000053D  5E				pop	ESI 
 0000053E  5B				pop	EBX 
 0000053F  C9				leave	
 00000540  C2 0008			retn	000000008h
 00000543			Math_Hyperbolic_Inverse_HArcsin ENDP

 00000543			Math_Hyperbolic_Inverse_HArctan PROC NEAR 
				;double Math::Hyperbolic::Inverse::HArctan(double X);
 00000543  55				push	EBP
 00000544  8B EC			mov	EBP,ESP
 00000546  51				push	ECX 
 00000547  53				push	EBX 
 00000548  56				push	ESI 
 00000549  57				push	EDI 
				;{

				;{475}:return Math::log10((1 + X) / (1 - X)) / 2
 0000054A  B8 00000001			mov	EAX,000000001h
 0000054F  50				push	EAX
 00000550  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000553  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000556  50				push	EAX
 00000557  52				push	EDX 
 00000558  DD 04 24			fld	qword ptr [ESP]
 0000055B  59				pop	ECX
 0000055C  59				pop	ECX 
 0000055D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000562  50				push	EAX
 00000563  52				push	EDX 
 00000564  DC 04 24			fadd	qword ptr [ESP]
 00000567  DD 1C 24			fstp	qword ptr [ESP]
 0000056A  B8 00000001			mov	EAX,000000001h
 0000056F  50				push	EAX
 00000570  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000573  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000576  50				push	EAX
 00000577  52				push	EDX 
 00000578  DD 04 24			fld	qword ptr [ESP]
 0000057B  59				pop	ECX
 0000057C  59				pop	ECX 
 0000057D  E8 00000000 E		call	 FloatingPoint_FromInt
 00000582  50				push	EAX
 00000583  52				push	EDX 
 00000584  DD 04 24			fld	qword ptr [ESP]
 00000587  D8 E1			fsub	st,st(1)
 00000589  DD 1C 24			fstp	qword ptr [ESP]
 0000058C  9B DB E2			fclex
 0000058F  DD 04 24			fld	qword ptr [ESP]
 00000592  59				pop	ECX
 00000593  59				pop	ECX 
 00000594  DC 3C 24			fdivr	qword ptr [ESP]
 00000597  DD 1C 24			fstp	qword ptr [ESP]
 0000059A  E8 00000000 E		call	 Math_log10
 0000059F  50				push	EAX
 000005A0  52				push	EDX 
 000005A1  B8 00000002			mov	EAX,000000002h
 000005A6  9B DB E2			fclex
 000005A9  50				push	EAX
 000005AA  E8 00000000 E		call	 FloatingPoint_FromInt
 000005AF  50				push	EAX
 000005B0  52				push	EDX 
 000005B1  DD 04 24			fld	qword ptr [ESP]
 000005B4  59				pop	ECX
 000005B5  59				pop	ECX 
 000005B6  DC 3C 24			fdivr	qword ptr [ESP]
 000005B9  DD 1C 24			fstp	qword ptr [ESP]
 000005BC  5A				pop	EDX
 000005BD  58				pop	EAX 
 000005BE  EB 00			jmp	OFFSET $L000496
				;}
 000005C0			$L000496:

 000005C0  5F				pop	EDI
 000005C1  5E				pop	ESI 
 000005C2  5B				pop	EBX 
 000005C3  C9				leave	
 000005C4  C2 0008			retn	000000008h
 000005C7			Math_Hyperbolic_Inverse_HArctan ENDP

 000005C7			Math_RadiansToDegrees PROC NEAR 
				;double Math::RadiansToDegrees(double rad);
 000005C7  55				push	EBP
 000005C8  8B EC			mov	EBP,ESP
 000005CA  51				push	ECX 
 000005CB  53				push	EBX 
 000005CC  56				push	ESI 
 000005CD  57				push	EDI 
				;{

				;{376}:return (180 / Math::pi()) * rad
 000005CE  B8 000000B4			mov	EAX,0000000B4h
 000005D3  50				push	EAX
 000005D4  E8 00000000 E		call	 Math_pi
 000005D9  9B DB E2			fclex
 000005DC  50				push	EAX
 000005DD  52				push	EDX 
 000005DE  DD 04 24			fld	qword ptr [ESP]
 000005E1  59				pop	ECX
 000005E2  59				pop	ECX 
 000005E3  E8 00000000 E		call	 FloatingPoint_FromInt
 000005E8  50				push	EAX
 000005E9  52				push	EDX 
 000005EA  DC 3C 24			fdivr	qword ptr [ESP]
 000005ED  DD 1C 24			fstp	qword ptr [ESP]
 000005F0  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000005F3  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000005F6  9B DB E2			fclex
 000005F9  50				push	EAX
 000005FA  52				push	EDX 
 000005FB  DD 04 24			fld	qword ptr [ESP]
 000005FE  59				pop	ECX
 000005FF  59				pop	ECX 
 00000600  DC 0C 24			fmul	qword ptr [ESP]
 00000603  DD 1C 24			fstp	qword ptr [ESP]
 00000606  5A				pop	EDX
 00000607  58				pop	EAX 
 00000608  EB 00			jmp	OFFSET $L000460
				;}
 0000060A			$L000460:

 0000060A  5F				pop	EDI
 0000060B  5E				pop	ESI 
 0000060C  5B				pop	EBX 
 0000060D  C9				leave	
 0000060E  C2 0008			retn	000000008h
 00000611			Math_RadiansToDegrees ENDP

 00000611			UnitTesting_Circle_Circumference PROC NEAR 
				;double Circumference(void);
 00000611  55				push	EBP
 00000612  8B EC			mov	EBP,ESP
 00000614  51				push	ECX 
 00000615  53				push	EBX 
 00000616  56				push	ESI 
 00000617  57				push	EDI 
				;{

				;{78}:return Math::pi() * Radius
 00000618  E8 00000000 E		call	 Math_pi
 0000061D  50				push	EAX
 0000061E  52				push	EDX 
 0000061F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000622  E8 000000CB			call	 UnitTesting_Circle_get_Radius
 00000627  9B DB E2			fclex
 0000062A  50				push	EAX
 0000062B  52				push	EDX 
 0000062C  DD 04 24			fld	qword ptr [ESP]
 0000062F  59				pop	ECX
 00000630  59				pop	ECX 
 00000631  DC 0C 24			fmul	qword ptr [ESP]
 00000634  DD 1C 24			fstp	qword ptr [ESP]
 00000637  5A				pop	EDX
 00000638  58				pop	EAX 
 00000639  EB 00			jmp	OFFSET $L000649
				;}
 0000063B			$L000649:

 0000063B  5F				pop	EDI
 0000063C  5E				pop	ESI 
 0000063D  5B				pop	EBX 
 0000063E  C9				leave	
 0000063F  C3				ret	
 00000640			UnitTesting_Circle_Circumference ENDP

 00000640			UnitTesting_Circle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 00000640  55				push	EBP
 00000641  8B EC			mov	EBP,ESP
 00000643  51				push	ECX 
 00000644  53				push	EBX 
 00000645  56				push	ESI 
 00000646  57				push	EDI 
				;{

				;{97}:return 2 * Circumference()
 00000647  B8 00000002			mov	EAX,000000002h
 0000064C  50				push	EAX
 0000064D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000650  E8 FFFFFFBC			call	 UnitTesting_Circle_Circumference
 00000655  9B DB E2			fclex
 00000658  50				push	EAX
 00000659  52				push	EDX 
 0000065A  DD 04 24			fld	qword ptr [ESP]
 0000065D  59				pop	ECX
 0000065E  59				pop	ECX 
 0000065F  E8 00000000 E		call	 FloatingPoint_FromInt
 00000664  50				push	EAX
 00000665  52				push	EDX 
 00000666  DC 0C 24			fmul	qword ptr [ESP]
 00000669  DD 1C 24			fstp	qword ptr [ESP]
 0000066C  5A				pop	EDX
 0000066D  58				pop	EAX 
 0000066E  EB 00			jmp	OFFSET $L000655
				;}
 00000670			$L000655:

 00000670  5F				pop	EDI
 00000671  5E				pop	ESI 
 00000672  5B				pop	EBX 
 00000673  C9				leave	
 00000674  C3				ret	
 00000675			UnitTesting_Circle_ComputeArea ENDP

 00000675			UnitTesting_Circle_Destructor PROC NEAR 
				;void Destructor(void);
 00000675  55				push	EBP
 00000676  8B EC			mov	EBP,ESP
 00000678  51				push	ECX 
 00000679  53				push	EBX 
 0000067A  56				push	ESI 
 0000067B  57				push	EDI 
				;{

				;{102}:System::Debug::OutputString("destroying a Circle object...");
 0000067C  8D 05 00000EB5 R		lea	EAX,OFFSET $S000657
 00000682  50				push	EAX
 00000683  E8 00000000 E		call	 System_Debug_OutputString

				;{103}:Console::WriteLn("destroying a Circle object...");
 00000688  8D 05 00000EB5 R		lea	EAX,OFFSET $S000657
 0000068E  6A 00			push	000000000h
 00000690  50				push	EAX 
 00000691  E8 00000000 E		call	 Console_WriteString
 00000696  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000069B			$L000656:

 0000069B  5F				pop	EDI
 0000069C  5E				pop	ESI 
 0000069D  5B				pop	EBX 
 0000069E  C9				leave	
 0000069F  C3				ret	
 000006A0			UnitTesting_Circle_Destructor ENDP

 000006A0			UnitTesting_Circle_Draw PROC NEAR 
				;void Draw(void);
 000006A0  55				push	EBP
 000006A1  8B EC			mov	EBP,ESP
 000006A3  51				push	ECX 
 000006A4  53				push	EBX 
 000006A5  56				push	ESI 
 000006A6  57				push	EDI 
				;{

				;{92}:Console::WriteLn("Drawing a Circle!");
 000006A7  8D 05 00000957 R		lea	EAX,OFFSET $S000654
 000006AD  6A 00			push	000000000h
 000006AF  50				push	EAX 
 000006B0  E8 00000000 E		call	 Console_WriteString
 000006B5  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006BA			$L000653:

 000006BA  5F				pop	EDI
 000006BB  5E				pop	ESI 
 000006BC  5B				pop	EBX 
 000006BD  C9				leave	
 000006BE  C3				ret	
 000006BF			UnitTesting_Circle_Draw ENDP

 000006BF			UnitTesting_Circle_DrawSphere PROC NEAR 
				;void DrawSphere(void);
 000006BF  55				push	EBP
 000006C0  8B EC			mov	EBP,ESP
 000006C2  51				push	ECX 
 000006C3  53				push	EBX 
 000006C4  56				push	ESI 
 000006C5  57				push	EDI 
				;{

				;{108}:Console::WriteLn("Drawing a Sphere!");
 000006C6  8D 05 0000098C R		lea	EAX,OFFSET $S000659
 000006CC  6A 00			push	000000000h
 000006CE  50				push	EAX 
 000006CF  E8 00000000 E		call	 Console_WriteString
 000006D4  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000006D9			$L000658:

 000006D9  5F				pop	EDI
 000006DA  5E				pop	ESI 
 000006DB  5B				pop	EBX 
 000006DC  C9				leave	
 000006DD  C3				ret	
 000006DE			UnitTesting_Circle_DrawSphere ENDP

 000006DE			UnitTesting_Circle_Name PROC NEAR 
				;string Name(void);
 000006DE  55				push	EBP
 000006DF  8B EC			mov	EBP,ESP
 000006E1  51				push	ECX 
 000006E2  53				push	EBX 
 000006E3  56				push	ESI 
 000006E4  57				push	EDI 
				;{

				;{87}:return "Circle"
 000006E5  8D 05 000007DB R		lea	EAX,OFFSET $S000652
 000006EB  EB 00			jmp	OFFSET $L000651
				;}
 000006ED			$L000651:

 000006ED  5F				pop	EDI
 000006EE  5E				pop	ESI 
 000006EF  5B				pop	EBX 
 000006F0  C9				leave	
 000006F1  C3				ret	
 000006F2			UnitTesting_Circle_Name ENDP

 000006F2			UnitTesting_Circle_get_Radius PROC NEAR 
				;double get::Radius(void);
 000006F2  55				push	EBP
 000006F3  8B EC			mov	EBP,ESP
 000006F5  51				push	ECX 
 000006F6  53				push	EBX 
 000006F7  56				push	ESI 
 000006F8  57				push	EDI 
				;{

				;{68}:return radius
 000006F9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000006FC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000006FF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000702  EB 00			jmp	OFFSET $L000646
				;}
 00000704			$L000646:

 00000704  5F				pop	EDI
 00000705  5E				pop	ESI 
 00000706  5B				pop	EBX 
 00000707  C9				leave	
 00000708  C3				ret	
 00000709			UnitTesting_Circle_get_Radius ENDP

 00000709			UnitTesting_Circle_put_Radius PROC NEAR 
				;void put::Radius(double value);
 00000709  55				push	EBP
 0000070A  8B EC			mov	EBP,ESP
 0000070C  51				push	ECX 
 0000070D  53				push	EBX 
 0000070E  56				push	ESI 
 0000070F  57				push	EDI 
				;{

				;{73}:radius= value;
 00000710  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000713  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000716  50				push	EAX
 00000717  52				push	EDX 
 00000718  DD 04 24			fld	qword ptr [ESP]
 0000071B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000071E  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000721			$L000647:
 00000721  5A				pop	EDX
 00000722  58				pop	EAX 

 00000723  5F				pop	EDI
 00000724  5E				pop	ESI 
 00000725  5B				pop	EBX 
 00000726  C9				leave	
 00000727  C2 0008			retn	000000008h
 0000072A			UnitTesting_Circle_put_Radius ENDP

 0000072A			UnitTesting_Circle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 0000072A  55				push	EBP
 0000072B  8B EC			mov	EBP,ESP
 0000072D  51				push	ECX 
 0000072E  53				push	EBX 
 0000072F  56				push	ESI 
 00000730  57				push	EDI 
				;{

				;{83}:return UnitTesting::stCircle
 00000731  B8 00000001			mov	EAX,000000001h
 00000736  EB 00			jmp	OFFSET $L000650
				;}
 00000738			$L000650:

 00000738  5F				pop	EDI
 00000739  5E				pop	ESI 
 0000073A  5B				pop	EBX 
 0000073B  C9				leave	
 0000073C  C3				ret	
 0000073D			UnitTesting_Circle_Type ENDP

 0000073D			UnitTesting_Circle PROC NEAR 
				;void UnitTesting::Circle(void);
 0000073D  55				push	EBP
 0000073E  8B EC			mov	EBP,ESP
 00000740  51				push	ECX 
 00000741  53				push	EBX 
 00000742  56				push	ESI 
 00000743  57				push	EDI 
 00000744  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000747  E8 00000AC1			call	 UnitTesting_Shape ;base constructor call
 0000074C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000074F  C7 01 00000000 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Circle 
 00000755  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000758  E8 00003F1C			call	 __member_Init@UnitTesting_Circle 
				;{
				;}

 0000075D  5F				pop	EDI
 0000075E  5E				pop	ESI 
 0000075F  5B				pop	EBX 
 00000760  C9				leave	
 00000761  C3				ret	
 00000762			UnitTesting_Circle ENDP

 00000762			UnitTesting_DoubleProxy_Destructor PROC NEAR 
				;void Destructor(void);
 00000762  55				push	EBP
 00000763  8B EC			mov	EBP,ESP
 00000765  51				push	ECX 
 00000766  53				push	EBX 
 00000767  56				push	ESI 
 00000768  57				push	EDI 
				;{

				;{143}:Console::WriteLn("Destroying a Double Proxy object...");
 00000769  8D 05 000008C1 R		lea	EAX,OFFSET $S000789
 0000076F  6A 00			push	000000000h
 00000771  50				push	EAX 
 00000772  E8 00000000 E		call	 Console_WriteString
 00000777  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000077C			$L000788:

 0000077C  5F				pop	EDI
 0000077D  5E				pop	ESI 
 0000077E  5B				pop	EBX 
 0000077F  C9				leave	
 00000780  C3				ret	
 00000781			UnitTesting_DoubleProxy_Destructor ENDP

 00000781			UnitTesting_DoubleProxy_Swap PROC NEAR 
				;void Swap(UnitTesting::SimpleObject ref obj);
 00000781  55				push	EBP
 00000782  8B EC			mov	EBP,ESP
 00000784  83 EC 10			sub	ESP,000000010h
 00000787  53				push	EBX 
 00000788  56				push	ESI 
 00000789  57				push	EDI 
 0000078A  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 0000078D  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000790  B9 00000003			mov	ECX,000000003h 
 00000795  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000079A  F3/ AB			rep stos	dword ptr [EDI]
 0000079C  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{134}:tmp= val;
 0000079F  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000007A2  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007A5  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000007A8  50				push	EAX
 000007A9  52				push	EDX 
 000007AA  DD 04 24			fld	qword ptr [ESP]
 000007AD  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{136}:ptr= dynamic_cast(&obj);
 000007B0  5A				pop	EDX
 000007B1  58				pop	EAX 
 000007B2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000007B5  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000007B8  89 03			mov	dword ptr [EBX],EAX

				;{137}:val= ptr.val;
 000007BA  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000007BD  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000007C0  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000007C3  50				push	EAX
 000007C4  52				push	EDX 
 000007C5  DD 04 24			fld	qword ptr [ESP]
 000007C8  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 000007CB  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{138}:ptr.val= tmp;
 000007CE  5A				pop	EDX
 000007CF  58				pop	EAX 
 000007D0  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000007D3  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000007D6  50				push	EAX
 000007D7  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000007DA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000007DD  50				push	EAX
 000007DE  52				push	EDX 
 000007DF  DD 04 24			fld	qword ptr [ESP]
 000007E2  5A				pop	EDX
 000007E3  58				pop	EAX 
 000007E4  5B				pop	EBX
 000007E5  DD 1B			fstp	qword ptr [EBX]
				;}
 000007E7			$L000784:

 000007E7  5F				pop	EDI
 000007E8  5E				pop	ESI 
 000007E9  5B				pop	EBX 
 000007EA  C9				leave	
 000007EB  C2 0004			retn	000000004h
 000007EE			UnitTesting_DoubleProxy_Swap ENDP

 000007EE			UnitTesting_DoubleProxy PROC NEAR 
				;void UnitTesting::DoubleProxy(void);
 000007EE  55				push	EBP
 000007EF  8B EC			mov	EBP,ESP
 000007F1  51				push	ECX 
 000007F2  53				push	EBX 
 000007F3  56				push	ESI 
 000007F4  57				push	EDI 
 000007F5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000007F8  E8 00000C15			call	 UnitTesting_SimpleObject ;base constructor call
 000007FD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000800  C7 01 0000002C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_DoubleProxy 
 00000806  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000809  E8 00003E82			call	 __member_Init@UnitTesting_DoubleProxy 
				;{

				;{116}:Console::WriteLn("Constructing a Double Proxy...");
 0000080E  8D 05 0000087B R		lea	EAX,OFFSET $S000777
 00000814  6A 00			push	000000000h
 00000816  50				push	EAX 
 00000817  E8 00000000 E		call	 Console_WriteString
 0000081C  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 00000821  5F				pop	EDI
 00000822  5E				pop	ESI 
 00000823  5B				pop	EBX 
 00000824  C9				leave	
 00000825  C3				ret	
 00000826			UnitTesting_DoubleProxy ENDP

 00000826			UnitTesting_DoubleProxy_isEqual PROC NEAR 
				;bool isEqual(UnitTesting::SimpleObject ref obj);
 00000826  55				push	EBP
 00000827  8B EC			mov	EBP,ESP
 00000829  83 EC 08			sub	ESP,000000008h
 0000082C  53				push	EBX 
 0000082D  56				push	ESI 
 0000082E  57				push	EDI 
 0000082F  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00000832  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000835  B9 00000001			mov	ECX,000000001h 
 0000083A  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000083F  F3/ AB			rep stos	dword ptr [EDI]
 00000841  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{127}:ptr= dynamic_cast(UnitTesting::DoubleProxy, &obj);
 00000844  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000847  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 0000084A  89 03			mov	dword ptr [EBX],EAX

				;{129}:return val < ptr.val
 0000084C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 0000084F  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000852  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000855  50				push	EAX
 00000856  52				push	EDX 
 00000857  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000085A  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000085D  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000860  50				push	EAX
 00000861  52				push	EDX 
 00000862  E8 00000000 E		call	 FloatingPoint_Compare
 00000867  83 F8 00			cmp	EAX,000000000h
 0000086A  F7 D8			neg	EAX
 0000086C  0F 9C C0			setl	AL
 0000086F  EB 00			jmp	OFFSET $L000781
				;}
 00000871			$L000781:

 00000871  5F				pop	EDI
 00000872  5E				pop	ESI 
 00000873  5B				pop	EBX 
 00000874  C9				leave	
 00000875  C2 0004			retn	000000004h
 00000878			UnitTesting_DoubleProxy_isEqual ENDP

 00000878			UnitTesting_DoubleProxy_lessThan PROC NEAR 
				;bool lessThan(UnitTesting::SimpleObject ref obj);
 00000878  55				push	EBP
 00000879  8B EC			mov	EBP,ESP
 0000087B  83 EC 08			sub	ESP,000000008h
 0000087E  53				push	EBX 
 0000087F  56				push	ESI 
 00000880  57				push	EDI 
 00000881  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00000884  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000887  B9 00000001			mov	ECX,000000001h 
 0000088C  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000891  F3/ AB			rep stos	dword ptr [EDI]
 00000893  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{120}:ptr= dynamic_cast(&obj);
 00000896  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000899  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 0000089C  89 03			mov	dword ptr [EBX],EAX

				;{122}:return val < ptr.val
 0000089E  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 000008A1  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000008A4  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000008A7  50				push	EAX
 000008A8  52				push	EDX 
 000008A9  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000008AC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000008AF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000008B2  50				push	EAX
 000008B3  52				push	EDX 
 000008B4  E8 00000000 E		call	 FloatingPoint_Compare
 000008B9  83 F8 00			cmp	EAX,000000000h
 000008BC  F7 D8			neg	EAX
 000008BE  0F 9C C0			setl	AL
 000008C1  EB 00			jmp	OFFSET $L000778
				;}
 000008C3			$L000778:

 000008C3  5F				pop	EDI
 000008C4  5E				pop	ESI 
 000008C5  5B				pop	EBX 
 000008C6  C9				leave	
 000008C7  C2 0004			retn	000000004h
 000008CA			UnitTesting_DoubleProxy_lessThan ENDP

 000008CA			UnitTesting_DoubleSwapper_Swap PROC NEAR 
				;void Swap(UnitTesting::SimpleObject ref obj1, UnitTesting::SimpleObject ref obj2);
 000008CA  55				push	EBP
 000008CB  8B EC			mov	EBP,ESP
 000008CD  83 EC 14			sub	ESP,000000014h
 000008D0  53				push	EBX 
 000008D1  56				push	ESI 
 000008D2  57				push	EDI 
 000008D3  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 000008D6  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 000008D9  B9 00000004			mov	ECX,000000004h 
 000008DE  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000008E3  F3/ AB			rep stos	dword ptr [EDI]
 000008E5  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{168}:ptr1= dynamic_cast(&obj1);
 000008E8  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000008EB  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000008EE  89 03			mov	dword ptr [EBX],EAX

				;{169}:ptr2= dynamic_cast(&obj2);
 000008F0  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000008F3  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 000008F6  89 03			mov	dword ptr [EBX],EAX

				;{171}:tmp= ptr1.val;
 000008F8  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000008FB  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000008FE  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000901  50				push	EAX
 00000902  52				push	EDX 
 00000903  DD 04 24			fld	qword ptr [ESP]
 00000906  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{172}:ptr1.val= ptr2.val;
 00000909  5A				pop	EDX
 0000090A  58				pop	EAX 
 0000090B  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000090E  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00000911  50				push	EAX
 00000912  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000915  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000918  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000091B  50				push	EAX
 0000091C  52				push	EDX 
 0000091D  DD 04 24			fld	qword ptr [ESP]
 00000920  5A				pop	EDX
 00000921  58				pop	EAX 
 00000922  5B				pop	EBX
 00000923  DD 1B			fstp	qword ptr [EBX]

				;{173}:ptr2.val= tmp;
 00000925  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000928  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 0000092B  50				push	EAX
 0000092C  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 0000092F  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000932  50				push	EAX
 00000933  52				push	EDX 
 00000934  DD 04 24			fld	qword ptr [ESP]
 00000937  5A				pop	EDX
 00000938  58				pop	EAX 
 00000939  5B				pop	EBX
 0000093A  DD 1B			fstp	qword ptr [EBX]
				;}
 0000093C			$L000813:

 0000093C  5F				pop	EDI
 0000093D  5E				pop	ESI 
 0000093E  5B				pop	EBX 
 0000093F  C9				leave	
 00000940  C2 0008			retn	000000008h
 00000943			UnitTesting_DoubleSwapper_Swap ENDP

 00000943			UnitTesting_DoubleSwapper_SwapEx PROC NEAR 
				;void SwapEx(UnitTesting::SimpleObject [] array, unsigned left, unsigned right);
 00000943  55				push	EBP
 00000944  8B EC			mov	EBP,ESP
 00000946  83 EC 14			sub	ESP,000000014h
 00000949  53				push	EBX 
 0000094A  56				push	ESI 
 0000094B  57				push	EDI 
 0000094C  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 0000094F  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00000952  B9 00000004			mov	ECX,000000004h 
 00000957  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000095C  F3/ AB			rep stos	dword ptr [EDI]
 0000095E  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{185}:ptr1= dynamic_cast(UnitTesting::DoubleProxy, &array[left]);
 00000961  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000964  8B C3			mov	EAX,EBX 
 00000966  50				push	EAX
 00000967  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000096A  5E				pop	ESI
 0000096B  6B C0 0C			imul	EAX,00000000Ch
 0000096E  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000971  8B C1			mov	EAX,ECX
 00000973  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000976  89 03			mov	dword ptr [EBX],EAX

				;{186}:ptr2= dynamic_cast(&array[right]);
 00000978  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000097B  8B C3			mov	EAX,EBX 
 0000097D  50				push	EAX
 0000097E  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000981  5E				pop	ESI
 00000982  6B C0 0C			imul	EAX,00000000Ch
 00000985  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000988  8B C1			mov	EAX,ECX
 0000098A  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 0000098D  89 03			mov	dword ptr [EBX],EAX

				;{188}:tmp= ptr1.val;
 0000098F  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000992  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000995  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000998  50				push	EAX
 00000999  52				push	EDX 
 0000099A  DD 04 24			fld	qword ptr [ESP]
 0000099D  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{189}:ptr1.val= ptr2.val;
 000009A0  5A				pop	EDX
 000009A1  58				pop	EAX 
 000009A2  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000009A5  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000009A8  50				push	EAX
 000009A9  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000009AC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000009AF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000009B2  50				push	EAX
 000009B3  52				push	EDX 
 000009B4  DD 04 24			fld	qword ptr [ESP]
 000009B7  5A				pop	EDX
 000009B8  58				pop	EAX 
 000009B9  5B				pop	EBX
 000009BA  DD 1B			fstp	qword ptr [EBX]

				;{190}:ptr2.val= tmp;
 000009BC  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000009BF  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000009C2  50				push	EAX
 000009C3  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 000009C6  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 000009C9  50				push	EAX
 000009CA  52				push	EDX 
 000009CB  DD 04 24			fld	qword ptr [ESP]
 000009CE  5A				pop	EDX
 000009CF  58				pop	EAX 
 000009D0  5B				pop	EBX
 000009D1  DD 1B			fstp	qword ptr [EBX]
				;}
 000009D3			$L000825:

 000009D3  5F				pop	EDI
 000009D4  5E				pop	ESI 
 000009D5  5B				pop	EBX 
 000009D6  C9				leave	
 000009D7  C2 000C			retn	00000000Ch
 000009DA			UnitTesting_DoubleSwapper_SwapEx ENDP

 000009DA			UnitTesting_DoubleSwapper_lessThan PROC NEAR 
				;bool lessThan(UnitTesting::SimpleObject ref obj1, UnitTesting::SimpleObject ref obj2);
 000009DA  55				push	EBP
 000009DB  8B EC			mov	EBP,ESP
 000009DD  83 EC 0C			sub	ESP,00000000Ch
 000009E0  53				push	EBX 
 000009E1  56				push	ESI 
 000009E2  57				push	EDI 
 000009E3  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 000009E6  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 000009E9  B9 00000002			mov	ECX,000000002h 
 000009EE  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000009F3  F3/ AB			rep stos	dword ptr [EDI]
 000009F5  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{161}:ptr1= dynamic_cast(&obj1);
 000009F8  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000009FB  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000009FE  89 03			mov	dword ptr [EBX],EAX

				;{162}:ptr2= dynamic_cast(&obj2);
 00000A00  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000A03  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A06  89 03			mov	dword ptr [EBX],EAX

				;{164}:return ptr1.val < ptr2.val
 00000A08  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000A0B  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A0E  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A11  50				push	EAX
 00000A12  52				push	EDX 
 00000A13  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000A16  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A19  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A1C  50				push	EAX
 00000A1D  52				push	EDX 
 00000A1E  E8 00000000 E		call	 FloatingPoint_Compare
 00000A23  83 F8 00			cmp	EAX,000000000h
 00000A26  F7 D8			neg	EAX
 00000A28  0F 9C C0			setl	AL
 00000A2B  EB 00			jmp	OFFSET $L000808
				;}
 00000A2D			$L000808:

 00000A2D  5F				pop	EDI
 00000A2E  5E				pop	ESI 
 00000A2F  5B				pop	EBX 
 00000A30  C9				leave	
 00000A31  C2 0008			retn	000000008h
 00000A34			UnitTesting_DoubleSwapper_lessThan ENDP

 00000A34			UnitTesting_DoubleSwapper_lessThanEx PROC NEAR 
				;bool lessThanEx(UnitTesting::SimpleObject [] array, unsigned left, unsigned right);
 00000A34  55				push	EBP
 00000A35  8B EC			mov	EBP,ESP
 00000A37  83 EC 0C			sub	ESP,00000000Ch
 00000A3A  53				push	EBX 
 00000A3B  56				push	ESI 
 00000A3C  57				push	EDI 
 00000A3D  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00000A40  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00000A43  B9 00000002			mov	ECX,000000002h 
 00000A48  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000A4D  F3/ AB			rep stos	dword ptr [EDI]
 00000A4F  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{178}:ptr1= dynamic_cast(&array[left]);
 00000A52  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000A55  8B C3			mov	EAX,EBX 
 00000A57  50				push	EAX
 00000A58  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000A5B  5E				pop	ESI
 00000A5C  6B C0 0C			imul	EAX,00000000Ch
 00000A5F  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000A62  8B C1			mov	EAX,ECX
 00000A64  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000A67  89 03			mov	dword ptr [EBX],EAX

				;{179}:ptr2= dynamic_cast(UnitTesting::DoubleProxy, &array[right]);
 00000A69  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000A6C  8B C3			mov	EAX,EBX 
 00000A6E  50				push	EAX
 00000A6F  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00000A72  5E				pop	ESI
 00000A73  6B C0 0C			imul	EAX,00000000Ch
 00000A76  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000A79  8B C1			mov	EAX,ECX
 00000A7B  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00000A7E  89 03			mov	dword ptr [EBX],EAX

				;{181}:return ptr1.val < ptr2.val
 00000A80  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000A83  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A86  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A89  50				push	EAX
 00000A8A  52				push	EDX 
 00000A8B  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 00000A8E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000A91  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000A94  50				push	EAX
 00000A95  52				push	EDX 
 00000A96  E8 00000000 E		call	 FloatingPoint_Compare
 00000A9B  83 F8 00			cmp	EAX,000000000h
 00000A9E  F7 D8			neg	EAX
 00000AA0  0F 9C C0			setl	AL
 00000AA3  EB 00			jmp	OFFSET $L000819
				;}
 00000AA5			$L000819:

 00000AA5  5F				pop	EDI
 00000AA6  5E				pop	ESI 
 00000AA7  5B				pop	EBX 
 00000AA8  C9				leave	
 00000AA9  C2 000C			retn	00000000Ch
 00000AAC			UnitTesting_DoubleSwapper_lessThanEx ENDP

 00000AAC			UnitTesting_DoubleSwapper PROC NEAR 
				;void UnitTesting::DoubleSwapper(void);
 00000AAC  55				push	EBP
 00000AAD  8B EC			mov	EBP,ESP
 00000AAF  51				push	ECX 
 00000AB0  53				push	EBX 
 00000AB1  56				push	ESI 
 00000AB2  57				push	EDI 
 00000AB3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000AB6  E8 00001209			call	 UnitTesting_SwapperObject ;base constructor call
 00000ABB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000ABE  C7 01 0000004C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_DoubleSwapper 

 00000AC4  5F				pop	EDI
 00000AC5  5E				pop	ESI 
 00000AC6  5B				pop	EBX 
 00000AC7  C9				leave	
 00000AC8  C3				ret	
 00000AC9			UnitTesting_DoubleSwapper ENDP

 00000AC9			UnitTesting_HObject_Destructor PROC NEAR 
				;void Destructor(void);
 00000AC9  55				push	EBP
 00000ACA  8B EC			mov	EBP,ESP
 00000ACC  51				push	ECX 
 00000ACD  53				push	EBX 
 00000ACE  56				push	ESI 
 00000ACF  57				push	EDI 
				;{
				;}
				;}
 00000AD0			$L000860:

 00000AD0  5F				pop	EDI
 00000AD1  5E				pop	ESI 
 00000AD2  5B				pop	EBX 
 00000AD3  C9				leave	
 00000AD4  C3				ret	
 00000AD5			UnitTesting_HObject_Destructor ENDP

 00000AD5			UnitTesting_HObject PROC NEAR 
				;void UnitTesting::HObject(void);
 00000AD5  55				push	EBP
 00000AD6  8B EC			mov	EBP,ESP
 00000AD8  51				push	ECX 
 00000AD9  53				push	EBX 
 00000ADA  56				push	ESI 
 00000ADB  57				push	EDI 
 00000ADC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000ADF  C7 01 0000006C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_HObject 
				;{
				;}

 00000AE5  5F				pop	EDI
 00000AE6  5E				pop	ESI 
 00000AE7  5B				pop	EBX 
 00000AE8  C9				leave	
 00000AE9  C3				ret	
 00000AEA			UnitTesting_HObject ENDP

 00000AEA			UnitTesting_HelloWorld_Destructor PROC NEAR 
				;void Destructor(void);
 00000AEA  55				push	EBP
 00000AEB  8B EC			mov	EBP,ESP
 00000AED  51				push	ECX 
 00000AEE  53				push	EBX 
 00000AEF  56				push	ESI 
 00000AF0  57				push	EDI 
				;{

				;{436}:Console::WriteLn("The HelloWorld destructor");
 00000AF1  8D 05 00000C76 R		lea	EAX,OFFSET $S000909
 00000AF7  6A 00			push	000000000h
 00000AF9  50				push	EAX 
 00000AFA  E8 00000000 E		call	 Console_WriteString
 00000AFF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B04			$L000908:

 00000B04  5F				pop	EDI
 00000B05  5E				pop	ESI 
 00000B06  5B				pop	EBX 
 00000B07  C9				leave	
 00000B08  C3				ret	
 00000B09			UnitTesting_HelloWorld_Destructor ENDP

 00000B09			UnitTesting_HelloWorld_SayHello PROC NEAR 
				;void SayHello(string text);
 00000B09  55				push	EBP
 00000B0A  8B EC			mov	EBP,ESP
 00000B0C  51				push	ECX 
 00000B0D  53				push	EBX 
 00000B0E  56				push	ESI 
 00000B0F  57				push	EDI 
				;{

				;{426}:Console::WriteLn("this is what I have to say for the first time in H++ :", text);
 00000B10  8D 05 000010D2 R		lea	EAX,OFFSET $S000904
 00000B16  6A 00			push	000000000h
 00000B18  50				push	EAX 
 00000B19  E8 00000000 E		call	 Console_WriteString
 00000B1E  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000B21  6A 00			push	000000000h 
 00000B23  50				push	EAX 
 00000B24  E8 00000000 E		call	 Console_WriteString 
 00000B29  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000B2E			$L000902:

 00000B2E  5F				pop	EDI
 00000B2F  5E				pop	ESI 
 00000B30  5B				pop	EBX 
 00000B31  C9				leave	
 00000B32  C2 0004			retn	000000004h
 00000B35			UnitTesting_HelloWorld_SayHello ENDP

 00000B35			UnitTesting_HelloWorld_ShowHello PROC NEAR 
				;void ShowHello(string text);
 00000B35  55				push	EBP
 00000B36  8B EC			mov	EBP,ESP
 00000B38  51				push	ECX 
 00000B39  53				push	EBX 
 00000B3A  56				push	ESI 
 00000B3B  57				push	EDI 
				;{

				;{431}:System::ShowMessage(text, "H++ First program", System::IconInformation);
 00000B3C  B8 00000040			mov	EAX,000000040h
 00000B41  50				push	EAX 
 00000B42  8D 05 000009DD R		lea	EAX,OFFSET $S000907
 00000B48  50				push	EAX 
 00000B49  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000B4C  50				push	EAX
 00000B4D  E8 00000000 E		call	 System_ShowMessage
				;}
 00000B52			$L000905:

 00000B52  5F				pop	EDI
 00000B53  5E				pop	ESI 
 00000B54  5B				pop	EBX 
 00000B55  C9				leave	
 00000B56  C2 0004			retn	000000004h
 00000B59			UnitTesting_HelloWorld_ShowHello ENDP

 00000B59			UnitTesting_HelloWorld PROC NEAR 
				;void UnitTesting::HelloWorld(void);
 00000B59  55				push	EBP
 00000B5A  8B EC			mov	EBP,ESP
 00000B5C  51				push	ECX 
 00000B5D  53				push	EBX 
 00000B5E  56				push	ESI 
 00000B5F  57				push	EDI 
				;{

				;{421}:Console::WriteLn("The HelloWorld constructor");
 00000B60  8D 05 00000C5B R		lea	EAX,OFFSET $S000901
 00000B66  6A 00			push	000000000h
 00000B68  50				push	EAX 
 00000B69  E8 00000000 E		call	 Console_WriteString
 00000B6E  E8 00000000 E		call	 Console_WriteCrLf 
				;}

 00000B73  5F				pop	EDI
 00000B74  5E				pop	ESI 
 00000B75  5B				pop	EBX 
 00000B76  C9				leave	
 00000B77  C3				ret	
 00000B78			UnitTesting_HelloWorld ENDP

 00000B78			UnitTesting_Integers_Inline_Test PROC NEAR 
				;void UnitTesting::Integers_Inline::Test(void);
 00000B78  55				push	EBP
 00000B79  8B EC			mov	EBP,ESP
 00000B7B  83 EC 14			sub	ESP,000000014h
 00000B7E  53				push	EBX 
 00000B7F  56				push	ESI 
 00000B80  57				push	EDI 
 00000B81  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00000B84  B9 00000004			mov	ECX,000000004h
 00000B89  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000B8E  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{93}:a= 5, b= 4;
 00000B90  B8 00000005			mov	EAX,000000005h
 00000B95  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00000B98  B8 00000004			mov	EAX,000000004h
 00000B9D  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{95}:Console::WriteLn("The values: a = ", a, ", and b = ", b);
 00000BA0  8D 05 00000D1F R		lea	EAX,OFFSET $S000608
 00000BA6  6A 00			push	000000000h
 00000BA8  50				push	EAX 
 00000BA9  E8 00000000 E		call	 Console_WriteString
 00000BAE  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000BB1  50				push	EAX 
 00000BB2  E8 00000000 E		call	 Console_WriteInteger 
 00000BB7  8D 05 0000071B R		lea	EAX,OFFSET $S000609
 00000BBD  6A 00			push	000000000h 
 00000BBF  50				push	EAX 
 00000BC0  E8 00000000 E		call	 Console_WriteString 
 00000BC5  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000BC8  50				push	EAX 
 00000BC9  E8 00000000 E		call	 Console_WriteInteger 
 00000BCE  E8 00000000 E		call	 Console_WriteCrLf 

				;{97}:c= max(a, b);
 00000BD3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000BD6  50				push	EAX
 00000BD7  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000BDA  5B				pop	EBX
 00000BDB  33 C9			xor	ECX,ECX
 00000BDD  3B D8			cmp	EBX,EAX
 00000BDF  0F 9E C1			setle	CL
 00000BE2  83 E9 01			sub	ECX,000000001h
 00000BE5  2B D8			sub	EBX,EAX 
 00000BE7  23 CB			and	ECX,EBX
 00000BE9  03 C1			add	EAX,ECX
 00000BEB  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{99}:Console::WriteLn("The max value is = ", c);
 00000BEE  8D 05 00000CA0 R		lea	EAX,OFFSET $S000611
 00000BF4  6A 00			push	000000000h
 00000BF6  50				push	EAX 
 00000BF7  E8 00000000 E		call	 Console_WriteString
 00000BFC  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00000BFF  50				push	EAX 
 00000C00  E8 00000000 E		call	 Console_WriteInteger 
 00000C05  E8 00000000 E		call	 Console_WriteCrLf 

				;{101}:d= min(a, b);
 00000C0A  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000C0D  50				push	EAX
 00000C0E  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000C11  5B				pop	EBX
 00000C12  2B D8			sub	EBX,EAX
 00000C14  1B C9			sbb	ECX,ECX
 00000C16  23 CB			and	ECX,EBX
 00000C18  03 C1			add	EAX,ECX
 00000C1A  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{103}:Console::WriteLn("The min value is = ", d);
 00000C1D  8D 05 00000CB4 R		lea	EAX,OFFSET $S000613
 00000C23  6A 00			push	000000000h
 00000C25  50				push	EAX 
 00000C26  E8 00000000 E		call	 Console_WriteString
 00000C2B  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00000C2E  50				push	EAX 
 00000C2F  E8 00000000 E		call	 Console_WriteInteger 
 00000C34  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00000C39			$L000603:

 00000C39  5F				pop	EDI
 00000C3A  5E				pop	ESI 
 00000C3B  5B				pop	EBX 
 00000C3C  C9				leave	
 00000C3D  C3				ret	
 00000C3E			UnitTesting_Integers_Inline_Test ENDP

 00000C3E			UnitTesting_MonteCarlo_PI PROC NEAR 
				;double UnitTesting::MonteCarlo::PI(unsigned trials);
 00000C3E  55				push	EBP
 00000C3F  8B EC			mov	EBP,ESP
 00000C41  83 EC 1C			sub	ESP,00000001Ch
 00000C44  53				push	EBX 
 00000C45  56				push	ESI 
 00000C46  57				push	EDI 
 00000C47  8D 7D E8			lea	EDI,dword ptr [EBP-0018h]
 00000C4A  B9 00000006			mov	ECX,000000006h
 00000C4F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000C54  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{278}:hits= 0;
 00000C56  33 C0			xor	EAX,EAX
 00000C58  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{279}:for(i= 0; i < trials; ++i)
 00000C5B  33 C0			xor	EAX,EAX
 00000C5D  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00000C60  EB 06			jmp	OFFSET $L001402
 00000C62			$L001403:
 00000C62  FF 45 F8			inc	dword ptr [EBP-8]
 00000C65  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00000C68			$L001402:
 00000C68  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00000C6B  50				push	EAX
 00000C6C  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000C6F  5A				pop	EDX
 00000C70  3B D0			cmp	EDX,EAX
 00000C72  0F 9C C0			setl	AL
 00000C75  84 C0			test	AL,AL
 00000C77  0F 84 00000088		jz	OFFSET $L001404
				;{

				;{281}:x= UnitTesting::Rnd::NextDblEx();
 00000C7D  E8 000003B5			call	 UnitTesting_Rnd_NextDblEx
 00000C82  50				push	EAX
 00000C83  52				push	EDX 
 00000C84  DD 04 24			fld	qword ptr [ESP]
 00000C87  DD 5D F0			fstp	qword ptr [EBP-0010h]

				;{282}:y= UnitTesting::Rnd::NextDblEx();
 00000C8A  5A				pop	EDX
 00000C8B  58				pop	EAX 
 00000C8C  E8 000003A6			call	 UnitTesting_Rnd_NextDblEx
 00000C91  50				push	EAX
 00000C92  52				push	EDX 
 00000C93  DD 04 24			fld	qword ptr [ESP]
 00000C96  DD 5D E8			fstp	qword ptr [EBP-0018h]

				;{283}:if(x * x + y * y < 1.0)
 00000C99  5A				pop	EDX
 00000C9A  58				pop	EAX 
 00000C9B  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000C9E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000CA1  50				push	EAX
 00000CA2  52				push	EDX 
 00000CA3  8B 55 F0			mov	EDX,dword ptr [EBP-0010h]
 00000CA6  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch] 
 00000CA9  9B DB E2			fclex
 00000CAC  50				push	EAX
 00000CAD  52				push	EDX 
 00000CAE  DD 04 24			fld	qword ptr [ESP]
 00000CB1  59				pop	ECX
 00000CB2  59				pop	ECX 
 00000CB3  DC 0C 24			fmul	qword ptr [ESP]
 00000CB6  DD 1C 24			fstp	qword ptr [ESP]
 00000CB9  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 00000CBC  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00000CBF  50				push	EAX
 00000CC0  52				push	EDX 
 00000CC1  8B 55 E8			mov	EDX,dword ptr [EBP-0018h]
 00000CC4  8B 45 EC			mov	EAX,dword ptr [EBP-0014h] 
 00000CC7  9B DB E2			fclex
 00000CCA  50				push	EAX
 00000CCB  52				push	EDX 
 00000CCC  DD 04 24			fld	qword ptr [ESP]
 00000CCF  59				pop	ECX
 00000CD0  59				pop	ECX 
 00000CD1  DC 0C 24			fmul	qword ptr [ESP]
 00000CD4  DD 1C 24			fstp	qword ptr [ESP]
 00000CD7  DD 04 24			fld	qword ptr [ESP]
 00000CDA  59				pop	ECX
 00000CDB  59				pop	ECX 
 00000CDC  DC 04 24			fadd	qword ptr [ESP]
 00000CDF  DD 1C 24			fstp	qword ptr [ESP]
 00000CE2  D9 E8			fld1
 00000CE4  51				push	ECX
 00000CE5  51				push	ECX 
 00000CE6  DD 1C 24			fstp	qword ptr [ESP]
 00000CE9  E8 00000000 E		call	 FloatingPoint_Compare
 00000CEE  83 F8 00			cmp	EAX,000000000h
 00000CF1  F7 D8			neg	EAX
 00000CF3  0F 9C C0			setl	AL
 00000CF6  84 C0			test	AL,AL
 00000CF8  74 06			jz	OFFSET $L001405
				;{

				;{285}:++hits;
 00000CFA  FF 45 FC			inc	dword ptr [EBP-4]
 00000CFD  8B 45 FC			mov	EAX,dword ptr [EBP-4]
				;}
 00000D00			$L001405:
				;}
 00000D00  E9 FFFFFF5D			jmp	OFFSET $L001403 
 00000D05			$L001404:

				;{289}:return 4.0 * hits / trials
 00000D05  33 D2			xor	EDX,EDX
 00000D07  B8 40100000			mov	EAX,040100000h
 00000D0C  50				push	EAX
 00000D0D  52				push	EDX 
 00000D0E  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00000D11  9B DB E2			fclex
 00000D14  50				push	EAX
 00000D15  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D1A  50				push	EAX
 00000D1B  52				push	EDX 
 00000D1C  DD 04 24			fld	qword ptr [ESP]
 00000D1F  59				pop	ECX
 00000D20  59				pop	ECX 
 00000D21  DC 0C 24			fmul	qword ptr [ESP]
 00000D24  DD 1C 24			fstp	qword ptr [ESP]
 00000D27  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000D2A  9B DB E2			fclex
 00000D2D  50				push	EAX
 00000D2E  E8 00000000 E		call	 FloatingPoint_FromInt
 00000D33  50				push	EAX
 00000D34  52				push	EDX 
 00000D35  DD 04 24			fld	qword ptr [ESP]
 00000D38  59				pop	ECX 
 00000D39  59				pop	ECX 
 00000D3A  DC 3C 24			fdivr	qword ptr [ESP]
 00000D3D  DD 1C 24			fstp	qword ptr [ESP]
 00000D40  5A				pop	EDX
 00000D41  58				pop	EAX 
 00000D42  EB 00			jmp	OFFSET $L000863
				;}
 00000D44			$L000863:

 00000D44  5F				pop	EDI
 00000D45  5E				pop	ESI 
 00000D46  5B				pop	EBX 
 00000D47  C9				leave	
 00000D48  C2 0004			retn	000000004h
 00000D4B			UnitTesting_MonteCarlo_PI ENDP

 00000D4B			UnitTesting_Objects_Array_Destructor PROC NEAR 
				;void Destructor(void);
 00000D4B  55				push	EBP
 00000D4C  8B EC			mov	EBP,ESP
 00000D4E  51				push	ECX 
 00000D4F  53				push	EBX 
 00000D50  56				push	ESI 
 00000D51  57				push	EDI 
				;{

				;{64}:if(array != null)
 00000D52  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D55  8B 01			mov	EAX,dword ptr [ECX]
 00000D57  8B C8			mov	ECX,EAX 
 00000D59  50				push	EAX
 00000D5A  33 C0			xor	EAX,EAX
 00000D5C  5A				pop	EDX
 00000D5D  3B D0			cmp	EDX,EAX
 00000D5F  0F 95 C0			setnz	AL
 00000D62  84 C0			test	AL,AL
 00000D64  74 16			jz	OFFSET $L001407

				;{65}:destroy []array;
 00000D66  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D69  8B 01			mov	EAX,dword ptr [ECX]
 00000D6B  8B C8			mov	ECX,EAX 
 00000D6D  85 C0			test	EAX,EAX
 00000D6F  74 0B			jz	OFFSET $L001409
 00000D71  8B F0			mov	ESI,EAX
 00000D73  83 C6 FC			add	ESI,0FFFFFFFCh
 00000D76  56				push	ESI
 00000D77  E8 00000000 E		call	 System_Memory_Destroy
 00000D7C			$L001409:
 00000D7C			$L001407:
				;}
 00000D7C			$L000746:

 00000D7C  5F				pop	EDI
 00000D7D  5E				pop	ESI 
 00000D7E  5B				pop	EBX 
 00000D7F  C9				leave	
 00000D80  C3				ret	
 00000D81			UnitTesting_Objects_Array_Destructor ENDP

 00000D81			UnitTesting_Objects_Array_get_length PROC NEAR 
				;unsigned get::length(void);
 00000D81  55				push	EBP
 00000D82  8B EC			mov	EBP,ESP
 00000D84  51				push	ECX 
 00000D85  53				push	EBX 
 00000D86  56				push	ESI 
 00000D87  57				push	EDI 
				;{

				;{59}:return _length
 00000D88  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D8B  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00000D8E  EB 00			jmp	OFFSET $L000745
				;}
 00000D90			$L000745:

 00000D90  5F				pop	EDI
 00000D91  5E				pop	ESI 
 00000D92  5B				pop	EBX 
 00000D93  C9				leave	
 00000D94  C3				ret	
 00000D95			UnitTesting_Objects_Array_get_length ENDP

 00000D95			UnitTesting_Objects_Array PROC NEAR 
				;void UnitTesting::Objects::Array(void);
 00000D95  55				push	EBP
 00000D96  8B EC			mov	EBP,ESP
 00000D98  51				push	ECX 
 00000D99  53				push	EBX 
 00000D9A  56				push	ESI 
 00000D9B  57				push	EDI 
 00000D9C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000D9F  C7 41 08			mov	dword ptr [ECX+0008h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_Array 
	   00000070 R
 00000DA6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000DA9  E8 000038F9			call	 __member_Init@UnitTesting_Objects_Array

 00000DAE  5F				pop	EDI
 00000DAF  5E				pop	ESI 
 00000DB0  5B				pop	EBX 
 00000DB1  C9				leave	
 00000DB2  C3				ret	
 00000DB3			UnitTesting_Objects_Array ENDP

 00000DB3			UnitTesting_Objects_ArrayOfAutomobiles_Swap PROC NEAR 
				;void Swap( i,  j);
 00000DB3  55				push	EBP
 00000DB4  8B EC			mov	EBP,ESP
 00000DB6  83 EC 10			sub	ESP,000000010h
 00000DB9  53				push	EBX 
 00000DBA  56				push	ESI 
 00000DBB  57				push	EDI 
 00000DBC  89 4D F0			mov	dword ptr [EBP-0010h],ECX
 00000DBF  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00000DC2  B9 00000003			mov	ECX,000000003h 
 00000DC7  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000DCC  F3/ AB			rep stos	dword ptr [EDI]
 00000DCE  8B 4D F0			mov	ECX,dword ptr [EBP-0010h] 
				;{

				;{87}:tmp= array[i];
 00000DD1  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000DD4  E8 000001CA			call	 UnitTesting_Objects_Automobile
 00000DD9  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000DDC  8B 01			mov	EAX,dword ptr [ECX]
 00000DDE  8B C8			mov	ECX,EAX 
 00000DE0  50				push	EAX
 00000DE1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000DE4  5E				pop	ESI
 00000DE5  6B C0 0C			imul	EAX,00000000Ch
 00000DE8  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000DEB  8B 04 30			mov	EAX,dword ptr [ESI+EAX]
 00000DEE  8B F1			mov	ESI,ECX
 00000DF0  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00000DF3  8B FB			mov	EDI,EBX 
 00000DF5  B9 0000000C			mov	ECX,00000000Ch 
 00000DFA  FC				cld	
 00000DFB  F3/ A4			rep movsb	

				;{88}:array[i]= array[j];
 00000DFD  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E00  8B 01			mov	EAX,dword ptr [ECX]
 00000E02  8B C8			mov	ECX,EAX 
 00000E04  50				push	EAX
 00000E05  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E08  5E				pop	ESI
 00000E09  6B C0 0C			imul	EAX,00000000Ch
 00000E0C  8D 04 30			lea	EAX,dword ptr [ESI+EAX]
 00000E0F  50				push	EAX
 00000E10  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E13  8B 01			mov	EAX,dword ptr [ECX]
 00000E15  8B C8			mov	ECX,EAX 
 00000E17  50				push	EAX
 00000E18  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000E1B  5E				pop	ESI
 00000E1C  6B C0 0C			imul	EAX,00000000Ch
 00000E1F  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000E22  8B 04 30			mov	EAX,dword ptr [ESI+EAX]
 00000E25  5B				pop	EBX
 00000E26  89 03			mov	dword ptr [EBX],EAX

				;{89}:array[j]= tmp;
 00000E28  8B 4D F0			mov	ECX,dword ptr [EBP-0010h]
 00000E2B  8B 01			mov	EAX,dword ptr [ECX]
 00000E2D  8B C8			mov	ECX,EAX 
 00000E2F  50				push	EAX
 00000E30  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00000E33  5E				pop	ESI
 00000E34  6B C0 0C			imul	EAX,00000000Ch
 00000E37  8D 04 30			lea	EAX,dword ptr [ESI+EAX]
 00000E3A  50				push	EAX
 00000E3B  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00000E3E  5B				pop	EBX
 00000E3F  89 03			mov	dword ptr [EBX],EAX
				;}
 00000E41			$L000759:

 00000E41  5F				pop	EDI
 00000E42  5E				pop	ESI 
 00000E43  5B				pop	EBX 
 00000E44  C9				leave	
 00000E45  C2 0008			retn	000000008h
 00000E48			UnitTesting_Objects_ArrayOfAutomobiles_Swap ENDP

 00000E48			UnitTesting_Objects_ArrayOfAutomobiles PROC NEAR 
				;void UnitTesting::Objects::ArrayOfAutomobiles( len);
 00000E48  55				push	EBP
 00000E49  8B EC			mov	EBP,ESP
 00000E4B  51				push	ECX 
 00000E4C  53				push	EBX 
 00000E4D  56				push	ESI 
 00000E4E  57				push	EDI 
 00000E4F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E52  E8 FFFFFF3E			call	 UnitTesting_Objects_Array ;base constructor call
 00000E57  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000E5A  C7 41 08			mov	dword ptr [ECX+0008h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles 
	   0000007C R
				;{

				;{77}:array= new UnitTesting::Objects::Automobile[_length= len];
 00000E61  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000E64  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E67  89 41 04			mov	dword ptr [ECX+0004h],EAX
 00000E6A  6B C0 0C			imul	EAX,00000000Ch
 00000E6D  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00000E70  53				push	EBX
 00000E71  8B D8			mov	EBX,EAX
 00000E73  E8 00000000 E		call	 System_Memory_New
 00000E78  85 C0			test	EAX,EAX
 00000E7A  74 14			jz	 $L001414
 00000E7C  8B F0			mov	ESI,EAX 
 00000E7E  8D 3E			lea	EDI,dword ptr [ESI]
 00000E80  8B CB			mov	ECX,EBX 
 00000E82  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00000E87  F3/ AA			rep stos	byte ptr [EDI]
 00000E89  89 1E			mov	dword ptr [ESI],EBX 
 00000E8B  83 C6 04			add	ESI,000000004h
 00000E8E  EB 02			jmp	 $L001415
 00000E90			$L001414:
 00000E90  33 F6			xor	ESI,ESI
 00000E92			$L001415:
 00000E92  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000E95  89 31			mov	dword ptr [ECX],ESI 
 00000E97  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00000E9A  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00000E9D  8B DE			mov	EBX,ESI 
 00000E9F			$L001416:
 00000E9F  8B CB			mov	ECX,EBX 
 00000EA1  E8 000000FD			call	 UnitTesting_Objects_Automobile
 00000EA6  83 C3 0C			add	EBX,00000000Ch 
 00000EA9  3B DF			cmp	EBX,EDI
 00000EAB  75 F2			jnz	OFFSET $L001416
 00000EAD  8B C6			mov	EAX,ESI 
				;}

 00000EAF  5F				pop	EDI
 00000EB0  5E				pop	ESI 
 00000EB1  5B				pop	EBX 
 00000EB2  C9				leave	
 00000EB3  C2 0004			retn	000000004h
 00000EB6			UnitTesting_Objects_ArrayOfAutomobiles ENDP

 00000EB6			UnitTesting_Objects_ArrayOfAutomobiles_getAt PROC NEAR 
				;UnitTesting::Objects::ProxyObject getAt( x);
 00000EB6  55				push	EBP
 00000EB7  8B EC			mov	EBP,ESP
 00000EB9  51				push	ECX 
 00000EBA  53				push	EBX 
 00000EBB  56				push	ESI 
 00000EBC  57				push	EDI 
				;{

				;{82}:return dynamic_cast(UnitTesting::Objects::Automobile, &array[x])
 00000EBD  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000EC0  8B 01			mov	EAX,dword ptr [ECX]
 00000EC2  8B C8			mov	ECX,EAX 
 00000EC4  50				push	EAX
 00000EC5  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00000EC8  5E				pop	ESI
 00000EC9  6B C0 0C			imul	EAX,00000000Ch
 00000ECC  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00000ECF  8B C1			mov	EAX,ECX
 00000ED1  EB 00			jmp	OFFSET $L000757
				;}
 00000ED3			$L000757:

 00000ED3  5F				pop	EDI
 00000ED4  5E				pop	ESI 
 00000ED5  5B				pop	EBX 
 00000ED6  C9				leave	
 00000ED7  C2 0004			retn	000000004h
 00000EDA			UnitTesting_Objects_ArrayOfAutomobiles_getAt ENDP

 00000EDA			UnitTesting_Objects_Automobile_Compare PROC NEAR 
				;int Compare(UnitTesting::Objects::ProxyObject ^ obj);
 00000EDA  55				push	EBP
 00000EDB  8B EC			mov	EBP,ESP
 00000EDD  83 EC 08			sub	ESP,000000008h
 00000EE0  53				push	EBX 
 00000EE1  56				push	ESI 
 00000EE2  57				push	EDI 
 00000EE3  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00000EE6  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00000EE9  B9 00000001			mov	ECX,000000001h 
 00000EEE  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00000EF3  F3/ AB			rep stos	dword ptr [EDI]
 00000EF5  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{41}:other= dynamic_cast(obj);
 00000EF8  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00000EFB  8B C3			mov	EAX,EBX 
 00000EFD  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00000F00  89 03			mov	dword ptr [EBX],EAX

				;{42}:if(speed < other.speed)
 00000F02  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000F05  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F08  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F0B  50				push	EAX
 00000F0C  52				push	EDX 
 00000F0D  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000F10  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F13  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F16  50				push	EAX
 00000F17  52				push	EDX 
 00000F18  E8 00000000 E		call	 FloatingPoint_Compare
 00000F1D  83 F8 00			cmp	EAX,000000000h
 00000F20  F7 D8			neg	EAX
 00000F22  0F 9C C0			setl	AL
 00000F25  84 C0			test	AL,AL
 00000F27  74 09			jz	OFFSET $L001417

				;{43}:return -1
 00000F29  B8 00000001			mov	EAX,000000001h
 00000F2E  F7 D8			neg	EAX
 00000F30  EB 32			jmp	OFFSET $L000737

				; else {
 00000F32			$L001417:

				;{44}:if(speed > other.speed)
 00000F32  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00000F35  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F38  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F3B  50				push	EAX
 00000F3C  52				push	EDX 
 00000F3D  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00000F40  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F43  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F46  50				push	EAX
 00000F47  52				push	EDX 
 00000F48  E8 00000000 E		call	 FloatingPoint_Compare
 00000F4D  83 F8 00			cmp	EAX,000000000h
 00000F50  F7 D8			neg	EAX
 00000F52  0F 9F C0			setg	AL
 00000F55  84 C0			test	AL,AL
 00000F57  74 07			jz	OFFSET $L001419

				;{45}:return 1
 00000F59  B8 00000001			mov	EAX,000000001h
 00000F5E  EB 04			jmp	OFFSET $L000737
 00000F60			$L001419:
 00000F60			$L001418:

				; }

				;{47}:return 0
 00000F60  33 C0			xor	EAX,EAX
 00000F62  EB 00			jmp	OFFSET $L000737
				;}
 00000F64			$L000737:

 00000F64  5F				pop	EDI
 00000F65  5E				pop	ESI 
 00000F66  5B				pop	EBX 
 00000F67  C9				leave	
 00000F68  C2 0004			retn	000000004h
 00000F6B			UnitTesting_Objects_Automobile_Compare ENDP

 00000F6B			UnitTesting_Objects_Automobile_get_Speed PROC NEAR 
				;double get::Speed(void);
 00000F6B  55				push	EBP
 00000F6C  8B EC			mov	EBP,ESP
 00000F6E  51				push	ECX 
 00000F6F  53				push	EBX 
 00000F70  56				push	ESI 
 00000F71  57				push	EDI 
				;{

				;{32}:return speed
 00000F72  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F75  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00000F78  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00000F7B  EB 00			jmp	OFFSET $L000734
				;}
 00000F7D			$L000734:

 00000F7D  5F				pop	EDI
 00000F7E  5E				pop	ESI 
 00000F7F  5B				pop	EBX 
 00000F80  C9				leave	
 00000F81  C3				ret	
 00000F82			UnitTesting_Objects_Automobile_get_Speed ENDP

 00000F82			UnitTesting_Objects_Automobile_put_Speed PROC NEAR 
				;void put::Speed(double val);
 00000F82  55				push	EBP
 00000F83  8B EC			mov	EBP,ESP
 00000F85  51				push	ECX 
 00000F86  53				push	EBX 
 00000F87  56				push	ESI 
 00000F88  57				push	EDI 
				;{

				;{36}:speed= val;
 00000F89  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00000F8C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00000F8F  50				push	EAX
 00000F90  52				push	EDX 
 00000F91  DD 04 24			fld	qword ptr [ESP]
 00000F94  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000F97  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00000F9A			$L000735:
 00000F9A  5A				pop	EDX
 00000F9B  58				pop	EAX 

 00000F9C  5F				pop	EDI
 00000F9D  5E				pop	ESI 
 00000F9E  5B				pop	EBX 
 00000F9F  C9				leave	
 00000FA0  C2 0008			retn	000000008h
 00000FA3			UnitTesting_Objects_Automobile_put_Speed ENDP

 00000FA3			UnitTesting_Objects_Automobile PROC NEAR 
				;void UnitTesting::Objects::Automobile(void);
 00000FA3  55				push	EBP
 00000FA4  8B EC			mov	EBP,ESP
 00000FA6  51				push	ECX 
 00000FA7  53				push	EBX 
 00000FA8  56				push	ESI 
 00000FA9  57				push	EDI 
 00000FAA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FAD  E8 00000016			call	 UnitTesting_Objects_ProxyObject ;base constructor call
 00000FB2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000FB5  C7 01 00000088 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_Automobile 
 00000FBB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00000FBE  E8 00003702			call	 __member_Init@UnitTesting_Objects_Automobile 
				;{
				;}

 00000FC3  5F				pop	EDI
 00000FC4  5E				pop	ESI 
 00000FC5  5B				pop	EBX 
 00000FC6  C9				leave	
 00000FC7  C3				ret	
 00000FC8			UnitTesting_Objects_Automobile ENDP

 00000FC8			UnitTesting_Objects_ProxyObject PROC NEAR 
				;void UnitTesting::Objects::ProxyObject(void);
 00000FC8  55				push	EBP
 00000FC9  8B EC			mov	EBP,ESP
 00000FCB  51				push	ECX 
 00000FCC  53				push	EBX 
 00000FCD  56				push	ESI 
 00000FCE  57				push	EDI 
 00000FCF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00000FD2  C7 01 0000008C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject 

 00000FD8  5F				pop	EDI
 00000FD9  5E				pop	ESI 
 00000FDA  5B				pop	EBX 
 00000FDB  C9				leave	
 00000FDC  C3				ret	
 00000FDD			UnitTesting_Objects_ProxyObject ENDP

 00000FDD			UnitTesting_Rnd_NextDbl PROC NEAR 
				;double NextDbl(void);
 00000FDD  55				push	EBP
 00000FDE  8B EC			mov	EBP,ESP
 00000FE0  51				push	ECX 
 00000FE1  53				push	EBX 
 00000FE2  56				push	ESI 
 00000FE3  57				push	EDI 
				;{

				;{45}:return UnitTesting::Rnd::NextDblEx()
 00000FE4  E8 0000004E			call	 UnitTesting_Rnd_NextDblEx
 00000FE9  EB 00			jmp	OFFSET $L000522
				;}
 00000FEB			$L000522:

 00000FEB  5F				pop	EDI
 00000FEC  5E				pop	ESI 
 00000FED  5B				pop	EBX 
 00000FEE  C9				leave	
 00000FEF  C3				ret	
 00000FF0			UnitTesting_Rnd_NextDbl ENDP

 00000FF0			UnitTesting_Rnd_NextInt PROC NEAR 
				;double NextInt(void);
 00000FF0  55				push	EBP
 00000FF1  8B EC			mov	EBP,ESP
 00000FF3  51				push	ECX 
 00000FF4  53				push	EBX 
 00000FF5  56				push	ESI 
 00000FF6  57				push	EDI 
				;{

				;{50}:return UnitTesting::Rnd::NextIntEx()
 00000FF7  E8 00000132			call	 UnitTesting_Rnd_NextIntEx
 00000FFC  EB 00			jmp	OFFSET $L000523
				;}
 00000FFE			$L000523:

 00000FFE  5F				pop	EDI
 00000FFF  5E				pop	ESI 
 00001000  5B				pop	EBX 
 00001001  C9				leave	
 00001002  C3				ret	
 00001003			UnitTesting_Rnd_NextInt ENDP

 00001003			UnitTesting_Rnd PROC NEAR 
				;void UnitTesting::Rnd(int seedx);
 00001003  55				push	EBP
 00001004  8B EC			mov	EBP,ESP
 00001006  51				push	ECX 
 00001007  53				push	EBX 
 00001008  56				push	ESI 
 00001009  57				push	EDI 
 0000100A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000100D  E8 000036CA			call	 __member_Init@UnitTesting_Rnd
				;{

				;{15}:UnitTesting::Rnd::seed= seedx;
 00001012  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001015  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX
				;}

 0000101A  5F				pop	EDI
 0000101B  5E				pop	ESI 
 0000101C  5B				pop	EBX 
 0000101D  C9				leave	
 0000101E  C2 0004			retn	000000004h
 00001021			UnitTesting_Rnd ENDP

 00001021			UnitTesting_Rnd_setSeed PROC NEAR 
				;void setSeed(long s);
 00001021  55				push	EBP
 00001022  8B EC			mov	EBP,ESP
 00001024  51				push	ECX 
 00001025  53				push	EBX 
 00001026  56				push	ESI 
 00001027  57				push	EDI 
				;{

				;{21}:UnitTesting::Rnd::seed= s;
 00001028  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000102B  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX
				;}
 00001030			$L000517:

 00001030  5F				pop	EDI
 00001031  5E				pop	ESI 
 00001032  5B				pop	EBX 
 00001033  C9				leave	
 00001034  C2 0004			retn	000000004h
 00001037			UnitTesting_Rnd_setSeed ENDP

 00001037			UnitTesting_Rnd_NextDblEx PROC NEAR 
				;double UnitTesting::Rnd::NextDblEx(void);
 00001037  55				push	EBP
 00001038  8B EC			mov	EBP,ESP
 0000103A  51				push	ECX 
 0000103B  53				push	EBX 
 0000103C  56				push	ESI 
 0000103D  57				push	EDI 
				;{

				;{26}:UnitTesting::Rnd::seed= UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed / UnitTesting::Rnd::q);
 0000103E  8D 1D 00001214 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 00001044  8B 03			mov	EAX,dword ptr [EBX]
 00001046  50				push	EAX
 00001047  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 0000104D  8B 03			mov	EAX,dword ptr [EBX]
 0000104F  50				push	EAX
 00001050  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001056  8B 03			mov	EAX,dword ptr [EBX]
 00001058  8B C8			mov	ECX,EAX
 0000105A  58				pop	EAX
 0000105B  33 D2			xor	EDX,EDX
 0000105D  F7 F9			idiv	ECX
 0000105F  8B C2			mov	EAX,EDX 
 00001061  59				pop	ECX
 00001062  99				cdq	
 00001063  0F AF C1			imul	EAX,ECX
 00001066  52				push	EDX
 00001067  50				push	EAX 
 00001068  8D 1D 00001220 R		lea	EBX,OFFSET UnitTesting_Rnd_r
 0000106E  8B 03			mov	EAX,dword ptr [EBX]
 00001070  50				push	EAX
 00001071  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001077  8B 03			mov	EAX,dword ptr [EBX]
 00001079  50				push	EAX
 0000107A  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001080  8B 03			mov	EAX,dword ptr [EBX]
 00001082  9B DB E2			fclex
 00001085  50				push	EAX
 00001086  E8 00000000 E		call	 FloatingPoint_FromInt
 0000108B  50				push	EAX
 0000108C  52				push	EDX 
 0000108D  DD 04 24			fld	qword ptr [ESP]
 00001090  59				pop	ECX
 00001091  59				pop	ECX 
 00001092  E8 00000000 E		call	 FloatingPoint_FromInt
 00001097  50				push	EAX
 00001098  52				push	EDX 
 00001099  DC 3C 24			fdivr	qword ptr [ESP]
 0000109C  DD 1C 24			fstp	qword ptr [ESP]
 0000109F  9B DB E2			fclex
 000010A2  DD 04 24			fld	qword ptr [ESP]
 000010A5  59				pop	ECX
 000010A6  59				pop	ECX 
 000010A7  E8 00000000 E		call	 FloatingPoint_FromInt
 000010AC  50				push	EAX
 000010AD  52				push	EDX 
 000010AE  DC 0C 24			fmul	qword ptr [ESP]
 000010B1  DD 1C 24			fstp	qword ptr [ESP]
 000010B4  DD 04 24			fld	qword ptr [ESP]
 000010B7  59				pop	ECX
 000010B8  59				pop	ECX 
 000010B9  E8 00000000 E		call	 FloatingPoint_FromInt64
 000010BE  50				push	EAX
 000010BF  52				push	EDX 
 000010C0  DD 04 24			fld	qword ptr [ESP]
 000010C3  D8 E1			fsub	st,st(1)
 000010C5  DF 3C 24			fistp	qword ptr [ESP]
 000010C8  58				pop	EAX
 000010C9  5A				pop	EDX 
 000010CA  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{28}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 000010CF  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000010D5  8B 03			mov	EAX,dword ptr [EBX]
 000010D7  50				push	EAX
 000010D8  33 C0			xor	EAX,EAX
 000010DA  5A				pop	EDX
 000010DB  3B D0			cmp	EDX,EAX
 000010DD  0F 9C C0			setl	AL
 000010E0  84 C0			test	AL,AL
 000010E2  74 0A			jz	 $L001422
 000010E4  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000010EA  8B 03			mov	EAX,dword ptr [EBX]
 000010EC  EB 02			jmp	 $L001423
 000010EE			$L001422:
 000010EE  33 C0			xor	EAX,EAX
 000010F0			$L001423:
 000010F0  F8				clc	
 000010F1  01 05 00001210 R		add	 UnitTesting_Rnd_seed,EAX

				;{30}:return UnitTesting::Rnd::seed / UnitTesting::Rnd::m
 000010F7  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000010FD  8B 03			mov	EAX,dword ptr [EBX]
 000010FF  50				push	EAX
 00001100  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 00001106  8B 03			mov	EAX,dword ptr [EBX]
 00001108  9B DB E2			fclex
 0000110B  50				push	EAX
 0000110C  E8 00000000 E		call	 FloatingPoint_FromInt
 00001111  50				push	EAX
 00001112  52				push	EDX 
 00001113  DD 04 24			fld	qword ptr [ESP]
 00001116  59				pop	ECX
 00001117  59				pop	ECX 
 00001118  E8 00000000 E		call	 FloatingPoint_FromInt
 0000111D  50				push	EAX
 0000111E  52				push	EDX 
 0000111F  DC 3C 24			fdivr	qword ptr [ESP]
 00001122  DD 1C 24			fstp	qword ptr [ESP]
 00001125  5A				pop	EDX
 00001126  58				pop	EAX 
 00001127  EB 00			jmp	OFFSET $L000519
				;}
 00001129			$L000519:

 00001129  5F				pop	EDI
 0000112A  5E				pop	ESI 
 0000112B  5B				pop	EBX 
 0000112C  C9				leave	
 0000112D  C3				ret	
 0000112E			UnitTesting_Rnd_NextDblEx ENDP

 0000112E			UnitTesting_Rnd_NextIntEx PROC NEAR 
				;double UnitTesting::Rnd::NextIntEx(void);
 0000112E  55				push	EBP
 0000112F  8B EC			mov	EBP,ESP
 00001131  51				push	ECX 
 00001132  53				push	EBX 
 00001133  56				push	ESI 
 00001134  57				push	EDI 
				;{

				;{36}:UnitTesting::Rnd::seed= UnitTesting::Rnd::a * (UnitTesting::Rnd::seed % UnitTesting::Rnd::q) - UnitTesting::Rnd::r * (UnitTesting::Rnd::seed * UnitTesting::Rnd::q);
 00001135  8D 1D 00001214 R		lea	EBX,OFFSET UnitTesting_Rnd_a
 0000113B  8B 03			mov	EAX,dword ptr [EBX]
 0000113D  50				push	EAX
 0000113E  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 00001144  8B 03			mov	EAX,dword ptr [EBX]
 00001146  50				push	EAX
 00001147  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 0000114D  8B 03			mov	EAX,dword ptr [EBX]
 0000114F  8B C8			mov	ECX,EAX
 00001151  58				pop	EAX
 00001152  33 D2			xor	EDX,EDX
 00001154  F7 F9			idiv	ECX
 00001156  8B C2			mov	EAX,EDX 
 00001158  59				pop	ECX
 00001159  99				cdq	
 0000115A  0F AF C1			imul	EAX,ECX
 0000115D  52				push	EDX
 0000115E  50				push	EAX 
 0000115F  8D 1D 00001220 R		lea	EBX,OFFSET UnitTesting_Rnd_r
 00001165  8B 03			mov	EAX,dword ptr [EBX]
 00001167  50				push	EAX
 00001168  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 0000116E  8B 03			mov	EAX,dword ptr [EBX]
 00001170  50				push	EAX
 00001171  8D 1D 0000121C R		lea	EBX,OFFSET UnitTesting_Rnd_q
 00001177  8B 03			mov	EAX,dword ptr [EBX]
 00001179  59				pop	ECX
 0000117A  99				cdq	
 0000117B  0F AF C1			imul	EAX,ECX
 0000117E  9B DB E2			fclex
 00001181  52				push	EDX
 00001182  50				push	EAX 
 00001183  E8 00000000 E		call	 FloatingPoint_FromInt64
 00001188  50				push	EAX
 00001189  52				push	EDX 
 0000118A  DD 04 24			fld	qword ptr [ESP]
 0000118D  59				pop	ECX
 0000118E  59				pop	ECX 
 0000118F  E8 00000000 E		call	 FloatingPoint_FromInt
 00001194  50				push	EAX
 00001195  52				push	EDX 
 00001196  DC 0C 24			fmul	qword ptr [ESP]
 00001199  DF 3C 24			fistp	qword ptr [ESP]
 0000119C  E8 00000000 E		call	 FloatingPoint_FromInt64
 000011A1  50				push	EAX
 000011A2  52				push	EDX 
 000011A3  DD 04 24			fld	qword ptr [ESP]
 000011A6  59				pop	ECX
 000011A7  59				pop	ECX 
 000011A8  E8 00000000 E		call	 FloatingPoint_FromInt64
 000011AD  50				push	EAX
 000011AE  52				push	EDX 
 000011AF  DD 04 24			fld	qword ptr [ESP]
 000011B2  D8 E1			fsub	st,st(1)
 000011B4  DF 3C 24			fistp	qword ptr [ESP]
 000011B7  58				pop	EAX
 000011B8  5A				pop	EDX 
 000011B9  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{38}:UnitTesting::Rnd::seed+= (UnitTesting::Rnd::seed < 0 ? UnitTesting::Rnd::m : 0);
 000011BE  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000011C4  8B 03			mov	EAX,dword ptr [EBX]
 000011C6  50				push	EAX
 000011C7  33 C0			xor	EAX,EAX
 000011C9  5A				pop	EDX
 000011CA  3B D0			cmp	EDX,EAX
 000011CC  0F 9C C0			setl	AL
 000011CF  84 C0			test	AL,AL
 000011D1  74 0A			jz	 $L001424
 000011D3  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000011D9  8B 03			mov	EAX,dword ptr [EBX]
 000011DB  EB 02			jmp	 $L001425
 000011DD			$L001424:
 000011DD  33 C0			xor	EAX,EAX
 000011DF			$L001425:
 000011DF  F8				clc	
 000011E0  01 05 00001210 R		add	 UnitTesting_Rnd_seed,EAX

				;{40}:return UnitTesting::Rnd::seed % UnitTesting::Rnd::m
 000011E6  8D 1D 00001210 R		lea	EBX,OFFSET UnitTesting_Rnd_seed
 000011EC  8B 03			mov	EAX,dword ptr [EBX]
 000011EE  50				push	EAX
 000011EF  8D 1D 00001218 R		lea	EBX,OFFSET UnitTesting_Rnd_m
 000011F5  8B 03			mov	EAX,dword ptr [EBX]
 000011F7  8B C8			mov	ECX,EAX
 000011F9  58				pop	EAX
 000011FA  33 D2			xor	EDX,EDX
 000011FC  F7 F9			idiv	ECX
 000011FE  8B C2			mov	EAX,EDX 
 00001200  50				push	EAX
 00001201  E8 00000000 E		call	 FloatingPoint_FromInt
 00001206  EB 00			jmp	OFFSET $L000521
				;}
 00001208			$L000521:

 00001208  5F				pop	EDI
 00001209  5E				pop	ESI 
 0000120A  5B				pop	EBX 
 0000120B  C9				leave	
 0000120C  C3				ret	
 0000120D			UnitTesting_Rnd_NextIntEx ENDP

 0000120D			UnitTesting_Shape PROC NEAR 
				;void UnitTesting::Shape(void);
 0000120D  55				push	EBP
 0000120E  8B EC			mov	EBP,ESP
 00001210  51				push	ECX 
 00001211  53				push	EBX 
 00001212  56				push	ESI 
 00001213  57				push	EDI 
 00001214  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001217  C7 01 00000018 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Shape 

 0000121D  5F				pop	EDI
 0000121E  5E				pop	ESI 
 0000121F  5B				pop	EBX 
 00001220  C9				leave	
 00001221  C3				ret	
 00001222			UnitTesting_Shape ENDP

 00001222			UnitTesting_ShapeFactoryCreator_Destructor PROC NEAR 
				;void Destructor(void);
 00001222  55				push	EBP
 00001223  8B EC			mov	EBP,ESP
 00001225  51				push	ECX 
 00001226  53				push	EBX 
 00001227  56				push	ESI 
 00001228  57				push	EDI 
				;{

				;{299}:if(ptr3 != null)
 00001229  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000122C  8B 01			mov	EAX,dword ptr [ECX]
 0000122E  8B C8			mov	ECX,EAX 
 00001230  51				push	ECX
 00001231  33 C0			xor	EAX,EAX
 00001233  5B				pop	EBX
 00001234  3B D8			cmp	EBX,EAX
 00001236  0F 95 C0			setnz	AL
 00001239  84 C0			test	AL,AL
 0000123B  74 18			jz	OFFSET $L001427

				;{300}:destroy ptr3;
 0000123D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001240  8B 01			mov	EAX,dword ptr [ECX]
 00001242  8B C8			mov	ECX,EAX 
 00001244  8B F1			mov	ESI,ECX
 00001246  85 C9			test	ECX,ECX
 00001248  74 05			jz	OFFSET $L001430
 0000124A  8B 01			mov	EAX,dword ptr [ECX] 
 0000124C  FF 50 10			call	dword ptr [EAX+0010h]
 0000124F			$L001430:
 0000124F  56				push	ESI
 00001250  E8 00000000 E		call	 System_Memory_Destroy
 00001255			$L001427:

				;{302}:if(null != ptr3)
 00001255  33 C0			xor	EAX,EAX
 00001257  50				push	EAX
 00001258  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000125B  8B 01	mov	EAX,dword ptr [ECX]
 0000125D  8B C8			mov	ECX,EAX 
 0000125F  59				pop	ECX
 00001260  3B C8			cmp	ECX,EAX
 00001262  0F 95 C0			setnz	AL
 00001265  84 C0			test	AL,AL
 00001267  74 18			jz	OFFSET $L001431

				;{303}:destroy ptr3;
 00001269  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000126C  8B 01			mov	EAX,dword ptr [ECX]
 0000126E  8B C8			mov	ECX,EAX 
 00001270  8B F1			mov	ESI,ECX
 00001272  85 C9			test	ECX,ECX
 00001274  74 05			jz	OFFSET $L001434
 00001276  8B 01			mov	EAX,dword ptr [ECX] 
 00001278  FF 50 10			call	dword ptr [EAX+0010h]
 0000127B			$L001434:
 0000127B  56				push	ESI
 0000127C  E8 00000000 E		call	 System_Memory_Destroy
 00001281			$L001431:
				;}
 00001281			$L000711:

 00001281  5F				pop	EDI
 00001282  5E				pop	ESI 
 00001283  5B				pop	EBX 
 00001284  C9				leave	
 00001285  C3				ret	
 00001286			UnitTesting_ShapeFactoryCreator_Destructor ENDP

 00001286			UnitTesting_ShapeFactoryCreator PROC NEAR 
				;void UnitTesting::ShapeFactoryCreator(void);
 00001286  55				push	EBP
 00001287  8B EC			mov	EBP,ESP
 00001289  51				push	ECX 
 0000128A  53				push	EBX 
 0000128B  56				push	ESI 
 0000128C  57				push	EDI 
 0000128D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001290  E8 00003488			call	 __member_Init@UnitTesting_ShapeFactoryCreator

 00001295  5F				pop	EDI
 00001296  5E				pop	ESI 
 00001297  5B				pop	EBX 
 00001298  C9				leave	
 00001299  C3				ret	
 0000129A			UnitTesting_ShapeFactoryCreator ENDP

 0000129A			UnitTesting_ShapeFactoryCreator_Create PROC NEAR 
				;UnitTesting::Shape UnitTesting::ShapeFactoryCreator::Create(string name);
 0000129A  55				push	EBP
 0000129B  8B EC			mov	EBP,ESP
 0000129D  83 EC 08			sub	ESP,000000008h
 000012A0  53				push	EBX 
 000012A1  56				push	ESI 
 000012A2  57				push	EDI 
 000012A3  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 000012A6  B9 00000001			mov	ECX,000000001h
 000012AB  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 000012B0  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{245}:obj_ptr= new UnitTesting::Circle();
 000012B2  6A 0C			push	00000000Ch
 000012B4  E8 00000000 E		call	 System_Memory_New
 000012B9  85 C0			test	EAX,EAX
 000012BB  74 12			jz	 $L001436
 000012BD  8B F0			mov	ESI,EAX
 000012BF  8D 3E			lea	EDI,dword ptr [ESI]
 000012C1  B9 00000003			mov	ECX,000000003h 
 000012C6  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000012CB  F3/ AB			rep stos	dword ptr [EDI]
 000012CD  EB 02			jmp	 $L001437
 000012CF			$L001436:
 000012CF  33 F6			xor	ESI,ESI
 000012D1			$L001437:
 000012D1  89 75 FC			mov	dword ptr [EBP-0004h],ESI 
 000012D4  8B CE			mov	ECX,ESI 
 000012D6  E8 FFFFF462			call	 UnitTesting_Circle
 000012DB  8B C6			mov	EAX,ESI 

				;{251}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 000012DD  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 000012E0  8B F1			mov	ESI,ECX
 000012E2  85 C9			test	ECX,ECX
 000012E4  74 05			jz	OFFSET $L001439
 000012E6  8B 01			mov	EAX,dword ptr [ECX] 
 000012E8  FF 50 10			call	dword ptr [EAX+0010h]
 000012EB			$L001439:
 000012EB  56				push	ESI
 000012EC  E8 00000000 E		call	 System_Memory_Destroy

				;{277}:if(name == "Circle")
 000012F1  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000012F4  50				push	EAX
 000012F5  8D 05 000007DB R		lea	EAX,OFFSET $S000652
 000012FB  5F				pop	EDI
 000012FC  8B F0			mov	ESI,EAX
 000012FE  50				push	EAX
 000012FF  E8 00000000 E		call	 StringHandling_StringLength
 00001304  50				push	EAX 
 00001305  56				push	ESI 
 00001306  57				push	EDI 
 00001307  E8 00000000 E		call	 StringHandling_StringCompare 
 0000130C  83 F8 00			cmp	EAX,000000000h
 0000130F  0F 94 C0			setz	AL
 00001312  84 C0			test	AL,AL
 00001314  74 32			jz	OFFSET $L001440
				;{

				;{279}:return new UnitTesting::Circle()
 00001316  6A 0C			push	00000000Ch
 00001318  E8 00000000 E		call	 System_Memory_New
 0000131D  85 C0			test	EAX,EAX
 0000131F  74 12			jz	 $L001442
 00001321  8B F0			mov	ESI,EAX
 00001323  8D 3E			lea	EDI,dword ptr [ESI]
 00001325  B9 00000003			mov	ECX,000000003h 
 0000132A  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000132F  F3/ AB			rep stos	dword ptr [EDI]
 00001331  EB 02			jmp	 $L001443
 00001333			$L001442:
 00001333  33 F6			xor	ESI,ESI
 00001335			$L001443:
 00001335  8B CE			mov	ECX,ESI 
 00001337  E8 FFFFF401			call	 UnitTesting_Circle
 0000133C  8B C6			mov	EAX,ESI 
 0000133E  E9 000000A9			jmp	OFFSET $L000708
				;}
 00001343  E9 000000A0			jmp	OFFSET $L001441

				; else {
 00001348			$L001440:

				;{280}:if(name == "Square")
 00001348  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000134B  50				push	EAX
 0000134C  8D 05 00000BE2 R		lea	EAX,OFFSET $S000678
 00001352  5F				pop	EDI
 00001353  8B F0			mov	ESI,EAX
 00001355  50				push	EAX
 00001356  E8 00000000 E		call	 StringHandling_StringLength
 0000135B  50				push	EAX 
 0000135C  56				push	ESI 
 0000135D  57				push	EDI 
 0000135E  E8 00000000 E		call	 StringHandling_StringCompare 
 00001363  83 F8 00			cmp	EAX,000000000h
 00001366  0F 94 C0			setz	AL
 00001369  84 C0			test	AL,AL
 0000136B  74 2C			jz	OFFSET $L001444
				;{

				;{282}:return new UnitTesting::Square()
 0000136D  6A 14			push	000000014h
 0000136F  E8 00000000 E		call	 System_Memory_New
 00001374  85 C0			test	EAX,EAX
 00001376  74 12			jz	 $L001446
 00001378  8B F0			mov	ESI,EAX
 0000137A  8D 3E			lea	EDI,dword ptr [ESI]
 0000137C  B9 00000005			mov	ECX,000000005h 
 00001381  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00001386  F3/ AB			rep stos	dword ptr [EDI]
 00001388  EB 02			jmp	 $L001447
 0000138A			$L001446:
 0000138A  33 F6			xor	ESI,ESI
 0000138C			$L001447:
 0000138C  8B CE			mov	ECX,ESI 
 0000138E  E8 000004D3			call	 UnitTesting_Square
 00001393  8B C6			mov	EAX,ESI 
 00001395  EB 55			jmp	OFFSET $L000708
				;}
 00001397  EB 4F			jmp	OFFSET $L001445

				; else {
 00001399			$L001444:

				;{283}:if(name == "Triangle")
 00001399  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000139C  50				push	EAX
 0000139D  8D 05 00000D80 R		lea	EAX,OFFSET $S000698
 000013A3  5F				pop	EDI
 000013A4  8B F0			mov	ESI,EAX
 000013A6  50				push	EAX
 000013A7  E8 00000000 E		call	 StringHandling_StringLength
 000013AC  50				push	EAX 
 000013AD  56				push	ESI 
 000013AE  57				push	EDI 
 000013AF  E8 00000000 E		call	 StringHandling_StringCompare 
 000013B4  83 F8 00			cmp	EAX,000000000h
 000013B7  0F 94 C0			setz	AL
 000013BA  84 C0			test	AL,AL
 000013BC  74 2A			jz	OFFSET $L001448
				;{

				;{285}:return new UnitTesting::Triangle()
 000013BE  6A 14			push	000000014h
 000013C0  E8 00000000 E		call	 System_Memory_New
 000013C5  85 C0			test	EAX,EAX
 000013C7  74 12			jz	 $L001450
 000013C9  8B F0			mov	ESI,EAX
 000013CB  8D 3E			lea	EDI,dword ptr [ESI]
 000013CD  B9 00000005			mov	ECX,000000005h 
 000013D2  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000013D7  F3/ AB			rep stos	dword ptr [EDI]
 000013D9  EB 02			jmp	 $L001451
 000013DB			$L001450:
 000013DB  33 F6			xor	ESI,ESI
 000013DD			$L001451:
 000013DD  8B CE			mov	ECX,ESI 
 000013DF  E8 00003130			call	 UnitTesting_Triangle
 000013E4  8B C6			mov	EAX,ESI 
 000013E6  EB 04			jmp	OFFSET $L000708
				;}
 000013E8			$L001448:
 000013E8			$L001445:

				; }
 000013E8			$L001441:

				; }

				;{288}:return null
 000013E8  33 C0			xor	EAX,EAX
 000013EA  EB 00			jmp	OFFSET $L000708
				;}
 000013EC			$L000708:

 000013EC  5F				pop	EDI
 000013ED  5E				pop	ESI 
 000013EE  5B				pop	EBX 
 000013EF  C9				leave	
 000013F0  C2 0004			retn	000000004h
 000013F3			UnitTesting_ShapeFactoryCreator_Create ENDP

 000013F3			UnitTesting_SimpleObject_Destructor PROC NEAR 
				;void Destructor(void);
 000013F3  55				push	EBP
 000013F4  8B EC			mov	EBP,ESP
 000013F6  51				push	ECX 
 000013F7  53				push	EBX 
 000013F8  56				push	ESI 
 000013F9  57				push	EDI 
				;{

				;{105}:Console::WriteLn("Destroying a Simple Object...");
 000013FA  8D 05 000008E5 R		lea	EAX,OFFSET $S000772
 00001400  6A 00			push	000000000h
 00001402  50				push	EAX 
 00001403  E8 00000000 E		call	 Console_WriteString
 00001408  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000140D			$L000771:

 0000140D  5F				pop	EDI
 0000140E  5E				pop	ESI 
 0000140F  5B				pop	EBX 
 00001410  C9				leave	
 00001411  C3				ret	
 00001412			UnitTesting_SimpleObject_Destructor ENDP

 00001412			UnitTesting_SimpleObject PROC NEAR 
				;void UnitTesting::SimpleObject(void);
 00001412  55				push	EBP
 00001413  8B EC			mov	EBP,ESP
 00001415  51				push	ECX 
 00001416  53				push	EBX 
 00001417  56				push	ESI 
 00001418  57				push	EDI 
 00001419  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000141C  C7 01 0000003C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_SimpleObject 

 00001422  5F				pop	EDI
 00001423  5E				pop	ESI 
 00001424  5B				pop	EBX 
 00001425  C9				leave	
 00001426  C3				ret	
 00001427			UnitTesting_SimpleObject ENDP

 00001427			UnitTesting_SortDoubleProxy_PrintObject PROC NEAR 
				;void PrintObject(UnitTesting::SimpleObject ref obj);
 00001427  55				push	EBP
 00001428  8B EC			mov	EBP,ESP
 0000142A  83 EC 08			sub	ESP,000000008h
 0000142D  53				push	EBX 
 0000142E  56				push	ESI 
 0000142F  57				push	EDI 
 00001430  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00001433  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00001436  B9 00000001			mov	ECX,000000001h 
 0000143B  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001440  F3/ AB			rep stos	dword ptr [EDI]
 00001442  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{255}:dbl= dynamic_cast(&obj);
 00001445  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001448  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 0000144B  89 03			mov	dword ptr [EBX],EAX

				;{257}:Console::WriteLn("A double proxy = ", dbl.val);
 0000144D  8D 05 00000769 R		lea	EAX,OFFSET $S000857
 00001453  6A 00			push	000000000h
 00001455  50				push	EAX 
 00001456  E8 00000000 E		call	 Console_WriteString
 0000145B  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000145E  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00001461  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00001464  50				push	EAX 
 00001465  52				push	EDX 
 00001466  E8 00000000 E		call	 Console_WriteDouble 
 0000146B  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001470			$L000854:

 00001470  5F				pop	EDI
 00001471  5E				pop	ESI 
 00001472  5B				pop	EBX 
 00001473  C9				leave	
 00001474  C2 0004			retn	000000004h
 00001477			UnitTesting_SortDoubleProxy_PrintObject ENDP

 00001477			UnitTesting_SortDoubleProxy_Sort PROC NEAR 
				;void Sort(UnitTesting::DoubleProxy [] array, int n, UnitTesting::SwapperObject ref swapper);
 00001477  55				push	EBP
 00001478  8B EC			mov	EBP,ESP
 0000147A  83 EC 0C			sub	ESP,00000000Ch
 0000147D  53				push	EBX 
 0000147E  56				push	ESI 
 0000147F  57				push	EDI 
 00001480  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001483  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001486  B9 00000002			mov	ECX,000000002h 
 0000148B  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001490  F3/ AB			rep stos	dword ptr [EDI]
 00001492  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{199}:for(index= 1; index < n; index++ )
 00001495  B8 00000001			mov	EAX,000000001h
 0000149A  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000149D  EB 06			jmp	OFFSET $L001453
 0000149F			$L001454:
 0000149F  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 000014A2  FF 45 FC			inc	dword ptr [EBP-4]
 000014A5			$L001453:
 000014A5  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014A8  50				push	EAX
 000014A9  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000014AC  5A				pop	EDX
 000014AD  3B D0			cmp	EDX,EAX
 000014AF  0F 9C C0			setl	AL
 000014B2  84 C0			test	AL,AL
 000014B4  0F 84 0000009C		jz	OFFSET $L001455
				;{

				;{201}:for(left= index - 1; left >= 0; --left)
 000014BA  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000014BD  50				push	EAX
 000014BE  B8 00000001			mov	EAX,000000001h
 000014C3  5A				pop	EDX
 000014C4  2B D0			sub	EDX,EAX
 000014C6  8B C2			mov	EAX,EDX
 000014C8  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000014CB  EB 06			jmp	OFFSET $L001456
 000014CD			$L001457:
 000014CD  FF 4D F8			dec	dword ptr [EBP-8]
 000014D0  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000014D3			$L001456:
 000014D3  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014D6  50				push	EAX
 000014D7  33 C0			xor	EAX,EAX
 000014D9  5A				pop	EDX
 000014DA  3B D0			cmp	EDX,EAX
 000014DC  0F 9D C0			setge	AL
 000014DF  84 C0			test	AL,AL
 000014E1  74 6E			jz	OFFSET $L001458
				;{

				;{204}:if(swapper.lessThan(array[left + 1], array[left]))
 000014E3  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000014E6  8B C3			mov	EAX,EBX 
 000014E8  50				push	EAX
 000014E9  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014EC  5E				pop	ESI
 000014ED  6B C0 0C			imul	EAX,00000000Ch
 000014F0  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000014F3  51				push	ECX 
 000014F4  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000014F7  8B C3			mov	EAX,EBX 
 000014F9  50				push	EAX
 000014FA  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000014FD  50				push	EAX
 000014FE  B8 00000001			mov	EAX,000000001h
 00001503  5A				pop	EDX
 00001504  03 C2			add	EAX,EDX
 00001506  5E				pop	ESI
 00001507  6B C0 0C			imul	EAX,00000000Ch
 0000150A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000150D  51				push	ECX
 0000150E  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 00001511  8B 11			mov	EDX,dword ptr [ECX]
 00001513  FF 12			call	dword ptr [EDX]
 00001515  84 C0			test	AL,AL
 00001517  74 33			jz	OFFSET $L001459
				;{

				;{207}:swapper.Swap(array[left + 1], array[left]);
 00001519  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000151C  8B C3			mov	EAX,EBX 
 0000151E  50				push	EAX
 0000151F  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001522  5E				pop	ESI
 00001523  6B C0 0C			imul	EAX,00000000Ch
 00001526  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001529  51				push	ECX 
 0000152A  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000152D  8B C3			mov	EAX,EBX 
 0000152F  50				push	EAX
 00001530  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001533  50				push	EAX
 00001534  B8 00000001			mov	EAX,000000001h
 00001539  5A				pop	EDX
 0000153A  03 C2			add	EAX,EDX
 0000153C  5E				pop	ESI
 0000153D  6B C0 0C			imul	EAX,00000000Ch
 00001540  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00001543  51				push	ECX
 00001544  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 00001547  8B 11			mov	EDX,dword ptr [ECX]
 00001549  FF 52 04			call	dword ptr [EDX+0004h]
				;}
 0000154C			$L001459:
				;}
 0000154C  E9 FFFFFF7C			jmp	OFFSET $L001457 
 00001551			$L001458:
				;}
 00001551  E9 FFFFFF49			jmp	OFFSET $L001454 
 00001556			$L001455:
				;}
 00001556			$L000833:

 00001556  5F				pop	EDI
 00001557  5E				pop	ESI 
 00001558  5B				pop	EBX 
 00001559  C9				leave	
 0000155A  C2 000C			retn	00000000Ch
 0000155D			UnitTesting_SortDoubleProxy_Sort ENDP

 0000155D			UnitTesting_SortDoubleProxy_Sort2 PROC NEAR 
				;void Sort2(double [] array, int n);
 0000155D  55				push	EBP
 0000155E  8B EC			mov	EBP,ESP
 00001560  83 EC 0C			sub	ESP,00000000Ch
 00001563  53				push	EBX 
 00001564  56				push	ESI 
 00001565  57				push	EDI 
 00001566  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001569  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 0000156C  B9 00000002			mov	ECX,000000002h 
 00001571  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001576  F3/ AB			rep stos	dword ptr [EDI]
 00001578  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{222}:for(index= 1; index < n; index++ )
 0000157B  B8 00000001			mov	EAX,000000001h
 00001580  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001583  EB 06			jmp	OFFSET $L001461
 00001585			$L001462:
 00001585  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00001588  FF 45 FC			inc	dword ptr [EBP-4]
 0000158B			$L001461:
 0000158B  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000158E  50				push	EAX
 0000158F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001592  5A				pop	EDX
 00001593  3B D0			cmp	EDX,EAX
 00001595  0F 9C C0			setl	AL
 00001598  84 C0			test	AL,AL
 0000159A  0F 84 000000AC		jz	OFFSET $L001463
				;{

				;{224}:for(left= index - 1; left >= 0; left-- )
 000015A0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000015A3  50				push	EAX
 000015A4  B8 00000001			mov	EAX,000000001h
 000015A9  5A				pop	EDX
 000015AA  2B D0			sub	EDX,EAX
 000015AC  8B C2			mov	EAX,EDX
 000015AE  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000015B1  EB 06			jmp	OFFSET $L001464
 000015B3			$L001465:
 000015B3  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000015B6  FF 4D F8			dec	dword ptr [EBP-8]
 000015B9			$L001464:
 000015B9  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015BC  50				push	EAX
 000015BD  33 C0			xor	EAX,EAX
 000015BF  5A				pop	EDX
 000015C0  3B D0			cmp	EDX,EAX
 000015C2  0F 9D C0			setge	AL
 000015C5  84 C0			test	AL,AL
 000015C7  74 7E			jz	OFFSET $L001466
				;{

				;{226}:if(array[left + 1] < array[left])
 000015C9  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015CC  8B C3			mov	EAX,EBX 
 000015CE  50				push	EAX
 000015CF  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015D2  50				push	EAX
 000015D3  B8 00000001			mov	EAX,000000001h
 000015D8  5A				pop	EDX
 000015D9  03 C2			add	EAX,EDX
 000015DB  5E				pop	ESI
 000015DC  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000015DF  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000015E6  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000015E9  50				push	EAX
 000015EA  52				push	EDX 
 000015EB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000015EE  8B C3			mov	EAX,EBX 
 000015F0  50				push	EAX
 000015F1  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000015F4  5E				pop	ESI
 000015F5  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000015F8  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000015FF  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 00001602  50				push	EAX
 00001603  52				push	EDX 
 00001604  E8 00000000 E		call	 FloatingPoint_Compare
 00001609  83 F8 00			cmp	EAX,000000000h
 0000160C  F7 D8			neg	EAX
 0000160E  0F 9C C0			setl	AL
 00001611  84 C0			test	AL,AL
 00001613  74 2D			jz	OFFSET $L001467
				;{

				;{233}:Swap(array[left + 1], array[left]);
 00001615  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001618  8B C3			mov	EAX,EBX 
 0000161A  50				push	EAX
 0000161B  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000161E  5E				pop	ESI
 0000161F  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001622  50				push	EAX 
 00001623  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001626  8B C3			mov	EAX,EBX 
 00001628  50				push	EAX
 00001629  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 0000162C  50				push	EAX
 0000162D  B8 00000001			mov	EAX,000000001h
 00001632  5A				pop	EDX
 00001633  03 C2			add	EAX,EDX
 00001635  5E				pop	ESI
 00001636  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001639  50				push	EAX
 0000163A  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch]
 0000163D  E8 000000C9			call	 UnitTesting_SortDoubleProxy_Swap
				;}
 00001642			$L001467:
				;}
 00001642  E9 FFFFFF6C			jmp	OFFSET $L001465 
 00001647			$L001466:
				;}
 00001647  E9 FFFFFF39			jmp	OFFSET $L001462 
 0000164C			$L001463:
				;}
 0000164C			$L000843:

 0000164C  5F				pop	EDI
 0000164D  5E				pop	ESI 
 0000164E  5B				pop	EBX 
 0000164F  C9				leave	
 00001650  C2 0008			retn	000000008h
 00001653			UnitTesting_SortDoubleProxy_Sort2 ENDP

 00001653			UnitTesting_SortDoubleProxy_SortEx PROC NEAR 
				;void SortEx(UnitTesting::SimpleObject [] array, int n, UnitTesting::SwapperObject ref swapper);
 00001653  55				push	EBP
 00001654  8B EC			mov	EBP,ESP
 00001656  83 EC 0C			sub	ESP,00000000Ch
 00001659  53				push	EBX 
 0000165A  56				push	ESI 
 0000165B  57				push	EDI 
 0000165C  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 0000165F  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001662  B9 00000002			mov	ECX,000000002h 
 00001667  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000166C  F3/ AB			rep stos	dword ptr [EDI]
 0000166E  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{241}:for(index= 1; index < n; index++ )
 00001671  B8 00000001			mov	EAX,000000001h
 00001676  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001679  EB 06			jmp	OFFSET $L001469
 0000167B			$L001470:
 0000167B  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000167E  FF 45 FC			inc	dword ptr [EBP-4]
 00001681			$L001469:
 00001681  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001684  50				push	EAX
 00001685  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001688  5A				pop	EDX
 00001689  3B D0			cmp	EDX,EAX
 0000168B  0F 9C C0			setl	AL
 0000168E  84 C0			test	AL,AL
 00001690  74 72			jz	OFFSET $L001471
				;{

				;{243}:for(left= index - 1; left >= 0; --left)
 00001692  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001695  50				push	EAX
 00001696  B8 00000001			mov	EAX,000000001h
 0000169B  5A				pop	EDX
 0000169C  2B D0			sub	EDX,EAX
 0000169E  8B C2			mov	EAX,EDX
 000016A0  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 000016A3  EB 06			jmp	OFFSET $L001472
 000016A5			$L001473:
 000016A5  FF 4D F8			dec	dword ptr [EBP-8]
 000016A8  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000016AB			$L001472:
 000016AB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016AE  50				push	EAX
 000016AF  33 C0			xor	EAX,EAX
 000016B1  5A				pop	EDX
 000016B2  3B D0			cmp	EDX,EAX
 000016B4  0F 9D C0			setge	AL
 000016B7  84 C0			test	AL,AL
 000016B9  74 44			jz	OFFSET $L001474
				;{

				;{245}:if(swapper.lessThanEx(array, left + 1, left))
 000016BB  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016BE  50				push	EAX 
 000016BF  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016C2  50				push	EAX
 000016C3  B8 00000001			mov	EAX,000000001h
 000016C8  5A				pop	EDX
 000016C9  03 C2			add	EAX,EDX
 000016CB  50				push	EAX 
 000016CC  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000016CF  8B C3			mov	EAX,EBX 
 000016D1  50				push	EAX
 000016D2  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 000016D5  8B 11			mov	EDX,dword ptr [ECX]
 000016D7  FF 52 08			call	dword ptr [EDX+0008h]
 000016DA  84 C0			test	AL,AL
 000016DC  74 1F			jz	OFFSET $L001475
				;{

				;{247}:swapper.SwapEx(array, left + 1, left);
 000016DE  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016E1  50				push	EAX 
 000016E2  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 000016E5  50				push	EAX
 000016E6  B8 00000001			mov	EAX,000000001h
 000016EB  5A				pop	EDX
 000016EC  03 C2			add	EAX,EDX
 000016EE  50				push	EAX 
 000016EF  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000016F2  8B C3			mov	EAX,EBX 
 000016F4  50				push	EAX
 000016F5  8B 4D 10			mov	ECX,dword ptr [EBP+0010h]
 000016F8  8B 11			mov	EDX,dword ptr [ECX]
 000016FA  FF 52 0C			call	dword ptr [EDX+000Ch]
				;}
 000016FD			$L001475:
				;}
 000016FD  EB A6			jmp	OFFSET $L001473 
 000016FF			$L001474:
				;}
 000016FF  E9 FFFFFF77			jmp	OFFSET $L001470 
 00001704			$L001471:
				;}
 00001704			$L000848:

 00001704  5F				pop	EDI
 00001705  5E				pop	ESI 
 00001706  5B				pop	EBX 
 00001707  C9				leave	
 00001708  C2 000C			retn	00000000Ch
 0000170B			UnitTesting_SortDoubleProxy_SortEx ENDP

 0000170B			UnitTesting_SortDoubleProxy_Swap PROC NEAR 
				;void Swap(double ref val1, double ref val2);
 0000170B  55				push	EBP
 0000170C  8B EC			mov	EBP,ESP
 0000170E  83 EC 0C			sub	ESP,00000000Ch
 00001711  53				push	EBX 
 00001712  56				push	ESI 
 00001713  57				push	EDI 
 00001714  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00001717  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 0000171A  B9 00000002			mov	ECX,000000002h 
 0000171F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001724  F3/ AB			rep stos	dword ptr [EDI]
 00001726  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{215}:tmp= val1;
 00001729  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000172C  8B C3			mov	EAX,EBX 
 0000172E  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00001731  8B 13			mov	EDX,dword ptr [EBX] 
 00001733  50				push	EAX
 00001734  52				push	EDX 
 00001735  DD 04 24			fld	qword ptr [ESP]
 00001738  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{216}:val1= val2;
 0000173B  5A				pop	EDX
 0000173C  58				pop	EAX 
 0000173D  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001740  8B C3			mov	EAX,EBX 
 00001742  8B 43 04			mov	EAX,dword ptr [EBX+4]
 00001745  8B 13			mov	EDX,dword ptr [EBX] 
 00001747  50				push	EAX
 00001748  52				push	EDX 
 00001749  DD 04 24			fld	qword ptr [ESP]
 0000174C  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 0000174F  DD 1B			fstp	qword ptr [EBX]

				;{217}:val2= tmp;
 00001751  5A				pop	EDX
 00001752  58				pop	EAX 
 00001753  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001756  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001759  50				push	EAX
 0000175A  52				push	EDX 
 0000175B  DD 04 24			fld	qword ptr [ESP]
 0000175E  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00001761  DD 1B			fstp	qword ptr [EBX]
				;}
 00001763			$L000839:
 00001763  5A				pop	EDX
 00001764  58				pop	EAX 

 00001765  5F				pop	EDI
 00001766  5E				pop	ESI 
 00001767  5B				pop	EBX 
 00001768  C9				leave	
 00001769  C2 0008			retn	000000008h
 0000176C			UnitTesting_SortDoubleProxy_Swap ENDP

 0000176C			UnitTesting_Square_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 0000176C  55				push	EBP
 0000176D  8B EC			mov	EBP,ESP
 0000176F  51				push	ECX 
 00001770  53				push	EBX 
 00001771  56				push	ESI 
 00001772  57				push	EDI 
				;{

				;{149}:return Width * Height
 00001773  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001776  E8 00000110			call	 UnitTesting_Square_get_Width
 0000177B  50				push	EAX
 0000177C  52				push	EDX 
 0000177D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001780  E8 00000082			call	 UnitTesting_Square_get_Height
 00001785  9B DB E2			fclex
 00001788  50				push	EAX
 00001789  52				push	EDX 
 0000178A  DD 04 24			fld	qword ptr [ESP]
 0000178D  59				pop	ECX
 0000178E  59				pop	ECX 
 0000178F  DC 0C 24			fmul	qword ptr [ESP]
 00001792  DD 1C 24			fstp	qword ptr [ESP]
 00001795  5A				pop	EDX
 00001796  58				pop	EAX 
 00001797  EB 00			jmp	OFFSET $L000675
				;}
 00001799			$L000675:

 00001799  5F				pop	EDI
 0000179A  5E				pop	ESI 
 0000179B  5B				pop	EBX 
 0000179C  C9				leave	
 0000179D  C3				ret	
 0000179E			UnitTesting_Square_ComputeArea ENDP

 0000179E			UnitTesting_Square_Destructor PROC NEAR 
				;void Destructor(void);
 0000179E  55				push	EBP
 0000179F  8B EC			mov	EBP,ESP
 000017A1  51				push	ECX 
 000017A2  53				push	EBX 
 000017A3  56				push	ESI 
 000017A4  57				push	EDI 
				;{

				;{122}:System::Debug::OutputString("destroying a Square object...");
 000017A5  8D 05 00000ED3 R		lea	EAX,OFFSET $S000666
 000017AB  50				push	EAX
 000017AC  E8 00000000 E		call	 System_Debug_OutputString

				;{123}:Console::WriteLn("destroying a Square object...");
 000017B1  8D 05 00000ED3 R		lea	EAX,OFFSET $S000666
 000017B7  6A 00			push	000000000h
 000017B9  50				push	EAX 
 000017BA  E8 00000000 E		call	 Console_WriteString
 000017BF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000017C4			$L000665:

 000017C4  5F				pop	EDI
 000017C5  5E				pop	ESI 
 000017C6  5B				pop	EBX 
 000017C7  C9				leave	
 000017C8  C3				ret	
 000017C9			UnitTesting_Square_Destructor ENDP

 000017C9			UnitTesting_Square_Draw PROC NEAR 
				;void Draw(void);
 000017C9  55				push	EBP
 000017CA  8B EC			mov	EBP,ESP
 000017CC  51				push	ECX 
 000017CD  53				push	EBX 
 000017CE  56				push	ESI 
 000017CF  57				push	EDI 
				;{

				;{162}:Console::WriteLn("Drawing a Square!");
 000017D0  8D 05 0000099E R		lea	EAX,OFFSET $S000680
 000017D6  6A 00			push	000000000h
 000017D8  50				push	EAX 
 000017D9  E8 00000000 E		call	 Console_WriteString
 000017DE  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000017E3			$L000679:

 000017E3  5F				pop	EDI
 000017E4  5E				pop	ESI 
 000017E5  5B				pop	EBX 
 000017E6  C9				leave	
 000017E7  C3				ret	
 000017E8			UnitTesting_Square_Draw ENDP

 000017E8			UnitTesting_Square_DrawCube PROC NEAR 
				;void DrawCube(void);
 000017E8  55				push	EBP
 000017E9  8B EC			mov	EBP,ESP
 000017EB  51				push	ECX 
 000017EC  53				push	EBX 
 000017ED  56				push	ESI 
 000017EE  57				push	EDI 
				;{

				;{167}:Console::WriteLn("Drawing a Cube!");
 000017EF  8D 05 00000969 R		lea	EAX,OFFSET $S000682
 000017F5  6A 00			push	000000000h
 000017F7  50				push	EAX 
 000017F8  E8 00000000 E		call	 Console_WriteString
 000017FD  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001802			$L000681:

 00001802  5F				pop	EDI
 00001803  5E				pop	ESI 
 00001804  5B				pop	EBX 
 00001805  C9				leave	
 00001806  C3				ret	
 00001807			UnitTesting_Square_DrawCube ENDP

 00001807			UnitTesting_Square_get_Height PROC NEAR 
				;double get::Height(void);
 00001807  55				push	EBP
 00001808  8B EC			mov	EBP,ESP
 0000180A  51				push	ECX 
 0000180B  53				push	EBX 
 0000180C  56				push	ESI 
 0000180D  57				push	EDI 
				;{

				;{139}:return dHeight
 0000180E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001811  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 00001814  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 00001817  EB 00			jmp	OFFSET $L000672
				;}
 00001819			$L000672:

 00001819  5F				pop	EDI
 0000181A  5E				pop	ESI 
 0000181B  5B				pop	EBX 
 0000181C  C9				leave	
 0000181D  C3				ret	
 0000181E			UnitTesting_Square_get_Height ENDP

 0000181E			UnitTesting_Square_put_Height PROC NEAR 
				;void put::Height(double value);
 0000181E  55				push	EBP
 0000181F  8B EC			mov	EBP,ESP
 00001821  51				push	ECX 
 00001822  53				push	EBX 
 00001823  56				push	ESI 
 00001824  57				push	EDI 
				;{

				;{144}:dHeight= value;
 00001825  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00001828  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000182B  50				push	EAX
 0000182C  52				push	EDX 
 0000182D  DD 04 24			fld	qword ptr [ESP]
 00001830  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001833  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 00001836			$L000673:
 00001836  5A				pop	EDX
 00001837  58				pop	EAX 

 00001838  5F				pop	EDI
 00001839  5E				pop	ESI 
 0000183A  5B				pop	EBX 
 0000183B  C9				leave	
 0000183C  C2 0008			retn	000000008h
 0000183F			UnitTesting_Square_put_Height ENDP

 0000183F			UnitTesting_Square_Name PROC NEAR 
				;string Name(void);
 0000183F  55				push	EBP
 00001840  8B EC			mov	EBP,ESP
 00001842  51				push	ECX 
 00001843  53				push	EBX 
 00001844  56				push	ESI 
 00001845  57				push	EDI 
				;{

				;{157}:return "Square"
 00001846  8D 05 00000BE2 R		lea	EAX,OFFSET $S000678
 0000184C  EB 00			jmp	OFFSET $L000677
				;}
 0000184E			$L000677:

 0000184E  5F				pop	EDI
 0000184F  5E				pop	ESI 
 00001850  5B				pop	EBX 
 00001851  C9				leave	
 00001852  C3				ret	
 00001853			UnitTesting_Square_Name ENDP

 00001853			UnitTesting_Square_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00001853  55				push	EBP
 00001854  8B EC			mov	EBP,ESP
 00001856  51				push	ECX 
 00001857  53				push	EBX 
 00001858  56				push	ESI 
 00001859  57				push	EDI 
				;{

				;{153}:return UnitTesting::stSquare
 0000185A  B8 00000002			mov	EAX,000000002h
 0000185F  EB 00			jmp	OFFSET $L000676
				;}
 00001861			$L000676:

 00001861  5F				pop	EDI
 00001862  5E				pop	ESI 
 00001863  5B				pop	EBX 
 00001864  C9				leave	
 00001865  C3				ret	
 00001866			UnitTesting_Square_Type ENDP

 00001866			UnitTesting_Square PROC NEAR 
				;void UnitTesting::Square(void);
 00001866  55				push	EBP
 00001867  8B EC			mov	EBP,ESP
 00001869  51				push	ECX 
 0000186A  53				push	EBX 
 0000186B  56				push	ESI 
 0000186C  57				push	EDI 
 0000186D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001870  E8 FFFFF998			call	 UnitTesting_Shape ;base constructor call
 00001875  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001878  C7 01 00000090 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Square 
 0000187E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00001881  E8 00002ED3			call	 __member_Init@UnitTesting_Square 
				;{
				;}

 00001886  5F				pop	EDI
 00001887  5E				pop	ESI 
 00001888  5B				pop	EBX 
 00001889  C9				leave	
 0000188A  C3				ret	
 0000188B			UnitTesting_Square ENDP

 0000188B			UnitTesting_Square_get_Width PROC NEAR 
				;double get::Width(void);
 0000188B  55				push	EBP
 0000188C  8B EC			mov	EBP,ESP
 0000188E  51				push	ECX 
 0000188F  53				push	EBX 
 00001890  56				push	ESI 
 00001891  57				push	EDI 
				;{

				;{129}:return dWidth
 00001892  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001895  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00001898  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 0000189B  EB 00			jmp	OFFSET $L000668
				;}
 0000189D			$L000668:

 0000189D  5F				pop	EDI
 0000189E  5E				pop	ESI 
 0000189F  5B				pop	EBX 
 000018A0  C9				leave	
 000018A1  C3				ret	
 000018A2			UnitTesting_Square_get_Width ENDP

 000018A2			UnitTesting_Square_put_Width PROC NEAR 
				;void put::Width(double value);
 000018A2  55				push	EBP
 000018A3  8B EC			mov	EBP,ESP
 000018A5  51				push	ECX 
 000018A6  53				push	EBX 
 000018A7  56				push	ESI 
 000018A8  57				push	EDI 
				;{

				;{134}:dWidth= value;
 000018A9  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000018AC  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000018AF  50				push	EAX
 000018B0  52				push	EDX 
 000018B1  DD 04 24			fld	qword ptr [ESP]
 000018B4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000018B7  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 000018BA			$L000669:
 000018BA  5A				pop	EDX
 000018BB  58				pop	EAX 

 000018BC  5F				pop	EDI
 000018BD  5E				pop	ESI 
 000018BE  5B				pop	EBX 
 000018BF  C9				leave	
 000018C0  C2 0008			retn	000000008h
 000018C3			UnitTesting_Square_put_Width ENDP

 000018C3			UnitTesting_SummationSeries_Ackermman PROC NEAR 
				;int UnitTesting::SummationSeries::Ackermman(int m, int n);
 000018C3  55				push	EBP
 000018C4  8B EC			mov	EBP,ESP
 000018C6  51				push	ECX 
 000018C7  53				push	EBX 
 000018C8  56				push	ESI 
 000018C9  57				push	EDI 
				;{

				;{80}:if(m == 0 && n >= 0)
 000018CA  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000018CD  50				push	EAX
 000018CE  33 C0			xor	EAX,EAX
 000018D0  5A				pop	EDX
 000018D1  3B D0			cmp	EDX,EAX
 000018D3  0F 94 C0			setz	AL
 000018D6  84 C0			test	AL,AL
 000018D8  74 0C			jz	OFFSET $L001479
 000018DA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000018DD  50				push	EAX
 000018DE  33 C0			xor	EAX,EAX
 000018E0  5A				pop	EDX
 000018E1  3B D0			cmp	EDX,EAX
 000018E3  0F 9D C0			setge	AL
 000018E6			$L001479:
 000018E6  84 C0			test	AL,AL
 000018E8  74 0E			jz	OFFSET $L001477

				;{81}:return n + 1
 000018EA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 000018ED  50				push	EAX
 000018EE  B8 00000001			mov	EAX,000000001h
 000018F3  5A				pop	EDX
 000018F4  03 C2			add	EAX,EDX
 000018F6  EB 6E			jmp	OFFSET $L000599

				; else {
 000018F8			$L001477:

				;{82}:if(m >= 1 && n == 0)
 000018F8  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000018FB  50				push	EAX
 000018FC  B8 00000001			mov	EAX,000000001h
 00001901  5A				pop	EDX
 00001902  3B D0			cmp	EDX,EAX
 00001904  0F 9D C0			setge	AL
 00001907  84 C0			test	AL,AL
 00001909  74 0C			jz	OFFSET $L001482
 0000190B  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000190E  50				push	EAX
 0000190F  33 C0			xor	EAX,EAX
 00001911  5A				pop	EDX
 00001912  3B D0			cmp	EDX,EAX
 00001914  0F 94 C0			setz	AL
 00001917			$L001482:
 00001917  84 C0			test	AL,AL
 00001919  74 1C			jz	OFFSET $L001480

				;{83}:return UnitTesting::SummationSeries::Ackermman(m - 1, 1)
 0000191B  B8 00000001			mov	EAX,000000001h
 00001920  50				push	EAX 
 00001921  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001924  50				push	EAX
 00001925  B8 00000001			mov	EAX,000000001h
 0000192A  5A				pop	EDX
 0000192B  2B D0			sub	EDX,EAX
 0000192D  8B C2			mov	EAX,EDX
 0000192F  50				push	EAX
 00001930  E8 FFFFFF8E			call	 UnitTesting_SummationSeries_Ackermman
 00001935  EB 2F			jmp	OFFSET $L000599

				; else {
 00001937			$L001480:

				;{85}:return UnitTesting::SummationSeries::Ackermman(m - 1, UnitTesting::SummationSeries::Ackermman(m, n - 1))
 00001937  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000193A  50				push	EAX
 0000193B  B8 00000001			mov	EAX,000000001h
 00001940  5A				pop	EDX
 00001941  2B D0			sub	EDX,EAX
 00001943  8B C2			mov	EAX,EDX
 00001945  50				push	EAX 
 00001946  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001949  50				push	EAX
 0000194A  E8 FFFFFF74			call	 UnitTesting_SummationSeries_Ackermman
 0000194F  50				push	EAX 
 00001950  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001953  50				push	EAX
 00001954  B8 00000001			mov	EAX,000000001h
 00001959  5A				pop	EDX
 0000195A  2B D0			sub	EDX,EAX
 0000195C  8B C2			mov	EAX,EDX
 0000195E  50				push	EAX
 0000195F  E8 FFFFFF5F			call	 UnitTesting_SummationSeries_Ackermman
 00001964  EB 00			jmp	OFFSET $L000599
 00001966			$L001481:

				; }
 00001966			$L001478:

				; }
				;}
 00001966			$L000599:

 00001966  5F				pop	EDI
 00001967  5E				pop	ESI 
 00001968  5B				pop	EBX 
 00001969  C9				leave	
 0000196A  C2 0008			retn	000000008h
 0000196D			UnitTesting_SummationSeries_Ackermman ENDP

 0000196D			UnitTesting_SummationSeries_ComputeRenderGamma PROC NEAR 
				;void UnitTesting::SummationSeries::ComputeRenderGamma(void);
 0000196D  55				push	EBP
 0000196E  8B EC			mov	EBP,ESP
 00001970  83 EC 10			sub	ESP,000000010h
 00001973  53				push	EBX 
 00001974  56				push	ESI 
 00001975  57				push	EDI 
 00001976  8D 7D F4			lea	EDI,dword ptr [EBP-000Ch]
 00001979  B9 00000003			mov	ECX,000000003h
 0000197E  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001983  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{69}:result= 0;
 00001985  33 C0			xor	EAX,EAX
 00001987  50				push	EAX
 00001988  DB 04 24			fild	dword ptr [ESP]
 0000198B  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{70}:for(i= 1; i <= 50; ++i)
 0000198E  58				pop	EAX
 0000198F  B8 00000001			mov	EAX,000000001h
 00001994  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00001997  EB 06			jmp	OFFSET $L001483
 00001999			$L001484:
 00001999  FF 45 F4			inc	dword ptr [EBP-12]
 0000199C  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 0000199F			$L001483:
 0000199F  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019A2  50				push	EAX
 000019A3  B8 00000032			mov	EAX,000000032h
 000019A8  5A				pop	EDX
 000019A9  3B D0			cmp	EDX,EAX
 000019AB  0F 9E C0			setle	AL
 000019AE  84 C0			test	AL,AL
 000019B0  0F 84 00000092		jz	OFFSET $L001485
				;{

				;{71}:result+= 1.0 / i - Math::log10((i + 1.0) / i);
 000019B6  D9 E8			fld1
 000019B8  51				push	ECX
 000019B9  51				push	ECX 
 000019BA  DD 1C 24			fstp	qword ptr [ESP]
 000019BD  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019C0  9B DB E2			fclex
 000019C3  50				push	EAX
 000019C4  E8 00000000 E		call	 FloatingPoint_FromInt
 000019C9  50				push	EAX
 000019CA  52				push	EDX 
 000019CB  DD 04 24			fld	qword ptr [ESP]
 000019CE  59				pop	ECX
 000019CF  59				pop	ECX 
 000019D0  DC 3C 24			fdivr	qword ptr [ESP]
 000019D3  DD 1C 24			fstp	qword ptr [ESP]
 000019D6  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019D9  50				push	EAX
 000019DA  D9 E8			fld1
 000019DC  E8 00000000 E		call	 FloatingPoint_FromInt
 000019E1  50				push	EAX
 000019E2  52				push	EDX 
 000019E3  DC 04 24			fadd	qword ptr [ESP]
 000019E6  DD 1C 24			fstp	qword ptr [ESP]
 000019E9  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 000019EC  9B DB E2			fclex
 000019EF  50				push	EAX
 000019F0  E8 00000000 E		call	 FloatingPoint_FromInt
 000019F5  50				push	EAX
 000019F6  52				push	EDX 
 000019F7  DD 04 24			fld	qword ptr [ESP]
 000019FA  59				pop	ECX
 000019FB  59				pop	ECX 
 000019FC  DC 3C 24			fdivr	qword ptr [ESP]
 000019FF  DD 1C 24			fstp	qword ptr [ESP]
 00001A02  E8 00000000 E		call	 Math_log10
 00001A07  50				push	EAX
 00001A08  52				push	EDX 
 00001A09  DD 04 24			fld	qword ptr [ESP]
 00001A0C  59				pop	ECX
 00001A0D  59				pop	ECX 
 00001A0E  DD 04 24			fld	qword ptr [ESP]
 00001A11  D8 E1			fsub	st,st(1)
 00001A13  DD 1C 24			fstp	qword ptr [ESP]
 00001A16  F8				clc	
 00001A17  DD 04 24			fld	qword ptr [ESP]
 00001A1A  5A				pop	EDX
 00001A1B  58				pop	EAX 
 00001A1C  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 00001A1F  DC 03			fadd	qword ptr [EBX]
 00001A21  DD 1B			fstp	qword ptr [EBX]

				;{72}:Console::WriteLn("Partial results = ", result);
 00001A23  8D 05 00000B6A R		lea	EAX,OFFSET $S000597
 00001A29  6A 00			push	000000000h
 00001A2B  50				push	EAX 
 00001A2C  E8 00000000 E		call	 Console_WriteString
 00001A31  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001A34  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001A37  50				push	EAX 
 00001A38  52				push	EDX 
 00001A39  E8 00000000 E		call	 Console_WriteDouble 
 00001A3E  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001A43  E9 FFFFFF51			jmp	OFFSET $L001484 
 00001A48			$L001485:

				;{75}:Console::WriteLn("Gamma y = ", result);
 00001A48  8D 05 000009D2 R		lea	EAX,OFFSET $S000598
 00001A4E  6A 00			push	000000000h
 00001A50  50				push	EAX 
 00001A51  E8 00000000 E		call	 Console_WriteString
 00001A56  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 00001A59  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 00001A5C  50				push	EAX 
 00001A5D  52				push	EDX 
 00001A5E  E8 00000000 E		call	 Console_WriteDouble 
 00001A63  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00001A68			$L000592:

 00001A68  5F				pop	EDI
 00001A69  5E				pop	ESI 
 00001A6A  5B				pop	EBX 
 00001A6B  C9				leave	
 00001A6C  C3				ret	
 00001A6D			UnitTesting_SummationSeries_ComputeRenderGamma ENDP

 00001A6D			UnitTesting_SummationSeries_GeometricSeriesClosedSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesClosedSum(int x, unsigned n);
 00001A6D  55				push	EBP
 00001A6E  8B EC			mov	EBP,ESP
 00001A70  51				push	ECX 
 00001A71  53				push	EBX 
 00001A72  56				push	ESI 
 00001A73  57				push	EDI 
				;{

				;{62}:return FloatingPoint::ToInt((Math::Pow(x, n + 1) - 1) / (x - 1))
 00001A74  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001A77  50				push	EAX
 00001A78  B8 00000001			mov	EAX,000000001h
 00001A7D  5A				pop	EDX
 00001A7E  03 C2			add	EAX,EDX
 00001A80  50				push	EAX 
 00001A81  E8 00000000 E		call	 FloatingPoint_FromInt
 00001A86  50				push	EAX
 00001A87  52				push	EDX 
 00001A88  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001A8B  50				push	EAX
 00001A8C  E8 00000000 E		call	 FloatingPoint_FromInt
 00001A91  50				push	EAX
 00001A92  52				push	EDX 
 00001A93  E8 00000000 E		call	 Math_Pow
 00001A98  50				push	EAX
 00001A99  52				push	EDX 
 00001A9A  B8 00000001			mov	EAX,000000001h
 00001A9F  50				push	EAX
 00001AA0  E8 00000000 E		call	 FloatingPoint_FromInt
 00001AA5  50				push	EAX
 00001AA6  52				push	EDX 
 00001AA7  DD 04 24			fld	qword ptr [ESP]
 00001AAA  59				pop	ECX
 00001AAB  59				pop	ECX 
 00001AAC  DD 04 24			fld	qword ptr [ESP]
 00001AAF  D8 E1			fsub	st,st(1)
 00001AB1  DD 1C 24			fstp	qword ptr [ESP]
 00001AB4  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001AB7  50				push	EAX
 00001AB8  B8 00000001			mov	EAX,000000001h
 00001ABD  5A				pop	EDX
 00001ABE  2B D0			sub	EDX,EAX
 00001AC0  8B C2			mov	EAX,EDX
 00001AC2  9B DB E2			fclex
 00001AC5  50				push	EAX
 00001AC6  E8 00000000 E		call	 FloatingPoint_FromInt
 00001ACB  50				push	EAX
 00001ACC  52				push	EDX 
 00001ACD  DD 04 24			fld	qword ptr [ESP]
 00001AD0  59				pop	ECX
 00001AD1  59				pop	ECX 
 00001AD2  DC 3C 24			fdivr	qword ptr [ESP]
 00001AD5  DD 1C 24			fstp	qword ptr [ESP]
 00001AD8  E8 00000000 E		call	 FloatingPoint_ToInt
 00001ADD  EB 00			jmp	OFFSET $L000589
				;}
 00001ADF			$L000589:

 00001ADF  5F				pop	EDI
 00001AE0  5E				pop	ESI 
 00001AE1  5B				pop	EBX 
 00001AE2  C9				leave	
 00001AE3  C2 0008			retn	000000008h
 00001AE6			UnitTesting_SummationSeries_GeometricSeriesClosedSum ENDP

 00001AE6			UnitTesting_SummationSeries_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::GeometricSeriesSum(int x, unsigned n);
 00001AE6  55				push	EBP
 00001AE7  8B EC			mov	EBP,ESP
 00001AE9  83 EC 18			sub	ESP,000000018h
 00001AEC  53				push	EBX 
 00001AED  56				push	ESI 
 00001AEE  57				push	EDI 
 00001AEF  8D 7D EC			lea	EDI,dword ptr [EBP-0014h]
 00001AF2  B9 00000005			mov	ECX,000000005h
 00001AF7  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001AFC  F3/ AB			rep stos	dword ptr [EDI]
;{

				;{21}:nx= FloatingPoint::ToInt(3.145464654);
 00001AFE  BA 5F5D3B4E			mov	EDX,05F5D3B4Eh
 00001B03  B8 400929E9			mov	EAX,0400929E9h 
 00001B08  50				push	EAX
 00001B09  52				push	EDX 
 00001B0A  E8 00000000 E		call	 FloatingPoint_ToInt
 00001B0F  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{23}:sum= 0;
 00001B12  33 C0			xor	EAX,EAX
 00001B14  89 45 F8			mov	dword ptr [EBP-0008h],EAX

				;{24}:for(i= 0; i <= n; ++i)
 00001B17  33 C0			xor	EAX,EAX
 00001B19  89 45 F4			mov	dword ptr [EBP-000Ch],EAX
 00001B1C  EB 06			jmp	OFFSET $L001486
 00001B1E			$L001487:
 00001B1E  FF 45 F4			inc	dword ptr [EBP-12]
 00001B21  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 00001B24			$L001486:
 00001B24  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001B27  50				push	EAX
 00001B28  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001B2B  5A				pop	EDX
 00001B2C  3B D0			cmp	EDX,EAX
 00001B2E  0F 9E C0			setle	AL
 00001B31  84 C0			test	AL,AL
 00001B33  74 3B			jz	OFFSET $L001488
				;{

				;{26}:prod= 1;
 00001B35  B8 00000001			mov	EAX,000000001h
 00001B3A  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{27}:for(j= 0; j < i; ++j)
 00001B3D  33 C0			xor	EAX,EAX
 00001B3F  89 45 EC			mov	dword ptr [EBP-0014h],EAX
 00001B42  EB 06			jmp	OFFSET $L001489
 00001B44			$L001490:
 00001B44  FF 45 EC			inc	dword ptr [EBP-20]
 00001B47  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00001B4A			$L001489:
 00001B4A  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00001B4D  50				push	EAX
 00001B4E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00001B51  5A				pop	EDX
 00001B52  3B D0			cmp	EDX,EAX
 00001B54  0F 9C C0			setl	AL
 00001B57  84 C0			test	AL,AL
 00001B59  74 0C			jz	OFFSET $L001491

				;{28}:prod*= x;
 00001B5B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001B5E  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00001B61  F7 2B			imul	dword ptr [EBX]
 00001B63  89 03			mov	dword ptr [EBX],EAX
 00001B65  EB DD			jmp	OFFSET $L001490 
 00001B67			$L001491:

				;{29}:sum+= prod;
 00001B67  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00001B6A  F8				clc	
 00001B6B  01 45 F8			add	dword ptr [EBP-0008h],EAX
				;}
 00001B6E  EB AE			jmp	OFFSET $L001487 
 00001B70			$L001488:

				;{31}:return sum
 00001B70  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001B73  EB 00			jmp	OFFSET $L000568
				;}
 00001B75			$L000568:

 00001B75  5F				pop	EDI
 00001B76  5E				pop	ESI 
 00001B77  5B				pop	EBX 
 00001B78  C9				leave	
 00001B79  C2 0008			retn	000000008h
 00001B7C			UnitTesting_SummationSeries_GeometricSeriesSum ENDP

 00001B7C			UnitTesting_SummationSeries_Horner_GeometricSeriesSum PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::GeometricSeriesSum(int x, unsigned n);
 00001B7C  55				push	EBP
 00001B7D  8B EC			mov	EBP,ESP
 00001B7F  83 EC 0C			sub	ESP,00000000Ch
 00001B82  53				push	EBX 
 00001B83  56				push	ESI 
 00001B84  57				push	EDI 
 00001B85  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001B88  B9 00000002			mov	ECX,000000002h
 00001B8D  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001B92  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{49}:sum= 0;
 00001B94  33 C0			xor	EAX,EAX
 00001B96  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{50}:for(i= 0; i <= n; ++i)
 00001B99  33 C0			xor	EAX,EAX
 00001B9B  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001B9E  EB 06			jmp	OFFSET $L001492
 00001BA0			$L001493:
 00001BA0  FF 45 F8			inc	dword ptr [EBP-8]
 00001BA3  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001BA6			$L001492:
 00001BA6  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001BA9  50				push	EAX
 00001BAA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001BAD  5A				pop	EDX
 00001BAE  3B D0			cmp	EDX,EAX
 00001BB0  0F 9E C0			setle	AL
 00001BB3  84 C0			test	AL,AL
 00001BB5  74 34			jz	OFFSET $L001494

				;{51}:sum= sum * x + 1;
 00001BB7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001BBA  50				push	EAX
 00001BBB  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001BBE  59				pop	ECX
 00001BBF  99				cdq	
 00001BC0  0F AF C1			imul	EAX,ECX
 00001BC3  52				push	EDX
 00001BC4  50				push	EAX 
 00001BC5  B8 00000001			mov	EAX,000000001h
 00001BCA  50				push	EAX
 00001BCB  E8 00000000 E		call	 FloatingPoint_FromInt
 00001BD0  50				push	EAX
 00001BD1  52				push	EDX 
 00001BD2  DD 04 24			fld	qword ptr [ESP]
 00001BD5  59				pop	ECX
 00001BD6  59				pop	ECX 
 00001BD7  E8 00000000 E		call	 FloatingPoint_FromInt64
 00001BDC  50				push	EAX
 00001BDD  52				push	EDX 
 00001BDE  DC 04 24			fadd	qword ptr [ESP]
 00001BE1  DF 3C 24			fistp	qword ptr [ESP]
 00001BE4  58				pop	EAX
 00001BE5  5A				pop	EDX 
 00001BE6  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00001BE9  EB B5			jmp	OFFSET $L001493 
 00001BEB			$L001494:

				;{53}:return sum
 00001BEB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001BEE  EB 00			jmp	OFFSET $L000584
				;}
 00001BF0			$L000584:

 00001BF0  5F				pop	EDI
 00001BF1  5E				pop	ESI 
 00001BF2  5B				pop	EBX 
 00001BF3  C9				leave	
 00001BF4  C2 0008			retn	000000008h
 00001BF7			UnitTesting_SummationSeries_Horner_GeometricSeriesSum ENDP

 00001BF7			UnitTesting_SummationSeries_Horner_Horner PROC NEAR 
				;int UnitTesting::SummationSeries::Horner::Horner(int [] a, unsigned n, int x);
 00001BF7  55				push	EBP
 00001BF8  8B EC			mov	EBP,ESP
 00001BFA  83 EC 0C			sub	ESP,00000000Ch
 00001BFD  53				push	EBX 
 00001BFE  56				push	ESI 
 00001BFF  57				push	EDI 
 00001C00  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001C03  B9 00000002			mov	ECX,000000002h
 00001C08  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001C0D  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{39}:result= a[n];
 00001C0F  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001C12  8B C3			mov	EAX,EBX 
 00001C14  50				push	EAX
 00001C15  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001C18  5E				pop	ESI
 00001C19  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00001C1C  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{41}:for(i= n - 1; i >= 0; --i)
 00001C1F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00001C22  50				push	EAX
 00001C23  B8 00000001			mov	EAX,000000001h
 00001C28  5A				pop	EDX
 00001C29  2B D0			sub	EDX,EAX
 00001C2B  8B C2			mov	EAX,EDX
 00001C2D  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001C30  EB 06			jmp	OFFSET $L001495
 00001C32			$L001496:
 00001C32  FF 4D F8			dec	dword ptr [EBP-8]
 00001C35  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001C38			$L001495:
 00001C38  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C3B  50				push	EAX
 00001C3C  33 C0			xor	EAX,EAX
 00001C3E  5A				pop	EDX
 00001C3F  3B D0			cmp	EDX,EAX
 00001C41  0F 9D C0			setge	AL
 00001C44  84 C0			test	AL,AL
 00001C46  74 1D			jz	OFFSET $L001497

				;{42}:result*= x + a[i];
 00001C48  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00001C4B  50				push	EAX
 00001C4C  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00001C4F  8B C3			mov	EAX,EBX 
 00001C51  50				push	EAX
 00001C52  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001C55  5E				pop	ESI
 00001C56  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00001C59  5A				pop	EDX
 00001C5A  03 C2			add	EAX,EDX
 00001C5C  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00001C5F  F7 2B			imul	dword ptr [EBX]
 00001C61  89 03			mov	dword ptr [EBX],EAX
 00001C63  EB CD			jmp	OFFSET $L001496 
 00001C65			$L001497:

				;{43}:return result
 00001C65  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001C68  EB 00			jmp	OFFSET $L000578
				;}
 00001C6A			$L000578:

 00001C6A  5F				pop	EDI
 00001C6B  5E				pop	ESI 
 00001C6C  5B				pop	EBX 
 00001C6D  C9				leave	
 00001C6E  C2 000C			retn	00000000Ch
 00001C71			UnitTesting_SummationSeries_Horner_Horner ENDP

 00001C71			UnitTesting_SummationSeries_SimpleSum PROC NEAR 
				;unsigned UnitTesting::SummationSeries::SimpleSum(unsigned n);
 00001C71  55				push	EBP
 00001C72  8B EC			mov	EBP,ESP
 00001C74  83 EC 0C			sub	ESP,00000000Ch
 00001C77  53				push	EBX 
 00001C78  56				push	ESI 
 00001C79  57				push	EDI 
 00001C7A  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00001C7D  B9 00000002			mov	ECX,000000002h
 00001C82  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001C87  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{11}:result= 0;
 00001C89  33 C0			xor	EAX,EAX
 00001C8B  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{12}:for(i= 1; i <= n; ++i)
 00001C8E  B8 00000001			mov	EAX,000000001h
 00001C93  89 45 F8			mov	dword ptr [EBP-0008h],EAX
 00001C96  EB 06			jmp	OFFSET $L001498
 00001C98			$L001499:
 00001C98  FF 45 F8			inc	dword ptr [EBP-8]
 00001C9B  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 00001C9E			$L001498:
 00001C9E  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001CA1  50				push	EAX
 00001CA2  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001CA5  5A				pop	EDX
 00001CA6  3B D0			cmp	EDX,EAX
 00001CA8  0F 9E C0			setle	AL
 00001CAB  84 C0			test	AL,AL
 00001CAD  74 09			jz	OFFSET $L001500

				;{13}:result+= i;
 00001CAF  8B 45 F8			mov	EAX,dword ptr [EBP-0008h]
 00001CB2  F8				clc	
 00001CB3  01 45 FC			add	dword ptr [EBP-0004h],EAX
 00001CB6  EB E0			jmp	OFFSET $L001499 
 00001CB8			$L001500:

				;{15}:return result
 00001CB8  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00001CBB  EB 00			jmp	OFFSET $L000564
				;}
 00001CBD			$L000564:

 00001CBD  5F				pop	EDI
 00001CBE  5E				pop	ESI 
 00001CBF  5B				pop	EBX 
 00001CC0  C9				leave	
 00001CC1  C2 0004			retn	000000004h
 00001CC4			UnitTesting_SummationSeries_SimpleSum ENDP

 00001CC4			UnitTesting_SwapperObject PROC NEAR 
				;void UnitTesting::SwapperObject(void);
 00001CC4  55				push	EBP
 00001CC5  8B EC			mov	EBP,ESP
 00001CC7  51				push	ECX 
 00001CC8  53				push	EBX 
 00001CC9  56				push	ESI 
 00001CCA  57				push	EDI 
 00001CCB  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CCE  C7 01 0000005C R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_SwapperObject 

 00001CD4  5F				pop	EDI
 00001CD5  5E				pop	ESI 
 00001CD6  5B				pop	EBX 
 00001CD7  C9				leave	
 00001CD8  C3				ret	
 00001CD9			UnitTesting_SwapperObject ENDP

 00001CD9			UnitTesting_TestArrays_get_Name PROC NEAR 
				;string get::Name(void);
 00001CD9  55				push	EBP
 00001CDA  8B EC			mov	EBP,ESP
 00001CDC  51				push	ECX 
 00001CDD  53				push	EBX 
 00001CDE  56				push	ESI 
 00001CDF  57				push	EDI 
				;{

				;{916}:return name
 00001CE0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CE3  8B 01			mov	EAX,dword ptr [ECX]
 00001CE5  EB 00			jmp	OFFSET $L001117
				;}
 00001CE7			$L001117:

 00001CE7  5F				pop	EDI
 00001CE8  5E				pop	ESI 
 00001CE9  5B				pop	EBX 
 00001CEA  C9				leave	
 00001CEB  C3				ret	
 00001CEC			UnitTesting_TestArrays_get_Name ENDP

 00001CEC			UnitTesting_TestArrays_put_Name PROC NEAR 
				;void put::Name(string value);
 00001CEC  55				push	EBP
 00001CED  8B EC			mov	EBP,ESP
 00001CEF  51				push	ECX 
 00001CF0  53				push	EBX 
 00001CF1  56				push	ESI 
 00001CF2  57				push	EDI 
				;{

				;{920}:name= value;
 00001CF3  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00001CF6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00001CF9  89 01			mov	dword ptr [ECX],EAX
				;}
 00001CFB			$L001118:

 00001CFB  5F				pop	EDI
 00001CFC  5E				pop	ESI 
 00001CFD  5B				pop	EBX 
 00001CFE  C9				leave	
 00001CFF  C2 0004			retn	000000004h
 00001D02			UnitTesting_TestArrays_put_Name ENDP

 00001D02			UnitTesting_TestArrays PROC NEAR 
				;void UnitTesting::TestArrays(void);
 00001D02  55				push	EBP
 00001D03  8B EC			mov	EBP,ESP
 00001D05  51				push	ECX 
 00001D06  53				push	EBX 
 00001D07  56				push	ESI 
 00001D08  57				push	EDI 

 00001D09  5F				pop	EDI
 00001D0A  5E				pop	ESI 
 00001D0B  5B				pop	EBX 
 00001D0C  C9				leave	
 00001D0D  C3				ret	
 00001D0E			UnitTesting_TestArrays ENDP

 00001D0E			UnitTesting_TestArrays_DoTest PROC NEAR 
				;void UnitTesting::TestArrays::DoTest(void);
 00001D0E  55				push	EBP
 00001D0F  8B EC			mov	EBP,ESP
 00001D11  81 EC 000002E0		sub	ESP,0000002E0h
 00001D17  53				push	EBX 
 00001D18  56				push	ESI 
 00001D19  57				push	EDI 
 00001D1A  8D BD FFFFFD24		lea	EDI,dword ptr [EBP-02DCh]
 00001D20  B9 000000B7			mov	ECX,0000000B7h
 00001D25  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00001D2A  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{951}:array2;
 00001D2C  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00001D32  8B F0			mov	ESI,EAX

				;{953}:array2[0].Width= 100;
 00001D34  33 C0			xor	EAX,EAX
 00001D36  6B C0 30			imul	EAX,EAX,000000030h
 00001D39  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D40  51				push	ECX
 00001D41  B8 00000064			mov	EAX,000000064h
 00001D46  59				pop	ECX
 00001D47  50				push	EAX
 00001D48  E8 00000EBE			call	 UnitTesting_TestIntegers_put_Width

				;{954}:array2[0].Height= 200;
 00001D4D  33 C0			xor	EAX,EAX
 00001D4F  6B C0 30			imul	EAX,EAX,000000030h
 00001D52  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D59  51				push	ECX
 00001D5A  B8 000000C8			mov	EAX,0000000C8h
 00001D5F  59				pop	ECX
 00001D60  50				push	EAX
 00001D61  E8 00000E10			call	 UnitTesting_TestIntegers_put_Height

				;{956}:nArea= array2[0].Width;
 00001D66  33 C0			xor	EAX,EAX
 00001D68  6B C0 30			imul	EAX,EAX,000000030h
 00001D6B  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D72  E8 00000E81			call	 UnitTesting_TestIntegers_get_Width
 00001D77  99				cdq	
 00001D78  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001D7E  89 03			mov	dword ptr [EBX],EAX
 00001D80  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{958}:nArea= array2[0].Width * array2[0].Height;
 00001D83  33 C0			xor	EAX,EAX
 00001D85  6B C0 30			imul	EAX,EAX,000000030h
 00001D88  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001D8F  E8 00000E64			call	 UnitTesting_TestIntegers_get_Width
 00001D94  50				push	EAX
 00001D95  33 C0			xor	EAX,EAX
 00001D97  6B C0 30			imul	EAX,EAX,000000030h
 00001D9A  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001DA1  E8 00000DBC			call	 UnitTesting_TestIntegers_get_Height
 00001DA6  59				pop	ECX
 00001DA7  99				cdq	
 00001DA8  0F AF C1			imul	EAX,ECX
 00001DAB  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001DB1  89 03			mov	dword ptr [EBX],EAX
 00001DB3  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{960}:array2[0].member1= Math::pi();
 00001DB6  33 C0			xor	EAX,EAX
 00001DB8  6B C0 30			imul	EAX,EAX,000000030h
 00001DBB  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001DC2  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00001DC5  50				push	EAX
 00001DC6  E8 00000000 E		call	 Math_pi
 00001DCB  50				push	EAX
 00001DCC  52				push	EDX 
 00001DCD  DD 04 24			fld	qword ptr [ESP]
 00001DD0  5A				pop	EDX
 00001DD1  58				pop	EAX 
 00001DD2  5B				pop	EBX
 00001DD3  DD 1B			fstp	qword ptr [EBX]

				;{961}:array2[0].member1= Math::log_e_base2();
 00001DD5  33 C0			xor	EAX,EAX
 00001DD7  6B C0 30			imul	EAX,EAX,000000030h
 00001DDA  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001DE1  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00001DE4  50				push	EAX
 00001DE5  E8 00000000 E		call	 Math_log_e_base2
 00001DEA  50				push	EAX
 00001DEB  52				push	EDX 
 00001DEC  DD 04 24			fld	qword ptr [ESP]
 00001DEF  5A				pop	EDX
 00001DF0  58				pop	EAX 
 00001DF1  5B				pop	EBX
 00001DF2  DD 1B			fstp	qword ptr [EBX]

				;{963}:Console::WriteLn("(1)", "nArea = 100 * 200 == ", nArea);
 00001DF4  8D 05 000001BA R		lea	EAX,OFFSET $S001131
 00001DFA  6A 00			push	000000000h
 00001DFC  50				push	EAX 
 00001DFD  E8 00000000 E		call	 Console_WriteString
 00001E02  8D 05 00000FDF R		lea	EAX,OFFSET $S001132
 00001E08  6A 00			push	000000000h 
 00001E0A  50				push	EAX 
 00001E0B  E8 00000000 E		call	 Console_WriteString 
 00001E10  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001E16  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001E1C  52				push	EDX 
 00001E1D  50				push	EAX 
 00001E1E  E8 00000000 E		call	 Console_WriteInteger64 
 00001E23  E8 00000000 E		call	 Console_WriteCrLf 

				;{965}:array2[1].Width= 100;
 00001E28  B8 00000001			mov	EAX,000000001h
 00001E2D  6B C0 30			imul	EAX,EAX,000000030h
 00001E30  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E37  51				push	ECX
 00001E38  B8 00000064			mov	EAX,000000064h
 00001E3D  59				pop	ECX
 00001E3E  50				push	EAX
 00001E3F  E8 00000DC7			call	 UnitTesting_TestIntegers_put_Width

				;{966}:array2[1].Height= 200;
 00001E44  B8 00000001			mov	EAX,000000001h
 00001E49  6B C0 30			imul	EAX,EAX,000000030h
 00001E4C  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E53  51				push	ECX
 00001E54  B8 000000C8			mov	EAX,0000000C8h
 00001E59  59				pop	ECX
 00001E5A  50				push	EAX
 00001E5B  E8 00000D16			call	 UnitTesting_TestIntegers_put_Height

				;{968}:nArea= array2[1].Width * array2[1].Height;
 00001E60  B8 00000001			mov	EAX,000000001h
 00001E65  6B C0 30			imul	EAX,EAX,000000030h
 00001E68  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E6F  E8 00000D84			call	 UnitTesting_TestIntegers_get_Width
 00001E74  50				push	EAX
 00001E75  B8 00000001			mov	EAX,000000001h
 00001E7A  6B C0 30			imul	EAX,EAX,000000030h
 00001E7D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001E84  E8 00000CD9			call	 UnitTesting_TestIntegers_get_Height
 00001E89  59				pop	ECX
 00001E8A  99				cdq	
 00001E8B  0F AF C1			imul	EAX,ECX
 00001E8E  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001E94  89 03			mov	dword ptr [EBX],EAX
 00001E96  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{970}:Console::WriteLn("(2)", "nArea = 100 * 200 == ", nArea);
 00001E99  8D 05 0000024A R		lea	EAX,OFFSET $S001133
 00001E9F  6A 00			push	000000000h
 00001EA1  50				push	EAX 
 00001EA2  E8 00000000 E		call	 Console_WriteString
 00001EA7  8D 05 00000FDF R		lea	EAX,OFFSET $S001132
 00001EAD  6A 00			push	000000000h 
 00001EAF  50				push	EAX 
 00001EB0  E8 00000000 E		call	 Console_WriteString 
 00001EB5  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001EBB  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001EC1  52				push	EDX 
 00001EC2  50				push	EAX 
 00001EC3  E8 00000000 E		call	 Console_WriteInteger64 
 00001EC8  E8 00000000 E		call	 Console_WriteCrLf 

				;{972}:array2[2].Width= 100;
 00001ECD  B8 00000002			mov	EAX,000000002h
 00001ED2  6B C0 30			imul	EAX,EAX,000000030h
 00001ED5  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001EDC  51				push	ECX
 00001EDD  B8 00000064			mov	EAX,000000064h
 00001EE2  59				pop	ECX
 00001EE3  50				push	EAX
 00001EE4  E8 00000D22			call	 UnitTesting_TestIntegers_put_Width

				;{973}:array2[2].Height= 200;
 00001EE9  B8 00000002			mov	EAX,000000002h
 00001EEE  6B C0 30			imul	EAX,EAX,000000030h
 00001EF1  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001EF8  51				push	ECX
 00001EF9  B8 000000C8			mov	EAX,0000000C8h
 00001EFE  59				pop	ECX
 00001EFF  50				push	EAX
 00001F00  E8 00000C71			call	 UnitTesting_TestIntegers_put_Height

				;{975}:nArea= array2[2].Width * array2[2].Height;
 00001F05  B8 00000002			mov	EAX,000000002h
 00001F0A  6B C0 30			imul	EAX,EAX,000000030h
 00001F0D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F14  E8 00000CDF			call	 UnitTesting_TestIntegers_get_Width
 00001F19  50				push	EAX
 00001F1A  B8 00000002			mov	EAX,000000002h
 00001F1F  6B C0 30			imul	EAX,EAX,000000030h
 00001F22  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F29  E8 00000C34			call	 UnitTesting_TestIntegers_get_Height
 00001F2E  59				pop	ECX
 00001F2F  99				cdq	
 00001F30  0F AF C1			imul	EAX,ECX
 00001F33  8D 9D FFFFFF38		lea	EBX,dword ptr [EBP-00C8h]
 00001F39  89 03			mov	dword ptr [EBX],EAX
 00001F3B  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{977}:Console::WriteLn("(3)", "nArea = 100 * 200 == ", nArea);
 00001F3E  8D 05 000002DA R		lea	EAX,OFFSET $S001134
 00001F44  6A 00			push	000000000h
 00001F46  50				push	EAX 
 00001F47  E8 00000000 E		call	 Console_WriteString
 00001F4C  8D 05 00000FDF R		lea	EAX,OFFSET $S001132
 00001F52  6A 00			push	000000000h 
 00001F54  50				push	EAX 
 00001F55  E8 00000000 E		call	 Console_WriteString 
 00001F5A  8B 85 FFFFFF38		mov	EAX,dword ptr [EBP-00C8h]
 00001F60  8B 95 FFFFFF3C		mov	EDX,dword ptr [EBP-00C4h] 
 00001F66  52				push	EDX 
 00001F67  50				push	EAX 
 00001F68  E8 00000000 E		call	 Console_WriteInteger64 
 00001F6D  E8 00000000 E		call	 Console_WriteCrLf 

				;{980}:array2[3].my_array1[0]= 9.99;
 00001F72  B8 00000003			mov	EAX,000000003h
 00001F77  6B C0 30			imul	EAX,EAX,000000030h
 00001F7A  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001F81  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00001F84  8B F0			mov	ESI,EAX
 00001F86  56				push	ESI
 00001F87  33 C0			xor	EAX,EAX
 00001F89  5E				pop	ESI
 00001F8A  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001F8D  50				push	EAX
 00001F8E  BA 47AE147B			mov	EDX,047AE147Bh
 00001F93  B8 4023FAE1			mov	EAX,04023FAE1h 
 00001F98  50				push	EAX
 00001F99  52				push	EDX 
 00001F9A  DD 04 24			fld	qword ptr [ESP]
 00001F9D  5A				pop	EDX
 00001F9E  58				pop	EAX 
 00001F9F  5B				pop	EBX
 00001FA0  DD 1B			fstp	qword ptr [EBX]

				;{981}:array2[3].my_array1[1]= 3.1415927;
 00001FA2  B8 00000003			mov	EAX,000000003h
 00001FA7  6B C0 30			imul	EAX,EAX,000000030h
 00001FAA  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001FB1  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00001FB4  8B F0			mov	ESI,EAX
 00001FB6  56				push	ESI
 00001FB7  B8 00000001			mov	EAX,000000001h
 00001FBC  5E				pop	ESI
 00001FBD  8D 04 C6			lea	EAX,dword ptr [ESI+EAX*0008h]
 00001FC0  50				push	EAX
 00001FC1  BA 5A7ED197			mov	EDX,05A7ED197h
 00001FC6  B8 400921FB			mov	EAX,0400921FBh 
 00001FCB  50	push	EAX
 00001FCC  52				push	EDX 
 00001FCD  DD 04 24			fld	qword ptr [ESP]
 00001FD0  5A				pop	EDX
 00001FD1  58				pop	EAX 
 00001FD2  5B				pop	EBX
 00001FD3  DD 1B			fstp	qword ptr [EBX]

				;{982}:array2[3].my_array2[0]= FloatingPoint::ToInt(9.99);
 00001FD5  B8 00000003			mov	EAX,000000003h
 00001FDA  6B C0 30			imul	EAX,EAX,000000030h
 00001FDD  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00001FE4  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 00001FE7  8B F0			mov	ESI,EAX
 00001FE9  56				push	ESI
 00001FEA  33 C0			xor	EAX,EAX
 00001FEC  5E				pop	ESI
 00001FED  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00001FF0  50				push	EAX
 00001FF1  BA 47AE147B			mov	EDX,047AE147Bh
 00001FF6  B8 4023FAE1			mov	EAX,04023FAE1h 
 00001FFB  50				push	EAX
 00001FFC  52				push	EDX 
 00001FFD  E8 00000000 E		call	 FloatingPoint_ToInt
 00002002  5B				pop	EBX
 00002003  89 03			mov	dword ptr [EBX],EAX

				;{983}:array2[3].my_array2[1]= FloatingPoint::ToInt(3.1415927);
 00002005  B8 00000003			mov	EAX,000000003h
 0000200A  6B C0 30			imul	EAX,EAX,000000030h
 0000200D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00002014  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 00002017  8B F0			mov	ESI,EAX
 00002019  56				push	ESI
 0000201A  B8 00000001			mov	EAX,000000001h
 0000201F  5E				pop	ESI
 00002020  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00002023  50				push	EAX
 00002024  BA 5A7ED197			mov	EDX,05A7ED197h
 00002029  B8 400921FB			mov	EAX,0400921FBh 
 0000202E  50				push	EAX
 0000202F  52				push	EDX 
 00002030  E8 00000000 E		call	 FloatingPoint_ToInt
 00002035  5B				pop	EBX
 00002036  89 03			mov	dword ptr [EBX],EAX

				;{985}:Console::WriteLn("array2[3].my_array1[0] (double)== 9.99 == ", array2[3].my_array1[0]);
 00002038  8D 05 00000DD3 R		lea	EAX,OFFSET $S001137
 0000203E  6A 00			push	000000000h
 00002040  50				push	EAX 
 00002041  E8 00000000 E		call	 Console_WriteString
 00002046  B8 00000003			mov	EAX,000000003h
 0000204B  6B C0 30			imul	EAX,EAX,000000030h
 0000204E  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00002055  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00002058  8B F0			mov	ESI,EAX
 0000205A  56				push	ESI
 0000205B  33 C0			xor	EAX,EAX
 0000205D  5E				pop	ESI
 0000205E  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 00002061  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 00002068  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 0000206B  50				push	EAX 
 0000206C  52				push	EDX 
 0000206D  E8 00000000 E		call	 Console_WriteDouble 
 00002072  E8 00000000 E		call	 Console_WriteCrLf 

				;{986}:Console::WriteLn("array2[3].my_array1[1] (double)== 3.1415927 == ", array2[3].my_array1[1]);
 00002077  8D 05 00000DFE R		lea	EAX,OFFSET $S001138
 0000207D  6A 00			push	000000000h
 0000207F  50				push	EAX 
 00002080  E8 00000000 E		call	 Console_WriteString
 00002085  B8 00000003			mov	EAX,000000003h
 0000208A  6B C0 30			imul	EAX,EAX,000000030h
 0000208D  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 00002094  8D 41 18			lea	EAX,dword ptr [ECX+0018h] ;array data member as element on an object
 00002097  8B F0			mov	ESI,EAX
 00002099  56				push	ESI
 0000209A  B8 00000001			mov	EAX,000000001h
 0000209F  5E				pop	ESI
 000020A0  8B 14 C6			mov	EDX,dword ptr [ESI+EAX*0008h]
 000020A3  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 000020AA  8B 04 30			mov	EAX,dword ptr [ESI+EAX] 
 000020AD  50				push	EAX 
 000020AE  52				push	EDX 
 000020AF  E8 00000000 E		call	 Console_WriteDouble 
 000020B4  E8 00000000 E		call	 Console_WriteCrLf 

				;{988}:Console::WriteLn("array2[3].my_array2[0] (int)== 10 == ", array2[3].my_array2[0]);
 000020B9  8D 05 00000E2E R		lea	EAX,OFFSET $S001139
 000020BF  6A 00			push	000000000h
 000020C1  50				push	EAX 
 000020C2  E8 00000000 E		call	 Console_WriteString
 000020C7  B8 00000003			mov	EAX,000000003h
 000020CC  6B C0 30			imul	EAX,EAX,000000030h
 000020CF  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 000020D6  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 000020D9  8B F0			mov	ESI,EAX
 000020DB  56				push	ESI
 000020DC  33 C0			xor	EAX,EAX
 000020DE  5E				pop	ESI
 000020DF  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 000020E2  50				push	EAX 
 000020E3  E8 00000000 E		call	 Console_WriteInteger 
 000020E8  E8 00000000 E		call	 Console_WriteCrLf 

				;{989}:Console::WriteLn("array2[3].my_array2[1] (int)== 3 == ", array2[3].my_array2[1]);
 000020ED  8D 05 00000E54 R		lea	EAX,OFFSET $S001140
 000020F3  6A 00			push	000000000h
 000020F5  50				push	EAX 
 000020F6  E8 00000000 E		call	 Console_WriteString
 000020FB  B8 00000003			mov	EAX,000000003h
 00002100  6B C0 30			imul	EAX,EAX,000000030h
 00002103  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-00C0h]
	   FFFFFF40
 0000210A  8D 41 28			lea	EAX,dword ptr [ECX+0028h] ;array data member as element on an object
 0000210D  8B F0			mov	ESI,EAX
 0000210F  56				push	ESI
 00002110  B8 00000001			mov	EAX,000000001h
 00002115  5E				pop	ESI
 00002116  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00002119  50				push	EAX 
 0000211A  E8 00000000 E		call	 Console_WriteInteger 
 0000211F  E8 00000000 E		call	 Console_WriteCrLf 

				;{992}:UnitTesting::array3;
 00002124  8D 05 0000127C R		lea	EAX, UnitTesting_array3
 0000212A  8B F0			mov	ESI,EAX
 0000212C  8B DE			mov	EBX,ESI
 0000212E  8B CB			mov	ECX,EBX 
 00002130  E8 FFFFE608			call	 UnitTesting_Circle
 00002135  83 C3 0C			add	EBX,00000000Ch
 00002138  8B CB			mov	ECX,EBX 
 0000213A  E8 FFFFE5FE			call	 UnitTesting_Circle
 0000213F  83 C3 0C			add	EBX,00000000Ch 
 00002142  8B CB			mov	ECX,EBX 
 00002144  E8 FFFFE5F4			call	 UnitTesting_Circle
 00002149  83 C3 0C			add	EBX,00000000Ch 
 0000214C  8B CB			mov	ECX,EBX 
 0000214E  E8 FFFFE5EA			call	 UnitTesting_Circle

				;{994}:UnitTesting::array3[0].Draw();
 00002153  33 C0			xor	EAX,EAX
 00002155  6B C0 0C			imul	EAX,00000000Ch
 00002158  8D 88 0000127C R		lea	ECX,dword ptr [EAX+UnitTesting_array3]
 0000215E  8B 11			mov	EDX,dword ptr [ECX]
 00002160  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{996}:UnitTesting::array3[2].Draw();
 00002163  B8 00000002			mov	EAX,000000002h
 00002168  6B C0 0C			imul	EAX,00000000Ch
 0000216B  8D 88 0000127C R		lea	ECX,dword ptr [EAX+UnitTesting_array3]
 00002171  8B 11			mov	EDX,dword ptr [ECX]
 00002173  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{998}:UnitTesting::array4;
 00002176  8D 05 00001280 R		lea	EAX, UnitTesting_array4

				;{1000}:UnitTesting::array4[0]= Math::pi();
 0000217C  33 C0			xor	EAX,EAX
 0000217E  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 00002185  50				push	EAX
 00002186  E8 00000000 E		call	 Math_pi
 0000218B  50				push	EAX
 0000218C  52				push	EDX 
 0000218D  DD 04 24			fld	qword ptr [ESP]
 00002190  5A				pop	EDX
 00002191  58				pop	EAX 
 00002192  5B				pop	EBX
 00002193  DD 1B			fstp	qword ptr [EBX]

				;{1001}:UnitTesting::array4[1]= Math::pi() * 2.1;
 00002195  B8 00000001			mov	EAX,000000001h
 0000219A  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 000021A1  50				push	EAX
 000021A2  E8 00000000 E		call	 Math_pi
 000021A7  50				push	EAX
 000021A8  52				push	EDX 
 000021A9  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000021AE  B8 4000CCCC			mov	EAX,04000CCCCh 
 000021B3  9B DB E2			fclex
 000021B6  50				push	EAX
 000021B7  52				push	EDX 
 000021B8  DD 04 24			fld	qword ptr [ESP]
 000021BB  59				pop	ECX
 000021BC  59				pop	ECX 
 000021BD  DC 0C 24			fmul	qword ptr [ESP]
 000021C0  DD 1C 24			fstp	qword ptr [ESP]
 000021C3  DD 04 24			fld	qword ptr [ESP]
 000021C6  5A				pop	EDX
 000021C7  58				pop	EAX 
 000021C8  5B				pop	EBX
 000021C9  DD 1B			fstp	qword ptr [EBX]

				;{1002}:UnitTesting::array4[2]= Math::pi() * 4.1;
 000021CB  B8 00000002			mov	EAX,000000002h
 000021D0  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 000021D7  50				push	EAX
 000021D8  E8 00000000 E		call	 Math_pi
 000021DD  50				push	EAX
 000021DE  52				push	EDX 
 000021DF  BA 66666667			mov	EDX,066666667h
 000021E4  B8 40106666			mov	EAX,040106666h 
 000021E9  9B DB E2			fclex
 000021EC  50				push	EAX
 000021ED  52				push	EDX 
 000021EE  DD 04 24			fld	qword ptr [ESP]
 000021F1  59				pop	ECX
 000021F2  59				pop	ECX 
 000021F3  DC 0C 24			fmul	qword ptr [ESP]
 000021F6  DD 1C 24			fstp	qword ptr [ESP]
 000021F9  DD 04 24			fld	qword ptr [ESP]
 000021FC  5A				pop	EDX
 000021FD  58				pop	EAX 
 000021FE  5B				pop	EBX
 000021FF  DD 1B			fstp	qword ptr [EBX]

				;{1003}:UnitTesting::array4[3]= Math::pi() * 8.1;
 00002201  B8 00000003			mov	EAX,000000003h
 00002206  8D 04 C5			lea	EAX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 0000220D  50				push	EAX
 0000220E  E8 00000000 E		call	 Math_pi
 00002213  50				push	EAX
 00002214  52				push	EDX 
 00002215  BA 33333333			mov	EDX,033333333h
 0000221A  B8 40203333			mov	EAX,040203333h 
 0000221F  9B DB E2			fclex
 00002222  50				push	EAX
 00002223  52				push	EDX 
 00002224  DD 04 24			fld	qword ptr [ESP]
 00002227  59				pop	ECX
 00002228  59				pop	ECX 
 00002229  DC 0C 24			fmul	qword ptr [ESP]
 0000222C  DD 1C 24			fstp	qword ptr [ESP]
 0000222F  DD 04 24			fld	qword ptr [ESP]
 00002232  5A				pop	EDX
 00002233  58				pop	EAX 
 00002234  5B				pop	EBX
 00002235  DD 1B			fstp	qword ptr [EBX]

				;{1005}:for(x= 0; x < 4; x++ )
 00002237  33 C0			xor	EAX,EAX
 00002239  89 85 FFFFFF34		mov	dword ptr [EBP-00CCh],EAX
 0000223F  EB 0C			jmp	OFFSET $L001503
 00002241			$L001504:
 00002241  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-204]
 00002247  FF 85 FFFFFF34		inc	dword ptr [EBP-204]
 0000224D			$L001503:
 0000224D  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00002253  50				push	EAX
 00002254  B8 00000004			mov	EAX,000000004h
 00002259  5A				pop	EDX
 0000225A  3B D0			cmp	EDX,EAX
 0000225C  0F 9C C0			setl	AL
 0000225F  84 C0			test	AL,AL
 00002261  74 50			jz	OFFSET $L001505

				;{1006}:Console::WriteLn("array4[", x, "] = ", UnitTesting::array4[x]);
 00002263  8D 05 00000E79 R		lea	EAX,OFFSET $S001147
 00002269  6A 00			push	000000000h
 0000226B  50				push	EAX 
 0000226C  E8 00000000 E		call	 Console_WriteString
 00002271  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00002277  50				push	EAX 
 00002278  E8 00000000 E		call	 Console_WriteInteger 
 0000227D  8D 05 00000DC1 R		lea	EAX,OFFSET $S001148
 00002283  6A 00			push	000000000h 
 00002285  50				push	EAX 
 00002286  E8 00000000 E		call	 Console_WriteString 
 0000228B  8B 85 FFFFFF34		mov	EAX,dword ptr [EBP-00CCh]
 00002291  8B 14 C5			mov	EDX,dword ptr [EAX*8+UnitTesting_array4]
	   00001280 R
 00002298  8D 04 C5			lea	EAX,dword ptr [EAX*0008h+4] ;low part
	   00000004
 0000229F  8B 80 00001280 R		mov	EAX,dword ptr [EAX+UnitTesting_array4] 
 000022A5  50				push	EAX 
 000022A6  52				push	EDX 
 000022A7  E8 00000000 E		call	 Console_WriteDouble 
 000022AC  E8 00000000 E		call	 Console_WriteCrLf 
 000022B1  EB 8E			jmp	OFFSET $L001504 
 000022B3			$L001505:

				;{1010}:name= "Harold L. Marzan";
 000022B3  8D 05 00000A56 R		lea	EAX,OFFSET $S001150
 000022B9  89 85 FFFFFF30		mov	dword ptr [EBP-00D0h],EAX

				;{1011}:UnitTesting::TestArrays::printChars(name, StringHandling::StringLength(name));
 000022BF  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000022C5  50				push	EAX
 000022C6  E8 00000000 E		call	 StringHandling_StringLength
 000022CB  50				push	EAX 
 000022CC  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000022D2  50				push	EAX
 000022D3  E8 00000466			call	 UnitTesting_TestArrays_printChars

				;{1013}:my_name_is;
 000022D8  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]

				;{1015}:StringHandling::StringSet(my_name_is, 0, sizeof (my_name_is));
 000022DE  B8 00000014			mov	EAX,000000014h
 000022E3  50				push	EAX 
 000022E4  33 C0			xor	EAX,EAX
 000022E6  50				push	EAX 
 000022E7  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000022ED  50				push	EAX
 000022EE  E8 00000000 E		call	 StringHandling_StringSet

				;{1017}:my_name_is[0]= 'H';
 000022F3  33 C0			xor	EAX,EAX
 000022F5  6B C0 01			imul	EAX,EAX,000000001h
 000022F8  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 000022FF  50				push	EAX
 00002300  B8 00000048			mov	EAX,000000048h
 00002305  5B				pop	EBX
 00002306  88 03			mov	byte ptr [EBX],AL

				;{1018}:my_name_is[1]= 'a';
 00002308  B8 00000001			mov	EAX,000000001h
 0000230D  6B C0 01			imul	EAX,EAX,000000001h
 00002310  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002317  50				push	EAX
 00002318  B8 00000061			mov	EAX,000000061h
 0000231D  5B				pop	EBX
 0000231E  88 03			mov	byte ptr [EBX],AL

				;{1019}:my_name_is[2]= 'r';
 00002320  B8 00000002			mov	EAX,000000002h
 00002325  6B C0 01			imul	EAX,EAX,000000001h
 00002328  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000232F  50				push	EAX
 00002330  B8 00000072			mov	EAX,000000072h
 00002335  5B				pop	EBX
 00002336  88 03			mov	byte ptr [EBX],AL

				;{1020}:my_name_is[3]= 'o';
 00002338  B8 00000003			mov	EAX,000000003h
 0000233D  6B C0 01			imul	EAX,EAX,000000001h
 00002340  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002347  50				push	EAX
 00002348  B8 0000006F			mov	EAX,00000006Fh
 0000234D  5B				pop	EBX
 0000234E  88 03			mov	byte ptr [EBX],AL

				;{1021}:my_name_is[4]= 'l';
 00002350  B8 00000004			mov	EAX,000000004h
 00002355  6B C0 01			imul	EAX,EAX,000000001h
 00002358  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000235F  50				push	EAX
 00002360  B8 0000006C			mov	EAX,00000006Ch
 00002365  5B				pop	EBX
 00002366  88 03			mov	byte ptr [EBX],AL

				;{1022}:my_name_is[5]= 'd';
 00002368  B8 00000005			mov	EAX,000000005h
 0000236D  6B C0 01			imul	EAX,EAX,000000001h
 00002370  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 00002377  50				push	EAX
 00002378  B8 00000064			mov	EAX,000000064h
 0000237D  5B				pop	EBX
 0000237E  88 03			mov	byte ptr [EBX],AL

				;{1023}:my_name_is[6]= ' ';
 00002380  B8 00000006			mov	EAX,000000006h
 00002385  6B C0 01			imul	EAX,EAX,000000001h
 00002388  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00E4h]
	   FFFFFF1C
 0000238F  50				push	EAX
 00002390  33 C0			xor	EAX,EAX
 00002392  5B				pop	EBX
 00002393  88 03			mov	byte ptr [EBX],AL

				;{1027}:Console::WriteLn("My name is :", my_name_is);
 00002395  8D 05 00000B15 R		lea	EAX,OFFSET $S001159
 0000239B  6A 00			push	000000000h
 0000239D  50				push	EAX 
 0000239E  E8 00000000 E		call	 Console_WriteString
 000023A3  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000023A9  6A 14			push	000000014h 
 000023AB  50				push	EAX 
 000023AC  E8 00000000 E		call	 Console_WriteString 
 000023B1  E8 00000000 E		call	 Console_WriteCrLf 

				;{1029}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 000023B6  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000023BC  50				push	EAX
 000023BD  E8 00000000 E		call	 StringHandling_StringLength
 000023C2  50				push	EAX 
 000023C3  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 000023C9  50				push	EAX
 000023CA  E8 0000036F			call	 UnitTesting_TestArrays_printChars

				;{1032}:arr;
 000023CF  8D 85 FFFFFE54		lea	EAX,dword ptr [EBP-01ACh]

				;{1034}:arr[0][0]= 'H';
 000023D5  33 C0			xor	EAX,EAX
 000023D7  6B C0 14			imul	EAX,EAX,000000014h
 000023DA  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000023E1  52				push	EDX
 000023E2  33 C0			xor	EAX,EAX
 000023E4  5E				pop	ESI
 000023E5  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000023E8  50				push	EAX
 000023E9  B8 00000048			mov	EAX,000000048h
 000023EE  5B				pop	EBX
 000023EF  88 03			mov	byte ptr [EBX],AL

				;{1035}:arr[0][1]= 'E';
 000023F1  33 C0			xor	EAX,EAX
 000023F3  6B C0 14			imul	EAX,EAX,000000014h
 000023F6  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000023FD  52				push	EDX
 000023FE  B8 00000001			mov	EAX,000000001h
 00002403  5E				pop	ESI
 00002404  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002407  50				push	EAX
 00002408  B8 00000045			mov	EAX,000000045h
 0000240D  5B				pop	EBX
 0000240E  88 03			mov	byte ptr [EBX],AL

				;{1036}:arr[0][2]= 'L';
 00002410  33 C0			xor	EAX,EAX
 00002412  6B C0 14			imul	EAX,EAX,000000014h
 00002415  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000241C  52				push	EDX
 0000241D  B8 00000002			mov	EAX,000000002h
 00002422  5E				pop	ESI
 00002423  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002426  50				push	EAX
 00002427  B8 0000004C			mov	EAX,00000004Ch
 0000242C  5B				pop	EBX
 0000242D  88 03			mov	byte ptr [EBX],AL

				;{1037}:arr[0][3]= 'L';
 0000242F  33 C0			xor	EAX,EAX
 00002431  6B C0 14			imul	EAX,EAX,000000014h
 00002434  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000243B  52				push	EDX
 0000243C  B8 00000003			mov	EAX,000000003h
 00002441  5E				pop	ESI
 00002442  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002445  50				push	EAX
 00002446  B8 0000004C			mov	EAX,00000004Ch
 0000244B  5B				pop	EBX
 0000244C  88 03			mov	byte ptr [EBX],AL

				;{1038}:arr[0][4]= 'O';
 0000244E  33 C0			xor	EAX,EAX
 00002450  6B C0 14			imul	EAX,EAX,000000014h
 00002453  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000245A  52				push	EDX
 0000245B  B8 00000004			mov	EAX,000000004h
 00002460  5E				pop	ESI
 00002461  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002464  50				push	EAX
 00002465  B8 0000004F			mov	EAX,00000004Fh
 0000246A  5B				pop	EBX
 0000246B  88 03			mov	byte ptr [EBX],AL

				;{1039}:arr[0][5]= '!';
 0000246D  33 C0			xor	EAX,EAX
 0000246F  6B C0 14			imul	EAX,EAX,000000014h
 00002472  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002479  52				push	EDX
 0000247A  B8 00000005			mov	EAX,000000005h
 0000247F  5E				pop	ESI
 00002480  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002483  50				push	EAX
 00002484  B8 00000021			mov	EAX,000000021h
 00002489  5B				pop	EBX
 0000248A  88 03			mov	byte ptr [EBX],AL

				;{1041}:arr[0][0]= 'H';
 0000248C  33 C0			xor	EAX,EAX
 0000248E  6B C0 14			imul	EAX,EAX,000000014h
 00002491  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 00002498  52				push	EDX
 00002499  33 C0			xor	EAX,EAX
 0000249B  5E				pop	ESI
 0000249C  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 0000249F  50				push	EAX
 000024A0  B8 00000048			mov	EAX,000000048h
 000024A5  5B				pop	EBX
 000024A6  88 03			mov	byte ptr [EBX],AL

				;{1042}:arr[1][1]= 'E';
 000024A8  B8 00000001			mov	EAX,000000001h
 000024AD  6B C0 14			imul	EAX,EAX,000000014h
 000024B0  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024B7  52				push	EDX
 000024B8  B8 00000001			mov	EAX,000000001h
 000024BD  5E				pop	ESI
 000024BE  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000024C1  50				push	EAX
 000024C2  B8 00000045			mov	EAX,000000045h
 000024C7  5B				pop	EBX
 000024C8  88 03			mov	byte ptr [EBX],AL

				;{1043}:arr[2][2]= 'L';
 000024CA  B8 00000002			mov	EAX,000000002h
 000024CF  6B C0 14			imul	EAX,EAX,000000014h
 000024D2  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024D9  52				push	EDX
 000024DA  B8 00000002			mov	EAX,000000002h
 000024DF  5E				pop	ESI
 000024E0  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 000024E3  50				push	EAX
 000024E4  B8 0000004C			mov	EAX,00000004Ch
 000024E9  5B				pop	EBX
 000024EA  88 03			mov	byte ptr [EBX],AL

				;{1044}:arr[3][3]= 'L';
 000024EC  B8 00000003			mov	EAX,000000003h
 000024F1  6B C0 14			imul	EAX,EAX,000000014h
 000024F4  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000024FB  52				push	EDX
 000024FC  B8 00000003			mov	EAX,000000003h
 00002501  5E				pop	ESI
 00002502  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002505  50				push	EAX
 00002506  B8 0000004C			mov	EAX,00000004Ch
 0000250B  5B				pop	EBX
 0000250C  88 03			mov	byte ptr [EBX],AL

				;{1045}:arr[4][4]= 'O';
 0000250E  B8 00000004			mov	EAX,000000004h
 00002513  6B C0 14			imul	EAX,EAX,000000014h
 00002516  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000251D  52				push	EDX
 0000251E  B8 00000004			mov	EAX,000000004h
 00002523  5E				pop	ESI
 00002524  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002527  50				push	EAX
 00002528  B8 0000004F			mov	EAX,00000004Fh
 0000252D  5B				pop	EBX
 0000252E  88 03			mov	byte ptr [EBX],AL

				;{1046}:arr[5][5]= '!';
 00002530  B8 00000005			mov	EAX,000000005h
 00002535  6B C0 14			imul	EAX,EAX,000000014h
 00002538  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 0000253F  52				push	EDX
 00002540  B8 00000005			mov	EAX,000000005h
 00002545  5E				pop	ESI
 00002546  8D 04 06			lea	EAX,dword ptr [ESI+EAX*0001h]
 00002549  50				push	EAX
 0000254A  B8 00000021			mov	EAX,000000021h
 0000254F  5B				pop	EBX
 00002550  88 03			mov	byte ptr [EBX],AL

				;{1048}:for(i= 0; i < 6; i++ )
 00002552  33 C0			xor	EAX,EAX
 00002554  89 85 FFFFFE50		mov	dword ptr [EBP-01B0h],EAX
 0000255A  EB 0C			jmp	OFFSET $L001506
 0000255C			$L001507:
 0000255C  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00002562  FF 85 FFFFFE50		inc	dword ptr [EBP-432]
 00002568			$L001506:
 00002568  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 0000256E  50				push	EAX
 0000256F  B8 00000006			mov	EAX,000000006h
 00002574  5A				pop	EDX
 00002575  3B D0			cmp	EDX,EAX
 00002577  0F 9C C0			setl	AL
 0000257A  84 C0			test	AL,AL
 0000257C  74 6D			jz	OFFSET $L001508

				;{1049}:Console::WriteLn("Char at [", i, ", ", i, "]=", arr[i][i]);
 0000257E  8D 05 000007C5 R		lea	EAX,OFFSET $S001166
 00002584  6A 00			push	000000000h
 00002586  50				push	EAX 
 00002587  E8 00000000 E		call	 Console_WriteString
 0000258C  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 00002592  50				push	EAX 
 00002593  E8 00000000 E		call	 Console_WriteInteger 
 00002598  8D 05 000006FC R		lea	EAX,OFFSET $S001167
 0000259E  6A 00			push	000000000h 
 000025A0  50				push	EAX 
 000025A1  E8 00000000 E		call	 Console_WriteString 
 000025A6  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000025AC  50				push	EAX 
 000025AD  E8 00000000 E		call	 Console_WriteInteger 
 000025B2  8D 05 00000DD0 R		lea	EAX,OFFSET $S001168
 000025B8  6A 00			push	000000000h 
 000025BA  50				push	EAX 
 000025BB  E8 00000000 E		call	 Console_WriteString 
 000025C0  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000025C6  6B C0 14			imul	EAX,EAX,000000014h
 000025C9  8D 94 28			lea	EDX,dword ptr [EBP+EAX-01ACh]
	   FFFFFE54
 000025D0  52				push	EDX
 000025D1  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000025D7  5E				pop	ESI
 000025D8  8B 04 06			mov	EAX,dword ptr [ESI+EAX*0001h]
 000025DB  50				push	EAX 
 000025DC  E8 00000000 E		call	 Console_WriteChar 
 000025E1  E8 00000000 E		call	 Console_WriteCrLf 
 000025E6  E9 FFFFFF71			jmp	OFFSET $L001507 
 000025EB			$L001508:

				;{1053}:testt;
 000025EB  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]

				;{1054}:test= "Testing!!!";
 000025F1  8D 05 00000C50 R		lea	EAX,OFFSET $S001171
 000025F7  89 85 FFFFFD84		mov	dword ptr [EBP-027Ch],EAX

				;{1055}:StringHandling::StringCopy(testt, test, StringHandling::StringLength(test));
 000025FD  8B 85 FFFFFD84		mov	EAX,dword ptr [EBP-027Ch]
 00002603  50				push	EAX
 00002604  E8 00000000 E		call	 StringHandling_StringLength
 00002609  50				push	EAX 
 0000260A  8B 85 FFFFFD84		mov	EAX,dword ptr [EBP-027Ch]
 00002610  50				push	EAX 
 00002611  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 00002617  50				push	EAX
 00002618  E8 00000000 E		call	 StringHandling_StringCopy

				;{1057}:UnitTesting::TestArrays::printChars(testt, StringHandling::StringLength(testt));
 0000261D  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 00002623  50				push	EAX
 00002624  E8 00000000 E		call	 StringHandling_StringLength
 00002629  50				push	EAX 
 0000262A  8D 85 FFFFFD88		lea	EAX,dword ptr [EBP-0278h]
 00002630  50				push	EAX
 00002631  E8 00000108			call	 UnitTesting_TestArrays_printChars

				;{1062}:arr_of_strings;
 00002636  8D 85 FFFFFD74		lea	EAX,dword ptr [EBP-028Ch]

				;{1064}:arr_of_strings[0]= "Harold ";
 0000263C  33 C0			xor	EAX,EAX
 0000263E  6B C0 04			imul	EAX,EAX,000000004h
 00002641  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002648  50				push	EAX
 00002649  8D 05 00000A4E R		lea	EAX,OFFSET $S001173
 0000264F  5B				pop	EBX
 00002650  89 03			mov	dword ptr [EBX],EAX

				;{1065}:arr_of_strings[1]= "Lawrence ";
 00002652  B8 00000001			mov	EAX,000000001h
 00002657  6B C0 04			imul	EAX,EAX,000000004h
 0000265A  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002661  50				push	EAX
 00002662  8D 05 00000AED R		lea	EAX,OFFSET $S001174
 00002668  5B				pop	EBX
 00002669  89 03			mov	dword ptr [EBX],EAX

				;{1066}:arr_of_strings[2]= "Marzan ";
 0000266B  B8 00000002			mov	EAX,000000002h
 00002670  6B C0 04			imul	EAX,EAX,000000004h
 00002673  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 0000267A  50				push	EAX
 0000267B  8D 05 00000AF7 R		lea	EAX,OFFSET $S001175
 00002681  5B				pop	EBX
 00002682  89 03			mov	dword ptr [EBX],EAX

				;{1067}:arr_of_strings[3]= "Mercado.";
 00002684  B8 00000003			mov	EAX,000000003h
 00002689  6B C0 04			imul	EAX,EAX,000000004h
 0000268C  8D 84 28			lea	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 00002693  50				push	EAX
 00002694  8D 05 00000AFF R		lea	EAX,OFFSET $S001176
 0000269A  5B				pop	EBX
 0000269B  89 03			mov	dword ptr [EBX],EAX

				;{1069}:for(i= 0; i < 4; ++i)
 0000269D  33 C0			xor	EAX,EAX
 0000269F  89 85 FFFFFE50		mov	dword ptr [EBP-01B0h],EAX
 000026A5  EB 0C			jmp	OFFSET $L001509
 000026A7			$L001510:
 000026A7  FF 85 FFFFFE50		inc	dword ptr [EBP-432]
 000026AD  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 000026B3			$L001509:
 000026B3  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026B9  50				push	EAX
 000026BA  B8 00000004			mov	EAX,000000004h
 000026BF  5A				pop	EDX
 000026C0  3B D0			cmp	EDX,EAX
 000026C2  0F 9C C0			setl	AL
 000026C5  84 C0			test	AL,AL
 000026C7  74 2F			jz	OFFSET $L001511
				;{

				;{1071}:UnitTesting::TestArrays::printChars(arr_of_strings[i], StringHandling::StringLength(arr_of_strings[i]));
 000026C9  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026CF  6B C0 04			imul	EAX,EAX,000000004h
 000026D2  8B 84 28			mov	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 000026D9  50				push	EAX
 000026DA  E8 00000000 E		call	 StringHandling_StringLength
 000026DF  50				push	EAX 
 000026E0  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-01B0h]
 000026E6  6B C0 04			imul	EAX,EAX,000000004h
 000026E9  8B 84 28			mov	EAX,dword ptr [EBP+EAX-028Ch]
	   FFFFFD74
 000026F0  50				push	EAX
 000026F1  E8 00000048			call	 UnitTesting_TestArrays_printChars
				;}
 000026F6  EB AF			jmp	OFFSET $L001510 
 000026F8			$L001511:

				;{1074}:StringHandling::StringCopy(my_name_is, name, StringHandling::StringLength(name));
 000026F8  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 000026FE  50				push	EAX
 000026FF  E8 00000000 E		call	 StringHandling_StringLength
 00002704  50				push	EAX 
 00002705  8B 85 FFFFFF30		mov	EAX,dword ptr [EBP-00D0h]
 0000270B  50				push	EAX 
 0000270C  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 00002712  50				push	EAX
 00002713  E8 00000000 E		call	 StringHandling_StringCopy

				;{1075}:UnitTesting::TestArrays::printChars(my_name_is, StringHandling::StringLength(my_name_is));
 00002718  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 0000271E  50				push	EAX
 0000271F  E8 00000000 E		call	 StringHandling_StringLength
 00002724  50				push	EAX 
 00002725  8D 85 FFFFFF1C		lea	EAX,dword ptr [EBP-00E4h]
 0000272B  50				push	EAX
 0000272C  E8 0000000D			call	 UnitTesting_TestArrays_printChars
				;}
 00002731			$L001127:
 00002731  8D 85 FFFFFF40		lea	EAX,dword ptr [EBP-00C0h]
 00002737  8B F0			mov	ESI,EAX 

 00002739  5F				pop	EDI
 0000273A  5E				pop	ESI 
 0000273B  5B				pop	EBX 
 0000273C  C9				leave	
 0000273D  C3				ret	
 0000273E			UnitTesting_TestArrays_DoTest ENDP

 0000273E			UnitTesting_TestArrays_printChars PROC NEAR 
				;void UnitTesting::TestArrays::printChars(char [] array, int n);
 0000273E  55				push	EBP
 0000273F  8B EC			mov	EBP,ESP
 00002741  83 EC 08			sub	ESP,000000008h
 00002744  53				push	EBX 
 00002745  56				push	ESI 
 00002746  57				push	EDI 
 00002747  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 0000274A  B9 00000001			mov	ECX,000000001h
 0000274F  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002754  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;try
 00002756  54				push	ESP ;pPrevESP
 00002757  55				push	EBP ;pPrevEBP
 00002758  68 000027CA R		push	OFFSET __except_handlerXXX001515 
					assume FS:nothing
 0000275D  64: FF 35			push	dword ptr  FS:[0] 
	   00000000
 00002764  64: 89 25			mov	dword ptr  FS:[0],ESP
	   00000000

				;{929}:for(i= 0; i < n; ++i)
 0000276B  33 C0			xor	EAX,EAX
 0000276D  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 00002770  EB 06			jmp	OFFSET $L001518
 00002772			$L001519:
 00002772  FF 45 FC			inc	dword ptr [EBP-4]
 00002775  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00002778			$L001518:
 00002778  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000277B  50				push	EAX
 0000277C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 0000277F  5A				pop	EDX
 00002780  3B D0			cmp	EDX,EAX
 00002782  0F 9C C0			setl	AL
 00002785  84 C0			test	AL,AL
 00002787  74 3F			jz	OFFSET $L001520

				;{930}:Console::WriteLn("Char at i:[", i, "] == ", array[i]);
 00002789  8D 05 000007CF R		lea	EAX,OFFSET $S001124
 0000278F  6A 00			push	000000000h
 00002791  50				push	EAX 
 00002792  E8 00000000 E		call	 Console_WriteString
 00002797  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 0000279A  50				push	EAX 
 0000279B  E8 00000000 E		call	 Console_WriteInteger 
 000027A0  8D 05 00000DC6 R		lea	EAX,OFFSET $S001125
 000027A6  6A 00			push	000000000h 
 000027A8  50				push	EAX 
 000027A9  E8 00000000 E		call	 Console_WriteString 
 000027AE  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000027B1  8B C3			mov	EAX,EBX 
 000027B3  50				push	EAX
 000027B4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 000027B7  5E				pop	ESI
 000027B8  8B 04 06			mov	EAX,dword ptr [ESI+EAX*0001h]
 000027BB  50				push	EAX 
 000027BC  E8 00000000 E		call	 Console_WriteChar 
 000027C1  E8 00000000 E		call	 Console_WriteCrLf 
 000027C6  EB AA			jmp	OFFSET $L001519 
 000027C8			$L001520:
				;}
 000027C8  EB 5C			jmp	OFFSET $L001514
 000027CA			__except_handlerXXX001515:
 000027CA  8B 5C 24 04			mov	EBX,dword ptr [ESP+0004h] ;_ExceptionRecord
 000027CE  8B 0B			mov	ECX,dword ptr [EBX] ;_ExceptionRecord->ExceptionCode // The reason the exception occurred.
 000027D0  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 000027D7  8B 23			mov	ESP,dword ptr [EBX] 
 000027D9  64: 8F 05			pop	dword ptr  FS:[0]
	   00000000
 000027E0  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 000027E4  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP

				;{930}:(System::Exception::ACCESS_VIOLATION);
 000027E8  B8 C0000005			mov	EAX,0C0000005h
 000027ED  3B C1			cmp	EAX,ECX
 000027EF  75 15			jnz	OFFSET $L001521

				;{939}:Console::WriteLn("Oops! there was a serious bug in this code!");
 000027F1  8D 05 00000B2E R		lea	EAX,OFFSET $S001126
 000027F7  6A 00			push	000000000h
 000027F9  50				push	EAX 
 000027FA  E8 00000000 E		call	 Console_WriteString
 000027FF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002804  EB 36			jmp	OFFSET $L001517 
 00002806			$L001521:

				;{939}:(System::Exception::INTEGER_DIVIDE_BY_ZERO);
 00002806  B8 C0000094			mov	EAX,0C0000094h
 0000280B  3B C1			cmp	EAX,ECX 
 0000280D  75 15			jnz	OFFSET $L001522 

				;{943}:Console::WriteLn("Oops! there was a serious bug in this code!");
 0000280F  8D 05 00000B2E R		lea	EAX,OFFSET $S001126
 00002815  6A 00			push	000000000h
 00002817  50				push	EAX 
 00002818  E8 00000000 E		call	 Console_WriteString
 0000281D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002822  EB 18			jmp	OFFSET $L001517 
 00002824			$L001522:
 00002824  EB 16			jmp	OFFSET $L001517 
 00002826			$L001514:
 00002826  64: 8B 25			mov	ESP,dword ptr  FS:[0] 
	   00000000
 0000282D  64: 8F 05			pop	dword ptr  FS:[0] 
	   00000000
 00002834  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00002838  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 0000283C			$L001517:
				;}
 0000283C			$L001120:

 0000283C  5F				pop	EDI
 0000283D  5E				pop	ESI 
 0000283E  5B				pop	EBX 
 0000283F  C9				leave	
 00002840  C2 0008			retn	000000008h
 00002843			UnitTesting_TestArrays_printChars ENDP

 00002843			UnitTesting_TestFloatingPoint_Area PROC NEAR 
				;double Area(double minor_base, double major_base, double height);
 00002843  55				push	EBP
 00002844  8B EC			mov	EBP,ESP
 00002846  83 EC 0C			sub	ESP,00000000Ch
 00002849  53				push	EBX 
 0000284A  56				push	ESI 
 0000284B  57				push	EDI 
 0000284C  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 0000284F  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00002852  B9 00000002			mov	ECX,000000002h 
 00002857  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 0000285C  F3/ AB			rep stos	dword ptr [EDI]
 0000285E  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{904}:area= ((minor_base + major_base) * height) / 2.0;
 00002861  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002864  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002867  50				push	EAX
 00002868  52				push	EDX 
 00002869  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 0000286C  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 0000286F  50				push	EAX
 00002870  52				push	EDX 
 00002871  DD 04 24			fld	qword ptr [ESP]
 00002874  59				pop	ECX
 00002875  59				pop	ECX 
 00002876  DC 04 24			fadd	qword ptr [ESP]
 00002879  DD 1C 24			fstp	qword ptr [ESP]
 0000287C  8B 55 18			mov	EDX,dword ptr [EBP+0018h]
 0000287F  8B 45 1C			mov	EAX,dword ptr [EBP+001Ch] 
 00002882  9B DB E2			fclex
 00002885  50				push	EAX
 00002886  52				push	EDX 
 00002887  DD 04 24			fld	qword ptr [ESP]
 0000288A  59				pop	ECX
 0000288B  59				pop	ECX 
 0000288C  DC 0C 24			fmul	qword ptr [ESP]
 0000288F  DD 1C 24			fstp	qword ptr [ESP]
 00002892  33 D2			xor	EDX,EDX
 00002894  B8 40000000			mov	EAX,040000000h
 00002899  9B DB E2			fclex
 0000289C  50				push	EAX
 0000289D  52				push	EDX 
 0000289E  DD 04 24			fld	qword ptr [ESP]
 000028A1  59				pop	ECX
 000028A2  59				pop	ECX 
 000028A3  DC 3C 24			fdivr	qword ptr [ESP]
 000028A6  DD 1C 24			fstp	qword ptr [ESP]
 000028A9  DD 04 24			fld	qword ptr [ESP]
 000028AC  DD 5D F8			fstp	qword ptr [EBP-0008h]

				;{906}:return area
 000028AF  5A				pop	EDX
 000028B0  58				pop	EAX 
 000028B1  8B 55 F8			mov	EDX,dword ptr [EBP-0008h]
 000028B4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h] 
 000028B7  EB 00			jmp	OFFSET $L001109
				;}
 000028B9			$L001109:

 000028B9  5F				pop	EDI
 000028BA  5E				pop	ESI 
 000028BB  5B				pop	EBX 
 000028BC  C9				leave	
 000028BD  C2 0018			retn	000000018h
 000028C0			UnitTesting_TestFloatingPoint_Area ENDP

 000028C0			UnitTesting_TestFloatingPoint_Destructor PROC NEAR 
				;void Destructor(void);
 000028C0  55				push	EBP
 000028C1  8B EC			mov	EBP,ESP
 000028C3  51				push	ECX 
 000028C4  53				push	EBX 
 000028C5  56				push	ESI 
 000028C6  57				push	EDI 
				;{

				;{882}:System::Debug::OutputString("destroying a TestFloatingPoint() object...");
 000028C7  8D 05 00000EF1 R		lea	EAX,OFFSET $S001102
 000028CD  50				push	EAX
 000028CE  E8 00000000 E		call	 System_Debug_OutputString

				;{883}:Console::WriteLn("destroying a TestFloatingPoint() object...");
 000028D3  8D 05 00000EF1 R		lea	EAX,OFFSET $S001102
 000028D9  6A 00			push	000000000h
 000028DB  50				push	EAX 
 000028DC  E8 00000000 E		call	 Console_WriteString
 000028E1  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000028E6			$L001101:

 000028E6  5F				pop	EDI
 000028E7  5E				pop	ESI 
 000028E8  5B				pop	EBX 
 000028E9  C9				leave	
 000028EA  C3				ret	
 000028EB			UnitTesting_TestFloatingPoint_Destructor ENDP

 000028EB			UnitTesting_TestFloatingPoint_Power PROC NEAR 
				;double Power(double X, int n);
 000028EB  55				push	EBP
 000028EC  8B EC			mov	EBP,ESP
 000028EE  51				push	ECX 
 000028EF  53				push	EBX 
 000028F0  56				push	ESI 
 000028F1  57				push	EDI 
				;{

				;{887}:if(n == 0)
 000028F2  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 000028F5  50				push	EAX
 000028F6  33 C0			xor	EAX,EAX
 000028F8  5A				pop	EDX
 000028F9  3B D0			cmp	EDX,EAX
 000028FB  0F 94 C0			setz	AL
 000028FE  84 C0			test	AL,AL
 00002900  74 10			jz	OFFSET $L001523

				;{888}:return 1
 00002902  B8 00000001			mov	EAX,000000001h
 00002907  50				push	EAX
 00002908  E8 00000000 E		call	 FloatingPoint_FromInt
 0000290D  E9 000000AB			jmp	OFFSET $L001103
 00002912			$L001523:

				;{890}:if(n % 2 == 0)
 00002912  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002915  50				push	EAX
 00002916  B8 00000002			mov	EAX,000000002h
 0000291B  8B C8			mov	ECX,EAX
 0000291D  58				pop	EAX
 0000291E  33 D2			xor	EDX,EDX
 00002920  F7 F9			idiv	ECX
 00002922  8B C2			mov	EAX,EDX 
 00002924  50				push	EAX
 00002925  33 C0			xor	EAX,EAX
 00002927  5A				pop	EDX
 00002928  3B D0			cmp	EDX,EAX
 0000292A  0F 94 C0			setz	AL
 0000292D  84 C0			test	AL,AL
 0000292F  74 39			jz	OFFSET $L001525

				;{891}:return Power(X * X, n div 2)
 00002931  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002934  50				push	EAX
 00002935  B8 00000002			mov	EAX,000000002h
 0000293A  8B C8			mov	ECX,EAX
 0000293C  58				pop	EAX
 0000293D  33 D2			xor	EDX,EDX
 0000293F  F7 F9			idiv	ECX
 00002941  50				push	EAX
 00002942  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002945  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002948  50				push	EAX
 00002949  52				push	EDX 
 0000294A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000294D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002950  9B DB E2			fclex
 00002953  50				push	EAX
 00002954  52				push	EDX 
 00002955  DD 04 24			fld	qword ptr [ESP]
 00002958  59				pop	ECX
 00002959  59				pop	ECX 
 0000295A  DC 0C 24			fmul	qword ptr [ESP]
 0000295D  DD 1C 24			fstp	qword ptr [ESP]
 00002960  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002963  E8 FFFFFF83			call	 UnitTesting_TestFloatingPoint_Power
 00002968  EB 53			jmp	OFFSET $L001103

				; else {
 0000296A			$L001525:

				;{893}:return X * Power(X * X, n div 2)
 0000296A  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000296D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002970  50				push	EAX
 00002971  52				push	EDX 
 00002972  8B 45 10			mov	EAX,dword ptr [EBP+0010h]
 00002975  50				push	EAX
 00002976  B8 00000002			mov	EAX,000000002h
 0000297B  8B C8			mov	ECX,EAX
 0000297D  58				pop	EAX
 0000297E  33 D2			xor	EDX,EDX
 00002980  F7 F9			idiv	ECX
 00002982  50				push	EAX
 00002983  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00002986  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002989  50				push	EAX
 0000298A  52				push	EDX 
 0000298B  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000298E  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00002991  9B DB E2			fclex
 00002994  50				push	EAX
 00002995  52				push	EDX 
 00002996  DD 04 24			fld	qword ptr [ESP]
 00002999  59				pop	ECX
 0000299A  59				pop	ECX 
 0000299B  DC 0C 24			fmul	qword ptr [ESP]
 0000299E  DD 1C 24			fstp	qword ptr [ESP]
 000029A1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000029A4  E8 FFFFFF42			call	 UnitTesting_TestFloatingPoint_Power
 000029A9  9B DB E2			fclex
 000029AC  50				push	EAX
 000029AD  52				push	EDX 
 000029AE  DD 04 24			fld	qword ptr [ESP]
 000029B1  59				pop	ECX
 000029B2  59				pop	ECX 
 000029B3  DC 0C 24			fmul	qword ptr [ESP]
 000029B6  DD 1C 24			fstp	qword ptr [ESP]
 000029B9  5A				pop	EDX
 000029BA  58				pop	EAX 
 000029BB  EB 00			jmp	OFFSET $L001103
 000029BD			$L001526:

				; }
				;}
 000029BD			$L001103:

 000029BD  5F				pop	EDI
 000029BE  5E				pop	ESI 
 000029BF  5B				pop	EBX 
 000029C0  C9				leave	
 000029C1  C2 000C			retn	00000000Ch
 000029C4			UnitTesting_TestFloatingPoint_Power ENDP

 000029C4			UnitTesting_TestFloatingPoint PROC NEAR 
				;void UnitTesting::TestFloatingPoint(void);
 000029C4  55				push	EBP
 000029C5  8B EC			mov	EBP,ESP
 000029C7  51				push	ECX 
 000029C8  53				push	EBX 
 000029C9  56				push	ESI 
 000029CA  57				push	EDI 
				;{

				;{877}:System::Debug::OutputString("constructing a TestFloatingPoint() object...");
 000029CB  8D 05 00000E88 R		lea	EAX,OFFSET $S001100
 000029D1  50				push	EAX
 000029D2  E8 00000000 E		call	 System_Debug_OutputString
				;}

 000029D7  5F				pop	EDI
 000029D8  5E				pop	ESI 
 000029D9  5B				pop	EBX 
 000029DA  C9				leave	
 000029DB  C3				ret	
 000029DC			UnitTesting_TestFloatingPoint ENDP

 000029DC			UnitTesting_TestFloatingPoint_speed PROC NEAR 
				;double UnitTesting::TestFloatingPoint::speed(double distance, double time);
 000029DC  55				push	EBP
 000029DD  8B EC			mov	EBP,ESP
 000029DF  51				push	ECX 
 000029E0  53				push	EBX 
 000029E1  56				push	ESI 
 000029E2  57				push	EDI 
				;{

				;{899}:return distance / time
 000029E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000029E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000029E9  50				push	EAX
 000029EA  52				push	EDX 
 000029EB  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 000029EE  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 000029F1  9B DB E2			fclex
 000029F4  50				push	EAX
 000029F5  52				push	EDX 
 000029F6  DD 04 24			fld	qword ptr [ESP]
 000029F9  59				pop	ECX
 000029FA  59				pop	ECX 
 000029FB  DC 3C 24			fdivr	qword ptr [ESP]
 000029FE  DD 1C 24			fstp	qword ptr [ESP]
 00002A01  5A				pop	EDX
 00002A02  58				pop	EAX 
 00002A03  EB 00			jmp	OFFSET $L001106
				;}
 00002A05			$L001106:

 00002A05  5F				pop	EDI
 00002A06  5E				pop	ESI 
 00002A07  5B				pop	EBX 
 00002A08  C9				leave	
 00002A09  C2 0010			retn	000000010h
 00002A0C			UnitTesting_TestFloatingPoint_speed ENDP

 00002A0C			UnitTesting_TestIntegers_Calc1 PROC NEAR 
				;int Calc1(int i, int ref j);
 00002A0C  55				push	EBP
 00002A0D  8B EC			mov	EBP,ESP
 00002A0F  83 EC 08			sub	ESP,000000008h
 00002A12  53				push	EBX 
 00002A13  56				push	ESI 
 00002A14  57				push	EDI 
 00002A15  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002A18  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002A1B  B9 00000001			mov	ECX,000000001h 
 00002A20  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002A25  F3/ AB			rep stos	dword ptr [EDI]
 00002A27  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{771}:nArea= j * Height;
 00002A2A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A2D  8B C3			mov	EAX,EBX 
 00002A2F  8B 03			mov	EAX,dword ptr [EBX]
 00002A31  50				push	EAX
 00002A32  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A35  E8 00000128			call	 UnitTesting_TestIntegers_get_Height
 00002A3A  59				pop	ECX
 00002A3B  99				cdq	
 00002A3C  0F AF C1			imul	EAX,ECX
 00002A3F  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{773}:j= Width;
 00002A42  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A45  E8 000001AE			call	 UnitTesting_TestIntegers_get_Width
 00002A4A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A4D  89 03			mov	dword ptr [EBX],EAX

				;{775}:j= i div 5;
 00002A4F  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002A52  50				push	EAX
 00002A53  B8 00000005			mov	EAX,000000005h
 00002A58  8B C8			mov	ECX,EAX
 00002A5A  58				pop	EAX
 00002A5B  33 D2			xor	EDX,EDX
 00002A5D  F7 F9			idiv	ECX
 00002A5F  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A62  89 03			mov	dword ptr [EBX],EAX

				;{777}:nArea= FloatingPoint::ToInt(j * Height * 1.0);
 00002A64  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A67  8B C3			mov	EAX,EBX 
 00002A69  8B 03			mov	EAX,dword ptr [EBX]
 00002A6B  50				push	EAX
 00002A6C  8B 4D F8			mov	ECX,dword ptr [EBP-0008h]
 00002A6F  E8 000000EE			call	 UnitTesting_TestIntegers_get_Height
 00002A74  59				pop	ECX
 00002A75  99				cdq	
 00002A76  0F AF C1			imul	EAX,ECX
 00002A79  52				push	EDX
 00002A7A  50				push	EAX 
 00002A7B  D9 E8			fld1
 00002A7D  9B DB E2			fclex
 00002A80  E8 00000000 E		call	 FloatingPoint_FromInt64
 00002A85  50				push	EAX
 00002A86  52				push	EDX 
 00002A87  DC 0C 24			fmul	qword ptr [ESP]
 00002A8A  DD 1C 24			fstp	qword ptr [ESP]
 00002A8D  E8 00000000 E		call	 FloatingPoint_ToInt
 00002A92  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{780}:j*= 3;
 00002A95  B8 00000003			mov	EAX,000000003h
 00002A9A  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002A9D  8B C3			mov	EAX,EBX 
 00002A9F  F7 2B			imul	dword ptr [EBX]
 00002AA1  89 03			mov	dword ptr [EBX],EAX

				;{782}:return nArea
 00002AA3  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002AA6  EB 00			jmp	OFFSET $L001038
				;}
 00002AA8			$L001038:

 00002AA8  5F				pop	EDI
 00002AA9  5E				pop	ESI 
 00002AAA  5B				pop	EBX 
 00002AAB  C9				leave	
 00002AAC  C2 0008			retn	000000008h
 00002AAF			UnitTesting_TestIntegers_Calc1 ENDP

 00002AAF			UnitTesting_TestIntegers_Calc2 PROC NEAR 
				;void Calc2(Int32 ref x, Int32 ref y);
 00002AAF  55				push	EBP
 00002AB0  8B EC			mov	EBP,ESP
 00002AB2  83 EC 08			sub	ESP,000000008h
 00002AB5  53				push	EBX 
 00002AB6  56				push	ESI 
 00002AB7  57				push	EDI 
 00002AB8  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002ABB  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002ABE  B9 00000001			mov	ECX,000000001h 
 00002AC3  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002AC8  F3/ AB			rep stos	dword ptr [EDI]
 00002ACA  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{794}:a= 1000;
 00002ACD  B8 000003E8			mov	EAX,0000003E8h
 00002AD2  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{795}:x= 9 * 3 * a;
 00002AD5  B8 00000009			mov	EAX,000000009h
 00002ADA  50				push	EAX
 00002ADB  B8 00000003			mov	EAX,000000003h
 00002AE0  59				pop	ECX
 00002AE1  33 D2			xor	EDX,EDX
 00002AE3  0F AF C1			imul	EAX,ECX
 00002AE6  50				push	EAX
 00002AE7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002AEA  59				pop	ECX 
 00002AEB  99				cdq	
 00002AEC  0F AF C1			imul	EAX,ECX 
 00002AEF  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002AF2  89 03			mov	dword ptr [EBX],EAX

				;{796}:y= a * 4 * 5;
 00002AF4  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002AF7  50				push	EAX
 00002AF8  B8 00000004			mov	EAX,000000004h
 00002AFD  59				pop	ECX
 00002AFE  33 D2			xor	EDX,EDX
 00002B00  0F AF C1			imul	EAX,ECX
 00002B03  50				push	EAX
 00002B04  B8 00000005			mov	EAX,000000005h
 00002B09  59				pop	ECX 
 00002B0A  33 D2			xor	EDX,EDX 
 00002B0C  0F AF C1			imul	EAX,ECX 
 00002B0F  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002B12  89 03			mov	dword ptr [EBX],EAX
				;}
 00002B14			$L001046:

 00002B14  5F				pop	EDI
 00002B15  5E				pop	ESI 
 00002B16  5B				pop	EBX 
 00002B17  C9				leave	
 00002B18  C2 0008			retn	000000008h
 00002B1B			UnitTesting_TestIntegers_Calc2 ENDP

 00002B1B			UnitTesting_TestIntegers_Factorial PROC NEAR 
				;int Factorial(int n);
 00002B1B  55				push	EBP
 00002B1C  8B EC			mov	EBP,ESP
 00002B1E  51				push	ECX 
 00002B1F  53				push	EBX 
 00002B20  56				push	ESI 
 00002B21  57				push	EDI 
				;{

				;{853}:if(n == 0)
 00002B22  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B25  50				push	EAX
 00002B26  33 C0			xor	EAX,EAX
 00002B28  5A				pop	EDX
 00002B29  3B D0			cmp	EDX,EAX
 00002B2B  0F 94 C0			setz	AL
 00002B2E  84 C0			test	AL,AL
 00002B30  74 07			jz	OFFSET $L001527

				;{854}:return 1
 00002B32  B8 00000001			mov	EAX,000000001h
 00002B37  EB 22			jmp	OFFSET $L001088

				; else {
 00002B39			$L001527:

				;{856}:return n * Factorial(n - 1)
 00002B39  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B3C  50				push	EAX
 00002B3D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B40  50				push	EAX
 00002B41  B8 00000001			mov	EAX,000000001h
 00002B46  5A				pop	EDX
 00002B47  2B D0			sub	EDX,EAX
 00002B49  8B C2			mov	EAX,EDX
 00002B4B  50				push	EAX
 00002B4C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B4F  E8 FFFFFFC7			call	 UnitTesting_TestIntegers_Factorial
 00002B54  59				pop	ECX
 00002B55  99				cdq	
 00002B56  0F AF C1			imul	EAX,ECX
 00002B59  EB 00			jmp	OFFSET $L001088
 00002B5B			$L001528:

				; }
				;}
 00002B5B			$L001088:

 00002B5B  5F				pop	EDI
 00002B5C  5E				pop	ESI 
 00002B5D  5B				pop	EBX 
 00002B5E  C9				leave	
 00002B5F  C2 0004			retn	000000004h
 00002B62			UnitTesting_TestIntegers_Factorial ENDP

 00002B62			UnitTesting_TestIntegers_get_Height PROC NEAR 
				;int get::Height(void);
 00002B62  55				push	EBP
 00002B63  8B EC			mov	EBP,ESP
 00002B65  51				push	ECX 
 00002B66  53				push	EBX 
 00002B67  56				push	ESI 
 00002B68  57				push	EDI 
				;{

				;{500}:return nHeight
 00002B69  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B6C  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00002B6F  EB 00			jmp	OFFSET $L000950
				;}
 00002B71			$L000950:

 00002B71  5F				pop	EDI
 00002B72  5E				pop	ESI 
 00002B73  5B				pop	EBX 
 00002B74  C9				leave	
 00002B75  C3				ret	
 00002B76			UnitTesting_TestIntegers_get_Height ENDP

 00002B76			UnitTesting_TestIntegers_put_Height PROC NEAR 
				;void put::Height(int value);
 00002B76  55				push	EBP
 00002B77  8B EC			mov	EBP,ESP
 00002B79  51				push	ECX 
 00002B7A  53				push	EBX 
 00002B7B  56				push	ESI 
 00002B7C  57				push	EDI 
				;{

				;{505}:nHeight= value;
 00002B7D  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002B80  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002B83  89 41 04			mov	dword ptr [ECX+0004h],EAX
				;}
 00002B86			$L000951:

 00002B86  5F				pop	EDI
 00002B87  5E				pop	ESI 
 00002B88  5B				pop	EBX 
 00002B89  C9				leave	
 00002B8A  C2 0004			retn	000000004h
 00002B8D			UnitTesting_TestIntegers_put_Height ENDP

 00002B8D			UnitTesting_TestIntegers_Swap PROC NEAR 
				;void Swap(int ref value1, int ref value2);
 00002B8D  55				push	EBP
 00002B8E  8B EC			mov	EBP,ESP
 00002B90  83 EC 08			sub	ESP,000000008h
 00002B93  53				push	EBX 
 00002B94  56				push	ESI 
 00002B95  57				push	EDI 
 00002B96  89 4D F8			mov	dword ptr [EBP-0008h],ECX
 00002B99  8D 7D FC			lea	EDI,dword ptr [EBP-0004h]
 00002B9C  B9 00000001			mov	ECX,000000001h 
 00002BA1  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002BA6  F3/ AB			rep stos	dword ptr [EDI]
 00002BA8  8B 4D F8			mov	ECX,dword ptr [EBP-0008h] 
				;{

				;{787}:tmp= value1;
 00002BAB  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002BAE  8B C3			mov	EAX,EBX 
 00002BB0  8B 03			mov	EAX,dword ptr [EBX]
 00002BB2  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{788}:value1= value2;
 00002BB5  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002BB8  8B C3			mov	EAX,EBX 
 00002BBA  8B 03			mov	EAX,dword ptr [EBX]
 00002BBC  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002BBF  89 03			mov	dword ptr [EBX],EAX

				;{789}:value2= tmp;
 00002BC1  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002BC4  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 00002BC7  89 03			mov	dword ptr [EBX],EAX
				;}
 00002BC9			$L001042:

 00002BC9  5F				pop	EDI
 00002BCA  5E				pop	ESI 
 00002BCB  5B				pop	EBX 
 00002BCC  C9				leave	
 00002BCD  C2 0008			retn	000000008h
 00002BD0			UnitTesting_TestIntegers_Swap ENDP

 00002BD0			UnitTesting_TestIntegers_SwapDebug PROC NEAR 
				;void SwapDebug(int ref value1, int ref value2);
 00002BD0  55				push	EBP
 00002BD1  8B EC			mov	EBP,ESP
 00002BD3  51				push	ECX 
 00002BD4  53				push	EBX 
 00002BD5  56				push	ESI 
 00002BD6  57				push	EDI 
				;{

				;{861}:System::Debug::OutputString("Swaping values...");
 00002BD7  8D 05 00000C18 R		lea	EAX,OFFSET $S001093
 00002BDD  50				push	EAX
 00002BDE  E8 00000000 E		call	 System_Debug_OutputString

				;{862}:Swap(value1, value2);
 00002BE3  FF 75 0C			push	dword ptr [EBP+000Ch]
 00002BE6  FF 75 08			push	dword ptr [EBP+0008h]
 00002BE9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002BEC  E8 FFFFFF9C			call	 UnitTesting_TestIntegers_Swap
				;}
 00002BF1			$L001090:

 00002BF1  5F				pop	EDI
 00002BF2  5E				pop	ESI 
 00002BF3  5B				pop	EBX 
 00002BF4  C9				leave	
 00002BF5  C2 0008			retn	000000008h
 00002BF8			UnitTesting_TestIntegers_SwapDebug ENDP

 00002BF8			UnitTesting_TestIntegers_get_Width PROC NEAR 
				;int get::Width(void);
 00002BF8  55				push	EBP
 00002BF9  8B EC			mov	EBP,ESP
 00002BFB  51				push	ECX 
 00002BFC  53				push	EBX 
 00002BFD  56				push	ESI 
 00002BFE  57				push	EDI 
				;{

				;{490}:return nWidth
 00002BFF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C02  8B 01			mov	EAX,dword ptr [ECX]
 00002C04  EB 00			jmp	OFFSET $L000946
				;}
 00002C06			$L000946:

 00002C06  5F				pop	EDI
 00002C07  5E				pop	ESI 
 00002C08  5B				pop	EBX 
 00002C09  C9				leave	
 00002C0A  C3				ret	
 00002C0B			UnitTesting_TestIntegers_get_Width ENDP

 00002C0B			UnitTesting_TestIntegers_put_Width PROC NEAR 
				;void put::Width(int value);
 00002C0B  55				push	EBP
 00002C0C  8B EC			mov	EBP,ESP
 00002C0E  51				push	ECX 
 00002C0F  53				push	EBX 
 00002C10  56				push	ESI 
 00002C11  57				push	EDI 
				;{

				;{495}:nWidth= value;
 00002C12  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C15  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002C18  89 01			mov	dword ptr [ECX],EAX
				;}
 00002C1A			$L000947:

 00002C1A  5F				pop	EDI
 00002C1B  5E				pop	ESI 
 00002C1C  5B				pop	EBX 
 00002C1D  C9				leave	
 00002C1E  C2 0004			retn	000000004h
 00002C21			UnitTesting_TestIntegers_put_Width ENDP

 00002C21			UnitTesting_TestIntegers_add PROC NEAR 
				;void add(int v1, int v2, int ref res);
 00002C21  55				push	EBP
 00002C22  8B EC			mov	EBP,ESP
 00002C24  51				push	ECX 
 00002C25  53				push	EBX 
 00002C26  56				push	ESI 
 00002C27  57				push	EDI 
				;{

				;{802}:res= v1 + v2;
 00002C28  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C2B  50				push	EAX
 00002C2C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002C2F  5A				pop	EDX
 00002C30  03 C2			add	EAX,EDX
 00002C32  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C35  89 03			mov	dword ptr [EBX],EAX

				;{804}:Console::WriteLn("(+) the result is: ", res);
 00002C37  8D 05 00000192 R		lea	EAX,OFFSET $S001055
 00002C3D  6A 00			push	000000000h
 00002C3F  50				push	EAX 
 00002C40  E8 00000000 E		call	 Console_WriteString
 00002C45  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C48  8B C3			mov	EAX,EBX 
 00002C4A  8B 03			mov	EAX,dword ptr [EBX]
 00002C4C  50				push	EAX 
 00002C4D  E8 00000000 E		call	 Console_WriteInteger 
 00002C52  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002C57			$L001051:

 00002C57  5F				pop	EDI
 00002C58  5E				pop	ESI 
 00002C59  5B				pop	EBX 
 00002C5A  C9				leave	
 00002C5B  C2 000C			retn	00000000Ch
 00002C5E			UnitTesting_TestIntegers_add ENDP

 00002C5E			UnitTesting_TestIntegers_divide PROC NEAR 
				;void divide(int v1, int v2, int ref res);
 00002C5E  55				push	EBP
 00002C5F  8B EC			mov	EBP,ESP
 00002C61  51				push	ECX 
 00002C62  53				push	EBX 
 00002C63  56				push	ESI 
 00002C64  57				push	EDI 
				;{

				;{823}:res= v1 div v2;
 00002C65  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002C68  50				push	EAX
 00002C69  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002C6C  8B C8			mov	ECX,EAX
 00002C6E  58				pop	EAX
 00002C6F  33 D2			xor	EDX,EDX
 00002C71  F7 F9			idiv	ECX
 00002C73  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C76  89 03			mov	dword ptr [EBX],EAX

				;{825}:Console::WriteLn("(div) the result is: ", res);
 00002C78  8D 05 00000468 R		lea	EAX,OFFSET $S001070
 00002C7E  6A 00			push	000000000h
 00002C80  50				push	EAX 
 00002C81  E8 00000000 E		call	 Console_WriteString
 00002C86  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002C89  8B C3			mov	EAX,EBX 
 00002C8B  8B 03			mov	EAX,dword ptr [EBX]
 00002C8D  50				push	EAX 
 00002C8E  E8 00000000 E		call	 Console_WriteInteger 
 00002C93  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002C98			$L001066:

 00002C98  5F				pop	EDI
 00002C99  5E				pop	ESI 
 00002C9A  5B				pop	EBX 
 00002C9B  C9				leave	
 00002C9C  C2 000C			retn	00000000Ch
 00002C9F			UnitTesting_TestIntegers_divide ENDP

 00002C9F			UnitTesting_TestIntegers_divide2 PROC NEAR 
				;void divide2(int v1, int v2, int ref res);
 00002C9F  55				push	EBP
 00002CA0  8B EC			mov	EBP,ESP
 00002CA2  51				push	ECX 
 00002CA3  53				push	EBX 
 00002CA4  56				push	ESI 
 00002CA5  57				push	EDI 
				;{

				;{837}:res= Math::Round(v1 / v2);
 00002CA6  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002CA9  50				push	EAX
 00002CAA  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002CAD  9B DB E2			fclex
 00002CB0  50				push	EAX
 00002CB1  E8 00000000 E		call	 FloatingPoint_FromInt
 00002CB6  50				push	EAX
 00002CB7  52				push	EDX 
 00002CB8  DD 04 24			fld	qword ptr [ESP]
 00002CBB  59				pop	ECX
 00002CBC  59				pop	ECX 
 00002CBD  E8 00000000 E		call	 FloatingPoint_FromInt
 00002CC2  50				push	EAX
 00002CC3  52				push	EDX 
 00002CC4  DC 3C 24			fdivr	qword ptr [ESP]
 00002CC7  DD 1C 24			fstp	qword ptr [ESP]
 00002CCA  E8 00000000 E		call	 Math_Round
 00002CCF  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002CD2  89 03			mov	dword ptr [EBX],EAX

				;{839}:Console::WriteLn("(round(/)) the result is: ", res);
 00002CD4  8D 05 000004C4 R		lea	EAX,OFFSET $S001080
 00002CDA  6A 00			push	000000000h
 00002CDC  50				push	EAX 
 00002CDD  E8 00000000 E		call	 Console_WriteString
 00002CE2  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002CE5  8B C3			mov	EAX,EBX 
 00002CE7  8B 03			mov	EAX,dword ptr [EBX]
 00002CE9  50				push	EAX 
 00002CEA  E8 00000000 E		call	 Console_WriteInteger 
 00002CEF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002CF4			$L001076:

 00002CF4  5F				pop	EDI
 00002CF5  5E				pop	ESI 
 00002CF6  5B				pop	EBX 
 00002CF7  C9				leave	
 00002CF8  C2 000C			retn	00000000Ch
 00002CFB			UnitTesting_TestIntegers_divide2 ENDP

 00002CFB			UnitTesting_TestIntegers_getArea PROC NEAR 
				;int getArea(void);
 00002CFB  55				push	EBP
 00002CFC  8B EC			mov	EBP,ESP
 00002CFE  51				push	ECX 
 00002CFF  53				push	EBX 
 00002D00  56				push	ESI 
 00002D01  57				push	EDI 
				;{

				;{510}:return Width * Height
 00002D02  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D05  E8 FFFFFEEE			call	 UnitTesting_TestIntegers_get_Width
 00002D0A  50				push	EAX
 00002D0B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D0E  E8 FFFFFE4F			call	 UnitTesting_TestIntegers_get_Height
 00002D13  59				pop	ECX
 00002D14  99				cdq	
 00002D15  0F AF C1			imul	EAX,ECX
 00002D18  EB 00			jmp	OFFSET $L000953
				;}
 00002D1A			$L000953:

 00002D1A  5F				pop	EDI
 00002D1B  5E				pop	ESI 
 00002D1C  5B				pop	EBX 
 00002D1D  C9				leave	
 00002D1E  C3				ret	
 00002D1F			UnitTesting_TestIntegers_getArea ENDP

 00002D1F			UnitTesting_TestIntegers_getArea2 PROC NEAR 
				;double getArea2(void);
 00002D1F  55				push	EBP
 00002D20  8B EC			mov	EBP,ESP
 00002D22  51				push	ECX 
 00002D23  53				push	EBX 
 00002D24  56				push	ESI 
 00002D25  57				push	EDI 
				;{

				;{515}:return nWidth * nHeight * 1.0
 00002D26  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D29  8B 01			mov	EAX,dword ptr [ECX]
 00002D2B  50				push	EAX
 00002D2C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002D2F  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00002D32  59				pop	ECX
 00002D33  99				cdq	
 00002D34  0F AF C1			imul	EAX,ECX
 00002D37  52				push	EDX
 00002D38  50				push	EAX 
 00002D39  D9 E8			fld1
 00002D3B  9B DB E2			fclex
 00002D3E  E8 00000000 E		call	 FloatingPoint_FromInt64
 00002D43  50				push	EAX
 00002D44  52				push	EDX 
 00002D45  DC 0C 24			fmul	qword ptr [ESP]
 00002D48  DD 1C 24			fstp	qword ptr [ESP]
 00002D4B  5A				pop	EDX
 00002D4C  58				pop	EAX 
 00002D4D  EB 00			jmp	OFFSET $L000954
				;}
 00002D4F			$L000954:

 00002D4F  5F				pop	EDI
 00002D50  5E				pop	ESI 
 00002D51  5B				pop	EBX 
 00002D52  C9				leave	
 00002D53  C3				ret	
 00002D54			UnitTesting_TestIntegers_getArea2 ENDP

 00002D54			UnitTesting_TestIntegers_modulus PROC NEAR 
				;void modulus(int v1, int v2, int ref res);
 00002D54  55				push	EBP
 00002D55  8B EC			mov	EBP,ESP
 00002D57  51				push	ECX 
 00002D58  53				push	EBX 
 00002D59  56				push	ESI 
 00002D5A  57				push	EDI 
				;{

				;{830}:res= v1 % v2;
 00002D5B  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002D5E  50				push	EAX
 00002D5F  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002D62  8B C8			mov	ECX,EAX
 00002D64  58				pop	EAX
 00002D65  33 D2			xor	EDX,EDX
 00002D67  F7 F9			idiv	ECX
 00002D69  8B C2			mov	EAX,EDX 
 00002D6B  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002D6E  89 03			mov	dword ptr [EBX],EAX

				;{832}:Console::WriteLn("(mod) the result is: ", res);
 00002D70  8D 05 000004A7 R		lea	EAX,OFFSET $S001075
 00002D76  6A 00			push	000000000h
 00002D78  50				push	EAX 
 00002D79  E8 00000000 E		call	 Console_WriteString
 00002D7E  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002D81  8B C3			mov	EAX,EBX 
 00002D83  8B 03			mov	EAX,dword ptr [EBX]
 00002D85  50				push	EAX 
 00002D86  E8 00000000 E		call	 Console_WriteInteger 
 00002D8B  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002D90			$L001071:

 00002D90  5F				pop	EDI
 00002D91  5E				pop	ESI 
 00002D92  5B				pop	EBX 
 00002D93  C9				leave	
 00002D94  C2 000C			retn	00000000Ch
 00002D97			UnitTesting_TestIntegers_modulus ENDP

 00002D97			UnitTesting_TestIntegers_multiple_assignments PROC NEAR 
				;void multiple_assignments(int ref param1, int param2);
 00002D97  55				push	EBP
 00002D98  8B EC			mov	EBP,ESP
 00002D9A  83 EC 0C			sub	ESP,00000000Ch
 00002D9D  53				push	EBX 
 00002D9E  56				push	ESI 
 00002D9F  57				push	EDI 
 00002DA0  89 4D F4			mov	dword ptr [EBP-000Ch],ECX
 00002DA3  8D 7D F8			lea	EDI,dword ptr [EBP-0008h]
 00002DA6  B9 00000002			mov	ECX,000000002h 
 00002DAB  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002DB0  F3/ AB			rep stos	dword ptr [EDI]
 00002DB2  8B 4D F4			mov	ECX,dword ptr [EBP-000Ch] 
				;{

				;{844}:local= param2= param1= (0x400 * 1024) / 0x10;
 00002DB5  B8 00000400			mov	EAX,000000400h
 00002DBA  50				push	EAX
 00002DBB  B8 00000400			mov	EAX,000000400h
 00002DC0  59				pop	ECX
 00002DC1  33 D2			xor	EDX,EDX
 00002DC3  0F AF C1			imul	EAX,ECX
 00002DC6  50				push	EAX
 00002DC7  B8 00000010			mov	EAX,000000010h
 00002DCC  9B DB E2			fclex
 00002DCF  50				push	EAX
 00002DD0  E8 00000000 E		call	 FloatingPoint_FromInt
 00002DD5  50				push	EAX
 00002DD6  52				push	EDX 
 00002DD7  DD 04 24			fld	qword ptr [ESP]
 00002DDA  59				pop	ECX
 00002DDB  59				pop	ECX 
 00002DDC  E8 00000000 E		call	 FloatingPoint_FromInt
 00002DE1  50				push	EAX
 00002DE2  52				push	EDX 
 00002DE3  DC 3C 24			fdivr	qword ptr [ESP]
 00002DE6  DD 1C 24			fstp	qword ptr [ESP]
 00002DE9  E8 00000000 E		call	 FloatingPoint_ToInt
 00002DEE  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00002DF1  89 03			mov	dword ptr [EBX],EAX
 00002DF3  89 45 0C			mov	dword ptr [EBP+000Ch],EAX
 00002DF6  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{846}:what= (local == 0x10000);
 00002DF9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002DFC  50				push	EAX
 00002DFD  B8 00010000			mov	EAX,000010000h
 00002E02  5A				pop	EDX
 00002E03  3B D0			cmp	EDX,EAX
 00002E05  0F 94 C0			setz	AL
 00002E08  88 45 F8			mov	byte ptr [EBP-0008h],AL
				;}
 00002E0B			$L001081:

 00002E0B  5F				pop	EDI
 00002E0C  5E				pop	ESI 
 00002E0D  5B				pop	EBX 
 00002E0E  C9				leave	
 00002E0F  C2 0008			retn	000000008h
 00002E12			UnitTesting_TestIntegers_multiple_assignments ENDP

 00002E12			UnitTesting_TestIntegers_multiply PROC NEAR 
				;void multiply(int v1, int v2, int ref res);
 00002E12  55				push	EBP
 00002E13  8B EC			mov	EBP,ESP
 00002E15  51				push	ECX 
 00002E16  53				push	EBX 
 00002E17  56				push	ESI 
 00002E18  57				push	EDI 
				;{

				;{816}:res= v1 * v2;
 00002E19  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002E1C  50				push	EAX
 00002E1D  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002E20  59				pop	ECX
 00002E21  99				cdq	
 00002E22  0F AF C1			imul	EAX,ECX
 00002E25  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E28  89 03			mov	dword ptr [EBX],EAX

				;{818}:Console::WriteLn("(*) the result is: ", res);
 00002E2A  8D 05 0000017E R		lea	EAX,OFFSET $S001065
 00002E30  6A 00			push	000000000h
 00002E32  50				push	EAX 
 00002E33  E8 00000000 E		call	 Console_WriteString
 00002E38  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E3B  8B C3			mov	EAX,EBX 
 00002E3D  8B 03			mov	EAX,dword ptr [EBX]
 00002E3F  50				push	EAX 
 00002E40  E8 00000000 E		call	 Console_WriteInteger 
 00002E45  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002E4A			$L001061:

 00002E4A  5F				pop	EDI
 00002E4B  5E				pop	ESI 
 00002E4C  5B				pop	EBX 
 00002E4D  C9				leave	
 00002E4E  C2 000C			retn	00000000Ch
 00002E51			UnitTesting_TestIntegers_multiply ENDP

 00002E51			UnitTesting_TestIntegers_subs PROC NEAR 
				;void subs(int v1, int v2, int ref res);
 00002E51  55				push	EBP
 00002E52  8B EC			mov	EBP,ESP
 00002E54  51				push	ECX 
 00002E55  53				push	EBX 
 00002E56  56				push	ESI 
 00002E57  57				push	EDI 
				;{

				;{809}:res= v1 - v2;
 00002E58  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00002E5B  50				push	EAX
 00002E5C  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch]
 00002E5F  5A				pop	EDX
 00002E60  2B D0			sub	EDX,EAX
 00002E62  8B C2			mov	EAX,EDX
 00002E64  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E67  89 03			mov	dword ptr [EBX],EAX

				;{811}:Console::WriteLn("(-) the result is: ", res);
 00002E69  8D 05 000001A6 R		lea	EAX,OFFSET $S001060
 00002E6F  6A 00			push	000000000h
 00002E71  50				push	EAX 
 00002E72  E8 00000000 E		call	 Console_WriteString
 00002E77  8B 5D 10			mov	EBX,dword ptr [EBP+0010h]
 00002E7A  8B C3			mov	EAX,EBX 
 00002E7C  8B 03			mov	EAX,dword ptr [EBX]
 00002E7E  50				push	EAX 
 00002E7F  E8 00000000 E		call	 Console_WriteInteger 
 00002E84  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00002E89			$L001056:

 00002E89  5F				pop	EDI
 00002E8A  5E				pop	ESI 
 00002E8B  5B				pop	EBX 
 00002E8C  C9				leave	
 00002E8D  C2 000C			retn	00000000Ch
 00002E90			UnitTesting_TestIntegers_subs ENDP

 00002E90			UnitTesting_TestIntegers PROC NEAR 
				;void UnitTesting::TestIntegers(void);
 00002E90  55				push	EBP
 00002E91  8B EC			mov	EBP,ESP
 00002E93  51				push	ECX 
 00002E94  53				push	EBX 
 00002E95  56				push	ESI 
 00002E96  57				push	EDI 
 00002E97  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00002E9A  E8 000018D9			call	 __member_Init@UnitTesting_TestIntegers

 00002E9F  5F				pop	EDI
 00002EA0  5E				pop	ESI 
 00002EA1  5B				pop	EBX 
 00002EA2  C9				leave	
 00002EA3  C3				ret	
 00002EA4			UnitTesting_TestIntegers ENDP

 00002EA4			UnitTesting_TestIntegers_TestExpressions PROC NEAR 
				;void UnitTesting::TestIntegers::TestExpressions(void);
 00002EA4  55				push	EBP
 00002EA5  8B EC			mov	EBP,ESP
 00002EA7  81 EC 00000084		sub	ESP,000000084h
 00002EAD  53				push	EBX 
 00002EAE  56				push	ESI 
 00002EAF  57				push	EDI 
 00002EB0  8D 7D 80			lea	EDI,dword ptr [EBP-0080h]
 00002EB3  B9 00000020			mov	ECX,000000020h
 00002EB8  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00002EBD  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{522}:hex_value= 0xDEADC0DEh;
 00002EBF  B8 DEADC0DE			mov	EAX,0DEADC0DEh
 00002EC4  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{524}:hex_value= hex_value << 0x10;
 00002EC7  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002ECA  C1 E0 10			shl	EAX,000000010h
 00002ECD  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{526}:hex_value= hex_value >> 8;
 00002ED0  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002ED3  C1 E8 08			shr	EAX,000000008h
 00002ED6  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{528}:hex_value= hex_value >> 8;
 00002ED9  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EDC  C1 E8 08			shr	EAX,000000008h
 00002EDF  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{530}:shift= 0x10;
 00002EE2  B8 00000010			mov	EAX,000000010h
 00002EE7  66| 89 45 F8			mov	word ptr [EBP-0008h],AX

				;{532}:hex_value= hex_value << shift;
 00002EEB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EEE  50				push	EAX
 00002EEF  0F BF 45 F8			movsx	EAX,word ptr [EBP-0008h]
 00002EF3  8A C8			mov	CL,AL
 00002EF5  58				pop	EAX
 00002EF6  D3 E0			shl	EAX,CL
 00002EF8  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{534}:hex_value= hex_value >> shift;
 00002EFB  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00002EFE  50				push	EAX
 00002EFF  0F BF 45 F8			movsx	EAX,word ptr [EBP-0008h]
 00002F03  8A C8			mov	CL,AL
 00002F05  58				pop	EAX
 00002F06  D3 E8			shr	EAX,CL
 00002F08  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{537}:j= 0;
 00002F0B  33 C0			xor	EAX,EAX
 00002F0D  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{539}:what= false;
 00002F10  33 C0			xor	EAX,EAX
 00002F12  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{548}:hex_value= 0;
 00002F15  33 C0			xor	EAX,EAX
 00002F17  89 45 FC			mov	dword ptr [EBP-0004h],EAX

				;{550}:while(true)
 00002F1A			$L001530:
 00002F1A  B8 00000001			mov	EAX,000000001h
 00002F1F  84 C0			test	AL,AL
 00002F21  74 7B			jz	OFFSET $L001531
				;{

				;{552}:j= (4 + (--j)) % 4;
 00002F23  B8 00000004			mov	EAX,000000004h
 00002F28  50				push	EAX
 00002F29  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00002F2C  FF 0B			dec	dword ptr [EBX]
 00002F2E  8B 03			mov	EAX,dword ptr [EBX]
 00002F30  5A				pop	EDX
 00002F31  03 C2			add	EAX,EDX
 00002F33  50				push	EAX
 00002F34  B8 00000004			mov	EAX,000000004h
 00002F39  8B C8			mov	ECX,EAX
 00002F3B  58				pop	EAX
 00002F3C  33 D2			xor	EDX,EDX
 00002F3E  F7 F9			idiv	ECX
 00002F40  8B C2			mov	EAX,EDX 
 00002F42  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{554}:Console::WriteLn(" j = (4 + (--j))%4 ==", j);
 00002F45  8D 05 00000157 R		lea	EAX,OFFSET $S000965
 00002F4B  6A 00			push	000000000h
 00002F4D  50				push	EAX 
 00002F4E  E8 00000000 E		call	 Console_WriteString
 00002F53  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002F56  50				push	EAX 
 00002F57  E8 00000000 E		call	 Console_WriteInteger 
 00002F5C  E8 00000000 E		call	 Console_WriteCrLf 

				;{556}:if(++hex_value < 12)
 00002F61  FF 45 FC			inc	dword ptr [EBP-4]
 00002F64  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00002F67  50				push	EAX
 00002F68  B8 0000000C			mov	EAX,00000000Ch
 00002F6D  5A				pop	EDX
 00002F6E  3B D0			cmp	EDX,EAX
 00002F70  0F 9C C0			setl	AL
 00002F73  84 C0			test	AL,AL
 00002F75  74 02			jz	OFFSET $L001532

				;continue;
 00002F77  EB A1			jmp	OFFSET $L001530
 00002F79			$L001532:

				;{559}:what= (j % 2) == 0;
 00002F79  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002F7C  50				push	EAX
 00002F7D  B8 00000002			mov	EAX,000000002h
 00002F82  8B C8			mov	ECX,EAX
 00002F84  58				pop	EAX
 00002F85  33 D2			xor	EDX,EDX
 00002F87  F7 F9			idiv	ECX
 00002F89  8B C2			mov	EAX,EDX 
 00002F8B  50				push	EAX
 00002F8C  33 C0			xor	EAX,EAX
 00002F8E  5A				pop	EDX
 00002F8F  3B D0			cmp	EDX,EAX
 00002F91  0F 94 C0			setz	AL
 00002F94  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;break;
 00002F97  EB 05			jmp	OFFSET $L001531
				;}
 00002F99  E9 FFFFFF7C			jmp	OFFSET $L001530
 00002F9E			$L001531:

				;{564}:what= j == 3;
 00002F9E  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FA1  50				push	EAX
 00002FA2  B8 00000003			mov	EAX,000000003h
 00002FA7  5A				pop	EDX
 00002FA8  3B D0			cmp	EDX,EAX
 00002FAA  0F 94 C0			setz	AL
 00002FAD  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;do
 00002FB0			$L001534:
				;{

				;{567}:j= (4 + (--j)) % 4;
 00002FB0  B8 00000004			mov	EAX,000000004h
 00002FB5  50				push	EAX
 00002FB6  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 00002FB9  FF 0B			dec	dword ptr [EBX]
 00002FBB  8B 03			mov	EAX,dword ptr [EBX]
 00002FBD  5A				pop	EDX
 00002FBE  03 C2			add	EAX,EDX
 00002FC0  50				push	EAX
 00002FC1  B8 00000004			mov	EAX,000000004h
 00002FC6  8B C8			mov	ECX,EAX
 00002FC8  58				pop	EAX
 00002FC9  33 D2			xor	EDX,EDX
 00002FCB  F7 F9			idiv	ECX
 00002FCD  8B C2			mov	EAX,EDX 
 00002FCF  89 45 F4			mov	dword ptr [EBP-000Ch],EAX

				;{568}:Console::WriteLn(" j = (4 + (--j))%4 ==", j);
 00002FD2  8D 05 00000157 R		lea	EAX,OFFSET $S000965
 00002FD8  6A 00			push	000000000h
 00002FDA  50				push	EAX 
 00002FDB  E8 00000000 E		call	 Console_WriteString
 00002FE0  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FE3  50				push	EAX 
 00002FE4  E8 00000000 E		call	 Console_WriteInteger 
 00002FE9  E8 00000000 E		call	 Console_WriteCrLf 

				;{570}:if(j == 0)
 00002FEE  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00002FF1  50				push	EAX
 00002FF2  33 C0			xor	EAX,EAX
 00002FF4  5A				pop	EDX
 00002FF5  3B D0			cmp	EDX,EAX
 00002FF7  0F 94 C0			setz	AL
 00002FFA  84 C0			test	AL,AL
 00002FFC  74 02			jz	OFFSET $L001537

				;break;
 00002FFE  EB 10			jmp	OFFSET $L001536
 00003000			$L001537:
				;}
 00003000			$L001535:

				;{571}:while(j > 0)
 00003000  8B 45 F4			mov	EAX,dword ptr [EBP-000Ch]
 00003003  50				push	EAX
 00003004  33 C0			xor	EAX,EAX
 00003006  5A				pop	EDX
 00003007  3B D0			cmp	EDX,EAX
 00003009  0F 9F C0			setg	AL
 0000300C  84 C0			test	AL,AL
 0000300E  75 A0			jne	OFFSET $L001534
 00003010			$L001536:

				;{575}:x= 0;
 00003010  33 C0			xor	EAX,EAX
 00003012  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{577}:y= 1, z= 2;
 00003015  B8 00000001			mov	EAX,000000001h
 0000301A  89 45 E8			mov	dword ptr [EBP-0018h],EAX
 0000301D  B8 00000002			mov	EAX,000000002h
 00003022  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{579}:result= (y + 1) * z;
 00003025  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003028  50				push	EAX
 00003029  B8 00000001			mov	EAX,000000001h
 0000302E  5A				pop	EDX
 0000302F  03 C2			add	EAX,EDX
 00003031  50				push	EAX
 00003032  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00003035  59				pop	ECX
 00003036  99				cdq	
 00003037  0F AF C1			imul	EAX,ECX
 0000303A  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{581}:x++ ;
 0000303D  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003040  FF 45 EC			inc	dword ptr [EBP-20]

				;{582}:++x;
 00003043  FF 45 EC			inc	dword ptr [EBP-20]
 00003046  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{584}:x+= 14;
 00003049  B8 0000000E			mov	EAX,00000000Eh
 0000304E  F8				clc	
 0000304F  01 45 EC			add	dword ptr [EBP-0014h],EAX

				;{588}:what= x == 0x10h;
 00003052  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003055  50				push	EAX
 00003056  B8 00000010			mov	EAX,000000010h
 0000305B  5A				pop	EDX
 0000305C  3B D0			cmp	EDX,EAX
 0000305E  0F 94 C0			setz	AL
 00003061  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{590}:Console::WriteLn("(what = x==0x10h)		= ", what);
 00003064  8D 05 000005EC R		lea	EAX,OFFSET $S000973
 0000306A  6A 00			push	000000000h
 0000306C  50				push	EAX 
 0000306D  E8 00000000 E		call	 Console_WriteString
 00003072  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003076  50				push	EAX 
 00003077  E8 00000000 E		call	 Console_WriteBoolean 
 0000307C  E8 00000000 E		call	 Console_WriteCrLf 

				;{592}:x/= 4;
 00003081  B8 00000004			mov	EAX,000000004h
 00003086  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003089  50				push	EAX
 0000308A  8B 03			mov	EAX,dword ptr [EBX]
 0000308C  99				cdq	
 0000308D  F7 3C 24			idiv	dword ptr [ESP]
 00003090  89 03			mov	dword ptr [EBX],EAX 
 00003092  59				pop	ECX

				;{594}:--x;
 00003093  FF 4D EC			dec	dword ptr [EBP-20]
 00003096  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{595}:x-- ;
 00003099  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 0000309C  FF 4D EC			dec	dword ptr [EBP-20]

				;{597}:x= 7 % x;
 0000309F  B8 00000007			mov	EAX,000000007h
 000030A4  50				push	EAX
 000030A5  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000030A8  8B C8			mov	ECX,EAX
 000030AA  58				pop	EAX
 000030AB  33 D2			xor	EDX,EDX
 000030AD  F7 F9			idiv	ECX
 000030AF  8B C2			mov	EAX,EDX 
 000030B1  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{599}:what= x == 1;
 000030B4  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000030B7  50				push	EAX
 000030B8  B8 00000001			mov	EAX,000000001h
 000030BD  5A				pop	EDX
 000030BE  3B D0			cmp	EDX,EAX
 000030C0  0F 94 C0			setz	AL
 000030C3  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{601}:Console::WriteLn("(what = x==1)			= ", what);
 000030C6  8D 05 0000061A R		lea	EAX,OFFSET $S000975
 000030CC  6A 00			push	000000000h
 000030CE  50				push	EAX 
 000030CF  E8 00000000 E		call	 Console_WriteString
 000030D4  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000030D8  50				push	EAX 
 000030D9  E8 00000000 E		call	 Console_WriteBoolean 
 000030DE  E8 00000000 E		call	 Console_WriteCrLf 

				;{603}:x++ ;
 000030E3  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000030E6  FF 45 EC			inc	dword ptr [EBP-20]

				;{605}:x*= 10;
 000030E9  B8 0000000A			mov	EAX,00000000Ah
 000030EE  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030F1  F7 2B			imul	dword ptr [EBX]
 000030F3  89 03			mov	dword ptr [EBX],EAX

				;{607}:x/= 5;
 000030F5  B8 00000005			mov	EAX,000000005h
 000030FA  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 000030FD  50				push	EAX
 000030FE  8B 03			mov	EAX,dword ptr [EBX]
 00003100  99				cdq	
 00003101  F7 3C 24			idiv	dword ptr [ESP]
 00003104  89 03			mov	dword ptr [EBX],EAX 
 00003106  59				pop	ECX

				;{609}:x/= 4;
 00003107  B8 00000004			mov	EAX,000000004h
 0000310C  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 0000310F  50				push	EAX
 00003110  8B 03			mov	EAX,dword ptr [EBX]
 00003112  99				cdq	
 00003113  F7 3C 24			idiv	dword ptr [ESP]
 00003116  89 03			mov	dword ptr [EBX],EAX 
 00003118  59				pop	ECX

				;{611}:x%= 4;
 00003119  B8 00000004			mov	EAX,000000004h
 0000311E  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003121  50				push	EAX
 00003122  8B 03			mov	EAX,dword ptr [EBX]
 00003124  99				cdq	
 00003125  F7 3C 24			idiv	dword ptr [ESP]
 00003128  89 13			mov	dword ptr [EBX],EDX 
 0000312A  59				pop	ECX

				;{613}:y= 0x400h;
 0000312B  B8 00000400			mov	EAX,000000400h
 00003130  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{615}:x= y div 15;
 00003133  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003136  50				push	EAX
 00003137  B8 0000000F			mov	EAX,00000000Fh
 0000313C  8B C8			mov	ECX,EAX
 0000313E  58				pop	EAX
 0000313F  33 D2			xor	EDX,EDX
 00003141  F7 F9			idiv	ECX
 00003143  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{617}:what= x == 68;
 00003146  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003149  50				push	EAX
 0000314A  B8 00000044			mov	EAX,000000044h
 0000314F  5A				pop	EDX
 00003150  3B D0			cmp	EDX,EAX
 00003152  0F 94 C0			setz	AL
 00003155  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{619}:Console::WriteLn("(what = x == 68) 		= ", what);
 00003158  8D 05 000005A8 R		lea	EAX,OFFSET $S000979
 0000315E  6A 00			push	000000000h
 00003160  50				push	EAX 
 00003161  E8 00000000 E		call	 Console_WriteString
 00003166  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000316A  50				push	EAX 
 0000316B  E8 00000000 E		call	 Console_WriteBoolean 
 00003170  E8 00000000 E		call	 Console_WriteCrLf 

				;{623}:z= 0x10;
 00003175  B8 00000010			mov	EAX,000000010h
 0000317A  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{625}:x= y * z;
 0000317D  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003180  50				push	EAX
 00003181  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 00003184  59				pop	ECX
 00003185  99				cdq	
 00003186  0F AF C1			imul	EAX,ECX
 00003189  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{627}:what= x == 0x4000;
 0000318C  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000318F  50				push	EAX
 00003190  B8 00004000			mov	EAX,000004000h
 00003195  5A				pop	EDX
 00003196  3B D0			cmp	EDX,EAX
 00003198  0F 94 C0			setz	AL
 0000319B  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{629}:Console::WriteLn("(what = x==0x4000) 		= ", what);
 0000319E  8D 05 00000602 R		lea	EAX,OFFSET $S000981
 000031A4  6A 00			push	000000000h
 000031A6  50				push	EAX 
 000031A7  E8 00000000 E		call	 Console_WriteString
 000031AC  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000031B0  50				push	EAX 
 000031B1  E8 00000000 E		call	 Console_WriteBoolean 
 000031B6  E8 00000000 E		call	 Console_WriteCrLf 

				;{631}:y= z= x;
 000031BB  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000031BE  89 45 E4			mov	dword ptr [EBP-001Ch],EAX
 000031C1  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{633}:x= y div 4;
 000031C4  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 000031C7  50				push	EAX
 000031C8  B8 00000004			mov	EAX,000000004h
 000031CD  8B C8			mov	ECX,EAX
 000031CF  58				pop	EAX
 000031D0  33 D2			xor	EDX,EDX
 000031D2  F7 F9			idiv	ECX
 000031D4  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{635}:what= x == 4096;
 000031D7  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000031DA  50				push	EAX
 000031DB  B8 00001000			mov	EAX,000001000h
 000031E0  5A				pop	EDX
 000031E1  3B D0			cmp	EDX,EAX
 000031E3  0F 94 C0			setz	AL
 000031E6  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{637}:Console::WriteLn("(what = x==4096) 		= ", what);
 000031E9  8D 05 0000062D R		lea	EAX,OFFSET $S000983
 000031EF  6A 00			push	000000000h
 000031F1  50				push	EAX 
 000031F2  E8 00000000 E		call	 Console_WriteString
 000031F7  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000031FB  50				push	EAX 
 000031FC  E8 00000000 E		call	 Console_WriteBoolean 
 00003201  E8 00000000 E		call	 Console_WriteCrLf 

				;{639}:z= x % 3;
 00003206  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003209  50				push	EAX
 0000320A  B8 00000003			mov	EAX,000000003h
 0000320F  8B C8			mov	ECX,EAX
 00003211  58				pop	EAX
 00003212  33 D2			xor	EDX,EDX
 00003214  F7 F9			idiv	ECX
 00003216  8B C2			mov	EAX,EDX 
 00003218  89 45 E4			mov	dword ptr [EBP-001Ch],EAX

				;{641}:what= z == 1;
 0000321B  8B 45 E4			mov	EAX,dword ptr [EBP-001Ch]
 0000321E  50				push	EAX
 0000321F  B8 00000001			mov	EAX,000000001h
 00003224  5A				pop	EDX
 00003225  3B D0			cmp	EDX,EAX
 00003227  0F 94 C0			setz	AL
 0000322A  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{643}:y= x div 3;
 0000322D  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003230  50				push	EAX
 00003231  B8 00000003			mov	EAX,000000003h
 00003236  8B C8			mov	ECX,EAX
 00003238  58				pop	EAX
 00003239  33 D2			xor	EDX,EDX
 0000323B  F7 F9			idiv	ECX
 0000323D  89 45 E8			mov	dword ptr [EBP-0018h],EAX

				;{645}:what= y == 1365;
 00003240  8B 45 E8			mov	EAX,dword ptr [EBP-0018h]
 00003243  50				push	EAX
 00003244  B8 00000555			mov	EAX,000000555h
 00003249  5A				pop	EDX
 0000324A  3B D0			cmp	EDX,EAX
 0000324C  0F 94 C0			setz	AL
 0000324F  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{647}:Console::WriteLn("(what = y==1365) 		= ", what);
 00003252  8D 05 00000643 R		lea	EAX,OFFSET $S000985
 00003258  6A 00			push	000000000h
 0000325A  50				push	EAX 
 0000325B  E8 00000000 E		call	 Console_WriteString
 00003260  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003264  50				push	EAX 
 00003265  E8 00000000 E		call	 Console_WriteBoolean 
 0000326A  E8 00000000 E		call	 Console_WriteCrLf 

				;{649}:result= FloatingPoint::ToInt(x / 3);
 0000326F  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003272  50				push	EAX
 00003273  B8 00000003			mov	EAX,000000003h
 00003278  9B DB E2			fclex
 0000327B  50				push	EAX
 0000327C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003281  50				push	EAX
 00003282  52				push	EDX 
 00003283  DD 04 24			fld	qword ptr [ESP]
 00003286  59				pop	ECX
 00003287  59				pop	ECX 
 00003288  E8 00000000 E		call	 FloatingPoint_FromInt
 0000328D  50				push	EAX
 0000328E  52				push	EDX 
 0000328F  DC 3C 24			fdivr	qword ptr [ESP]
 00003292  DD 1C 24			fstp	qword ptr [ESP]
 00003295  E8 00000000 E		call	 FloatingPoint_ToInt
 0000329A  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{651}:what= (result == 1365.0);
 0000329D  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000032A0  50				push	EAX
 000032A1  33 D2			xor	EDX,EDX
 000032A3  B8 40955400			mov	EAX,040955400h
 000032A8  50				push	EAX
 000032A9  52				push	EDX 
 000032AA  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 000032AF  83 F8 00			cmp	EAX,000000000h
 000032B2  F7 D8			neg	EAX
 000032B4  0F 94 C0			setz	AL
 000032B7  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{653}:Console::WriteLn("(what = (result==1365.0)) 	= ", what);
 000032BA  8D 05 000004FB R		lea	EAX,OFFSET $S000987
 000032C0  6A 00			push	000000000h
 000032C2  50				push	EAX 
 000032C3  E8 00000000 E		call	 Console_WriteString
 000032C8  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000032CC  50				push	EAX 
 000032CD  E8 00000000 E		call	 Console_WriteBoolean 
 000032D2  E8 00000000 E		call	 Console_WriteCrLf 

				;{655}:result= x div (3 + 1);
 000032D7  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000032DA  50				push	EAX
 000032DB  B8 00000003			mov	EAX,000000003h
 000032E0  50				push	EAX
 000032E1  B8 00000001			mov	EAX,000000001h
 000032E6  5A				pop	EDX
 000032E7  03 C2			add	EAX,EDX
 000032E9  8B C8			mov	ECX,EAX
 000032EB  58				pop	EAX
 000032EC  33 D2			xor	EDX,EDX
 000032EE  F7 F9			idiv	ECX
 000032F0  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{657}:what= (result == 1024);
 000032F3  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000032F6  50				push	EAX
 000032F7  B8 00000400			mov	EAX,000000400h
 000032FC  5A				pop	EDX
 000032FD  3B D0			cmp	EDX,EAX
 000032FF  0F 94 C0			setz	AL
 00003302  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{659}:Console::WriteLn("(what = (result==1024)) 	= ", what);
 00003305  8D 05 000004DF R		lea	EAX,OFFSET $S000989
 0000330B  6A 00			push	000000000h
 0000330D  50				push	EAX 
 0000330E  E8 00000000 E		call	 Console_WriteString
 00003313  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003317  50				push	EAX 
 00003318  E8 00000000 E		call	 Console_WriteBoolean 
 0000331D  E8 00000000 E		call	 Console_WriteCrLf 

				;{661}:a= 20000, b= 4, c= 10;
 00003322  B8 00004E20			mov	EAX,000004E20h
 00003327  66| 89 45 DC			mov	word ptr [EBP-0024h],AX
 0000332B  B8 00000004			mov	EAX,000000004h
 00003330  66| 89 45 D8			mov	word ptr [EBP-0028h],AX
 00003334  B8 0000000A			mov	EAX,00000000Ah
 00003339  66| 89 45 D4			mov	word ptr [EBP-002Ch],AX

				;{663}:result= a * b * c;
 0000333D  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003341  50				push	EAX
 00003342  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 00003346  59				pop	ECX
 00003347  33 D2			xor	EDX,EDX
 00003349  0F AF C1			imul	EAX,ECX
 0000334C  50				push	EAX
 0000334D  0F BF 45 D4			movsx	EAX,word ptr [EBP-002Ch]
 00003351  59				pop	ECX 
 00003352  33 D2			xor	EDX,EDX 
 00003354  0F AF C1			imul	EAX,ECX 
 00003357  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{665}:what= result == 0xC3500h;
 0000335A  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000335D  50				push	EAX
 0000335E  B8 000C3500			mov	EAX,0000C3500h
 00003363  5A				pop	EDX
 00003364  3B D0			cmp	EDX,EAX
 00003366  0F 94 C0			setz	AL
 00003369  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{667}:Console::WriteLn("(what = result==0xC3500h) 	= ", what);
 0000336C  8D 05 0000056B R		lea	EAX,OFFSET $S000995
 00003372  6A 00			push	000000000h
 00003374  50				push	EAX 
 00003375  E8 00000000 E		call	 Console_WriteString
 0000337A  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000337E  50				push	EAX 
 0000337F  E8 00000000 E		call	 Console_WriteBoolean 
 00003384  E8 00000000 E		call	 Console_WriteCrLf 

				;{669}:result/= 0x10;
 00003389  B8 00000010			mov	EAX,000000010h
 0000338E  8D 5D E0			lea	EBX,dword ptr [EBP-0020h]
 00003391  50				push	EAX
 00003392  8B 03			mov	EAX,dword ptr [EBX]
 00003394  99				cdq	
 00003395  F7 3C 24			idiv	dword ptr [ESP]
 00003398  89 03			mov	dword ptr [EBX],EAX 
 0000339A  59				pop	ECX

				;{671}:what= (result == 50000);
 0000339B  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000339E  50				push	EAX
 0000339F  B8 0000C350			mov	EAX,00000C350h
 000033A4  5A				pop	EDX
 000033A5  3B D0			cmp	EDX,EAX
 000033A7  0F 94 C0			setz	AL
 000033AA  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{673}:Console::WriteLn("(what = (result==50000)) 	= ", what);
 000033AD  8D 05 00000536 R		lea	EAX,OFFSET $S000997
 000033B3  6A 00			push	000000000h
 000033B5  50				push	EAX 
 000033B6  E8 00000000 E		call	 Console_WriteString
 000033BB  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000033BF  50				push	EAX 
 000033C0  E8 00000000 E		call	 Console_WriteBoolean 
 000033C5  E8 00000000 E		call	 Console_WriteCrLf 

				;{675}:x= result % 3;
 000033CA  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 000033CD  50				push	EAX
 000033CE  B8 00000003			mov	EAX,000000003h
 000033D3  8B C8			mov	ECX,EAX
 000033D5  58				pop	EAX
 000033D6  33 D2			xor	EDX,EDX
 000033D8  F7 F9			idiv	ECX
 000033DA  8B C2			mov	EAX,EDX 
 000033DC  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{677}:result= Math::Round(a / 3) * 5;
 000033DF  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 000033E3  50				push	EAX
 000033E4  B8 00000003			mov	EAX,000000003h
 000033E9  9B DB E2			fclex
 000033EC  50				push	EAX
 000033ED  E8 00000000 E		call	 FloatingPoint_FromInt
 000033F2  50				push	EAX
 000033F3  52				push	EDX 
 000033F4  DD 04 24			fld	qword ptr [ESP]
 000033F7  59				pop	ECX
 000033F8  59				pop	ECX 
 000033F9  E8 00000000 E		call	 FloatingPoint_FromInt
 000033FE  50				push	EAX
 000033FF  52				push	EDX 
 00003400  DC 3C 24			fdivr	qword ptr [ESP]
 00003403  DD 1C 24			fstp	qword ptr [ESP]
 00003406  E8 00000000 E		call	 Math_Round
 0000340B  50				push	EAX
 0000340C  B8 00000005			mov	EAX,000000005h
 00003411  59				pop	ECX
 00003412  33 D2			xor	EDX,EDX
 00003414  0F AF C1			imul	EAX,ECX
 00003417  89 45 E0			mov	dword ptr [EBP-0020h],EAX

				;{679}:what= (result == 33335);
 0000341A  8B 45 E0			mov	EAX,dword ptr [EBP-0020h]
 0000341D  50				push	EAX
 0000341E  B8 00008237			mov	EAX,000008237h
 00003423  5A				pop	EDX
 00003424  3B D0			cmp	EDX,EAX
 00003426  0F 94 C0			setz	AL
 00003429  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{681}:Console::WriteLn("(what = (result==33335)) 	= ", what);
 0000342C  8D 05 00000519 R		lea	EAX,OFFSET $S000999
 00003432  6A 00			push	000000000h
 00003434  50				push	EAX 
 00003435  E8 00000000 E		call	 Console_WriteString
 0000343A  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000343E  50				push	EAX 
 0000343F  E8 00000000 E		call	 Console_WriteBoolean 
 00003444  E8 00000000 E		call	 Console_WriteCrLf 

				;{683}:a= 1;
 00003449  B8 00000001			mov	EAX,000000001h
 0000344E  66| 89 45 DC			mov	word ptr [EBP-0024h],AX

				;{683}:b= 4;
 00003452  B8 00000004			mov	EAX,000000004h
 00003457  66| 89 45 D8			mov	word ptr [EBP-0028h],AX

				;{683}:c= 4;
 0000345B  B8 00000004			mov	EAX,000000004h
 00003460  66| 89 45 D4			mov	word ptr [EBP-002Ch],AX

				;{685}:disc= Math::Sqr(b) - 4 * a * c;
 00003464  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 00003468  50				push	EAX
 00003469  E8 00000000 E		call	 FloatingPoint_FromInt
 0000346E  50				push	EAX
 0000346F  52				push	EDX 
 00003470  E8 00000000 E		call	 Math_Sqr
 00003475  50				push	EAX
 00003476  52				push	EDX 
 00003477  B8 00000004			mov	EAX,000000004h
 0000347C  50				push	EAX
 0000347D  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003481  59				pop	ECX
 00003482  33 D2			xor	EDX,EDX
 00003484  0F AF C1			imul	EAX,ECX
 00003487  50				push	EAX
 00003488  0F BF 45 D4			movsx	EAX,word ptr [EBP-002Ch]
 0000348C  59				pop	ECX 
 0000348D  33 D2			xor	EDX,EDX 
 0000348F  0F AF C1			imul	EAX,ECX 
 00003492  50				push	EAX
 00003493  E8 00000000 E		call	 FloatingPoint_FromInt
 00003498  50				push	EAX
 00003499  52				push	EDX 
 0000349A  DD 04 24			fld	qword ptr [ESP]
 0000349D  59				pop	ECX
 0000349E  59				pop	ECX 
 0000349F  DD 04 24			fld	qword ptr [ESP]
 000034A2  D8 E1			fsub	st,st(1)
 000034A4  DD 1C 24			fstp	qword ptr [ESP]
 000034A7  DD 04 24			fld	qword ptr [ESP]
 000034AA  DD 5D CC			fstp	qword ptr [EBP-0034h]

				;{688}:what= disc == 0.0;
 000034AD  5A				pop	EDX
 000034AE  58				pop	EAX 
 000034AF  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 000034B2  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 000034B5  50				push	EAX
 000034B6  52				push	EDX 
 000034B7  D9 EE			fldz
 000034B9  51				push	ECX
 000034BA  51				push	ECX 
 000034BB  DD 1C 24			fstp	qword ptr [ESP]
 000034BE  E8 00000000 E		call	 FloatingPoint_Compare
 000034C3  83 F8 00			cmp	EAX,000000000h
 000034C6  F7 D8			neg	EAX
 000034C8  0F 94 C0			setz	AL
 000034CB  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{690}:Console::WriteLn("(what = disc==0.0) 		= ", what);
 000034CE  8D 05 00000553 R		lea	EAX,OFFSET $S001001
 000034D4  6A 00			push	000000000h
 000034D6  50				push	EAX 
 000034D7  E8 00000000 E		call	 Console_WriteString
 000034DC  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 000034E0  50				push	EAX 
 000034E1  E8 00000000 E		call	 Console_WriteBoolean 
 000034E6  E8 00000000 E		call	 Console_WriteCrLf 

				;{692}:x1= (-b + Math::Sqrt(disc)) / 2 * a;
 000034EB  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 000034EF  F7 D8			neg	EAX
 000034F1  50				push	EAX
 000034F2  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 000034F5  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 000034F8  50				push	EAX
 000034F9  52				push	EDX 
 000034FA  E8 00000000 E		call	 Math_Sqrt
 000034FF  50				push	EAX
 00003500  52				push	EDX 
 00003501  DD 04 24			fld	qword ptr [ESP]
 00003504  59				pop	ECX
 00003505  59				pop	ECX 
 00003506  E8 00000000 E		call	 FloatingPoint_FromInt
 0000350B  50				push	EAX
 0000350C  52				push	EDX 
 0000350D  DC 04 24			fadd	qword ptr [ESP]
 00003510  DD 1C 24			fstp	qword ptr [ESP]
 00003513  B8 00000002			mov	EAX,000000002h
 00003518  9B DB E2			fclex
 0000351B  50				push	EAX
 0000351C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003521  50				push	EAX
 00003522  52				push	EDX 
 00003523  DD 04 24			fld	qword ptr [ESP]
 00003526  59				pop	ECX
 00003527  59				pop	ECX 
 00003528  DC 3C 24			fdivr	qword ptr [ESP]
 0000352B  DD 1C 24			fstp	qword ptr [ESP]
 0000352E  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003532  9B DB E2			fclex
 00003535  50				push	EAX
 00003536  E8 00000000 E		call	 FloatingPoint_FromInt
 0000353B  50				push	EAX
 0000353C  52				push	EDX 
 0000353D  DD 04 24			fld	qword ptr [ESP]
 00003540  59				pop	ECX 
 00003541  59				pop	ECX 
 00003542  DC 0C 24			fmul	qword ptr [ESP]
 00003545  DD 1C 24			fstp	qword ptr [ESP]
 00003548  DD 04 24			fld	qword ptr [ESP]
 0000354B  DD 5D C4			fstp	qword ptr [EBP-003Ch]

				;{693}:what= x1 == -2.0;
 0000354E  5A				pop	EDX
 0000354F  58				pop	EAX 
 00003550  8B 55 C4			mov	EDX,dword ptr [EBP-003Ch]
 00003553  8B 45 C8			mov	EAX,dword ptr [EBP-0038h] 
 00003556  50				push	EAX
 00003557  52				push	EDX 
 00003558  33 D2			xor	EDX,EDX
 0000355A  B8 40000000			mov	EAX,040000000h
 0000355F  50				push	EAX
 00003560  52				push	EDX 
 00003561  DD 04 24			fld	qword ptr [ESP]
 00003564  D9 E0			fchs
 00003566  DD 1C 24			fstp	qword ptr [ESP]
 00003569  E8 00000000 E		call	 FloatingPoint_Compare
 0000356E  83 F8 00			cmp	EAX,000000000h
 00003571  F7 D8			neg	EAX
 00003573  0F 94 C0			setz	AL
 00003576  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{695}:Console::WriteLn("(what = x1==-2.0) 		= ", what);
 00003579  8D 05 000005BE R		lea	EAX,OFFSET $S001004
 0000357F  6A 00			push	000000000h
 00003581  50				push	EAX 
 00003582  E8 00000000 E		call	 Console_WriteString
 00003587  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 0000358B  50				push	EAX 
 0000358C  E8 00000000 E		call	 Console_WriteBoolean 
 00003591  E8 00000000 E		call	 Console_WriteCrLf 

				;{697}:x2= (-b - Math::Sqrt(disc)) / 2 * a;
 00003596  0F BF 45 D8			movsx	EAX,word ptr [EBP-0028h]
 0000359A  F7 D8			neg	EAX
 0000359C  50				push	EAX
 0000359D  8B 55 CC			mov	EDX,dword ptr [EBP-0034h]
 000035A0  8B 45 D0			mov	EAX,dword ptr [EBP-0030h] 
 000035A3  50				push	EAX
 000035A4  52				push	EDX 
 000035A5  E8 00000000 E		call	 Math_Sqrt
 000035AA  50				push	EAX
 000035AB  52				push	EDX 
 000035AC  DD 04 24			fld	qword ptr [ESP]
 000035AF  59				pop	ECX
 000035B0  59				pop	ECX 
 000035B1  E8 00000000 E		call	 FloatingPoint_FromInt
 000035B6  50				push	EAX
 000035B7  52				push	EDX 
 000035B8  DD 04 24			fld	qword ptr [ESP]
 000035BB  D8 E1			fsub	st,st(1)
 000035BD  DD 1C 24			fstp	qword ptr [ESP]
 000035C0  B8 00000002			mov	EAX,000000002h
 000035C5  9B DB E2			fclex
 000035C8  50				push	EAX
 000035C9  E8 00000000 E		call	 FloatingPoint_FromInt
 000035CE  50				push	EAX
 000035CF  52				push	EDX 
 000035D0  DD 04 24			fld	qword ptr [ESP]
 000035D3  59				pop	ECX
 000035D4  59				pop	ECX 
 000035D5  DC 3C 24			fdivr	qword ptr [ESP]
 000035D8  DD 1C 24			fstp	qword ptr [ESP]
 000035DB  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 000035DF  9B DB E2			fclex
 000035E2  50				push	EAX
 000035E3  E8 00000000 E		call	 FloatingPoint_FromInt
 000035E8  50				push	EAX
 000035E9  52				push	EDX 
 000035EA  DD 04 24			fld	qword ptr [ESP]
 000035ED  59				pop	ECX 
 000035EE  59				pop	ECX 
 000035EF  DC 0C 24			fmul	qword ptr [ESP]
 000035F2  DD 1C 24			fstp	qword ptr [ESP]
 000035F5  DD 04 24			fld	qword ptr [ESP]
 000035F8  DD 5D BC			fstp	qword ptr [EBP-0044h]

				;{698}:what= x2 == -2.0;
 000035FB  5A				pop	EDX
 000035FC  58				pop	EAX 
 000035FD  8B 55 BC			mov	EDX,dword ptr [EBP-0044h]
 00003600  8B 45 C0			mov	EAX,dword ptr [EBP-0040h] 
 00003603  50				push	EAX
 00003604  52				push	EDX 
 00003605  33 D2			xor	EDX,EDX
 00003607  B8 40000000			mov	EAX,040000000h
 0000360C  50				push	EAX
 0000360D  52				push	EDX 
 0000360E  DD 04 24			fld	qword ptr [ESP]
 00003611  D9 E0			fchs
 00003613  DD 1C 24			fstp	qword ptr [ESP]
 00003616  E8 00000000 E		call	 FloatingPoint_Compare
 0000361B  83 F8 00			cmp	EAX,000000000h
 0000361E  F7 D8			neg	EAX
 00003620  0F 94 C0			setz	AL
 00003623  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{700}:Console::WriteLn("(what = x2==-2.0) 		= ", what);
 00003626  8D 05 000005D5 R		lea	EAX,OFFSET $S001006
 0000362C  6A 00			push	000000000h
 0000362E  50				push	EAX 
 0000362F  E8 00000000 E		call	 Console_WriteString
 00003634  0F B6 45 F0			movzx	EAX,byte ptr [EBP-0010h]
 00003638  50				push	EAX 
 00003639  E8 00000000 E		call	 Console_WriteBoolean 
 0000363E  E8 00000000 E		call	 Console_WriteCrLf 

				;{702}:x= 1;
 00003643  B8 00000001			mov	EAX,000000001h
 00003648  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{703}:Console::WriteLn("the value of x is: ", x);
 0000364B  8D 05 000010BE R		lea	EAX,OFFSET $S001007
 00003651  6A 00			push	000000000h
 00003653  50				push	EAX 
 00003654  E8 00000000 E		call	 Console_WriteString
 00003659  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000365C  50				push	EAX 
 0000365D  E8 00000000 E		call	 Console_WriteInteger 
 00003662  E8 00000000 E		call	 Console_WriteCrLf 

				;{705}:++x;
 00003667  FF 45 EC			inc	dword ptr [EBP-20]
 0000366A  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{706}:Console::WriteLn("the value of x is: ", x);
 0000366D  8D 05 000010BE R		lea	EAX,OFFSET $S001007
 00003673  6A 00			push	000000000h
 00003675  50				push	EAX 
 00003676  E8 00000000 E		call	 Console_WriteString
 0000367B  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 0000367E  50				push	EAX 
 0000367F  E8 00000000 E		call	 Console_WriteInteger 
 00003684  E8 00000000 E		call	 Console_WriteCrLf 

				;{708}:--x;
 00003689  FF 4D EC			dec	dword ptr [EBP-20]
 0000368C  8B 45 EC			mov	EAX,dword ptr [EBP-20]

				;{709}:Console::WriteLn("the value of x is (1): ", x);
 0000368F  8D 05 0000108E R		lea	EAX,OFFSET $S001008
 00003695  6A 00			push	000000000h
 00003697  50				push	EAX 
 00003698  E8 00000000 E		call	 Console_WriteString
 0000369D  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 000036A0  50				push	EAX 
 000036A1  E8 00000000 E		call	 Console_WriteInteger 
 000036A6  E8 00000000 E		call	 Console_WriteCrLf 

				;{711}:Console::WriteLn("the value of x is (1): ", x++ );
 000036AB  8D 05 0000108E R		lea	EAX,OFFSET $S001008
 000036B1  6A 00			push	000000000h
 000036B3  50				push	EAX 
 000036B4  E8 00000000 E		call	 Console_WriteString
 000036B9  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036BC  FF 45 EC			inc	dword ptr [EBP-20]
 000036BF  50				push	EAX 
 000036C0  E8 00000000 E		call	 Console_WriteInteger 
 000036C5  E8 00000000 E		call	 Console_WriteCrLf 

				;{713}:Console::WriteLn("the value of x is (2): ", x-- );
 000036CA  8D 05 000010A6 R		lea	EAX,OFFSET $S001009
 000036D0  6A 00			push	000000000h
 000036D2  50				push	EAX 
 000036D3  E8 00000000 E		call	 Console_WriteString
 000036D8  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036DB  FF 4D EC			dec	dword ptr [EBP-20]
 000036DE  50				push	EAX 
 000036DF  E8 00000000 E		call	 Console_WriteInteger 
 000036E4  E8 00000000 E		call	 Console_WriteCrLf 

				;{715}:Console::WriteLn("the value is (5): ", x++ -4 / (-1));
 000036E9  8D 05 0000107B R		lea	EAX,OFFSET $S001010
 000036EF  6A 00			push	000000000h
 000036F1  50				push	EAX 
 000036F2  E8 00000000 E		call	 Console_WriteString
 000036F7  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000036FA  FF 45 EC			inc	dword ptr [EBP-20]
 000036FD  50				push	EAX
 000036FE  B8 00000004			mov	EAX,000000004h
 00003703  50				push	EAX
 00003704  B8 00000001			mov	EAX,000000001h
 00003709  F7 D8			neg	EAX
 0000370B  9B DB E2			fclex
 0000370E  50				push	EAX
 0000370F  E8 00000000 E		call	 FloatingPoint_FromInt
 00003714  50				push	EAX
 00003715  52				push	EDX 
 00003716  DD 04 24			fld	qword ptr [ESP]
 00003719  59				pop	ECX
 0000371A  59				pop	ECX 
 0000371B  E8 00000000 E		call	 FloatingPoint_FromInt
 00003720  50				push	EAX
 00003721  52				push	EDX 
 00003722  DC 3C 24			fdivr	qword ptr [ESP]
 00003725  DD 1C 24			fstp	qword ptr [ESP]
 00003728  DD 04 24			fld	qword ptr [ESP]
 0000372B  59				pop	ECX
 0000372C  59				pop	ECX 
 0000372D  E8 00000000 E		call	 FloatingPoint_FromInt
 00003732  50				push	EAX
 00003733  52				push	EDX 
 00003734  DD 04 24			fld	qword ptr [ESP]
 00003737  D8 E1			fsub	st,st(1)
 00003739  DD 1C 24			fstp	qword ptr [ESP]
 0000373C  E8 00000000 E		call	 Console_WriteDouble 
 00003741  E8 00000000 E		call	 Console_WriteCrLf 

				;{717}:Console::WriteLn("the value is (5): ", --x - 4 / (-1));
 00003746  8D 05 0000107B R		lea	EAX,OFFSET $S001010
 0000374C  6A 00			push	000000000h
 0000374E  50				push	EAX 
 0000374F  E8 00000000 E		call	 Console_WriteString
 00003754  FF 4D EC			dec	dword ptr [EBP-20]
 00003757  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 0000375A  50				push	EAX
 0000375B  B8 00000004			mov	EAX,000000004h
 00003760  50				push	EAX
 00003761  B8 00000001			mov	EAX,000000001h
 00003766  F7 D8			neg	EAX
 00003768  9B DB E2			fclex
 0000376B  50				push	EAX
 0000376C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003771  50				push	EAX
 00003772  52				push	EDX 
 00003773  DD 04 24			fld	qword ptr [ESP]
 00003776  59				pop	ECX
 00003777  59				pop	ECX 
 00003778  E8 00000000 E		call	 FloatingPoint_FromInt
 0000377D  50				push	EAX
 0000377E  52				push	EDX 
 0000377F  DC 3C 24			fdivr	qword ptr [ESP]
 00003782  DD 1C 24			fstp	qword ptr [ESP]
 00003785  DD 04 24			fld	qword ptr [ESP]
 00003788  59				pop	ECX
 00003789  59				pop	ECX 
 0000378A  E8 00000000 E		call	 FloatingPoint_FromInt
 0000378F  50				push	EAX
 00003790  52				push	EDX 
 00003791  DD 04 24			fld	qword ptr [ESP]
 00003794  D8 E1			fsub	st,st(1)
 00003796  DD 1C 24			fstp	qword ptr [ESP]
 00003799  E8 00000000 E		call	 Console_WriteDouble 
 0000379E  E8 00000000 E		call	 Console_WriteCrLf 

				;{719}:Console::WriteLn("the value is (3): ", (x++ -4) / (-1));
 000037A3  8D 05 00001068 R		lea	EAX,OFFSET $S001011
 000037A9  6A 00			push	000000000h
 000037AB  50				push	EAX 
 000037AC  E8 00000000 E		call	 Console_WriteString
 000037B1  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 000037B4  FF 45 EC			inc	dword ptr [EBP-20]
 000037B7  50				push	EAX
 000037B8  B8 00000004			mov	EAX,000000004h
 000037BD  5A				pop	EDX
 000037BE  2B D0			sub	EDX,EAX
 000037C0  8B C2			mov	EAX,EDX
 000037C2  50				push	EAX
 000037C3  B8 00000001			mov	EAX,000000001h
 000037C8  F7 D8			neg	EAX
 000037CA  9B DB E2			fclex
 000037CD  50				push	EAX
 000037CE  E8 00000000 E		call	 FloatingPoint_FromInt
 000037D3  50				push	EAX
 000037D4  52				push	EDX 
 000037D5  DD 04 24			fld	qword ptr [ESP]
 000037D8  59				pop	ECX
 000037D9  59				pop	ECX 
 000037DA  E8 00000000 E		call	 FloatingPoint_FromInt
 000037DF  50				push	EAX
 000037E0  52				push	EDX 
 000037E1  DC 3C 24			fdivr	qword ptr [ESP]
 000037E4  DD 1C 24			fstp	qword ptr [ESP]
 000037E7  E8 00000000 E		call	 Console_WriteDouble 
 000037EC  E8 00000000 E		call	 Console_WriteCrLf 

				;{721}:Console::WriteLn("the value is (3): ", (--x - 4) / (-1));
 000037F1  8D 05 00001068 R		lea	EAX,OFFSET $S001011
 000037F7  6A 00			push	000000000h
 000037F9  50				push	EAX 
 000037FA  E8 00000000 E		call	 Console_WriteString
 000037FF  FF 4D EC			dec	dword ptr [EBP-20]
 00003802  8B 45 EC			mov	EAX,dword ptr [EBP-20]
 00003805  50				push	EAX
 00003806  B8 00000004			mov	EAX,000000004h
 0000380B  5A				pop	EDX
 0000380C  2B D0			sub	EDX,EAX
 0000380E  8B C2			mov	EAX,EDX
 00003810  50				push	EAX
 00003811  B8 00000001			mov	EAX,000000001h
 00003816  F7 D8			neg	EAX
 00003818  9B DB E2			fclex
 0000381B  50				push	EAX
 0000381C  E8 00000000 E		call	 FloatingPoint_FromInt
 00003821  50				push	EAX
 00003822  52				push	EDX 
 00003823  DD 04 24			fld	qword ptr [ESP]
 00003826  59				pop	ECX
 00003827  59				pop	ECX 
 00003828  E8 00000000 E		call	 FloatingPoint_FromInt
 0000382D  50				push	EAX
 0000382E  52				push	EDX 
 0000382F  DC 3C 24			fdivr	qword ptr [ESP]
 00003832  DD 1C 24			fstp	qword ptr [ESP]
 00003835  E8 00000000 E		call	 Console_WriteDouble 
 0000383A  E8 00000000 E		call	 Console_WriteCrLf 

				;{723}:x= UnitTesting::ten * 100;
 0000383F  B8 0000000A			mov	EAX,00000000Ah
 00003844  50				push	EAX
 00003845  B8 00000064			mov	EAX,000000064h
 0000384A  59				pop	ECX
 0000384B  33 D2			xor	EDX,EDX
 0000384D  0F AF C1			imul	EAX,ECX
 00003850  89 45 EC			mov	dword ptr [EBP-0014h],EAX

				;{725}:what= x == 1000;
 00003853  8B 45 EC			mov	EAX,dword ptr [EBP-0014h]
 00003856  50				push	EAX
 00003857  B8 000003E8			mov	EAX,0000003E8h
 0000385C  5A				pop	EDX
 0000385D  3B D0			cmp	EDX,EAX
 0000385F  0F 94 C0			setz	AL
 00003862  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{727}:what= UnitTesting::ten * 50 == 500;
 00003865  B8 0000000A			mov	EAX,00000000Ah
 0000386A  50				push	EAX
 0000386B  B8 00000032			mov	EAX,000000032h
 00003870  59				pop	ECX
 00003871  33 D2			xor	EDX,EDX
 00003873  0F AF C1			imul	EAX,ECX
 00003876  50				push	EAX
 00003877  B8 000001F4			mov	EAX,0000001F4h
 0000387C  5A				pop	EDX
 0000387D  3B D0			cmp	EDX,EAX
 0000387F  0F 94 C0			setz	AL
 00003882  88 45 F0			mov	byte ptr [EBP-0010h],AL

				;{731}:alett= UnitTesting::misc1::alpha;
 00003885  B8 00000000			mov	EAX,000000000h
 0000388A  89 45 B8			mov	dword ptr [EBP-0048h],EAX

				;{733}:lundi= UnitTesting::misc1::monday, mardi= UnitTesting::misc1::tuesday;
 0000388D  B8 00000001			mov	EAX,000000001h
 00003892  89 45 B4			mov	dword ptr [EBP-004Ch],EAX
 00003895  B8 00000002			mov	EAX,000000002h
 0000389A  89 45 B0			mov	dword ptr [EBP-0050h],EAX

				;{736}:length= 15, width= 10;
 0000389D  B8 0000000F			mov	EAX,00000000Fh
 000038A2  89 45 AC			mov	dword ptr [EBP-0054h],EAX
 000038A5  B8 0000000A			mov	EAX,00000000Ah
 000038AA  89 45 A8			mov	dword ptr [EBP-0058h],EAX

				;{737}:area= length * width;
 000038AD  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000038B0  50				push	EAX
 000038B1  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 000038B4  59				pop	ECX
 000038B5  99				cdq	
 000038B6  0F AF C1			imul	EAX,ECX
 000038B9  52				push	EDX
 000038BA  50				push	EAX 
 000038BB  DF 2C 24			fild	qword ptr [ESP]
 000038BE  DD 5D A0			fstp	qword ptr [EBP-0060h]

				;{739}:Console::WriteLn("l = ", length, "w = ", width);
 000038C1  58				pop	EAX
 000038C2  5A				pop	EDX 
 000038C3  8D 05 00000FC6 R		lea	EAX,OFFSET $S001021
 000038C9  6A 00			push	000000000h
 000038CB  50				push	EAX 
 000038CC  E8 00000000 E		call	 Console_WriteString
 000038D1  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 000038D4  50				push	EAX 
 000038D5  E8 00000000 E		call	 Console_WriteInteger 
 000038DA  8D 05 0000114A R		lea	EAX,OFFSET $S001022
 000038E0  6A 00			push	000000000h 
 000038E2  50				push	EAX 
 000038E3  E8 00000000 E		call	 Console_WriteString 
 000038E8  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 000038EB  50				push	EAX 
 000038EC  E8 00000000 E		call	 Console_WriteInteger 
 000038F1  E8 00000000 E		call	 Console_WriteCrLf 

				;{740}:Console::WriteLn("(a = l * w) =", area);
 000038F6  8D 05 00000441 R		lea	EAX,OFFSET $S001023
 000038FC  6A 00			push	000000000h
 000038FE  50				push	EAX 
 000038FF  E8 00000000 E		call	 Console_WriteString
 00003904  8B 55 A0			mov	EDX,dword ptr [EBP-0060h]
 00003907  8B 45 A4			mov	EAX,dword ptr [EBP-005Ch] 
 0000390A  50				push	EAX 
 0000390B  52				push	EDX 
 0000390C  E8 00000000 E		call	 Console_WriteDouble 
 00003911  E8 00000000 E		call	 Console_WriteCrLf 

				;{742}:radius, ;
 00003916  8B 55 98			mov	EDX,dword ptr [EBP-0068h]
 00003919  8B 45 9C			mov	EAX,dword ptr [EBP-0064h] 

				;{742}:circ;
 0000391C  8B 55 90			mov	EDX,dword ptr [EBP-0070h]
 0000391F  8B 45 94			mov	EAX,dword ptr [EBP-006Ch] 

				;{744}:letter= 'x';
 00003922  B8 00000078			mov	EAX,000000078h
 00003927  88 45 8C			mov	byte ptr [EBP-0074h],AL

				;{746}:darea= (length * width) * 0.9;
 0000392A  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 0000392D  50				push	EAX
 0000392E  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00003931  59				pop	ECX
 00003932  99				cdq	
 00003933  0F AF C1			imul	EAX,ECX
 00003936  52				push	EDX
 00003937  50				push	EAX 
 00003938  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 0000393D  B8 3FECCCCC			mov	EAX,03FECCCCCh 
 00003942  9B DB E2			fclex
 00003945  50				push	EAX
 00003946  52				push	EDX 
 00003947  DD 04 24			fld	qword ptr [ESP]
 0000394A  59				pop	ECX
 0000394B  59				pop	ECX 
 0000394C  E8 00000000 E		call	 FloatingPoint_FromInt64
 00003951  50				push	EAX
 00003952  52				push	EDX 
 00003953  DC 0C 24			fmul	qword ptr [ESP]
 00003956  DD 1C 24			fstp	qword ptr [ESP]
 00003959  DD 04 24			fld	qword ptr [ESP]
 0000395C  DD 5D 84			fstp	qword ptr [EBP-007Ch]

				;{748}:Console::WriteLn("(a = l * w * 0.9) = ", darea);
 0000395F  5A				pop	EDX
 00003960  58				pop	EAX 
 00003961  8D 05 0000042C R		lea	EAX,OFFSET $S001030
 00003967  6A 00			push	000000000h
 00003969  50				push	EAX 
 0000396A  E8 00000000 E		call	 Console_WriteString
 0000396F  8B 55 84			mov	EDX,dword ptr [EBP-007Ch]
 00003972  8B 45 88			mov	EAX,dword ptr [EBP-0078h] 
 00003975  50				push	EAX 
 00003976  52				push	EDX 
 00003977  E8 00000000 E		call	 Console_WriteDouble 
 0000397C  E8 00000000 E		call	 Console_WriteCrLf 

				;{750}:a= 2;
 00003981  B8 00000002			mov	EAX,000000002h
 00003986  66| 89 45 DC			mov	word ptr [EBP-0024h],AX

				;{754}:ternary= 4 >= a ? 999 < 1000 && 1 > 0 : 777 == 77.7 * 10;
 0000398A  B8 00000004			mov	EAX,000000004h
 0000398F  50				push	EAX
 00003990  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003994  5A				pop	EDX
 00003995  3B D0			cmp	EDX,EAX
 00003997  0F 9D C0			setge	AL
 0000399A  84 C0			test	AL,AL
 0000399C  74 25			jz	 $L001539
 0000399E  B8 000003E7			mov	EAX,0000003E7h
 000039A3  50				push	EAX
 000039A4  B8 000003E8			mov	EAX,0000003E8h
 000039A9  5A				pop	EDX
 000039AA  3B D0			cmp	EDX,EAX
 000039AC  0F 9C C0			setl	AL
 000039AF  84 C0			test	AL,AL
 000039B1  74 0E			jz	OFFSET $L001541
 000039B3  B8 00000001			mov	EAX,000000001h
 000039B8  50				push	EAX
 000039B9  33 C0			xor	EAX,EAX
 000039BB  5A				pop	EDX
 000039BC  3B D0			cmp	EDX,EAX
 000039BE  0F 9F C0			setg	AL
 000039C1			$L001541:
 000039C1  EB 3A			jmp	 $L001540
 000039C3			$L001539:
 000039C3  B8 00000309			mov	EAX,000000309h
 000039C8  50				push	EAX
 000039C9  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000039CE  B8 40536CCC			mov	EAX,040536CCCh 
 000039D3  50				push	EAX
 000039D4  52				push	EDX 
 000039D5  B8 0000000A			mov	EAX,00000000Ah
 000039DA  9B DB E2			fclex
 000039DD  50				push	EAX
 000039DE  E8 00000000 E		call	 FloatingPoint_FromInt
 000039E3  50				push	EAX
 000039E4  52				push	EDX 
 000039E5  DD 04 24			fld	qword ptr [ESP]
 000039E8  59				pop	ECX
 000039E9  59				pop	ECX 
 000039EA  DC 0C 24			fmul	qword ptr [ESP]
 000039ED  DD 1C 24			fstp	qword ptr [ESP]
 000039F0  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 000039F5  83 F8 00			cmp	EAX,000000000h
 000039F8  F7 D8			neg	EAX
 000039FA  0F 94 C0			setz	AL
 000039FD			$L001540:
 000039FD  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{754}:7 == 111;
 00003A00  B8 00000007			mov	EAX,000000007h
 00003A05  50				push	EAX
 00003A06  B8 0000006F			mov	EAX,00000006Fh
 00003A0B  5A				pop	EDX
 00003A0C  3B D0			cmp	EDX,EAX
 00003A0E  0F 94 C0			setz	AL

				;{756}:Console::WriteLn("Ternary (true) = ", ternary);
 00003A11  8D 05 00000C3E R		lea	EAX,OFFSET $S001036
 00003A17  6A 00			push	000000000h
 00003A19  50				push	EAX 
 00003A1A  E8 00000000 E		call	 Console_WriteString
 00003A1F  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003A23  50				push	EAX 
 00003A24  E8 00000000 E		call	 Console_WriteBoolean 
 00003A29  E8 00000000 E		call	 Console_WriteCrLf 

				;{758}:ternary= (4 >= a) ? 999 > 1000 && 1 > 0 : 777 / 7 == 111;
 00003A2E  B8 00000004			mov	EAX,000000004h
 00003A33  50				push	EAX
 00003A34  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003A38  5A				pop	EDX
 00003A39  3B D0			cmp	EDX,EAX
 00003A3B  0F 9D C0			setge	AL
 00003A3E  84 C0			test	AL,AL
 00003A40  74 25			jz	 $L001542
 00003A42  B8 000003E7			mov	EAX,0000003E7h
 00003A47  50				push	EAX
 00003A48  B8 000003E8			mov	EAX,0000003E8h
 00003A4D  5A				pop	EDX
 00003A4E  3B D0			cmp	EDX,EAX
 00003A50  0F 9F C0			setg	AL
 00003A53  84 C0			test	AL,AL
 00003A55  74 0E			jz	OFFSET $L001544
 00003A57  B8 00000001			mov	EAX,000000001h
 00003A5C  50				push	EAX
 00003A5D  33 C0			xor	EAX,EAX
 00003A5F  5A				pop	EDX
 00003A60  3B D0			cmp	EDX,EAX
 00003A62  0F 9F C0			setg	AL
 00003A65			$L001544:
 00003A65  EB 42			jmp	 $L001543
 00003A67			$L001542:
 00003A67  B8 00000309			mov	EAX,000000309h
 00003A6C  50				push	EAX
 00003A6D  B8 00000007			mov	EAX,000000007h
 00003A72  9B DB E2			fclex
 00003A75  50				push	EAX
 00003A76  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A7B  50				push	EAX
 00003A7C  52				push	EDX 
 00003A7D  DD 04 24			fld	qword ptr [ESP]
 00003A80  59				pop	ECX
 00003A81  59				pop	ECX 
 00003A82  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A87  50				push	EAX
 00003A88  52				push	EDX 
 00003A89  DC 3C 24			fdivr	qword ptr [ESP]
 00003A8C  DD 1C 24			fstp	qword ptr [ESP]
 00003A8F  B8 0000006F			mov	EAX,00000006Fh
 00003A94  50				push	EAX
 00003A95  E8 00000000 E		call	 FloatingPoint_FromInt
 00003A9A  50				push	EAX
 00003A9B  52				push	EDX 
 00003A9C  E8 00000000 E		call	 FloatingPoint_Compare
 00003AA1  83 F8 00			cmp	EAX,000000000h
 00003AA4  F7 D8			neg	EAX
 00003AA6  0F 94 C0			setz	AL
 00003AA9			$L001543:
 00003AA9  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{760}:Console::WriteLn("Ternary (false ) = ", ternary);
 00003AAC  8D 05 00000C2A R		lea	EAX,OFFSET $S001037
 00003AB2  6A 00			push	000000000h
 00003AB4  50				push	EAX 
 00003AB5  E8 00000000 E		call	 Console_WriteString
 00003ABA  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003ABE  50				push	EAX 
 00003ABF  E8 00000000 E		call	 Console_WriteBoolean 
 00003AC4  E8 00000000 E		call	 Console_WriteCrLf 

				;{762}:ternary= 4 < a ? 999 > 1000 && 1 > 0 : 777 / (3 + 4) == 111;
 00003AC9  B8 00000004			mov	EAX,000000004h
 00003ACE  50				push	EAX
 00003ACF  0F BF 45 DC			movsx	EAX,word ptr [EBP-0024h]
 00003AD3  5A				pop	EDX
 00003AD4  3B D0			cmp	EDX,EAX
 00003AD6  0F 9C C0			setl	AL
 00003AD9  84 C0			test	AL,AL
 00003ADB  74 25			jz	 $L001545
 00003ADD  B8 000003E7			mov	EAX,0000003E7h
 00003AE2  50				push	EAX
 00003AE3  B8 000003E8			mov	EAX,0000003E8h
 00003AE8  5A				pop	EDX
 00003AE9  3B D0			cmp	EDX,EAX
 00003AEB  0F 9F C0			setg	AL
 00003AEE  84 C0			test	AL,AL
 00003AF0  74 0E			jz	OFFSET $L001547
 00003AF2  B8 00000001			mov	EAX,000000001h
 00003AF7  50				push	EAX
 00003AF8  33 C0			xor	EAX,EAX
 00003AFA  5A				pop	EDX
 00003AFB  3B D0			cmp	EDX,EAX
 00003AFD  0F 9F C0			setg	AL
 00003B00			$L001547:
 00003B00  EB 4B			jmp	 $L001546
 00003B02			$L001545:
 00003B02  B8 00000309			mov	EAX,000000309h
 00003B07  50				push	EAX
 00003B08  B8 00000003			mov	EAX,000000003h
 00003B0D  50				push	EAX
 00003B0E  B8 00000004			mov	EAX,000000004h
 00003B13  5A				pop	EDX
 00003B14  03 C2			add	EAX,EDX
 00003B16  9B DB E2			fclex
 00003B19  50				push	EAX
 00003B1A  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B1F  50				push	EAX
 00003B20  52				push	EDX 
 00003B21  DD 04 24			fld	qword ptr [ESP]
 00003B24  59				pop	ECX
 00003B25  59				pop	ECX 
 00003B26  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B2B  50				push	EAX
 00003B2C  52				push	EDX 
 00003B2D  DC 3C 24			fdivr	qword ptr [ESP]
 00003B30  DD 1C 24			fstp	qword ptr [ESP]
 00003B33  B8 0000006F			mov	EAX,00000006Fh
 00003B38  50				push	EAX
 00003B39  E8 00000000 E		call	 FloatingPoint_FromInt
 00003B3E  50				push	EAX
 00003B3F  52				push	EDX 
 00003B40  E8 00000000 E		call	 FloatingPoint_Compare
 00003B45  83 F8 00			cmp	EAX,000000000h
 00003B48  F7 D8			neg	EAX
 00003B4A  0F 94 C0			setz	AL
 00003B4D			$L001546:
 00003B4D  88 45 80			mov	byte ptr [EBP-0080h],AL

				;{764}:Console::WriteLn("Ternary (true) = ", ternary);
 00003B50  8D 05 00000C3E R		lea	EAX,OFFSET $S001036
 00003B56  6A 00			push	000000000h
 00003B58  50				push	EAX 
 00003B59  E8 00000000 E		call	 Console_WriteString
 00003B5E  0F B6 45 80			movzx	EAX,byte ptr [EBP-0080h]
 00003B62  50				push	EAX 
 00003B63  E8 00000000 E		call	 Console_WriteBoolean 
 00003B68  E8 00000000 E		call	 Console_WriteCrLf 

				;{766}:return 
 00003B6D  EB 00			jmp	OFFSET $L000957
				;}
 00003B6F			$L000957:

 00003B6F  5F				pop	EDI
 00003B70  5E				pop	ESI 
 00003B71  5B				pop	EBX 
 00003B72  C9				leave	
 00003B73  C3				ret	
 00003B74			UnitTesting_TestIntegers_TestExpressions ENDP

 00003B74			UnitTesting_TestProperties_Destructor PROC NEAR 
				;void Destructor(void);
 00003B74  55				push	EBP
 00003B75  8B EC			mov	EBP,ESP
 00003B77  51				push	ECX 
 00003B78  53				push	EBX 
 00003B79  56				push	ESI 
 00003B7A  57				push	EDI 
				;{

				;{406}:Console::WriteLn("**Before destroying all object in shapes1:");
 00003B7B  8D 05 0000067C R		lea	EAX,OFFSET $S000897
 00003B81  6A 00			push	000000000h
 00003B83  50				push	EAX 
 00003B84  E8 00000000 E		call	 Console_WriteString
 00003B89  E8 00000000 E		call	 Console_WriteCrLf 

				;{407}:if(shapes1 != null)
 00003B8E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003B91  8B 01			mov	EAX,dword ptr [ECX]
 00003B93  8B C8			mov	ECX,EAX 
 00003B95  50				push	EAX
 00003B96  33 C0			xor	EAX,EAX
 00003B98  5A				pop	EDX
 00003B99  3B D0			cmp	EDX,EAX
 00003B9B  0F 95 C0			setnz	AL
 00003B9E  84 C0			test	AL,AL
 00003BA0  74 30			jz	OFFSET $L001548

				;{408}:destroy []shapes1;
 00003BA2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003BA5  8B 01			mov	EAX,dword ptr [ECX]
 00003BA7  8B C8			mov	ECX,EAX 
 00003BA9  85 C0			test	EAX,EAX
 00003BAB  74 25			jz	OFFSET $L001550
 00003BAD  8B F0			mov	ESI,EAX
 00003BAF  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003BB2  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003BB5  8B DE			mov	EBX,ESI 
 00003BB7			$L001551:
 00003BB7  8B CB			mov	ECX,EBX 
 00003BB9  85 C9			test	ECX,ECX
 00003BBB  74 05			jz	OFFSET $L001552
 00003BBD  8B 01			mov	EAX,dword ptr [ECX]
 00003BBF  FF 50 10			call	dword ptr [EAX+0010h]
 00003BC2			$L001552:
 00003BC2  83 C3 0C			add	EBX,00000000Ch
 00003BC5  3B DF			cmp	EBX,EDI
 00003BC7  75 EE			jnz	OFFSET $L001551

 00003BC9  83 C6 FC			add	ESI,0FFFFFFFCh
 00003BCC  56				push	ESI
 00003BCD  E8 00000000 E		call	 System_Memory_Destroy
 00003BD2			$L001550:
 00003BD2			$L001548:

				;{410}:Console::WriteLn("**Before destroying all object in shapes2:");
 00003BD2  8D 05 000006A7 R		lea	EAX,OFFSET $S000898
 00003BD8  6A 00			push	000000000h
 00003BDA  50				push	EAX 
 00003BDB  E8 00000000 E		call	 Console_WriteString
 00003BE0  E8 00000000 E		call	 Console_WriteCrLf 

				;{411}:destroy []shapes2;
 00003BE5  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003BE8  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003BEB  8B C8			mov	ECX,EAX 
 00003BED  85 C0			test	EAX,EAX
 00003BEF  74 25			jz	OFFSET $L001553
 00003BF1  8B F0			mov	ESI,EAX
 00003BF3  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003BF6  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003BF9  8B DE			mov	EBX,ESI 
 00003BFB			$L001554:
 00003BFB  8B CB			mov	ECX,EBX 
 00003BFD  85 C9			test	ECX,ECX
 00003BFF  74 05			jz	OFFSET $L001555
 00003C01  8B 01			mov	EAX,dword ptr [ECX]
 00003C03  FF 50 10			call	dword ptr [EAX+0010h]
 00003C06			$L001555:
 00003C06  83 C3 0C			add	EBX,00000000Ch
 00003C09  3B DF			cmp	EBX,EDI
 00003C0B  75 EE			jnz	OFFSET $L001554

 00003C0D  83 C6 FC			add	ESI,0FFFFFFFCh
 00003C10  56				push	ESI
 00003C11  E8 00000000 E		call	 System_Memory_Destroy
 00003C16			$L001553:
				;}
 00003C16			$L000894:

 00003C16  5F				pop	EDI
 00003C17  5E				pop	ESI 
 00003C18  5B				pop	EBX 
 00003C19  C9				leave	
 00003C1A  C3				ret	
 00003C1B			UnitTesting_TestProperties_Destructor ENDP

 00003C1B			UnitTesting_TestProperties_get_Shapes PROC NEAR 
				;UnitTesting::Shape get::Shapes(void);
 00003C1B  55				push	EBP
 00003C1C  8B EC			mov	EBP,ESP
 00003C1E  51				push	ECX 
 00003C1F  53				push	EBX 
 00003C20  56				push	ESI 
 00003C21  57				push	EDI 
				;{

				;{328}:return shapes1
 00003C22  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003C25  8B 01			mov	EAX,dword ptr [ECX]
 00003C27  8B C8			mov	ECX,EAX 
 00003C29  EB 00			jmp	OFFSET $L000883
				;}
 00003C2B			$L000883:

 00003C2B  5F				pop	EDI
 00003C2C  5E				pop	ESI 
 00003C2D  5B				pop	EBX 
 00003C2E  C9				leave	
 00003C2F  C3				ret	
 00003C30			UnitTesting_TestProperties_get_Shapes ENDP

 00003C30			UnitTesting_TestProperties_put_Shapes PROC NEAR 
				;void put::Shapes(UnitTesting::Shape ^ _shape);
 00003C30  55				push	EBP
 00003C31  8B EC			mov	EBP,ESP
 00003C33  81 EC 00000098		sub	ESP,000000098h
 00003C39  53				push	EBX 
 00003C3A  56				push	ESI 
 00003C3B  57				push	EDI 
 00003C3C  89 8D FFFFFF68		mov	dword ptr [EBP-0098h],ECX
 00003C42  8D BD FFFFFF6C		lea	EDI,dword ptr [EBP-0094h]
 00003C48  B9 00000025			mov	ECX,000000025h 
 00003C4D  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00003C52  F3/ AB			rep stos	dword ptr [EDI]
 00003C54  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h] 
				;{

				;{335}:link;
 00003C5A  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C5D  E8 0000043A			call	 UnitTesting_TestProperties_node

				;{337}:link.left= new UnitTesting::TestProperties::node();
 00003C62  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C65  8D 01			lea	EAX,dword ptr [ECX]
 00003C67  50				push	EAX
 00003C68  6A 0C			push	00000000Ch
 00003C6A  E8 00000000 E		call	 System_Memory_New
 00003C6F  85 C0			test	EAX,EAX
 00003C71  74 12			jz	 $L001556
 00003C73  8B F0			mov	ESI,EAX
 00003C75  8D 3E			lea	EDI,dword ptr [ESI]
 00003C77  B9 00000003			mov	ECX,000000003h 
 00003C7C  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003C81  F3/ AB			rep stos	dword ptr [EDI]
 00003C83  EB 02			jmp	 $L001557
 00003C85			$L001556:
 00003C85  33 F6			xor	ESI,ESI
 00003C87			$L001557:
 00003C87  5B				pop	EBX
 00003C88  89 33			mov	dword ptr [EBX],ESI 
 00003C8A  8B CE			mov	ECX,ESI 
 00003C8C  E8 0000040B			call	 UnitTesting_TestProperties_node
 00003C91  8B C6			mov	EAX,ESI 

				;{338}:link.right= new UnitTesting::TestProperties::node();
 00003C93  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003C96  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003C99  50				push	EAX
 00003C9A  6A 0C			push	00000000Ch
 00003C9C  E8 00000000 E		call	 System_Memory_New
 00003CA1  85 C0			test	EAX,EAX
 00003CA3  74 12			jz	 $L001558
 00003CA5  8B F0			mov	ESI,EAX
 00003CA7  8D 3E			lea	EDI,dword ptr [ESI]
 00003CA9  B9 00000003			mov	ECX,000000003h 
 00003CAE  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003CB3  F3/ AB			rep stos	dword ptr [EDI]
 00003CB5  EB 02			jmp	 $L001559
 00003CB7			$L001558:
 00003CB7  33 F6			xor	ESI,ESI
 00003CB9			$L001559:
 00003CB9  5B				pop	EBX
 00003CBA  89 33			mov	dword ptr [EBX],ESI 
 00003CBC  8B CE			mov	ECX,ESI 
 00003CBE  E8 000003D9			call	 UnitTesting_TestProperties_node
 00003CC3  8B C6			mov	EAX,ESI 

				;{339}:link.value= new UnitTesting::HObject();
 00003CC5  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003CC8  8D 41 08			lea	EAX,dword ptr [ECX+0008h]
 00003CCB  50				push	EAX
 00003CCC  6A 04			push	000000004h
 00003CCE  E8 00000000 E		call	 System_Memory_New
 00003CD3  85 C0			test	EAX,EAX
 00003CD5  74 12			jz	 $L001560
 00003CD7  8B F0			mov	ESI,EAX
 00003CD9  8D 3E			lea	EDI,dword ptr [ESI]
 00003CDB  B9 00000001			mov	ECX,000000001h 
 00003CE0  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003CE5  F3/ AB			rep stos	dword ptr [EDI]
 00003CE7  EB 02			jmp	 $L001561
 00003CE9			$L001560:
 00003CE9  33 F6			xor	ESI,ESI
 00003CEB			$L001561:
 00003CEB  5B				pop	EBX
 00003CEC  89 33			mov	dword ptr [EBX],ESI 
 00003CEE  8B CE			mov	ECX,ESI 
 00003CF0  E8 FFFFCDE0			call	 UnitTesting_HObject
 00003CF5  8B C6			mov	EAX,ESI 

				;{347}:left= link.left;
 00003CF7  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003CFA  8B 01			mov	EAX,dword ptr [ECX]
 00003CFC  8B C8			mov	ECX,EAX 
 00003CFE  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00003D01  89 03			mov	dword ptr [EBX],EAX

				;{348}:destroy left;
 00003D03  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 00003D06  8B F1			mov	ESI,ECX
 00003D08  85 C9			test	ECX,ECX
 00003D0A  74 05			jz	OFFSET $L001563
 00003D0C  E8 000002F8			call	 UnitTesting_TestProperties_node_Destructor
 00003D11			$L001563:
 00003D11  56				push	ESI
 00003D12  E8 00000000 E		call	 System_Memory_Destroy

				;{349}:link.left= null;
 00003D17  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D1A  8D 01			lea	EAX,dword ptr [ECX]
 00003D1C  50				push	EAX
 00003D1D  33 C0			xor	EAX,EAX
 00003D1F  5B				pop	EBX
 00003D20  89 03			mov	dword ptr [EBX],EAX

				;{351}:link.left= link.right;
 00003D22  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D25  8D 01			lea	EAX,dword ptr [ECX]
 00003D27  50				push	EAX
 00003D28  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D2B  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003D2E  8B C8			mov	ECX,EAX 
 00003D30  5B				pop	EBX
 00003D31  89 03			mov	dword ptr [EBX],EAX

				;{352}:link.right= new UnitTesting::TestProperties::node();
 00003D33  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D36  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003D39  50				push	EAX
 00003D3A  6A 0C			push	00000000Ch
 00003D3C  E8 00000000 E		call	 System_Memory_New
 00003D41  85 C0			test	EAX,EAX
 00003D43  74 12			jz	 $L001564
 00003D45  8B F0			mov	ESI,EAX
 00003D47  8D 3E			lea	EDI,dword ptr [ESI]
 00003D49  B9 00000003			mov	ECX,000000003h 
 00003D4E  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003D53  F3/ AB			rep stos	dword ptr [EDI]
 00003D55  EB 02			jmp	 $L001565
 00003D57			$L001564:
 00003D57  33 F6			xor	ESI,ESI
 00003D59			$L001565:
 00003D59  5B				pop	EBX
 00003D5A  89 33			mov	dword ptr [EBX],ESI 
 00003D5C  8B CE			mov	ECX,ESI 
 00003D5E  E8 00000339			call	 UnitTesting_TestProperties_node
 00003D63  8B C6			mov	EAX,ESI 

				;{354}:right= link.right;
 00003D65  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D68  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003D6B  8B C8			mov	ECX,EAX 
 00003D6D  8D 5D EC			lea	EBX,dword ptr [EBP-0014h]
 00003D70  89 03			mov	dword ptr [EBX],EAX

				;{355}:destroy right;
 00003D72  8B 4D EC			mov	ECX,dword ptr [EBP-20]
 00003D75  8B F1			mov	ESI,ECX
 00003D77  85 C9			test	ECX,ECX
 00003D79  74 05			jz	OFFSET $L001567
 00003D7B  E8 00000289			call	 UnitTesting_TestProperties_node_Destructor
 00003D80			$L001567:
 00003D80  56				push	ESI
 00003D81  E8 00000000 E		call	 System_Memory_Destroy

				;{357}:link.right= link.left;
 00003D86  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D89  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00003D8C  50				push	EAX
 00003D8D  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D90  8B 01			mov	EAX,dword ptr [ECX]
 00003D92  8B C8			mov	ECX,EAX 
 00003D94  5B				pop	EBX
 00003D95  89 03			mov	dword ptr [EBX],EAX

				;{358}:link.left= new UnitTesting::TestProperties::node();
 00003D97  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003D9A  8D 01			lea	EAX,dword ptr [ECX]
 00003D9C  50				push	EAX
 00003D9D  6A 0C			push	00000000Ch
 00003D9F  E8 00000000 E		call	 System_Memory_New
 00003DA4  85 C0			test	EAX,EAX
 00003DA6  74 12			jz	 $L001568
 00003DA8  8B F0			mov	ESI,EAX
 00003DAA  8D 3E			lea	EDI,dword ptr [ESI]
 00003DAC  B9 00000003			mov	ECX,000000003h 
 00003DB1  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003DB6  F3/ AB			rep stos	dword ptr [EDI]
 00003DB8  EB 02			jmp	 $L001569
 00003DBA			$L001568:
 00003DBA  33 F6			xor	ESI,ESI
 00003DBC			$L001569:
 00003DBC  5B				pop	EBX
 00003DBD  89 33			mov	dword ptr [EBX],ESI 
 00003DBF  8B CE			mov	ECX,ESI 
 00003DC1  E8 000002D6			call	 UnitTesting_TestProperties_node
 00003DC6  8B C6			mov	EAX,ESI 

				;{360}:left= link.left;
 00003DC8  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003DCB  8B 01			mov	EAX,dword ptr [ECX]
 00003DCD  8B C8			mov	ECX,EAX 
 00003DCF  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00003DD2  89 03			mov	dword ptr [EBX],EAX

				;{362}:link.left= left;
 00003DD4  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003DD7  8D 01			lea	EAX,dword ptr [ECX]
 00003DD9  50				push	EAX
 00003DDA  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00003DDD  5B				pop	EBX
 00003DDE  89 03			mov	dword ptr [EBX],EAX

				;{364}:shapes1[0].Draw();
 00003DE0  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003DE6  8B 01			mov	EAX,dword ptr [ECX]
 00003DE8  8B C8			mov	ECX,EAX 
 00003DEA  50				push	EAX
 00003DEB  33 C0			xor	EAX,EAX
 00003DED  5E				pop	ESI
 00003DEE  6B C0 0C			imul	EAX,00000000Ch
 00003DF1  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003DF4  8B 11			mov	EDX,dword ptr [ECX]
 00003DF6  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{365}:shapes2[0].Draw();
 00003DF9  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003DFF  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003E02  8B C8			mov	ECX,EAX 
 00003E04  50				push	EAX
 00003E05  33 C0			xor	EAX,EAX
 00003E07  5E				pop	ESI
 00003E08  6B C0 0C			imul	EAX,00000000Ch
 00003E0B  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E0E  8B 11			mov	EDX,dword ptr [ECX]
 00003E10  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{367}:shapes_ptr[0].Draw();
 00003E13  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E19  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00003E1C  8B C8			mov	ECX,EAX 
 00003E1E  50				push	EAX
 00003E1F  33 C0			xor	EAX,EAX
 00003E21  5E				pop	ESI
 00003E22  6B C0 0C			imul	EAX,00000000Ch
 00003E25  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E28  8B 11			mov	EDX,dword ptr [ECX]
 00003E2A  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{369}:shapes1[1].Draw();
 00003E2D  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E33  8B 01			mov	EAX,dword ptr [ECX]
 00003E35  8B C8			mov	ECX,EAX 
 00003E37  50				push	EAX
 00003E38  B8 00000001			mov	EAX,000000001h
 00003E3D  5E				pop	ESI
 00003E3E  6B C0 0C			imul	EAX,00000000Ch
 00003E41  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E44  8B 11			mov	EDX,dword ptr [ECX]
 00003E46  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{370}:shapes2[2].Draw();
 00003E49  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E4F  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00003E52  8B C8			mov	ECX,EAX 
 00003E54  50				push	EAX
 00003E55  B8 00000002			mov	EAX,000000002h
 00003E5A  5E				pop	ESI
 00003E5B  6B C0 0C			imul	EAX,00000000Ch
 00003E5E  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E61  8B 11			mov	EDX,dword ptr [ECX]
 00003E63  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{372}:shapes_ptr[3].Draw();
 00003E66  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E6C  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00003E6F  8B C8			mov	ECX,EAX 
 00003E71  50				push	EAX
 00003E72  B8 00000003			mov	EAX,000000003h
 00003E77  5E				pop	ESI
 00003E78  6B C0 0C			imul	EAX,00000000Ch
 00003E7B  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003E7E  8B 11			mov	EDX,dword ptr [ECX]
 00003E80  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{379}:if(shapes1 != null)
 00003E83  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003E89  8B 01			mov	EAX,dword ptr [ECX]
 00003E8B  8B C8			mov	ECX,EAX 
 00003E8D  50				push	EAX
 00003E8E  33 C0			xor	EAX,EAX
 00003E90  5A				pop	EDX
 00003E91  3B D0			cmp	EDX,EAX
 00003E93  0F 95 C0			setnz	AL
 00003E96  84 C0			test	AL,AL
 00003E98  74 33			jz	OFFSET $L001570

				;{380}:destroy []shapes1;
 00003E9A  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003EA0  8B 01			mov	EAX,dword ptr [ECX]
 00003EA2  8B C8			mov	ECX,EAX 
 00003EA4  85 C0			test	EAX,EAX
 00003EA6  74 25			jz	OFFSET $L001572
 00003EA8  8B F0			mov	ESI,EAX
 00003EAA  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00003EAD  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00003EB0  8B DE			mov	EBX,ESI 
 00003EB2			$L001573:
 00003EB2  8B CB			mov	ECX,EBX 
 00003EB4  85 C9			test	ECX,ECX
 00003EB6  74 05			jz	OFFSET $L001574
 00003EB8  8B 01			mov	EAX,dword ptr [ECX]
 00003EBA  FF 50 10			call	dword ptr [EAX+0010h]
 00003EBD			$L001574:
 00003EBD  83 C3 0C			add	EBX,00000000Ch
 00003EC0  3B DF			cmp	EBX,EDI
 00003EC2  75 EE			jnz	OFFSET $L001573

 00003EC4  83 C6 FC			add	ESI,0FFFFFFFCh
 00003EC7  56				push	ESI
 00003EC8  E8 00000000 E		call	 System_Memory_Destroy
 00003ECD			$L001572:
 00003ECD			$L001570:

				;{382}:shapes1= _shape;
 00003ECD  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00003ED0  8B C3			mov	EAX,EBX 
 00003ED2  8B 8D FFFFFF68		mov	ECX,dword ptr [EBP-0098h]
 00003ED8  89 01			mov	dword ptr [ECX],EAX

				;{385}:local_circles;
 00003EDA  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 00003EE0  8B F0			mov	ESI,EAX
 00003EE2  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00003EE5  8B DE			mov	EBX,ESI
 00003EE7			$L001575:
 00003EE7  8B CB			mov	ECX,EBX 
 00003EE9  E8 FFFFC84F			call	 UnitTesting_Circle
 00003EEE  83 C3 0C			add	EBX,00000000Ch
 00003EF1  3B DF			cmp	EBX,EDI
 00003EF3  75 F2			jnz	OFFSET $L001575

				;{387}:local_circles[0].Draw();
 00003EF5  33 C0			xor	EAX,EAX
 00003EF7  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003EFA  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003F01  8B 11			mov	EDX,dword ptr [ECX]
 00003F03  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{389}:local_circles[2].Draw();
 00003F06  B8 00000002			mov	EAX,000000002h
 00003F0B  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003F0E  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003F15  8B 11			mov	EDX,dword ptr [ECX]
 00003F17  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{391}:for(i= 0; i < n; i++ )
 00003F1A  33 C0			xor	EAX,EAX
 00003F1C  89 85 FFFFFF70		mov	dword ptr [EBP-0090h],EAX
 00003F22  EB 0C			jmp	OFFSET $L001576
 00003F24			$L001577:
 00003F24  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-144]
 00003F2A  FF 85 FFFFFF70		inc	dword ptr [EBP-144]
 00003F30			$L001576:
 00003F30  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 00003F36  50				push	EAX
 00003F37  B8 0000000A			mov	EAX,00000000Ah
 00003F3C  5A				pop	EDX
 00003F3D  3B D0			cmp	EDX,EAX
 00003F3F  0F 9C C0			setl	AL
 00003F42  84 C0			test	AL,AL
 00003F44  74 17			jz	OFFSET $L001578

				;{392}:local_circles[i].Draw();
 00003F46  8B 85 FFFFFF70		mov	EAX,dword ptr [EBP-0090h]
 00003F4C  6B C0 0C			imul	EAX,EAX,00000000Ch
 00003F4F  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-008Ch]
	   FFFFFF74
 00003F56  8B 11			mov	EDX,dword ptr [ECX]
 00003F58  FF 52 0C			call	dword ptr [EDX+000Ch]
 00003F5B  EB C7			jmp	OFFSET $L001577 
 00003F5D			$L001578:

				;{395}:circlxx= new UnitTesting::Circle[5];
 00003F5D  B8 00000005			mov	EAX,000000005h
 00003F62  6B C0 0C			imul	EAX,00000000Ch
 00003F65  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00003F68  53				push	EBX
 00003F69  8B D8			mov	EBX,EAX
 00003F6B  E8 00000000 E		call	 System_Memory_New
 00003F70  85 C0			test	EAX,EAX
 00003F72  74 14			jz	 $L001579
 00003F74  8B F0			mov	ESI,EAX 
 00003F76  8D 3E			lea	EDI,dword ptr [ESI]
 00003F78  8B CB			mov	ECX,EBX 
 00003F7A  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00003F7F  F3/ AA			rep stos	byte ptr [EDI]
 00003F81  89 1E			mov	dword ptr [ESI],EBX 
 00003F83  83 C6 04			add	ESI,000000004h
 00003F86  EB 02			jmp	 $L001580
 00003F88			$L001579:
 00003F88  33 F6			xor	ESI,ESI
 00003F8A			$L001580:
 00003F8A  89 B5 FFFFFF6C		mov	dword ptr [EBP-0094h],ESI 
 00003F90  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00003F93  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00003F96  8B DE			mov	EBX,ESI 
 00003F98			$L001581:
 00003F98  8B CB			mov	ECX,EBX 
 00003F9A  E8 FFFFC79E			call	 UnitTesting_Circle
 00003F9F  83 C3 0C			add	EBX,00000000Ch 
 00003FA2  3B DF			cmp	EBX,EDI
 00003FA4  75 F2			jnz	OFFSET $L001581
 00003FA6  8B C6			mov	EAX,ESI 

				;{397}:circlxx[0].Draw();
 00003FA8  8B 85 FFFFFF6C		mov	EAX,dword ptr [EBP-148]
 00003FAE  50				push	EAX
 00003FAF  33 C0			xor	EAX,EAX
 00003FB1  5E				pop	ESI
 00003FB2  6B C0 0C			imul	EAX,00000000Ch
 00003FB5  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00003FB8  8B 11			mov	EDX,dword ptr [ECX]
 00003FBA  FF 52 0C			call	dword ptr [EDX+000Ch]
				;}
 00003FBD			$L000884:
 00003FBD  8D 85 FFFFFF74		lea	EAX,dword ptr [EBP-008Ch]
 00003FC3  8B F0			mov	ESI,EAX 
 00003FC5  8D 7E 78			lea	EDI,dword ptr [ESI+120]
 00003FC8  8B DE			mov	EBX,ESI
 00003FCA			$L001583:
 00003FCA  8B CB			mov	ECX,EBX 
 00003FCC  85 C9			test	ECX,ECX
 00003FCE  74 05			jz	OFFSET $L001584
 00003FD0  8B 01			mov	EAX,dword ptr [ECX]
 00003FD2  FF 50 10			call	dword ptr [EAX+0010h]
 00003FD5			$L001584:
 00003FD5  83 C3 0C			add	EBX,00000000Ch
 00003FD8  3B DF			cmp	EBX,EDI
 00003FDA  75 EE			jnz	OFFSET $L001583

 00003FDC  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00003FDF  E8 00000025			call	 UnitTesting_TestProperties_node_Destructor
 00003FE4			$L001585:

 00003FE4  5F				pop	EDI
 00003FE5  5E				pop	ESI 
 00003FE6  5B				pop	EBX 
 00003FE7  C9				leave	
 00003FE8  C2 0004			retn	000000004h
 00003FEB			UnitTesting_TestProperties_put_Shapes ENDP

 00003FEB			UnitTesting_TestProperties PROC NEAR 
				;void UnitTesting::TestProperties(void);
 00003FEB  55				push	EBP
 00003FEC  8B EC			mov	EBP,ESP
 00003FEE  51				push	ECX 
 00003FEF  53				push	EBX 
 00003FF0  56				push	ESI 
 00003FF1  57				push	EDI 
 00003FF2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00003FF5  C7 41 48			mov	dword ptr [ECX+0048h],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestProperties 
	   000000A4 R
 00003FFC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00003FFF  E8 000007B3			call	 __member_Init@UnitTesting_TestProperties

 00004004  5F				pop	EDI
 00004005  5E				pop	ESI 
 00004006  5B				pop	EBX 
 00004007  C9				leave	
 00004008  C3				ret	
 00004009			UnitTesting_TestProperties ENDP

 00004009			UnitTesting_TestProperties_node_Destructor PROC NEAR 
				;void Destructor(void);
 00004009  55				push	EBP
 0000400A  8B EC			mov	EBP,ESP
 0000400C  51				push	ECX 
 0000400D  53				push	EBX 
 0000400E  56				push	ESI 
 0000400F  57				push	EDI 
				;{

				;{308}:if(left != null)
 00004010  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004013  8B 01			mov	EAX,dword ptr [ECX]
 00004015  8B C8			mov	ECX,EAX 
 00004017  51				push	ECX
 00004018  33 C0			xor	EAX,EAX
 0000401A  5B				pop	EBX
 0000401B  3B D8			cmp	EBX,EAX
 0000401D  0F 95 C0			setnz	AL
 00004020  84 C0			test	AL,AL
 00004022  74 18			jz	OFFSET $L001587

				;{309}:destroy left;
 00004024  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004027  8B 01			mov	EAX,dword ptr [ECX]
 00004029  8B C8			mov	ECX,EAX 
 0000402B  8B F1			mov	ESI,ECX
 0000402D  85 C9			test	ECX,ECX
 0000402F  74 05			jz	OFFSET $L001590
 00004031  E8 FFFFFFD3			call	 UnitTesting_TestProperties_node_Destructor
 00004036			$L001590:
 00004036  56				push	ESI
 00004037  E8 00000000 E		call	 System_Memory_Destroy
 0000403C			$L001587:

				;{310}:if(right != null)
 0000403C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000403F  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00004042  8B C8			mov	ECX,EAX 
 00004044  51				push	ECX
 00004045  33 C0			xor	EAX,EAX
 00004047  5B				pop	EBX
 00004048  3B D8			cmp	EBX,EAX
 0000404A  0F 95 C0			setnz	AL
 0000404D  84 C0			test	AL,AL
 0000404F  74 19			jz	OFFSET $L001591

				;{311}:destroy right;
 00004051  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004054  8B 41 04			mov	EAX,dword ptr [ECX+0004h]
 00004057  8B C8			mov	ECX,EAX 
 00004059  8B F1			mov	ESI,ECX
 0000405B  85 C9			test	ECX,ECX
 0000405D  74 05			jz	OFFSET $L001594
 0000405F  E8 FFFFFFA5			call	 UnitTesting_TestProperties_node_Destructor
 00004064			$L001594:
 00004064  56				push	ESI
 00004065  E8 00000000 E		call	 System_Memory_Destroy
 0000406A			$L001591:

				;{312}:if(value != null)
 0000406A  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000406D  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004070  8B C8			mov	ECX,EAX 
 00004072  51				push	ECX
 00004073  33 C0			xor	EAX,EAX
 00004075  5B				pop	EBX
 00004076  3B D8			cmp	EBX,EAX
 00004078  0F 95 C0			setnz	AL
 0000407B  84 C0			test	AL,AL
 0000407D  74 18			jz	OFFSET $L001595

				;{313}:destroy value;
 0000407F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004082  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00004085  8B C8			mov	ECX,EAX 
 00004087  8B F1			mov	ESI,ECX
 00004089  85 C9			test	ECX,ECX
 0000408B  74 04			jz	OFFSET $L001598
 0000408D  8B 01			mov	EAX,dword ptr [ECX] 
 0000408F  FF 10			call	dword ptr [EAX]
 00004091			$L001598:
 00004091  56				push	ESI
 00004092  E8 00000000 E		call	 System_Memory_Destroy
 00004097			$L001595:
				;}
 00004097			$L000876:

 00004097  5F				pop	EDI
 00004098  5E				pop	ESI 
 00004099  5B				pop	EBX 
 0000409A  C9				leave	
 0000409B  C3				ret	
 0000409C			UnitTesting_TestProperties_node_Destructor ENDP

 0000409C			UnitTesting_TestProperties_node PROC NEAR 
				;void UnitTesting::TestProperties::node(void);
 0000409C  55				push	EBP
 0000409D  8B EC			mov	EBP,ESP
 0000409F  51				push	ECX 
 000040A0  53				push	EBX 
 000040A1  56				push	ESI 
 000040A2  57				push	EDI 
 000040A3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000040A6  E8 000007FB			call	 __member_Init@UnitTesting_TestProperties_node
				;{
				;}

 000040AB  5F				pop	EDI
 000040AC  5E				pop	ESI 
 000040AD  5B				pop	EBX 
 000040AE  C9				leave	
 000040AF  C3				ret	
 000040B0			UnitTesting_TestProperties_node ENDP

 000040B0			UnitTesting_TestSwitch_RunTest PROC NEAR 
				;void UnitTesting::TestSwitch::RunTest(int option);
 000040B0  55				push	EBP
 000040B1  8B EC			mov	EBP,ESP
 000040B3  51				push	ECX 
 000040B4  53				push	EBX 
 000040B5  56				push	ESI 
 000040B6  57				push	EDI 
				;{

				;{14}:switch(option)
 000040B7  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 000040BA  8B F0			mov	ESI,EAX
 000040BC  B8 00000001			mov	EAX,000000001h
 000040C1  3B C6			cmp	EAX,ESI
 000040C3  74 2F			jz	OFFSET $L001600
 000040C5  B8 00000002			mov	EAX,000000002h
 000040CA  3B C6			cmp	EAX,ESI
 000040CC  74 3E			jz	OFFSET $L001601
 000040CE  B8 00000003			mov	EAX,000000003h
 000040D3  3B C6			cmp	EAX,ESI
 000040D5  74 4A			jz	OFFSET $L001602
 000040D7  B8 00000004			mov	EAX,000000004h
 000040DC  3B C6			cmp	EAX,ESI
 000040DE  74 56			jz	OFFSET $L001603
 000040E0  B8 00000005			mov	EAX,000000005h
 000040E5  3B C6			cmp	EAX,ESI
 000040E7  74 62			jz	OFFSET $L001604
 000040E9  B8 00000006			mov	EAX,000000006h
 000040EE  3B C6			cmp	EAX,ESI 
 000040F0  74 6C			jz	OFFSET $L001605 
 000040F2  EB 7F			jmp	OFFSET $L001606
 000040F4			$L001600:

				;{17}:Console::WriteLn("Opening file...");
 000040F4  8D 05 00000B5A R		lea	EAX,OFFSET $S000621
 000040FA  6A 00			push	000000000h
 000040FC  50				push	EAX 
 000040FD  E8 00000000 E		call	 Console_WriteString
 00004102  E8 00000000 E		call	 Console_WriteCrLf 
 00004107  E9 00000083			jmp	OFFSET $L001599
 0000410C			$L001601:

				;{20}:Console::WriteLn("Closing file...");
 0000410C  8D 05 0000086B R		lea	EAX,OFFSET $S000622
 00004112  6A 00			push	000000000h
 00004114  50				push	EAX 
 00004115  E8 00000000 E		call	 Console_WriteString
 0000411A  E8 00000000 E		call	 Console_WriteCrLf 
 0000411F  EB 6E			jmp	OFFSET $L001599
 00004121			$L001602:

				;{23}:Console::WriteLn("Do Write to file...");
 00004121  8D 05 0000092A R		lea	EAX,OFFSET $S000623
 00004127  6A 00			push	000000000h
 00004129  50				push	EAX 
 0000412A  E8 00000000 E		call	 Console_WriteString
 0000412F  E8 00000000 E		call	 Console_WriteCrLf 
 00004134  EB 59			jmp	OFFSET $L001599
 00004136			$L001603:

				;{26}:Console::WriteLn("Do Read from file...");
 00004136  8D 05 00000915 R		lea	EAX,OFFSET $S000624
 0000413C  6A 00			push	000000000h
 0000413E  50				push	EAX 
 0000413F  E8 00000000 E		call	 Console_WriteString
 00004144  E8 00000000 E		call	 Console_WriteCrLf 
 00004149  EB 44			jmp	OFFSET $L001599
 0000414B			$L001604:

				;{29}:Console::WriteLn("Do for 5 and follow to 6");
 0000414B  8D 05 0000093E R		lea	EAX,OFFSET $S000625
 00004151  6A 00			push	000000000h
 00004153  50				push	EAX 
 00004154  E8 00000000 E		call	 Console_WriteString
 00004159  E8 00000000 E		call	 Console_WriteCrLf 
 0000415E			$L001605:
				;{

				;{32}:Console::WriteLn("Do 6, then finish");
 0000415E  8D 05 00000903 R		lea	EAX,OFFSET $S000627
 00004164  6A 00			push	000000000h
 00004166  50				push	EAX 
 00004167  E8 00000000 E		call	 Console_WriteString
 0000416C  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004171  EB 1C			jmp	OFFSET $L001599
 00004173			$L001606:

				;{36}:Console::WriteLn("Invalid Option : ", option);
 00004173  8D 05 00000AC1 R		lea	EAX,OFFSET $S000628
 00004179  6A 00			push	000000000h
 0000417B  50				push	EAX 
 0000417C  E8 00000000 E		call	 Console_WriteString
 00004181  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 00004184  50				push	EAX 
 00004185  E8 00000000 E		call	 Console_WriteInteger 
 0000418A  E8 00000000 E		call	 Console_WriteCrLf 
 0000418F			$L001599:
				;}
 0000418F			$L000619:

 0000418F  5F				pop	EDI
 00004190  5E				pop	ESI 
 00004191  5B				pop	EBX 
 00004192  C9				leave	
 00004193  C2 0004			retn	000000004h
 00004196			UnitTesting_TestSwitch_RunTest ENDP

 00004196			UnitTesting_TestVirtuals_ExponentialRV_get_MU PROC NEAR 
				;double get::MU(void);
 00004196  55				push	EBP
 00004197  8B EC			mov	EBP,ESP
 00004199  51				push	ECX 
 0000419A  53				push	EBX 
 0000419B  56				push	ESI 
 0000419C  57				push	EDI 
				;{

				;{125}:return mu
 0000419D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000041A0  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000041A3  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000041A6  EB 00			jmp	OFFSET $L000557
				;}
 000041A8			$L000557:

 000041A8  5F				pop	EDI
 000041A9  5E				pop	ESI 
 000041AA  5B				pop	EBX 
 000041AB  C9				leave	
 000041AC  C3				ret	
 000041AD			UnitTesting_TestVirtuals_ExponentialRV_get_MU ENDP

 000041AD			UnitTesting_TestVirtuals_ExponentialRV_Name PROC NEAR 
				;string Name(void);
 000041AD  55				push	EBP
 000041AE  8B EC			mov	EBP,ESP
 000041B0  51				push	ECX 
 000041B1  53				push	EBX 
 000041B2  56				push	ESI 
 000041B3  57				push	EDI 
				;{

				;{138}:return "An exponential variable"
 000041B4  8D 05 0000078D R		lea	EAX,OFFSET $S000562
 000041BA  EB 00			jmp	OFFSET $L000561
				;}
 000041BC			$L000561:

 000041BC  5F				pop	EDI
 000041BD  5E				pop	ESI 
 000041BE  5B				pop	EBX 
 000041BF  C9				leave	
 000041C0  C3				ret	
 000041C1			UnitTesting_TestVirtuals_ExponentialRV_Name ENDP

 000041C1			UnitTesting_TestVirtuals_ExponentialRV_Sample PROC NEAR 
				;double Sample(void);
 000041C1  55				push	EBP
 000041C2  8B EC			mov	EBP,ESP
 000041C4  51				push	ECX 
 000041C5  53				push	EBX 
 000041C6  56				push	ESI 
 000041C7  57				push	EDI 
				;{

				;{134}:return -MU * Math::log10(UnitTesting::Rnd::NextDblEx())
 000041C8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000041CB  E8 FFFFFFC6			call	 UnitTesting_TestVirtuals_ExponentialRV_get_MU
 000041D0  50				push	EAX
 000041D1  52				push	EDX 
 000041D2  E8 FFFFCE60			call	 UnitTesting_Rnd_NextDblEx
 000041D7  50				push	EAX
 000041D8  52				push	EDX 
 000041D9  E8 00000000 E		call	 Math_log10
 000041DE  9B DB E2			fclex
 000041E1  50				push	EAX
 000041E2  52				push	EDX 
 000041E3  DD 04 24			fld	qword ptr [ESP]
 000041E6  59				pop	ECX
 000041E7  59				pop	ECX 
 000041E8  DC 0C 24			fmul	qword ptr [ESP]
 000041EB  DD 1C 24			fstp	qword ptr [ESP]
 000041EE  DD 04 24			fld	qword ptr [ESP]
 000041F1  D9 E0			fchs
 000041F3  DD 1C 24			fstp	qword ptr [ESP]
 000041F6  5A				pop	EDX
 000041F7  58				pop	EAX 
 000041F8  EB 00			jmp	OFFSET $L000560
				;}
 000041FA			$L000560:

 000041FA  5F				pop	EDI
 000041FB  5E				pop	ESI 
 000041FC  5B				pop	EBX 
 000041FD  C9				leave	
 000041FE  C3				ret	
 000041FF			UnitTesting_TestVirtuals_ExponentialRV_Sample ENDP

 000041FF			UnitTesting_TestVirtuals_ExponentialRV PROC NEAR 
				;void UnitTesting::TestVirtuals::ExponentialRV(double _mu);
 000041FF  55				push	EBP
 00004200  8B EC			mov	EBP,ESP
 00004202  51				push	ECX 
 00004203  53				push	EBX 
 00004204  56				push	ESI 
 00004205  57				push	EDI 
 00004206  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004209  E8 00000037			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 0000420E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004211  C7 01 000000A8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV 
				;{

				;{130}:mu= _mu;
 00004217  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 0000421A  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 0000421D  50				push	EAX
 0000421E  52				push	EDX 
 0000421F  DD 04 24			fld	qword ptr [ESP]
 00004222  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004225  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 00004228  5A				pop	EDX
 00004229  58				pop	EAX 

 0000422A  5F				pop	EDI
 0000422B  5E				pop	ESI 
 0000422C  5B				pop	EBX 
 0000422D  C9				leave	
 0000422E  C2 0008			retn	000000008h
 00004231			UnitTesting_TestVirtuals_ExponentialRV ENDP

 00004231			UnitTesting_TestVirtuals_RandomVariable_Name PROC NEAR 
				;string Name(void);
 00004231  55				push	EBP
 00004232  8B EC			mov	EBP,ESP
 00004234  51				push	ECX 
 00004235  53				push	EBX 
 00004236  56				push	ESI 
 00004237  57				push	EDI 
				;{

				;{62}:return "(none)"
 00004238  8D 05 000004BD R		lea	EAX,OFFSET $S000529
 0000423E  EB 00			jmp	OFFSET $L000528
				;}
 00004240			$L000528:

 00004240  5F				pop	EDI
 00004241  5E				pop	ESI 
 00004242  5B				pop	EBX 
 00004243  C9				leave	
 00004244  C3				ret	
 00004245			UnitTesting_TestVirtuals_RandomVariable_Name ENDP

 00004245			UnitTesting_TestVirtuals_RandomVariable PROC NEAR 
				;void UnitTesting::TestVirtuals::RandomVariable(void);
 00004245  55				push	EBP
 00004246  8B EC			mov	EBP,ESP
 00004248  51				push	ECX 
 00004249  53				push	EBX 
 0000424A  56				push	ESI 
 0000424B  57				push	EDI 
 0000424C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000424F  C7 01 000000B0 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable 

 00004255  5F				pop	EDI
 00004256  5E				pop	ESI 
 00004257  5B				pop	EBX 
 00004258  C9				leave	
 00004259  C3				ret	
 0000425A			UnitTesting_TestVirtuals_RandomVariable ENDP

 0000425A			UnitTesting_TestVirtuals_SimpleRV_Name PROC NEAR 
				;string Name(void);
 0000425A  55				push	EBP
 0000425B  8B EC			mov	EBP,ESP
 0000425D  51				push	ECX 
 0000425E  53				push	EBX 
 0000425F  56				push	ESI 
 00004260  57				push	EDI 
				;{

				;{75}:return "A simple variable"
 00004261  8D 05 0000077B R		lea	EAX,OFFSET $S000534
 00004267  EB 00			jmp	OFFSET $L000533
				;}
 00004269			$L000533:

 00004269  5F				pop	EDI
 0000426A  5E				pop	ESI 
 0000426B  5B				pop	EBX 
 0000426C  C9				leave	
 0000426D  C3				ret	
 0000426E			UnitTesting_TestVirtuals_SimpleRV_Name ENDP

 0000426E			UnitTesting_TestVirtuals_SimpleRV_Sample PROC NEAR 
				;double Sample(void);
 0000426E  55				push	EBP
 0000426F  8B EC			mov	EBP,ESP
 00004271  51				push	ECX 
 00004272  53				push	EBX 
 00004273  56				push	ESI 
 00004274  57				push	EDI 
				;{

				;{70}:return UnitTesting::Rnd::NextDblEx()
 00004275  E8 FFFFCDBD			call	 UnitTesting_Rnd_NextDblEx
 0000427A  EB 00			jmp	OFFSET $L000532
				;}
 0000427C			$L000532:

 0000427C  5F				pop	EDI
 0000427D  5E				pop	ESI 
 0000427E  5B				pop	EBX 
 0000427F  C9				leave	
 00004280  C3				ret	
 00004281			UnitTesting_TestVirtuals_SimpleRV_Sample ENDP

 00004281			UnitTesting_TestVirtuals_SimpleRV PROC NEAR 
				;void UnitTesting::TestVirtuals::SimpleRV(void);
 00004281  55				push	EBP
 00004282  8B EC			mov	EBP,ESP
 00004284  51				push	ECX 
 00004285  53				push	EBX 
 00004286  56				push	ESI 
 00004287  57				push	EDI 
 00004288  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000428B  E8 FFFFFFB5			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00004290  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004293  C7 01 000000B8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV 

 00004299  5F				pop	EDI
 0000429A  5E				pop	ESI 
 0000429B  5B				pop	EBX 
 0000429C  C9				leave	
 0000429D  C3				ret	
 0000429E			UnitTesting_TestVirtuals_SimpleRV ENDP

 0000429E			UnitTesting_TestVirtuals_UniformRV_Name PROC NEAR 
				;string Name(void);
 0000429E  55				push	EBP
 0000429F  8B EC			mov	EBP,ESP
 000042A1  51				push	ECX 
 000042A2  53				push	EBX 
 000042A3  56				push	ESI 
 000042A4  57				push	EDI 
				;{

				;{115}:return "An uniform variable"
 000042A5  8D 05 000007A5 R		lea	EAX,OFFSET $S000552
 000042AB  EB 00			jmp	OFFSET $L000551
				;}
 000042AD			$L000551:

 000042AD  5F				pop	EDI
 000042AE  5E				pop	ESI 
 000042AF  5B				pop	EBX 
 000042B0  C9				leave	
 000042B1  C3				ret	
 000042B2			UnitTesting_TestVirtuals_UniformRV_Name ENDP

 000042B2			UnitTesting_TestVirtuals_UniformRV_Sample PROC NEAR 
				;double Sample(void);
 000042B2  55				push	EBP
 000042B3  8B EC			mov	EBP,ESP
 000042B5  51				push	ECX 
 000042B6  53				push	EBX 
 000042B7  56				push	ESI 
 000042B8  57				push	EDI 
				;{

				;{111}:return u + (v - u) * UnitTesting::Rnd::NextDblEx()
 000042B9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042BC  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000042BF  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000042C2  50				push	EAX
 000042C3  52				push	EDX 
 000042C4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042C7  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000042CA  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000042CD  50				push	EAX
 000042CE  52				push	EDX 
 000042CF  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000042D2  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000042D5  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000042D8  50				push	EAX
 000042D9  52				push	EDX 
 000042DA  DD 04 24			fld	qword ptr [ESP]
 000042DD  59				pop	ECX
 000042DE  59				pop	ECX 
 000042DF  DD 04 24			fld	qword ptr [ESP]
 000042E2  D8 E1			fsub	st,st(1)
 000042E4  DD 1C 24			fstp	qword ptr [ESP]
 000042E7  E8 FFFFCD4B			call	 UnitTesting_Rnd_NextDblEx
 000042EC  9B DB E2			fclex
 000042EF  50				push	EAX
 000042F0  52				push	EDX 
 000042F1  DD 04 24			fld	qword ptr [ESP]
 000042F4  59				pop	ECX
 000042F5  59				pop	ECX 
 000042F6  DC 0C 24			fmul	qword ptr [ESP]
 000042F9  DD 1C 24			fstp	qword ptr [ESP]
 000042FC  DD 04 24			fld	qword ptr [ESP]
 000042FF  59				pop	ECX
 00004300  59				pop	ECX 
 00004301  DC 04 24			fadd	qword ptr [ESP]
 00004304  DD 1C 24			fstp	qword ptr [ESP]
 00004307  5A				pop	EDX
 00004308  58				pop	EAX 
 00004309  EB 00			jmp	OFFSET $L000550
				;}
 0000430B			$L000550:

 0000430B  5F				pop	EDI
 0000430C  5E				pop	ESI 
 0000430D  5B				pop	EBX 
 0000430E  C9				leave	
 0000430F  C3				ret	
 00004310			UnitTesting_TestVirtuals_UniformRV_Sample ENDP

 00004310			UnitTesting_TestVirtuals_UniformRV_get_U PROC NEAR 
				;double get::U(void);
 00004310  55				push	EBP
 00004311  8B EC			mov	EBP,ESP
 00004313  51				push	ECX 
 00004314  53				push	EBX 
 00004315  56				push	ESI 
 00004316  57				push	EDI 
				;{

				;{86}:return u
 00004317  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000431A  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 0000431D  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00004320  EB 00			jmp	OFFSET $L000540
				;}
 00004322			$L000540:

 00004322  5F				pop	EDI
 00004323  5E				pop	ESI 
 00004324  5B				pop	EBX 
 00004325  C9				leave	
 00004326  C3				ret	
 00004327			UnitTesting_TestVirtuals_UniformRV_get_U ENDP

 00004327			UnitTesting_TestVirtuals_UniformRV_put_U PROC NEAR 
				;void put::U(double value);
 00004327  55				push	EBP
 00004328  8B EC			mov	EBP,ESP
 0000432A  51				push	ECX 
 0000432B  53				push	EBX 
 0000432C  56				push	ESI 
 0000432D  57				push	EDI 
				;{

				;{91}:u= value;
 0000432E  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00004331  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00004334  50				push	EAX
 00004335  52				push	EDX 
 00004336  DD 04 24			fld	qword ptr [ESP]
 00004339  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000433C  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 0000433F			$L000541:
 0000433F  5A				pop	EDX
 00004340  58				pop	EAX 

 00004341  5F				pop	EDI
 00004342  5E				pop	ESI 
 00004343  5B				pop	EBX 
 00004344  C9				leave	
 00004345  C2 0008			retn	000000008h
 00004348			UnitTesting_TestVirtuals_UniformRV_put_U ENDP

 00004348			UnitTesting_TestVirtuals_UniformRV PROC NEAR 
				;void UnitTesting::TestVirtuals::UniformRV(double _u, double _v);
 00004348  55				push	EBP
 00004349  8B EC			mov	EBP,ESP
 0000434B  51				push	ECX 
 0000434C  53				push	EBX 
 0000434D  56				push	ESI 
 0000434E  57				push	EDI 
 0000434F  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004352  E8 FFFFFEEE			call	 UnitTesting_TestVirtuals_RandomVariable ;base constructor call
 00004357  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000435A  C7 01 000000C0 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV 
				;{

				;{106}:U= _u;
 00004360  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 00004363  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 00004366  50				push	EAX
 00004367  52				push	EDX 
 00004368  DD 04 24			fld	qword ptr [ESP]
 0000436B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000436E  E8 FFFFFFB4			call	 UnitTesting_TestVirtuals_UniformRV_put_U

				;{106}:V= _v;
 00004373  8B 55 10			mov	EDX,dword ptr [EBP+0010h]
 00004376  8B 45 14			mov	EAX,dword ptr [EBP+0014h] 
 00004379  50				push	EAX
 0000437A  52				push	EDX 
 0000437B  DD 04 24			fld	qword ptr [ESP]
 0000437E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004381  E8 0000001E			call	 UnitTesting_TestVirtuals_UniformRV_put_V
				;}

 00004386  5F				pop	EDI
 00004387  5E				pop	ESI 
 00004388  5B				pop	EBX 
 00004389  C9				leave	
 0000438A  C2 0010			retn	000000010h
 0000438D			UnitTesting_TestVirtuals_UniformRV ENDP

 0000438D			UnitTesting_TestVirtuals_UniformRV_get_V PROC NEAR 
				;double get::V(void);
 0000438D  55				push	EBP
 0000438E  8B EC			mov	EBP,ESP
 00004390  51				push	ECX 
 00004391  53				push	EBX 
 00004392  56				push	ESI 
 00004393  57				push	EDI 
				;{

				;{96}:return v
 00004394  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004397  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 0000439A  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 0000439D  EB 00			jmp	OFFSET $L000544
				;}
 0000439F			$L000544:

 0000439F  5F				pop	EDI
 000043A0  5E				pop	ESI 
 000043A1  5B				pop	EBX 
 000043A2  C9				leave	
 000043A3  C3				ret	
 000043A4			UnitTesting_TestVirtuals_UniformRV_get_V ENDP

 000043A4			UnitTesting_TestVirtuals_UniformRV_put_V PROC NEAR 
				;void put::V(double value);
 000043A4  55				push	EBP
 000043A5  8B EC			mov	EBP,ESP
 000043A7  51				push	ECX 
 000043A8  53				push	EBX 
 000043A9  56				push	ESI 
 000043AA  57				push	EDI 
				;{

				;{101}:v= value;
 000043AB  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000043AE  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000043B1  50				push	EAX
 000043B2  52				push	EDX 
 000043B3  DD 04 24			fld	qword ptr [ESP]
 000043B6  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043B9  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 000043BC			$L000545:
 000043BC  5A				pop	EDX
 000043BD  58				pop	EAX 

 000043BE  5F				pop	EDI
 000043BF  5E				pop	ESI 
 000043C0  5B				pop	EBX 
 000043C1  C9				leave	
 000043C2  C2 0008			retn	000000008h
 000043C5			UnitTesting_TestVirtuals_UniformRV_put_V ENDP

 000043C5			UnitTesting_Triangle_get_Base PROC NEAR 
				;double get::Base(void);
 000043C5  55				push	EBP
 000043C6  8B EC			mov	EBP,ESP
 000043C8  51				push	ECX 
 000043C9  53				push	EBX 
 000043CA  56				push	ESI 
 000043CB  57				push	EDI 
				;{

				;{181}:return dBase
 000043CC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043CF  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 000043D2  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 000043D5  EB 00			jmp	OFFSET $L000689
				;}
 000043D7			$L000689:

 000043D7  5F				pop	EDI
 000043D8  5E				pop	ESI 
 000043D9  5B				pop	EBX 
 000043DA  C9				leave	
 000043DB  C3				ret	
 000043DC			UnitTesting_Triangle_get_Base ENDP

 000043DC			UnitTesting_Triangle_put_Base PROC NEAR 
				;void put::Base(double value);
 000043DC  55				push	EBP
 000043DD  8B EC			mov	EBP,ESP
 000043DF  51				push	ECX 
 000043E0  53				push	EBX 
 000043E1  56				push	ESI 
 000043E2  57				push	EDI 
				;{

				;{186}:dBase= value;
 000043E3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000043E6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000043E9  50				push	EAX
 000043EA  52				push	EDX 
 000043EB  DD 04 24			fld	qword ptr [ESP]
 000043EE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000043F1  DD 59 04			fstp	qword ptr [ECX+0004h]
				;}
 000043F4			$L000690:
 000043F4  5A				pop	EDX
 000043F5  58				pop	EAX 

 000043F6  5F				pop	EDI
 000043F7  5E				pop	ESI 
 000043F8  5B				pop	EBX 
 000043F9  C9				leave	
 000043FA  C2 0008			retn	000000008h
 000043FD			UnitTesting_Triangle_put_Base ENDP

 000043FD			UnitTesting_Triangle_ComputeArea PROC NEAR 
				;double ComputeArea(void);
 000043FD  55				push	EBP
 000043FE  8B EC			mov	EBP,ESP
 00004400  51				push	ECX 
 00004401  53				push	EBX 
 00004402  56				push	ESI 
 00004403  57				push	EDI 
				;{

				;{215}:return Base * High / 2
 00004404  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004407  E8 FFFFFFB9			call	 UnitTesting_Triangle_get_Base
 0000440C  50				push	EAX
 0000440D  52				push	EDX 
 0000440E  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004411  E8 0000009F			call	 UnitTesting_Triangle_get_High
 00004416  9B DB E2			fclex
 00004419  50				push	EAX
 0000441A  52				push	EDX 
 0000441B  DD 04 24			fld	qword ptr [ESP]
 0000441E  59				pop	ECX
 0000441F  59				pop	ECX 
 00004420  DC 0C 24			fmul	qword ptr [ESP]
 00004423  DD 1C 24			fstp	qword ptr [ESP]
 00004426  B8 00000002			mov	EAX,000000002h
 0000442B  9B DB E2			fclex
 0000442E  50				push	EAX
 0000442F  E8 00000000 E		call	 FloatingPoint_FromInt
 00004434  50				push	EAX
 00004435  52				push	EDX 
 00004436  DD 04 24			fld	qword ptr [ESP]
 00004439  59				pop	ECX 
 0000443A  59				pop	ECX 
 0000443B  DC 3C 24			fdivr	qword ptr [ESP]
 0000443E  DD 1C 24			fstp	qword ptr [ESP]
 00004441  5A				pop	EDX
 00004442  58				pop	EAX 
 00004443  EB 00			jmp	OFFSET $L000701
				;}
 00004445			$L000701:

 00004445  5F				pop	EDI
 00004446  5E				pop	ESI 
 00004447  5B				pop	EBX 
 00004448  C9				leave	
 00004449  C3				ret	
 0000444A			UnitTesting_Triangle_ComputeArea ENDP

 0000444A			UnitTesting_Triangle_Destructor PROC NEAR 
				;void Destructor(void);
 0000444A  55				push	EBP
 0000444B  8B EC			mov	EBP,ESP
 0000444D  51				push	ECX 
 0000444E  53				push	EBX 
 0000444F  56				push	ESI 
 00004450  57				push	EDI 
				;{

				;{220}:System::Debug::OutputString("destroying a Triangle object...");
 00004451  8D 05 00000F1C R		lea	EAX,OFFSET $S000703
 00004457  50				push	EAX
 00004458  E8 00000000 E		call	 System_Debug_OutputString

				;{221}:Console::WriteLn("destroying a Triangle object...");
 0000445D  8D 05 00000F1C R		lea	EAX,OFFSET $S000703
 00004463  6A 00			push	000000000h
 00004465  50				push	EAX 
 00004466  E8 00000000 E		call	 Console_WriteString
 0000446B  E8 00000000 E		call	 Console_WriteCrLf 

				;{222}:return 
 00004470  EB 00			jmp	OFFSET $L000702
				;}
 00004472			$L000702:

 00004472  5F				pop	EDI
 00004473  5E				pop	ESI 
 00004474  5B				pop	EBX 
 00004475  C9				leave	
 00004476  C3				ret	
 00004477			UnitTesting_Triangle_Destructor ENDP

 00004477			UnitTesting_Triangle_Draw PROC NEAR 
				;void Draw(void);
 00004477  55				push	EBP
 00004478  8B EC			mov	EBP,ESP
 0000447A  51				push	ECX 
 0000447B  53				push	EBX 
 0000447C  56				push	ESI 
 0000447D  57				push	EDI 
				;{

				;{209}:Console::WriteLn("Drawing a Triangle!");
 0000447E  8D 05 000009B0 R		lea	EAX,OFFSET $S000700
 00004484  6A 00			push	000000000h
 00004486  50				push	EAX 
 00004487  E8 00000000 E		call	 Console_WriteString
 0000448C  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004491			$L000699:

 00004491  5F				pop	EDI
 00004492  5E				pop	ESI 
 00004493  5B				pop	EBX 
 00004494  C9				leave	
 00004495  C3				ret	
 00004496			UnitTesting_Triangle_Draw ENDP

 00004496			UnitTesting_Triangle_DrawPiramid PROC NEAR 
				;void DrawPiramid(void);
 00004496  55				push	EBP
 00004497  8B EC			mov	EBP,ESP
 00004499  51				push	ECX 
 0000449A  53				push	EBX 
 0000449B  56				push	ESI 
 0000449C  57				push	EDI 
				;{

				;{227}:Console::WriteLn("Drawing a Piramid!");
 0000449D  8D 05 00000979 R		lea	EAX,OFFSET $S000705
 000044A3  6A 00			push	000000000h
 000044A5  50				push	EAX 
 000044A6  E8 00000000 E		call	 Console_WriteString
 000044AB  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000044B0			$L000704:

 000044B0  5F				pop	EDI
 000044B1  5E				pop	ESI 
 000044B2  5B				pop	EBX 
 000044B3  C9				leave	
 000044B4  C3				ret	
 000044B5			UnitTesting_Triangle_DrawPiramid ENDP

 000044B5			UnitTesting_Triangle_get_High PROC NEAR 
				;double get::High(void);
 000044B5  55				push	EBP
 000044B6  8B EC			mov	EBP,ESP
 000044B8  51				push	ECX 
 000044B9  53				push	EBX 
 000044BA  56				push	ESI 
 000044BB  57				push	EDI 
				;{

				;{191}:return dHigh
 000044BC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000044BF  8B 41 10			mov	EAX,dword ptr [ECX+0010h]
 000044C2  8B 51 0C			mov	EDX,dword ptr [ECX+000Ch] 
 000044C5  EB 00			jmp	OFFSET $L000693
				;}
 000044C7			$L000693:

 000044C7  5F				pop	EDI
 000044C8  5E				pop	ESI 
 000044C9  5B				pop	EBX 
 000044CA  C9				leave	
 000044CB  C3				ret	
 000044CC			UnitTesting_Triangle_get_High ENDP

 000044CC			UnitTesting_Triangle_put_High PROC NEAR 
				;void put::High(double value);
 000044CC  55				push	EBP
 000044CD  8B EC			mov	EBP,ESP
 000044CF  51				push	ECX 
 000044D0  53				push	EBX 
 000044D1  56				push	ESI 
 000044D2  57				push	EDI 
				;{

				;{196}:dHigh= value;
 000044D3  8B 55 08			mov	EDX,dword ptr [EBP+0008h]
 000044D6  8B 45 0C			mov	EAX,dword ptr [EBP+000Ch] 
 000044D9  50				push	EAX
 000044DA  52				push	EDX 
 000044DB  DD 04 24			fld	qword ptr [ESP]
 000044DE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000044E1  DD 59 0C			fstp	qword ptr [ECX+000Ch]
				;}
 000044E4			$L000694:
 000044E4  5A				pop	EDX
 000044E5  58				pop	EAX 

 000044E6  5F				pop	EDI
 000044E7  5E				pop	ESI 
 000044E8  5B				pop	EBX 
 000044E9  C9				leave	
 000044EA  C2 0008			retn	000000008h
 000044ED			UnitTesting_Triangle_put_High ENDP

 000044ED			UnitTesting_Triangle_Name PROC NEAR 
				;string Name(void);
 000044ED  55				push	EBP
 000044EE  8B EC			mov	EBP,ESP
 000044F0  51				push	ECX 
 000044F1  53				push	EBX 
 000044F2  56				push	ESI 
 000044F3  57				push	EDI 
				;{

				;{204}:return "Triangle"
 000044F4  8D 05 00000D80 R		lea	EAX,OFFSET $S000698
 000044FA  EB 00			jmp	OFFSET $L000697
				;}
 000044FC			$L000697:

 000044FC  5F				pop	EDI
 000044FD  5E				pop	ESI 
 000044FE  5B				pop	EBX 
 000044FF  C9				leave	
 00004500  C3				ret	
 00004501			UnitTesting_Triangle_Name ENDP

 00004501			UnitTesting_Triangle_Type PROC NEAR 
				;UnitTesting::ShapeType Type(void);
 00004501  55				push	EBP
 00004502  8B EC			mov	EBP,ESP
 00004504  51				push	ECX 
 00004505  53				push	EBX 
 00004506  56				push	ESI 
 00004507  57				push	EDI 
				;{

				;{200}:return UnitTesting::stTriangle
 00004508  B8 00000003			mov	EAX,000000003h
 0000450D  EB 00			jmp	OFFSET $L000696
				;}
 0000450F			$L000696:

 0000450F  5F				pop	EDI
 00004510  5E				pop	ESI 
 00004511  5B				pop	EBX 
 00004512  C9				leave	
 00004513  C3				ret	
 00004514			UnitTesting_Triangle_Type ENDP

 00004514			UnitTesting_Triangle PROC NEAR 
				;void UnitTesting::Triangle(void);
 00004514  55				push	EBP
 00004515  8B EC			mov	EBP,ESP
 00004517  51				push	ECX 
 00004518  53				push	EBX 
 00004519  56				push	ESI 
 0000451A  57				push	EDI 
 0000451B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000451E  E8 FFFFCCEA			call	 UnitTesting_Shape ;base constructor call
 00004523  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 00004526  C7 01 000000C8 R		mov	dword ptr [ECX],OFFSET  @@class_vptr_vtbl@@__UnitTesting_Triangle 
 0000452C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h] 
 0000452F  E8 00000398			call	 __member_Init@UnitTesting_Triangle 
				;{
				;}

 00004534  5F				pop	EDI
 00004535  5E				pop	ESI 
 00004536  5B				pop	EBX 
 00004537  C9				leave	
 00004538  C3				ret	
 00004539			UnitTesting_Triangle ENDP

 00004539			UnitTesting_Visitor_Visit PROC NEAR 
				;void Visit(UnitTesting::Shape ^ shape);
 00004539  55				push	EBP
 0000453A  8B EC			mov	EBP,ESP
 0000453C  83 EC 14			sub	ESP,000000014h
 0000453F  53				push	EBX 
 00004540  56				push	ESI 
 00004541  57				push	EDI 
 00004542  89 4D EC			mov	dword ptr [EBP-0014h],ECX
 00004545  8D 7D F0			lea	EDI,dword ptr [EBP-0010h]
 00004548  B9 00000004			mov	ECX,000000004h 
 0000454D  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00004552  F3/ AB			rep stos	dword ptr [EDI]
 00004554  8B 4D EC			mov	ECX,dword ptr [EBP-0014h] 
				;{

				;{312}:shape.Draw();
 00004557  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 0000455A  8B 11			mov	EDX,dword ptr [ECX]
 0000455C  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{314}:shape_ptr= null;
 0000455F  33 C0			xor	EAX,EAX
 00004561  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00004564  89 03			mov	dword ptr [EBX],EAX

				;{316}:switch(shape.Type())
 00004566  8B 4D 08			mov	ECX,dword ptr [EBP+0008h]
 00004569  8B 11			mov	EDX,dword ptr [ECX]
 0000456B  FF 12			call	dword ptr [EDX]
 0000456D  8B F0			mov	ESI,EAX
 0000456F  B8 00000001			mov	EAX,000000001h
 00004574  3B C6			cmp	EAX,ESI
 00004576  74 17			jz	OFFSET $L001610
 00004578  B8 00000002			mov	EAX,000000002h
 0000457D  3B C6			cmp	EAX,ESI
 0000457F  74 3D			jz	OFFSET $L001611
 00004581  B8 00000003			mov	EAX,000000003h
 00004586  3B C6			cmp	EAX,ESI
 00004588  74 63			jz	OFFSET $L001612
 0000458A  E9 0000008D			jmp	OFFSET $L001613
 0000458F			$L001610:
				;{

				;{320}:Console::WriteLn("type == stCircle");
 0000458F  8D 05 00001115 R		lea	EAX,OFFSET $S000716
 00004595  6A 00			push	000000000h
 00004597  50				push	EAX 
 00004598  E8 00000000 E		call	 Console_WriteString
 0000459D  E8 00000000 E		call	 Console_WriteCrLf 

				;{322}:circle= dynamic_cast(shape);
 000045A2  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000045A5  8B C3			mov	EAX,EBX 
 000045A7  8D 5D F8			lea	EBX,dword ptr [EBP-0008h]
 000045AA  89 03			mov	dword ptr [EBX],EAX

				;{323}:circle.DrawSphere();
 000045AC  8B 4D F8			mov	ECX,dword ptr [EBP-8]
 000045AF  8B 11			mov	EDX,dword ptr [ECX]
 000045B1  FF 52 14			call	dword ptr [EDX+0014h]

				;{325}:shape_ptr= circle;
 000045B4  8B 45 F8			mov	EAX,dword ptr [EBP-8]
 000045B7  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000045BA  89 03			mov	dword ptr [EBX],EAX
				;}
 000045BC  EB 5F			jmp	OFFSET $L001609
 000045BE			$L001611:
				;{

				;{330}:Console::WriteLn("type == stSquare");
 000045BE  8D 05 00001126 R		lea	EAX,OFFSET $S000718
 000045C4  6A 00			push	000000000h
 000045C6  50				push	EAX 
 000045C7  E8 00000000 E		call	 Console_WriteString
 000045CC  E8 00000000 E		call	 Console_WriteCrLf 

				;{332}:square= dynamic_cast(shape);
 000045D1  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 000045D4  8B C3			mov	EAX,EBX 
 000045D6  8D 5D F4			lea	EBX,dword ptr [EBP-000Ch]
 000045D9  89 03			mov	dword ptr [EBX],EAX

				;{333}:square.DrawCube();
 000045DB  8B 4D F4			mov	ECX,dword ptr [EBP-12]
 000045DE  E8 FFFFD205			call	 UnitTesting_Square_DrawCube

				;{335}:shape_ptr= square;
 000045E3  8B 45 F4			mov	EAX,dword ptr [EBP-12]
 000045E6  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 000045E9  89 03			mov	dword ptr [EBX],EAX
				;}
 000045EB  EB 30			jmp	OFFSET $L001609
 000045ED			$L001612:
				;{

				;{340}:Console::WriteLn("type == stTriangle");
 000045ED  8D 05 00001137 R		lea	EAX,OFFSET $S000720
 000045F3  6A 00			push	000000000h
 000045F5  50				push	EAX 
 000045F6  E8 00000000 E		call	 Console_WriteString
 000045FB  E8 00000000 E		call	 Console_WriteCrLf 

				;{342}:triangle= dynamic_cast(shape);
 00004600  8B 5D 08			mov	EBX,dword ptr [EBP+0008h]
 00004603  8B C3			mov	EAX,EBX 
 00004605  8D 5D F0			lea	EBX,dword ptr [EBP-0010h]
 00004608  89 03			mov	dword ptr [EBX],EAX

				;{343}:triangle.DrawPiramid();
 0000460A  8B 4D F0			mov	ECX,dword ptr [EBP-16]
 0000460D  8B 11			mov	EDX,dword ptr [ECX]
 0000460F  FF 52 14			call	dword ptr [EDX+0014h]

				;{345}:shape_ptr= triangle;
 00004612  8B 45 F0			mov	EAX,dword ptr [EBP-16]
 00004615  8D 5D FC			lea	EBX,dword ptr [EBP-0004h]
 00004618  89 03			mov	dword ptr [EBX],EAX
				;}
 0000461A  EB 01			jmp	OFFSET $L001609
 0000461C			$L001613:
 0000461C  CC				int	000000003h ;User breakpoint
 0000461D			$L001609:

				;{353}:if(shape_ptr != null)
 0000461D  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00004620  8B C8			mov	ECX,EAX 
 00004622  51				push	ECX
 00004623  33 C0			xor	EAX,EAX
 00004625  5B				pop	EBX
 00004626  3B D8			cmp	EBX,EAX
 00004628  0F 95 C0			setnz	AL
 0000462B  84 C0			test	AL,AL
 0000462D  74 08			jz	OFFSET $L001614

				;{354}:shape_ptr.Draw();
 0000462F  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00004632  8B 11			mov	EDX,dword ptr [ECX]
 00004634  FF 52 0C			call	dword ptr [EDX+000Ch]
 00004637			$L001614:

				;{356}:if(null != shape_ptr)
 00004637  33 C0			xor	EAX,EAX
 00004639  50				push	EAX
 0000463A  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 0000463D  59				pop	ECX
 0000463E  3B C8			cmp	ECX,EAX
 00004640  0F 95 C0			setnz	AL
 00004643  84 C0			test	AL,AL
 00004645  74 08			jz	OFFSET $L001616

				;{357}:shape_ptr.Draw();
 00004647  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 0000464A  8B 11			mov	EDX,dword ptr [ECX]
 0000464C  FF 52 0C			call	dword ptr [EDX+000Ch]
 0000464F			$L001616:

				;{360}:Console::WriteLn("**Visited object name = ", shape_ptr.Name());
 0000464F  8D 05 000006D2 R		lea	EAX,OFFSET $S000722
 00004655  6A 00			push	000000000h
 00004657  50				push	EAX 
 00004658  E8 00000000 E		call	 Console_WriteString
 0000465D  8B 4D FC			mov	ECX,dword ptr [EBP-4]
 00004660  8B 11			mov	EDX,dword ptr [ECX]
 00004662  FF 52 08			call	dword ptr [EDX+0008h]
 00004665  6A 00			push	000000000h 
 00004667  50				push	EAX 
 00004668  E8 00000000 E		call	 Console_WriteString 
 0000466D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004672			$L000713:

 00004672  5F				pop	EDI
 00004673  5E				pop	ESI 
 00004674  5B				pop	EBX 
 00004675  C9				leave	
 00004676  C2 0004			retn	000000004h
 00004679			UnitTesting_Visitor_Visit ENDP

 00004679			__member_Init@UnitTesting_Circle PROC NEAR

 00004679  55				push	EBP
 0000467A  8B EC			mov	EBP,ESP
 0000467C  51				push	ECX 
 0000467D  53				push	EBX 
 0000467E  56				push	ESI 
 0000467F  57				push	EDI 
 00004680  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:radius= 0.0;
 00004683  D9 EE			fldz
 00004685  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004688  DD 59 04			fstp	qword ptr [ECX+0004h]

 0000468B  5F				pop	EDI
 0000468C  5E				pop	ESI 
 0000468D  5B				pop	EBX 
 0000468E  C9				leave	
 0000468F  C3				ret	
 00004690			__member_Init@UnitTesting_Circle ENDP
 00004690			__member_Init@UnitTesting_DoubleProxy PROC NEAR

 00004690  55				push	EBP
 00004691  8B EC			mov	EBP,ESP
 00004693  51				push	ECX 
 00004694  53				push	EBX 
 00004695  56				push	ESI 
 00004696  57				push	EDI 
 00004697  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:val= 0.0;
 0000469A  D9 EE			fldz
 0000469C  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000469F  DD 59 04			fstp	qword ptr [ECX+0004h]

 000046A2  5F				pop	EDI
 000046A3  5E				pop	ESI 
 000046A4  5B				pop	EBX 
 000046A5  C9				leave	
 000046A6  C3				ret	
 000046A7			__member_Init@UnitTesting_DoubleProxy ENDP
 000046A7			__member_Init@UnitTesting_Objects_Array PROC NEAR

 000046A7  55				push	EBP
 000046A8  8B EC			mov	EBP,ESP
 000046AA  51				push	ECX 
 000046AB  53				push	EBX 
 000046AC  56				push	ESI 
 000046AD  57				push	EDI 
 000046AE  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:array= null;
 000046B1  33 C0			xor	EAX,EAX
 000046B3  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046B6  89 01			mov	dword ptr [ECX],EAX

				;{0}:_length= 0;
 000046B8  33 C0			xor	EAX,EAX
 000046BA  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046BD  89 41 04			mov	dword ptr [ECX+0004h],EAX

 000046C0  5F				pop	EDI
 000046C1  5E				pop	ESI 
 000046C2  5B				pop	EBX 
 000046C3  C9				leave	
 000046C4  C3				ret	
 000046C5			__member_Init@UnitTesting_Objects_Array ENDP
 000046C5			__member_Init@UnitTesting_Objects_Automobile PROC NEAR

 000046C5  55				push	EBP
 000046C6  8B EC			mov	EBP,ESP
 000046C8  51				push	ECX 
 000046C9  53				push	EBX 
 000046CA  56				push	ESI 
 000046CB  57				push	EDI 
 000046CC  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:speed= 0.0;
 000046CF  D9 EE			fldz
 000046D1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000046D4  DD 59 04			fstp	qword ptr [ECX+0004h]

 000046D7  5F				pop	EDI
 000046D8  5E				pop	ESI 
 000046D9  5B				pop	EBX 
 000046DA  C9				leave	
 000046DB  C3				ret	
 000046DC			__member_Init@UnitTesting_Objects_Automobile ENDP
 000046DC			__member_Init@UnitTesting_Rnd PROC NEAR

 000046DC  55				push	EBP
 000046DD  8B EC			mov	EBP,ESP
 000046DF  51				push	ECX 
 000046E0  53				push	EBX 
 000046E1  56				push	ESI 
 000046E2  57				push	EDI 
 000046E3  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:UnitTesting::Rnd::seed= 1;
 000046E6  B8 00000001			mov	EAX,000000001h
 000046EB  A3 00001210 R		mov	 UnitTesting_Rnd_seed,EAX

				;{0}:UnitTesting::Rnd::a= 16807;
 000046F0  B8 000041A7			mov	EAX,0000041A7h
 000046F5  A3 00001214 R		mov	 UnitTesting_Rnd_a,EAX

				;{0}:UnitTesting::Rnd::m= 2147483647;
 000046FA  B8 7FFFFFFF			mov	EAX,07FFFFFFFh
 000046FF  A3 00001218 R		mov	 UnitTesting_Rnd_m,EAX

				;{0}:UnitTesting::Rnd::q= 127773;
 00004704  B8 0001F31D			mov	EAX,00001F31Dh
 00004709  A3 0000121C R		mov	 UnitTesting_Rnd_q,EAX

				;{0}:UnitTesting::Rnd::r= 2836;
 0000470E  B8 00000B14			mov	EAX,000000B14h
 00004713  A3 00001220 R		mov	 UnitTesting_Rnd_r,EAX

 00004718  5F				pop	EDI
 00004719  5E				pop	ESI 
 0000471A  5B				pop	EBX 
 0000471B  C9				leave	
 0000471C  C3				ret	
 0000471D			__member_Init@UnitTesting_Rnd ENDP
 0000471D			__member_Init@UnitTesting_ShapeFactoryCreator PROC NEAR

 0000471D  55				push	EBP
 0000471E  8B EC			mov	EBP,ESP
 00004720  51				push	ECX 
 00004721  53				push	EBX 
 00004722  56				push	ESI 
 00004723  57				push	EDI 
 00004724  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:ptr3= new UnitTesting::Circle();
 00004727  6A 0C			push	00000000Ch
 00004729  E8 00000000 E		call	 System_Memory_New
 0000472E  85 C0			test	EAX,EAX
 00004730  74 12			jz	 $L001618
 00004732  8B F0			mov	ESI,EAX
 00004734  8D 3E			lea	EDI,dword ptr [ESI]
 00004736  B9 00000003			mov	ECX,000000003h 
 0000473B  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00004740  F3/ AB			rep stos	dword ptr [EDI]
 00004742  EB 02			jmp	 $L001619
 00004744			$L001618:
 00004744  33 F6			xor	ESI,ESI
 00004746			$L001619:
 00004746  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004749  89 31			mov	dword ptr [ECX],ESI 
 0000474B  8B CE			mov	ECX,ESI 
 0000474D  E8 FFFFBFEB			call	 UnitTesting_Circle
 00004752  8B C6			mov	EAX,ESI 

 00004754  5F				pop	EDI
 00004755  5E				pop	ESI 
 00004756  5B				pop	EBX 
 00004757  C9				leave	
 00004758  C3				ret	
 00004759			__member_Init@UnitTesting_ShapeFactoryCreator ENDP
 00004759			__member_Init@UnitTesting_Square PROC NEAR

 00004759  55				push	EBP
 0000475A  8B EC			mov	EBP,ESP
 0000475C  51				push	ECX 
 0000475D  53				push	EBX 
 0000475E  56				push	ESI 
 0000475F  57				push	EDI 
 00004760  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dWidth= 0.0;
 00004763  D9 EE			fldz
 00004765  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004768  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHeight= 0.0;
 0000476B  D9 EE			fldz
 0000476D  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004770  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 00004773  5F				pop	EDI
 00004774  5E				pop	ESI 
 00004775  5B				pop	EBX 
 00004776  C9				leave	
 00004777  C3				ret	
 00004778			__member_Init@UnitTesting_Square ENDP
 00004778			__member_Init@UnitTesting_TestIntegers PROC NEAR

 00004778  55				push	EBP
 00004779  8B EC			mov	EBP,ESP
 0000477B  51				push	ECX 
 0000477C  53				push	EBX 
 0000477D  56				push	ESI 
 0000477E  57				push	EDI 
 0000477F  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:nWidth= 0;
 00004782  33 C0			xor	EAX,EAX
 00004784  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004787  89 01			mov	dword ptr [ECX],EAX

				;{0}:nHeight= 0;
 00004789  33 C0			xor	EAX,EAX
 0000478B  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000478E  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:UnitTesting::TestIntegers::bigValue= 2147483648;
 00004791  B8 FFFFFFFF			mov	EAX,0FFFFFFFFh
 00004796  99				cdq	
 00004797  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 0000479D  89 03			mov	dword ptr [EBX],EAX
 0000479F  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{0}:member1= 0.0;
 000047A2  D9 EE			fldz
 000047A4  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047A7  DD 59 08			fstp	qword ptr [ECX+0008h]

				;{0}:member2= 1.0;
 000047AA  D9 E8			fld1
 000047AC  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047AF  DD 59 10			fstp	qword ptr [ECX+0010h]

 000047B2  5F				pop	EDI
 000047B3  5E				pop	ESI 
 000047B4  5B				pop	EBX 
 000047B5  C9				leave	
 000047B6  C3				ret	
 000047B7			__member_Init@UnitTesting_TestIntegers ENDP
 000047B7			__member_Init@UnitTesting_TestProperties PROC NEAR

 000047B7  55				push	EBP
 000047B8  8B EC			mov	EBP,ESP
 000047BA  51				push	ECX 
 000047BB  53				push	EBX 
 000047BC  56				push	ESI 
 000047BD  57				push	EDI 
 000047BE  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:shapes1= new UnitTesting::Circle[10];
 000047C1  B8 0000000A			mov	EAX,00000000Ah
 000047C6  6B C0 0C			imul	EAX,00000000Ch
 000047C9  8D 58 04			lea	EBX,dword ptr [EAX+4]
 000047CC  53				push	EBX
 000047CD  8B D8			mov	EBX,EAX
 000047CF  E8 00000000 E		call	 System_Memory_New
 000047D4  85 C0			test	EAX,EAX
 000047D6  74 14			jz	 $L001620
 000047D8  8B F0			mov	ESI,EAX 
 000047DA  8D 3E			lea	EDI,dword ptr [ESI]
 000047DC  8B CB			mov	ECX,EBX 
 000047DE  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000047E3  F3/ AA			rep stos	byte ptr [EDI]
 000047E5  89 1E			mov	dword ptr [ESI],EBX 
 000047E7  83 C6 04			add	ESI,000000004h
 000047EA  EB 02			jmp	 $L001621
 000047EC			$L001620:
 000047EC  33 F6			xor	ESI,ESI
 000047EE			$L001621:
 000047EE  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000047F1  89 31			mov	dword ptr [ECX],ESI 
 000047F3  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 000047F6  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 000047F9  8B DE			mov	EBX,ESI 
 000047FB			$L001622:
 000047FB  8B CB			mov	ECX,EBX 
 000047FD  E8 FFFFBF3B			call	 UnitTesting_Circle
 00004802  83 C3 0C			add	EBX,00000000Ch 
 00004805  3B DF			cmp	EBX,EDI
 00004807  75 F2			jnz	OFFSET $L001622
 00004809  8B C6			mov	EAX,ESI 

				;{0}:shapes2= new UnitTesting::Circle[4];
 0000480B  B8 00000004			mov	EAX,000000004h
 00004810  6B C0 0C			imul	EAX,00000000Ch
 00004813  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00004816  53				push	EBX
 00004817  8B D8			mov	EBX,EAX
 00004819  E8 00000000 E		call	 System_Memory_New
 0000481E  85 C0			test	EAX,EAX
 00004820  74 14			jz	 $L001623
 00004822  8B F0			mov	ESI,EAX 
 00004824  8D 3E			lea	EDI,dword ptr [ESI]
 00004826  8B CB			mov	ECX,EBX 
 00004828  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000482D  F3/ AA			rep stos	byte ptr [EDI]
 0000482F  89 1E			mov	dword ptr [ESI],EBX 
 00004831  83 C6 04			add	ESI,000000004h
 00004834  EB 02			jmp	 $L001624
 00004836			$L001623:
 00004836  33 F6			xor	ESI,ESI
 00004838			$L001624:
 00004838  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 0000483B  89 71 04			mov	dword ptr [ECX+0004h],ESI 
 0000483E  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00004841  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00004844  8B DE			mov	EBX,ESI 
 00004846			$L001625:
 00004846  8B CB			mov	ECX,EBX 
 00004848  E8 FFFFBEF0			call	 UnitTesting_Circle
 0000484D  83 C3 0C			add	EBX,00000000Ch 
 00004850  3B DF			cmp	EBX,EDI
 00004852  75 F2			jnz	OFFSET $L001625
 00004854  8B C6			mov	EAX,ESI 

				;{0}:shapes_ptr= new UnitTesting::Circle[10];
 00004856  B8 0000000A			mov	EAX,00000000Ah
 0000485B  6B C0 0C			imul	EAX,00000000Ch
 0000485E  8D 58 04			lea	EBX,dword ptr [EAX+4]
 00004861  53				push	EBX
 00004862  8B D8			mov	EBX,EAX
 00004864  E8 00000000 E		call	 System_Memory_New
 00004869  85 C0			test	EAX,EAX
 0000486B  74 14			jz	 $L001626
 0000486D  8B F0			mov	ESI,EAX 
 0000486F  8D 3E			lea	EDI,dword ptr [ESI]
 00004871  8B CB			mov	ECX,EBX 
 00004873  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00004878  F3/ AA			rep stos	byte ptr [EDI]
 0000487A  89 1E			mov	dword ptr [ESI],EBX 
 0000487C  83 C6 04			add	ESI,000000004h
 0000487F  EB 02			jmp	 $L001627
 00004881			$L001626:
 00004881  33 F6			xor	ESI,ESI
 00004883			$L001627:
 00004883  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 00004886  89 71 08			mov	dword ptr [ECX+0008h],ESI 
 00004889  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 0000488C  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 0000488F  8B DE			mov	EBX,ESI 
 00004891			$L001628:
 00004891  8B CB			mov	ECX,EBX 
 00004893  E8 FFFFBEA5			call	 UnitTesting_Circle
 00004898  83 C3 0C			add	EBX,00000000Ch 
 0000489B  3B DF			cmp	EBX,EDI
 0000489D  75 F2			jnz	OFFSET $L001628
 0000489F  8B C6			mov	EAX,ESI 

 000048A1  5F				pop	EDI
 000048A2  5E				pop	ESI 
 000048A3  5B				pop	EBX 
 000048A4  C9				leave	
 000048A5  C3				ret	
 000048A6			__member_Init@UnitTesting_TestProperties ENDP
 000048A6			__member_Init@UnitTesting_TestProperties_node PROC NEAR

 000048A6  55				push	EBP
 000048A7  8B EC			mov	EBP,ESP
 000048A9  51				push	ECX 
 000048AA  53				push	EBX 
 000048AB  56				push	ESI 
 000048AC  57				push	EDI 
 000048AD  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:left= null;
 000048B0  33 C0			xor	EAX,EAX
 000048B2  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048B5  89 01			mov	dword ptr [ECX],EAX

				;{0}:right= null;
 000048B7  33 C0			xor	EAX,EAX
 000048B9  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048BC  89 41 04			mov	dword ptr [ECX+0004h],EAX

				;{0}:value= null;
 000048BF  33 C0			xor	EAX,EAX
 000048C1  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048C4  89 41 08			mov	dword ptr [ECX+0008h],EAX

 000048C7  5F				pop	EDI
 000048C8  5E				pop	ESI 
 000048C9  5B				pop	EBX 
 000048CA  C9				leave	
 000048CB  C3				ret	
 000048CC			__member_Init@UnitTesting_TestProperties_node ENDP
 000048CC			__member_Init@UnitTesting_Triangle PROC NEAR

 000048CC  55				push	EBP
 000048CD  8B EC			mov	EBP,ESP
 000048CF  51				push	ECX 
 000048D0  53				push	EBX 
 000048D1  56				push	ESI 
 000048D2  57				push	EDI 
 000048D3  89 4D FC			mov	dword ptr [EBP-0004h],ECX

				;{0}:dBase= 0.0;
 000048D6  D9 EE			fldz
 000048D8  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048DB  DD 59 04			fstp	qword ptr [ECX+0004h]

				;{0}:dHigh= 0.0;
 000048DE  D9 EE			fldz
 000048E0  8B 4D FC			mov	ECX,dword ptr [EBP-0004h]
 000048E3  DD 59 0C			fstp	qword ptr [ECX+000Ch]

 000048E6  5F				pop	EDI
 000048E7  5E				pop	ESI 
 000048E8  5B				pop	EBX 
 000048E9  C9				leave	
 000048EA  C3				ret	
 000048EB			__member_Init@UnitTesting_Triangle ENDP
 000048EB			UnitTesting_Test1_TestRunner_main PROC NEAR 
				;void UnitTesting::Test1::TestRunner::main(int argc, string [] argv);
 000048EB  55				push	EBP
 000048EC  8B EC			mov	EBP,ESP
 000048EE  81 EC 000004C8		sub	ESP,0000004C8h
 000048F4  53				push	EBX 
 000048F5  56				push	ESI 
 000048F6  57				push	EDI 
 000048F7  8D BD FFFFFB38		lea	EDI,dword ptr [EBP-04C8h]
 000048FD  B9 00000132			mov	ECX,000000132h
 00004902  B8 CCCCCCCC			mov	EAX,0CCCCCCCCh 
 00004907  F3/ AB			rep stos	dword ptr [EDI]
				;{

				;{1086}:for(ac= 0; ac < argc; ac++ )
 00004909  33 C0			xor	EAX,EAX
 0000490B  89 45 FC			mov	dword ptr [EBP-0004h],EAX
 0000490E  EB 06			jmp	OFFSET $L001629
 00004910			$L001630:
 00004910  8B 45 FC			mov	EAX,dword ptr [EBP-4]
 00004913  FF 45 FC			inc	dword ptr [EBP-4]
 00004916			$L001629:
 00004916  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004919  50				push	EAX
 0000491A  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000491D  5A				pop	EDX
 0000491E  3B D0			cmp	EDX,EAX
 00004920  0F 9C C0			setl	AL
 00004923  84 C0			test	AL,AL
 00004925  74 41			jz	OFFSET $L001631
				;{

				;{1088}:Console::WriteLn("Argument: [", ac, "]= ", argv[ac]);
 00004927  8D 05 000007B9 R		lea	EAX,OFFSET $S001183
 0000492D  6A 00			push	000000000h
 0000492F  50				push	EAX 
 00004930  E8 00000000 E		call	 Console_WriteString
 00004935  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004938  50				push	EAX 
 00004939  E8 00000000 E		call	 Console_WriteInteger 
 0000493E  8D 05 00000DCC R		lea	EAX,OFFSET $S001184
 00004944  6A 00			push	000000000h 
 00004946  50				push	EAX 
 00004947  E8 00000000 E		call	 Console_WriteString 
 0000494C  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000494F  8B C3			mov	EAX,EBX 
 00004951  50				push	EAX
 00004952  8B 45 FC			mov	EAX,dword ptr [EBP-0004h]
 00004955  5E				pop	ESI
 00004956  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00004959  6A 00			push	000000000h 
 0000495B  50				push	EAX 
 0000495C  E8 00000000 E		call	 Console_WriteString 
 00004961  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004966  EB A8			jmp	OFFSET $L001630 
 00004968			$L001631:

				;{1091}:bUnattended= argc > 1 && (argv[1] == "/Silent");
 00004968  8B 45 08			mov	EAX,dword ptr [EBP+0008h]
 0000496B  50				push	EAX
 0000496C  B8 00000001			mov	EAX,000000001h
 00004971  5A				pop	EDX
 00004972  3B D0			cmp	EDX,EAX
 00004974  0F 9F C0			setg	AL
 00004977  84 C0			test	AL,AL
 00004979  74 2D			jz	OFFSET $L001632
 0000497B  8B 5D 0C			mov	EBX,dword ptr [EBP+000Ch]
 0000497E  8B C3			mov	EAX,EBX 
 00004980  50				push	EAX
 00004981  B8 00000001			mov	EAX,000000001h
 00004986  5E				pop	ESI
 00004987  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 0000498A  50				push	EAX
 0000498B  8D 05 00000761 R		lea	EAX,OFFSET $S001186
 00004991  5F				pop	EDI
 00004992  8B F0			mov	ESI,EAX
 00004994  50				push	EAX
 00004995  E8 00000000 E		call	 StringHandling_StringLength
 0000499A  50				push	EAX 
 0000499B  56				push	ESI 
 0000499C  57				push	EDI 
 0000499D  E8 00000000 E		call	 StringHandling_StringCompare 
 000049A2  83 F8 00			cmp	EAX,000000000h
 000049A5  0F 94 C0			setz	AL
 000049A8			$L001632:
 000049A8  88 45 F8			mov	byte ptr [EBP-0008h],AL

				;{1093}:bUnattended= bUnattended || 5 >= 5.99;
 000049AB  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 000049AF  84 C0			test	AL,AL
 000049B1  75 1F			jnz	OFFSET $L001633
 000049B3  B8 00000005			mov	EAX,000000005h
 000049B8  50				push	EAX
 000049B9  BA 8F5C28F6			mov	EDX,08F5C28F6h
 000049BE  B8 4017F5C2			mov	EAX,04017F5C2h 
 000049C3  50				push	EAX
 000049C4  52				push	EDX 
 000049C5  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 000049CA  83 F8 00			cmp	EAX,000000000h
 000049CD  F7 D8			neg	EAX
 000049CF  0F 9D C0			setge	AL
 000049D2			$L001633:
 000049D2  88 45 F8			mov	byte ptr [EBP-0008h],AL

				;{1095}:__HELLO_PART: hello();
 000049D5			__HELLO_PART:

				;{1096}:hello();
 000049D5  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000049D8  E8 FFFFC17C			call	 UnitTesting_HelloWorld

				;{1098}:say= "Hello World from H++!!!";
 000049DD  8D 05 00000A78 R		lea	EAX,OFFSET $S001191
 000049E3  89 45 F0			mov	dword ptr [EBP-0010h],EAX

				;{1100}:hello.SayHello(say);
 000049E6  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 000049E9  50				push	EAX
 000049EA  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 000049ED  E8 FFFFC117			call	 UnitTesting_HelloWorld_SayHello

				;{1102}:if(false == bUnattended)
 000049F2  33 C0			xor	EAX,EAX
 000049F4  50				push	EAX
 000049F5  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 000049F9  5A				pop	EDX
 000049FA  3A D0			cmp	DL,AL
 000049FC  0F 94 C0			setz	AL
 000049FF  84 C0			test	AL,AL
 00004A01  74 0C			jz	OFFSET $L001634

				;{1103}:hello.ShowHello(say);
 00004A03  8B 45 F0			mov	EAX,dword ptr [EBP-0010h]
 00004A06  50				push	EAX
 00004A07  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00004A0A  E8 FFFFC126			call	 UnitTesting_HelloWorld_ShowHello
 00004A0F			$L001634:

				;{1106}:tester1;
 00004A0F  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A12  E8 FFFFE479			call	 UnitTesting_TestIntegers

				;{1108}:tester1.Width= 0x400h * 1024;
 00004A17  B8 00000400			mov	EAX,000000400h
 00004A1C  50				push	EAX
 00004A1D  B8 00000400			mov	EAX,000000400h
 00004A22  59				pop	ECX
 00004A23  33 D2			xor	EDX,EDX
 00004A25  0F AF C1			imul	EAX,ECX
 00004A28  50				push	EAX
 00004A29  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A2C  E8 FFFFE1DA			call	 UnitTesting_TestIntegers_put_Width

				;{1109}:tester1.Height= 0x20h;
 00004A31  B8 00000020			mov	EAX,000000020h
 00004A36  50				push	EAX
 00004A37  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A3A  E8 FFFFE137			call	 UnitTesting_TestIntegers_put_Height

				;{1111}:nWidth= tester1.Width, nHeight= tester1.Height;
 00004A3F  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A42  E8 FFFFE1B1			call	 UnitTesting_TestIntegers_get_Width
 00004A47  89 45 BC			mov	dword ptr [EBP-0044h],EAX
 00004A4A  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A4D  E8 FFFFE110			call	 UnitTesting_TestIntegers_get_Height
 00004A52  89 45 B8			mov	dword ptr [EBP-0048h],EAX

				;{1114}:nArea= tester1.Width * tester1.Height;
 00004A55  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A58  E8 FFFFE19B			call	 UnitTesting_TestIntegers_get_Width
 00004A5D  50				push	EAX
 00004A5E  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A61  E8 FFFFE0FC			call	 UnitTesting_TestIntegers_get_Height
 00004A66  59				pop	ECX
 00004A67  99				cdq	
 00004A68  0F AF C1			imul	EAX,ECX
 00004A6B  8D 5D B0			lea	EBX,dword ptr [EBP-0050h]
 00004A6E  89 03			mov	dword ptr [EBX],EAX
 00004A70  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{1116}:Console::WriteLn("nArea = ", nArea);
 00004A73  8D 05 00000FD6 R		lea	EAX,OFFSET $S001197
 00004A79  6A 00			push	000000000h
 00004A7B  50				push	EAX 
 00004A7C  E8 00000000 E		call	 Console_WriteString
 00004A81  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00004A84  8B 55 B4			mov	EDX,dword ptr [EBP-004Ch] 
 00004A87  52				push	EDX 
 00004A88  50				push	EAX 
 00004A89  E8 00000000 E		call	 Console_WriteInteger64 
 00004A8E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1118}:with(tester1)
				;{
 00004A93  B8 00000666			mov	EAX,000000666h
 00004A98  50				push	EAX
 00004A99  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004A9C  E8 FFFFE16A			call	 UnitTesting_TestIntegers_put_Width
 00004AA1  B8 00000777			mov	EAX,000000777h
 00004AA6  50				push	EAX
 00004AA7  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004AAA  E8 FFFFE0C7			call	 UnitTesting_TestIntegers_put_Height
				;}

				;{1130}:nArea= nWidth * nHeight;
 00004AAF  8B 45 BC			mov	EAX,dword ptr [EBP-0044h]
 00004AB2  50				push	EAX
 00004AB3  8B 45 B8			mov	EAX,dword ptr [EBP-0048h]
 00004AB6  59				pop	ECX
 00004AB7  99				cdq	
 00004AB8  0F AF C1			imul	EAX,ECX
 00004ABB  8D 5D B0			lea	EBX,dword ptr [EBP-0050h]
 00004ABE  89 03			mov	dword ptr [EBX],EAX
 00004AC0  89 53 04			mov	dword ptr [EBX+4],EDX 

				;{1132}:Console::WriteLn("nArea = ", nArea);
 00004AC3  8D 05 00000FD6 R		lea	EAX,OFFSET $S001197
 00004AC9  6A 00			push	000000000h
 00004ACB  50				push	EAX 
 00004ACC  E8 00000000 E		call	 Console_WriteString
 00004AD1  8B 45 B0			mov	EAX,dword ptr [EBP-0050h]
 00004AD4  8B 55 B4			mov	EDX,dword ptr [EBP-004Ch] 
 00004AD7  52				push	EDX 
 00004AD8  50				push	EAX 
 00004AD9  E8 00000000 E		call	 Console_WriteInteger64 
 00004ADE  E8 00000000 E		call	 Console_WriteCrLf 

				;{1134}:n= 10;
 00004AE3  B8 0000000A			mov	EAX,00000000Ah
 00004AE8  89 45 AC			mov	dword ptr [EBP-0054h],EAX

				;{1136}:UnitTesting::Integers_Inline::Test();
 00004AEB  E8 FFFFC088			call	 UnitTesting_Integers_Inline_Test

				;{1138}:for(index= 0; index < 50; index++ )
 00004AF0  33 C0			xor	EAX,EAX
 00004AF2  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004AF5  EB 06			jmp	OFFSET $L001636
 00004AF7			$L001637:
 00004AF7  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004AFA  FF 45 A8			inc	dword ptr [EBP-88]
 00004AFD			$L001636:
 00004AFD  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B00  50				push	EAX
 00004B01  B8 00000032			mov	EAX,000000032h
 00004B06  5A				pop	EDX
 00004B07  3B D0			cmp	EDX,EAX
 00004B09  0F 9C C0			setl	AL
 00004B0C  84 C0			test	AL,AL
 00004B0E  74 1E			jz	OFFSET $L001638
				;{

				;{1140}:Console::WriteLn("Current Index :", index);
 00004B10  8D 05 0000089A R		lea	EAX,OFFSET $S001202
 00004B16  6A 00			push	000000000h
 00004B18  50				push	EAX 
 00004B19  E8 00000000 E		call	 Console_WriteString
 00004B1E  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B21  50				push	EAX 
 00004B22  E8 00000000 E		call	 Console_WriteInteger 
 00004B27  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004B2C  EB C9			jmp	OFFSET $L001637 
 00004B2E			$L001638:

				;{1143}:for(; ; )
 00004B2E  EB 00			jmp	OFFSET $L001639
 00004B30			$L001640:
 00004B30			$L001639:
				;{

				;{1146}:if(--index == 0)
 00004B30  FF 4D A8			dec	dword ptr [EBP-88]
 00004B33  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004B36  50				push	EAX
 00004B37  33 C0			xor	EAX,EAX
 00004B39  5A				pop	EDX
 00004B3A  3B D0			cmp	EDX,EAX
 00004B3C  0F 94 C0			setz	AL
 00004B3F  84 C0			test	AL,AL
 00004B41  74 02			jz	OFFSET $L001642

				;break;
 00004B43  EB 02			jmp	OFFSET $L001641
 00004B45			$L001642:
				;}
 00004B45  EB E9			jmp	OFFSET $L001640 
 00004B47			$L001641:

				;{1151}:what= !(index == 0);
 00004B47  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004B4A  50				push	EAX
 00004B4B  33 C0			xor	EAX,EAX
 00004B4D  5A				pop	EDX
 00004B4E  3B D0			cmp	EDX,EAX
 00004B50  0F 94 C0			setz	AL
 00004B53  F7 D8			neg	EAX
 00004B55  F7 D0			not	EAX
 00004B57  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1153}:__CALC_FACTORIAL: nf= tester1.Factorial(n);
 00004B5A			__CALC_FACTORIAL:

				;{1155}:nf= tester1.Factorial(n);
 00004B5A  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004B5D  50				push	EAX
 00004B5E  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004B61  E8 FFFFDFB5			call	 UnitTesting_TestIntegers_Factorial
 00004B66  89 45 A0			mov	dword ptr [EBP-0060h],EAX

				;{1157}:Console::WriteLn("Factorial of ", n, " = ", nf);
 00004B69  8D 05 000009C4 R		lea	EAX,OFFSET $S001206
 00004B6F  6A 00			push	000000000h
 00004B71  50				push	EAX 
 00004B72  E8 00000000 E		call	 Console_WriteString
 00004B77  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004B7A  50				push	EAX 
 00004B7B  E8 00000000 E		call	 Console_WriteInteger 
 00004B80  8D 05 00000129 R		lea	EAX,OFFSET $S001207
 00004B86  6A 00			push	000000000h 
 00004B88  50				push	EAX 
 00004B89  E8 00000000 E		call	 Console_WriteString 
 00004B8E  8B 45 A0			mov	EAX,dword ptr [EBP-0060h]
 00004B91  50				push	EAX 
 00004B92  E8 00000000 E		call	 Console_WriteInteger 
 00004B97  E8 00000000 E		call	 Console_WriteCrLf 

				;{1159}:--n;
 00004B9C  FF 4D AC			dec	dword ptr [EBP-84]
 00004B9F  8B 45 AC			mov	EAX,dword ptr [EBP-84]

				;{1160}:if(n == 0)
 00004BA2  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00004BA5  50				push	EAX
 00004BA6  33 C0			xor	EAX,EAX
 00004BA8  5A				pop	EDX
 00004BA9  3B D0			cmp	EDX,EAX
 00004BAB  0F 94 C0			setz	AL
 00004BAE  84 C0			test	AL,AL
 00004BB0  74 02			jz	OFFSET $L001644

				;goto
 00004BB2  EB 02			jmp	OFFSET __END_FACTORIAL
 00004BB4			$L001644:

				;goto
 00004BB4  EB A4			jmp	OFFSET __CALC_FACTORIAL

				;{1165}:__END_FACTORIAL: myRef1= 0;
 00004BB6			__END_FACTORIAL:

				;{1168}:myRef1= 0;
 00004BB6  33 C0			xor	EAX,EAX
 00004BB8  89 45 9C			mov	dword ptr [EBP-0064h],EAX

				;{1169}:myVar1= 0;
 00004BBB  33 C0			xor	EAX,EAX
 00004BBD  89 45 98			mov	dword ptr [EBP-0068h],EAX

				;{1173}:tester1.multiple_assignments(myRef1, myVar1);
 00004BC0  8B 45 98			mov	EAX,dword ptr [EBP-0068h]
 00004BC3  50				push	EAX
 00004BC4  8D 45 9C			lea	EAX,dword ptr [EBP-0064h]
 00004BC7  50				push	EAX
 00004BC8  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004BCB  E8 FFFFE1C7			call	 UnitTesting_TestIntegers_multiple_assignments

				;{1175}:Console::WriteLn("The value of myRef1 must be 65536 ==", myRef1);
 00004BD0  8D 05 00000CC8 R		lea	EAX,OFFSET $S001211
 00004BD6  6A 00			push	000000000h
 00004BD8  50				push	EAX 
 00004BD9  E8 00000000 E		call	 Console_WriteString
 00004BDE  8B 45 9C			mov	EAX,dword ptr [EBP-0064h]
 00004BE1  50				push	EAX 
 00004BE2  E8 00000000 E		call	 Console_WriteInteger 
 00004BE7  E8 00000000 E		call	 Console_WriteCrLf 

				;{1176}:Console::WriteLn("The value of myVar1 is not 65536 but zero (0) == ", myVar1);
 00004BEC  8D 05 00000CED R		lea	EAX,OFFSET $S001212
 00004BF2  6A 00			push	000000000h
 00004BF4  50				push	EAX 
 00004BF5  E8 00000000 E		call	 Console_WriteString
 00004BFA  8B 45 98			mov	EAX,dword ptr [EBP-0068h]
 00004BFD  50				push	EAX 
 00004BFE  E8 00000000 E		call	 Console_WriteInteger 
 00004C03  E8 00000000 E		call	 Console_WriteCrLf 

				;{1178}:Console::WriteLn("(int)the area is: ", tester1.getArea());
 00004C08  8D 05 00000494 R		lea	EAX,OFFSET $S001213
 00004C0E  6A 00			push	000000000h
 00004C10  50				push	EAX 
 00004C11  E8 00000000 E		call	 Console_WriteString
 00004C16  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C19  E8 FFFFE0DD			call	 UnitTesting_TestIntegers_getArea
 00004C1E  50				push	EAX 
 00004C1F  E8 00000000 E		call	 Console_WriteInteger 
 00004C24  E8 00000000 E		call	 Console_WriteCrLf 

				;{1179}:Console::WriteLn("(double)the area is: ", tester1.getArea2());
 00004C29  8D 05 0000047E R		lea	EAX,OFFSET $S001214
 00004C2F  6A 00			push	000000000h
 00004C31  50				push	EAX 
 00004C32  E8 00000000 E		call	 Console_WriteString
 00004C37  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C3A  E8 FFFFE0E0			call	 UnitTesting_TestIntegers_getArea2
 00004C3F  50				push	EAX 
 00004C40  52				push	EDX 
 00004C41  E8 00000000 E		call	 Console_WriteDouble 
 00004C46  E8 00000000 E		call	 Console_WriteCrLf 

				;{1181}:result= 0;
 00004C4B  33 C0			xor	EAX,EAX
 00004C4D  89 45 94			mov	dword ptr [EBP-006Ch],EAX

				;{1182}:tester1.add(1024, 3072, result);
 00004C50  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C53  50				push	EAX
 00004C54  B8 00000C00			mov	EAX,000000C00h
 00004C59  50				push	EAX 
 00004C5A  B8 00000400			mov	EAX,000000400h
 00004C5F  50				push	EAX
 00004C60  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C63  E8 FFFFDFB9			call	 UnitTesting_TestIntegers_add

				;{1184}:tester1.subs(1024, 3072, result);
 00004C68  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C6B  50				push	EAX
 00004C6C  B8 00000C00			mov	EAX,000000C00h
 00004C71  50				push	EAX 
 00004C72  B8 00000400			mov	EAX,000000400h
 00004C77  50				push	EAX
 00004C78  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C7B  E8 FFFFE1D1			call	 UnitTesting_TestIntegers_subs

				;{1186}:tester1.subs(3072, 1024, result);
 00004C80  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C83  50				push	EAX
 00004C84  B8 00000400			mov	EAX,000000400h
 00004C89  50				push	EAX 
 00004C8A  B8 00000C00			mov	EAX,000000C00h
 00004C8F  50				push	EAX
 00004C90  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004C93  E8 FFFFE1B9			call	 UnitTesting_TestIntegers_subs

				;{1188}:tester1.modulus(4096, 6, result);
 00004C98  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004C9B  50				push	EAX
 00004C9C  B8 00000006			mov	EAX,000000006h
 00004CA1  50				push	EAX 
 00004CA2  B8 00001000			mov	EAX,000001000h
 00004CA7  50				push	EAX
 00004CA8  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CAB  E8 FFFFE0A4			call	 UnitTesting_TestIntegers_modulus

				;{1190}:tester1.multiply(3, 927, result);
 00004CB0  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CB3  50				push	EAX
 00004CB4  B8 0000039F			mov	EAX,00000039Fh
 00004CB9  50				push	EAX 
 00004CBA  B8 00000003			mov	EAX,000000003h
 00004CBF  50				push	EAX
 00004CC0  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CC3  E8 FFFFE14A			call	 UnitTesting_TestIntegers_multiply

				;{1192}:tester1.divide(4096, 6, result);
 00004CC8  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CCB  50				push	EAX
 00004CCC  B8 00000006			mov	EAX,000000006h
 00004CD1  50				push	EAX 
 00004CD2  B8 00001000			mov	EAX,000001000h
 00004CD7  50				push	EAX
 00004CD8  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CDB  E8 FFFFDF7E			call	 UnitTesting_TestIntegers_divide

				;{1194}:tester1.divide2(4096, 6, result);
 00004CE0  8D 45 94			lea	EAX,dword ptr [EBP-006Ch]
 00004CE3  50				push	EAX
 00004CE4  B8 00000006			mov	EAX,000000006h
 00004CE9  50				push	EAX 
 00004CEA  B8 00001000			mov	EAX,000001000h
 00004CEF  50				push	EAX
 00004CF0  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004CF3  E8 FFFFDFA7			call	 UnitTesting_TestIntegers_divide2

				;{1198}:UnitTesting::TestIntegers::TestExpressions();
 00004CF8  E8 FFFFE1A7			call	 UnitTesting_TestIntegers_TestExpressions

				;{1200}:val1= 1, val2= 2;
 00004CFD  B8 00000001			mov	EAX,000000001h
 00004D02  89 45 90			mov	dword ptr [EBP-0070h],EAX
 00004D05  B8 00000002			mov	EAX,000000002h
 00004D0A  89 45 8C			mov	dword ptr [EBP-0074h],EAX

				;{1202}:what= false;
 00004D0D  33 C0			xor	EAX,EAX
 00004D0F  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1204}:tester1.Swap(val1, val2);
 00004D12  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004D15  50				push	EAX
 00004D16  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004D19  50				push	EAX
 00004D1A  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004D1D  E8 FFFFDE6B			call	 UnitTesting_TestIntegers_Swap

				;{1206}:what= val1 == 2 && val2 == 1;
 00004D22  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004D25  50				push	EAX
 00004D26  B8 00000002			mov	EAX,000000002h
 00004D2B  5A				pop	EDX
 00004D2C  3B D0			cmp	EDX,EAX
 00004D2E  0F 94 C0			setz	AL
 00004D31  84 C0			test	AL,AL
 00004D33  74 0F			jz	OFFSET $L001646
 00004D35  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004D38  50				push	EAX
 00004D39  B8 00000001			mov	EAX,000000001h
 00004D3E  5A				pop	EDX
 00004D3F  3B D0			cmp	EDX,EAX
 00004D41  0F 94 C0			setz	AL
 00004D44			$L001646:
 00004D44  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1208}:Console::WriteLn("what == True ?", what);
 00004D47  8D 05 0000114F R		lea	EAX,OFFSET $S001220
 00004D4D  6A 00			push	000000000h
 00004D4F  50				push	EAX 
 00004D50  E8 00000000 E		call	 Console_WriteString
 00004D55  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004D59  50				push	EAX 
 00004D5A  E8 00000000 E		call	 Console_WriteBoolean 
 00004D5F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1210}:tester1.Calc2(val1, val2);
 00004D64  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004D67  50				push	EAX
 00004D68  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004D6B  50				push	EAX
 00004D6C  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004D6F  E8 FFFFDD3B			call	 UnitTesting_TestIntegers_Calc2

				;{1213}:what= val1 == 27000 && val2 == 20000;
 00004D74  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004D77  50				push	EAX
 00004D78  B8 00006978			mov	EAX,000006978h
 00004D7D  5A				pop	EDX
 00004D7E  3B D0			cmp	EDX,EAX
 00004D80  0F 94 C0			setz	AL
 00004D83  84 C0			test	AL,AL
 00004D85  74 0F			jz	OFFSET $L001647
 00004D87  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004D8A  50				push	EAX
 00004D8B  B8 00004E20			mov	EAX,000004E20h
 00004D90  5A				pop	EDX
 00004D91  3B D0			cmp	EDX,EAX
 00004D93  0F 94 C0			setz	AL
 00004D96			$L001647:
 00004D96  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1215}:Console::WriteLn("what == True ?", what);
 00004D99  8D 05 0000114F R		lea	EAX,OFFSET $S001220
 00004D9F  6A 00			push	000000000h
 00004DA1  50				push	EAX 
 00004DA2  E8 00000000 E		call	 Console_WriteString
 00004DA7  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004DAB  50				push	EAX 
 00004DAC  E8 00000000 E		call	 Console_WriteBoolean 
 00004DB1  E8 00000000 E		call	 Console_WriteCrLf 

				;{1217}:tester1.Swap(val1, val2);
 00004DB6  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004DB9  50				push	EAX
 00004DBA  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004DBD  50				push	EAX
 00004DBE  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004DC1  E8 FFFFDDC7			call	 UnitTesting_TestIntegers_Swap

				;{1219}:what= val1 == 20000 && val2 == 27000;
 00004DC6  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004DC9  50				push	EAX
 00004DCA  B8 00004E20			mov	EAX,000004E20h
 00004DCF  5A				pop	EDX
 00004DD0  3B D0			cmp	EDX,EAX
 00004DD2  0F 94 C0			setz	AL
 00004DD5  84 C0			test	AL,AL
 00004DD7  74 0F			jz	OFFSET $L001648
 00004DD9  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004DDC  50				push	EAX
 00004DDD  B8 00006978			mov	EAX,000006978h
 00004DE2  5A				pop	EDX
 00004DE3  3B D0			cmp	EDX,EAX
 00004DE5  0F 94 C0			setz	AL
 00004DE8			$L001648:
 00004DE8  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1221}:Console::WriteLn("what == True ?", what);
 00004DEB  8D 05 0000114F R		lea	EAX,OFFSET $S001220
 00004DF1  6A 00			push	000000000h
 00004DF3  50				push	EAX 
 00004DF4  E8 00000000 E		call	 Console_WriteString
 00004DF9  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004DFD  50				push	EAX 
 00004DFE  E8 00000000 E		call	 Console_WriteBoolean 
 00004E03  E8 00000000 E		call	 Console_WriteCrLf 

				;{1223}:tester1.SwapDebug(val1, val2);
 00004E08  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004E0B  50				push	EAX
 00004E0C  8D 45 90			lea	EAX,dword ptr [EBP-0070h]
 00004E0F  50				push	EAX
 00004E10  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004E13  E8 FFFFDDB8			call	 UnitTesting_TestIntegers_SwapDebug

				;{1225}:what= val1 == 27000 && val2 == 20000;
 00004E18  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E1B  50				push	EAX
 00004E1C  B8 00006978			mov	EAX,000006978h
 00004E21  5A				pop	EDX
 00004E22  3B D0			cmp	EDX,EAX
 00004E24  0F 94 C0			setz	AL
 00004E27  84 C0			test	AL,AL
 00004E29  74 0F			jz	OFFSET $L001649
 00004E2B  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004E2E  50				push	EAX
 00004E2F  B8 00004E20			mov	EAX,000004E20h
 00004E34  5A				pop	EDX
 00004E35  3B D0			cmp	EDX,EAX
 00004E37  0F 94 C0			setz	AL
 00004E3A			$L001649:
 00004E3A  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1227}:Console::WriteLn("what == True ?", what);
 00004E3D  8D 05 0000114F R		lea	EAX,OFFSET $S001220
 00004E43  6A 00			push	000000000h
 00004E45  50				push	EAX 
 00004E46  E8 00000000 E		call	 Console_WriteString
 00004E4B  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004E4F  50				push	EAX 
 00004E50  E8 00000000 E		call	 Console_WriteBoolean 
 00004E55  E8 00000000 E		call	 Console_WriteCrLf 

				;{1229}:tester1.Calc1(val1, val2);
 00004E5A  8D 45 8C			lea	EAX,dword ptr [EBP-0074h]
 00004E5D  50				push	EAX
 00004E5E  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E61  50				push	EAX
 00004E62  8D 4D C0			lea	ECX,dword ptr [EBP-0040h]
 00004E65  E8 FFFFDBA2			call	 UnitTesting_TestIntegers_Calc1

				;{1231}:what= val2 != 27000;
 00004E6A  8B 45 8C			mov	EAX,dword ptr [EBP-0074h]
 00004E6D  50				push	EAX
 00004E6E  B8 00006978			mov	EAX,000006978h
 00004E73  5A				pop	EDX
 00004E74  3B D0			cmp	EDX,EAX
 00004E76  0F 95 C0			setnz	AL
 00004E79  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1233}:val1= val1 << 24;
 00004E7C  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E7F  C1 E0 18			shl	EAX,000000018h
 00004E82  89 45 90			mov	dword ptr [EBP-0070h],EAX

				;{1235}:what= val1 == 0x78000000;
 00004E85  8B 45 90			mov	EAX,dword ptr [EBP-0070h]
 00004E88  50				push	EAX
 00004E89  B8 78000000			mov	EAX,078000000h
 00004E8E  5A				pop	EDX
 00004E8F  3B D0			cmp	EDX,EAX
 00004E91  0F 94 C0			setz	AL
 00004E94  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1237}:Console::WriteLn("(what = val1 == 0x78000000) = ", what);
 00004E97  8D 05 00000589 R		lea	EAX,OFFSET $S001224
 00004E9D  6A 00			push	000000000h
 00004E9F  50				push	EAX 
 00004EA0  E8 00000000 E		call	 Console_WriteString
 00004EA5  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00004EA9  50				push	EAX 
 00004EAA  E8 00000000 E		call	 Console_WriteBoolean 
 00004EAF  E8 00000000 E		call	 Console_WriteCrLf 

				;{1239}:if(false == bUnattended)
 00004EB4  33 C0			xor	EAX,EAX
 00004EB6  50				push	EAX
 00004EB7  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 00004EBB  5A				pop	EDX
 00004EBC  3A D0			cmp	DL,AL
 00004EBE  0F 94 C0			setz	AL
 00004EC1  84 C0			test	AL,AL
 00004EC3  74 0F			jz	OFFSET $L001650

				;{1240}:hello.ShowHello("H++ Unit Testing : Second Phase");
 00004EC5  8D 05 00000A0F R		lea	EAX,OFFSET $S001225
 00004ECB  50				push	EAX
 00004ECC  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00004ECF  E8 FFFFBC61			call	 UnitTesting_HelloWorld_ShowHello
 00004ED4			$L001650:

				;{1242}:fpTester();
 00004ED4  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00004ED7  E8 FFFFDAE8			call	 UnitTesting_TestFloatingPoint

				;{1244}:for(index= 0; index <= 32; index++ )
 00004EDC  33 C0			xor	EAX,EAX
 00004EDE  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004EE1  EB 06			jmp	OFFSET $L001652
 00004EE3			$L001653:
 00004EE3  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00004EE6  FF 45 A8			inc	dword ptr [EBP-88]
 00004EE9			$L001652:
 00004EE9  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004EEC  50				push	EAX
 00004EED  B8 00000020			mov	EAX,000000020h
 00004EF2  5A				pop	EDX
 00004EF3  3B D0			cmp	EDX,EAX
 00004EF5  0F 9E C0			setle	AL
 00004EF8  84 C0			test	AL,AL
 00004EFA  74 58			jz	OFFSET $L001654
				;{

				;{1246}:_pow= fpTester.Power(2.0, index);
 00004EFC  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004EFF  50				push	EAX 
 00004F00  33 D2			xor	EDX,EDX
 00004F02  B8 40000000			mov	EAX,040000000h
 00004F07  50				push	EAX
 00004F08  52				push	EDX 
 00004F09  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00004F0C  E8 FFFFD9DA			call	 UnitTesting_TestFloatingPoint_Power
 00004F11  50				push	EAX
 00004F12  52				push	EDX 
 00004F13  DD 04 24			fld	qword ptr [ESP]
 00004F16  DD 5D 80			fstp	qword ptr [EBP-0080h]

				;{1248}:Console::WriteLn("pow(2, ", index, ") = ", _pow);
 00004F19  5A				pop	EDX
 00004F1A  58				pop	EAX 
 00004F1B  8D 05 00001042 R		lea	EAX,OFFSET $S001229
 00004F21  6A 00			push	000000000h
 00004F23  50				push	EAX 
 00004F24  E8 00000000 E		call	 Console_WriteString
 00004F29  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004F2C  50				push	EAX 
 00004F2D  E8 00000000 E		call	 Console_WriteInteger 
 00004F32  8D 05 00000659 R		lea	EAX,OFFSET $S001230
 00004F38  6A 00			push	000000000h 
 00004F3A  50				push	EAX 
 00004F3B  E8 00000000 E		call	 Console_WriteString 
 00004F40  8B 55 80			mov	EDX,dword ptr [EBP-0080h]
 00004F43  8B 45 84			mov	EAX,dword ptr [EBP-007Ch] 
 00004F46  50				push	EAX 
 00004F47  52				push	EDX 
 00004F48  E8 00000000 E		call	 Console_WriteDouble 
 00004F4D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00004F52  EB 8F			jmp	OFFSET $L001653 
 00004F54			$L001654:

				;{1251}:array1;
 00004F54  8D 85 FFFFFF30		lea	EAX,dword ptr [EBP-00D0h]

				;{1254}:for(index= 0; index < sizeof (array1) / sizeof (int); )
 00004F5A  33 C0			xor	EAX,EAX
 00004F5C  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00004F5F  EB 00			jmp	OFFSET $L001655
 00004F61			$L001656:
 00004F61			$L001655:
 00004F61  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004F64  50				push	EAX
 00004F65  B8 00000050			mov	EAX,000000050h
 00004F6A  50				push	EAX
 00004F6B  B8 00000004			mov	EAX,000000004h
 00004F70  9B DB E2			fclex
 00004F73  50				push	EAX
 00004F74  E8 00000000 E		call	 FloatingPoint_FromInt
 00004F79  50				push	EAX
 00004F7A  52				push	EDX 
 00004F7B  DD 04 24			fld	qword ptr [ESP]
 00004F7E  59				pop	ECX
 00004F7F  59				pop	ECX 
 00004F80  E8 00000000 E		call	 FloatingPoint_FromInt
 00004F85  50				push	EAX
 00004F86  52				push	EDX 
 00004F87  DC 3C 24			fdivr	qword ptr [ESP]
 00004F8A  DD 1C 24			fstp	qword ptr [ESP]
 00004F8D  E8 00000000 E		call	 FloatingPoint_CompareToInteger
 00004F92  83 F8 00			cmp	EAX,000000000h
 00004F95  F7 D8			neg	EAX
 00004F97  0F 9C C0			setl	AL
 00004F9A  84 C0			test	AL,AL
 00004F9C  0F 84 0000008C		jz	OFFSET $L001657
				;{

				;{1256}:array1[index]= FloatingPoint::ToInt((index + 1) * 9.45);
 00004FA2  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FA5  6B C0 04			imul	EAX,EAX,000000004h
 00004FA8  8D 84 28			lea	EAX,dword ptr [EBP+EAX-00D0h]
	   FFFFFF30
 00004FAF  50				push	EAX
 00004FB0  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FB3  50				push	EAX
 00004FB4  B8 00000001			mov	EAX,000000001h
 00004FB9  5A				pop	EDX
 00004FBA  03 C2			add	EAX,EDX
 00004FBC  50				push	EAX
 00004FBD  BA 66666667			mov	EDX,066666667h
 00004FC2  B8 4022E666			mov	EAX,04022E666h 
 00004FC7  9B DB E2			fclex
 00004FCA  50				push	EAX
 00004FCB  52				push	EDX 
 00004FCC  DD 04 24			fld	qword ptr [ESP]
 00004FCF  59				pop	ECX
 00004FD0  59				pop	ECX 
 00004FD1  E8 00000000 E		call	 FloatingPoint_FromInt
 00004FD6  50				push	EAX
 00004FD7  52				push	EDX 
 00004FD8  DC 0C 24			fmul	qword ptr [ESP]
 00004FDB  DD 1C 24			fstp	qword ptr [ESP]
 00004FDE  E8 00000000 E		call	 FloatingPoint_ToInt
 00004FE3  5B				pop	EBX
 00004FE4  89 03			mov	dword ptr [EBX],EAX

				;{1257}:Console::WriteLn("Result for array1[", index, "] = ", array1[index]);
 00004FE6  8D 05 00000BCF R		lea	EAX,OFFSET $S001233
 00004FEC  6A 00			push	000000000h
 00004FEE  50				push	EAX 
 00004FEF  E8 00000000 E		call	 Console_WriteString
 00004FF4  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00004FF7  50				push	EAX 
 00004FF8  E8 00000000 E		call	 Console_WriteInteger 
 00004FFD  8D 05 00000DC1 R		lea	EAX,OFFSET $S001148
 00005003  6A 00			push	000000000h 
 00005005  50				push	EAX 
 00005006  E8 00000000 E		call	 Console_WriteString 
 0000500B  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 0000500E  6B C0 04			imul	EAX,EAX,000000004h
 00005011  8B 84 28			mov	EAX,dword ptr [EBP+EAX-00D0h]
	   FFFFFF30
 00005018  50				push	EAX 
 00005019  E8 00000000 E		call	 Console_WriteInteger 
 0000501E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1258}:index++ ;
 00005023  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00005026  FF 45 A8			inc	dword ptr [EBP-88]
				;}
 00005029  E9 FFFFFF33			jmp	OFFSET $L001656 
 0000502E			$L001657:

				;{1261}:UnitTesting::TestArrays::DoTest();
 0000502E  E8 FFFFCCDB			call	 UnitTesting_TestArrays_DoTest

				;{1265}:rnd(Math::Round(0x400 * Math::log_10_base2() + 1.0));
 00005033  B8 00000400			mov	EAX,000000400h
 00005038  50				push	EAX
 00005039  E8 00000000 E		call	 Math_log_10_base2
 0000503E  9B DB E2			fclex
 00005041  50				push	EAX
 00005042  52				push	EDX 
 00005043  DD 04 24			fld	qword ptr [ESP]
 00005046  59				pop	ECX
 00005047  59				pop	ECX 
 00005048  E8 00000000 E		call	 FloatingPoint_FromInt
 0000504D  50				push	EAX
 0000504E  52				push	EDX 
 0000504F  DC 0C 24			fmul	qword ptr [ESP]
 00005052  DD 1C 24			fstp	qword ptr [ESP]
 00005055  D9 E8			fld1
 00005057  DC 04 24			fadd	qword ptr [ESP]
 0000505A  DD 1C 24			fstp	qword ptr [ESP]
 0000505D  E8 00000000 E		call	 Math_Round
 00005062  50				push	EAX
 00005063  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005069  E8 FFFFBF95			call	 UnitTesting_Rnd

				;{1269}:Console::WriteLn("Pseudo-Random Integer values:");
 0000506E  8D 05 00000B9A R		lea	EAX,OFFSET $S001235
 00005074  6A 00			push	000000000h
 00005076  50				push	EAX 
 00005077  E8 00000000 E		call	 Console_WriteString
 0000507C  E8 00000000 E		call	 Console_WriteCrLf 

				;{1270}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextInt());
 00005081  8D 05 000001BE R		lea	EAX,OFFSET $S001236
 00005087  6A 00			push	000000000h
 00005089  50				push	EAX 
 0000508A  E8 00000000 E		call	 Console_WriteString
 0000508F  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005095  E8 FFFFBF56			call	 UnitTesting_Rnd_NextInt
 0000509A  50				push	EAX 
 0000509B  52				push	EDX 
 0000509C  E8 00000000 E		call	 Console_WriteDouble 
 000050A1  E8 00000000 E		call	 Console_WriteCrLf 

				;{1271}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextInt());
 000050A6  8D 05 0000024E R		lea	EAX,OFFSET $S001237
 000050AC  6A 00			push	000000000h
 000050AE  50				push	EAX 
 000050AF  E8 00000000 E		call	 Console_WriteString
 000050B4  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000050BA  E8 FFFFBF31			call	 UnitTesting_Rnd_NextInt
 000050BF  50				push	EAX 
 000050C0  52				push	EDX 
 000050C1  E8 00000000 E		call	 Console_WriteDouble 
 000050C6  E8 00000000 E		call	 Console_WriteCrLf 

				;{1272}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextInt());
 000050CB  8D 05 000002DE R		lea	EAX,OFFSET $S001238
 000050D1  6A 00			push	000000000h
 000050D3  50				push	EAX 
 000050D4  E8 00000000 E		call	 Console_WriteString
 000050D9  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000050DF  E8 FFFFBF0C			call	 UnitTesting_Rnd_NextInt
 000050E4  50				push	EAX 
 000050E5  52				push	EDX 
 000050E6  E8 00000000 E		call	 Console_WriteDouble 
 000050EB  E8 00000000 E		call	 Console_WriteCrLf 

				;{1273}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextInt());
 000050F0  8D 05 0000036A R		lea	EAX,OFFSET $S001239
 000050F6  6A 00			push	000000000h
 000050F8  50				push	EAX 
 000050F9  E8 00000000 E		call	 Console_WriteString
 000050FE  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005104  E8 FFFFBEE7			call	 UnitTesting_Rnd_NextInt
 00005109  50				push	EAX 
 0000510A  52				push	EDX 
 0000510B  E8 00000000 E		call	 Console_WriteDouble 
 00005110  E8 00000000 E		call	 Console_WriteCrLf 

				;{1274}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextInt());
 00005115  8D 05 000003F6 R		lea	EAX,OFFSET $S001240
 0000511B  6A 00			push	000000000h
 0000511D  50				push	EAX 
 0000511E  E8 00000000 E		call	 Console_WriteString
 00005123  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005129  E8 FFFFBEC2			call	 UnitTesting_Rnd_NextInt
 0000512E  50				push	EAX 
 0000512F  52				push	EDX 
 00005130  E8 00000000 E		call	 Console_WriteDouble 
 00005135  E8 00000000 E		call	 Console_WriteCrLf 

				;{1275}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextInt());
 0000513A  8D 05 00000411 R		lea	EAX,OFFSET $S001241
 00005140  6A 00			push	000000000h
 00005142  50				push	EAX 
 00005143  E8 00000000 E		call	 Console_WriteString
 00005148  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000514E  E8 FFFFBE9D			call	 UnitTesting_Rnd_NextInt
 00005153  50				push	EAX 
 00005154  52				push	EDX 
 00005155  E8 00000000 E		call	 Console_WriteDouble 
 0000515A  E8 00000000 E		call	 Console_WriteCrLf 

				;{1277}:_BlockRndDoubles: Console::WriteLn("Pseudo-Random Double values:");
 0000515F			_BlockRndDoubles:

				;{1279}:Console::WriteLn("Pseudo-Random Double values:");
 0000515F  8D 05 00000B7D R		lea	EAX,OFFSET $S001243
 00005165  6A 00			push	000000000h
 00005167  50				push	EAX 
 00005168  E8 00000000 E		call	 Console_WriteString
 0000516D  E8 00000000 E		call	 Console_WriteCrLf 

				;{1280}:Console::WriteLn("(1)A pseudo-random value: ", rnd.NextDbl());
 00005172  8D 05 000001BE R		lea	EAX,OFFSET $S001236
 00005178  6A 00			push	000000000h
 0000517A  50				push	EAX 
 0000517B  E8 00000000 E		call	 Console_WriteString
 00005180  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 00005186  E8 FFFFBE52			call	 UnitTesting_Rnd_NextDbl
 0000518B  50				push	EAX 
 0000518C  52				push	EDX 
 0000518D  E8 00000000 E		call	 Console_WriteDouble 
 00005192  E8 00000000 E		call	 Console_WriteCrLf 

				;{1281}:Console::WriteLn("(2)A pseudo-random value: ", rnd.NextDbl());
 00005197  8D 05 0000024E R		lea	EAX,OFFSET $S001237
 0000519D  6A 00			push	000000000h
 0000519F  50				push	EAX 
 000051A0  E8 00000000 E		call	 Console_WriteString
 000051A5  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051AB  E8 FFFFBE2D			call	 UnitTesting_Rnd_NextDbl
 000051B0  50				push	EAX 
 000051B1  52				push	EDX 
 000051B2  E8 00000000 E		call	 Console_WriteDouble 
 000051B7  E8 00000000 E		call	 Console_WriteCrLf 

				;{1282}:Console::WriteLn("(3)A pseudo-random value: ", rnd.NextDbl());
 000051BC  8D 05 000002DE R		lea	EAX,OFFSET $S001238
 000051C2  6A 00			push	000000000h
 000051C4  50				push	EAX 
 000051C5  E8 00000000 E		call	 Console_WriteString
 000051CA  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051D0  E8 FFFFBE08			call	 UnitTesting_Rnd_NextDbl
 000051D5  50				push	EAX 
 000051D6  52				push	EDX 
 000051D7  E8 00000000 E		call	 Console_WriteDouble 
 000051DC  E8 00000000 E		call	 Console_WriteCrLf 

				;{1283}:Console::WriteLn("(4)A pseudo-random value: ", rnd.NextDbl());
 000051E1  8D 05 0000036A R		lea	EAX,OFFSET $S001239
 000051E7  6A 00			push	000000000h
 000051E9  50				push	EAX 
 000051EA  E8 00000000 E		call	 Console_WriteString
 000051EF  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 000051F5  E8 FFFFBDE3			call	 UnitTesting_Rnd_NextDbl
 000051FA  50				push	EAX 
 000051FB  52				push	EDX 
 000051FC  E8 00000000 E		call	 Console_WriteDouble 
 00005201  E8 00000000 E		call	 Console_WriteCrLf 

				;{1284}:Console::WriteLn("(5)A pseudo-random value: ", rnd.NextDbl());
 00005206  8D 05 000003F6 R		lea	EAX,OFFSET $S001240
 0000520C  6A 00			push	000000000h
 0000520E  50				push	EAX 
 0000520F  E8 00000000 E		call	 Console_WriteString
 00005214  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000521A  E8 FFFFBDBE			call	 UnitTesting_Rnd_NextDbl
 0000521F  50				push	EAX 
 00005220  52				push	EDX 
 00005221  E8 00000000 E		call	 Console_WriteDouble 
 00005226  E8 00000000 E		call	 Console_WriteCrLf 

				;{1285}:Console::WriteLn("(6)A pseudo-random value: ", rnd.NextDbl());
 0000522B  8D 05 00000411 R		lea	EAX,OFFSET $S001241
 00005231  6A 00			push	000000000h
 00005233  50				push	EAX 
 00005234  E8 00000000 E		call	 Console_WriteString
 00005239  8D 8D FFFFFF2C		lea	ECX,dword ptr [EBP-00D4h]
 0000523F  E8 FFFFBD99			call	 UnitTesting_Rnd_NextDbl
 00005244  50				push	EAX 
 00005245  52				push	EDX 
 00005246  E8 00000000 E		call	 Console_WriteDouble 
 0000524B  E8 00000000 E		call	 Console_WriteCrLf 

				;{1290}:res= 0.0;
 00005250  D9 EE			fldz
 00005252  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1292}:srv;
 00005258  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 0000525E  E8 FFFFF01E			call	 UnitTesting_TestVirtuals_SimpleRV

				;{1294}:res= srv.Sample();
 00005263  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 00005269  8B 11			mov	EDX,dword ptr [ECX]
 0000526B  FF 12			call	dword ptr [EDX]
 0000526D  50				push	EAX
 0000526E  52				push	EDX 
 0000526F  DD 04 24			fld	qword ptr [ESP]
 00005272  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1295}:Console::WriteLn("(1)A simple random variable has : ", res, " as its value.");
 00005278  5A				pop	EDX
 00005279  58				pop	EAX 
 0000527A  8D 05 000001D9 R		lea	EAX,OFFSET $S001246
 00005280  6A 00			push	000000000h
 00005282  50				push	EAX 
 00005283  E8 00000000 E		call	 Console_WriteString
 00005288  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000528E  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005294  50				push	EAX 
 00005295  52				push	EDX 
 00005296  E8 00000000 E		call	 Console_WriteDouble 
 0000529B  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 000052A1  6A 00			push	000000000h 
 000052A3  50				push	EAX 
 000052A4  E8 00000000 E		call	 Console_WriteString 
 000052A9  E8 00000000 E		call	 Console_WriteCrLf 

				;{1296}:res= srv.Sample();
 000052AE  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 000052B4  8B 11			mov	EDX,dword ptr [ECX]
 000052B6  FF 12			call	dword ptr [EDX]
 000052B8  50				push	EAX
 000052B9  52				push	EDX 
 000052BA  DD 04 24			fld	qword ptr [ESP]
 000052BD  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1297}:Console::WriteLn("(2)A simple random variable has : ", res, " as its value.");
 000052C3  5A				pop	EDX
 000052C4  58				pop	EAX 
 000052C5  8D 05 00000269 R		lea	EAX,OFFSET $S001248
 000052CB  6A 00			push	000000000h
 000052CD  50				push	EAX 
 000052CE  E8 00000000 E		call	 Console_WriteString
 000052D3  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000052D9  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000052DF  50				push	EAX 
 000052E0  52				push	EDX 
 000052E1  E8 00000000 E		call	 Console_WriteDouble 
 000052E6  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 000052EC  6A 00			push	000000000h 
 000052EE  50				push	EAX 
 000052EF  E8 00000000 E		call	 Console_WriteString 
 000052F4  E8 00000000 E		call	 Console_WriteCrLf 

				;{1298}:res= srv.Sample();
 000052F9  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 000052FF  8B 11			mov	EDX,dword ptr [ECX]
 00005301  FF 12			call	dword ptr [EDX]
 00005303  50				push	EAX
 00005304  52				push	EDX 
 00005305  DD 04 24			fld	qword ptr [ESP]
 00005308  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1299}:Console::WriteLn("(3)A simple random variable has : ", res, " as its value.");
 0000530E  5A				pop	EDX
 0000530F  58				pop	EAX 
 00005310  8D 05 000002F9 R		lea	EAX,OFFSET $S001249
 00005316  6A 00			push	000000000h
 00005318  50				push	EAX 
 00005319  E8 00000000 E		call	 Console_WriteString
 0000531E  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005324  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 0000532A  50				push	EAX 
 0000532B  52				push	EDX 
 0000532C  E8 00000000 E		call	 Console_WriteDouble 
 00005331  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005337  6A 00			push	000000000h 
 00005339  50				push	EAX 
 0000533A  E8 00000000 E		call	 Console_WriteString 
 0000533F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1300}:res= srv.Sample();
 00005344  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 0000534A  8B 11			mov	EDX,dword ptr [ECX]
 0000534C  FF 12			call	dword ptr [EDX]
 0000534E  50				push	EAX
 0000534F  52				push	EDX 
 00005350  DD 04 24			fld	qword ptr [ESP]
 00005353  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1301}:Console::WriteLn("(4)A simple random variable has : ", res, " as its value.");
 00005359  5A				pop	EDX
 0000535A  58				pop	EAX 
 0000535B  8D 05 00000385 R		lea	EAX,OFFSET $S001250
 00005361  6A 00			push	000000000h
 00005363  50				push	EAX 
 00005364  E8 00000000 E		call	 Console_WriteString
 00005369  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000536F  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005375  50				push	EAX 
 00005376  52				push	EDX 
 00005377  E8 00000000 E		call	 Console_WriteDouble 
 0000537C  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005382  6A 00			push	000000000h 
 00005384  50				push	EAX 
 00005385  E8 00000000 E		call	 Console_WriteString 
 0000538A  E8 00000000 E		call	 Console_WriteCrLf 

				;{1302}:Console::WriteLn("my name is", srv.Name());
 0000538F  8D 05 00000FCB R		lea	EAX,OFFSET $S001251
 00005395  6A 00			push	000000000h
 00005397  50				push	EAX 
 00005398  E8 00000000 E		call	 Console_WriteString
 0000539D  8D 8D FFFFFF20		lea	ECX,dword ptr [EBP-00E0h]
 000053A3  8B 11			mov	EDX,dword ptr [ECX]
 000053A5  FF 52 04			call	dword ptr [EDX+0004h]
 000053A8  6A 00			push	000000000h 
 000053AA  50				push	EAX 
 000053AB  E8 00000000 E		call	 Console_WriteString 
 000053B0  E8 00000000 E		call	 Console_WriteCrLf 

				;{1304}:res= 1.0;
 000053B5  D9 E8			fld1
 000053B7  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1306}:urv(Math::log_e_base2(), Math::log_2_base_e());
 000053BD  E8 00000000 E		call	 Math_log_2_base_e
 000053C2  50				push	EAX 
 000053C3  52				push	EDX 
 000053C4  E8 00000000 E		call	 Math_log_e_base2
 000053C9  50				push	EAX
 000053CA  52				push	EDX 
 000053CB  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000053D1  E8 FFFFEF72			call	 UnitTesting_TestVirtuals_UniformRV

				;{1308}:res= urv.Sample();
 000053D6  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000053DC  8B 11			mov	EDX,dword ptr [ECX]
 000053DE  FF 12			call	dword ptr [EDX]
 000053E0  50				push	EAX
 000053E1  52				push	EDX 
 000053E2  DD 04 24			fld	qword ptr [ESP]
 000053E5  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1309}:Console::WriteLn("(1)An uniform random variable has : ", res, " as its value.");
 000053EB  5A				pop	EDX
 000053EC  58				pop	EAX 
 000053ED  8D 05 00000225 R		lea	EAX,OFFSET $S001253
 000053F3  6A 00			push	000000000h
 000053F5  50				push	EAX 
 000053F6  E8 00000000 E		call	 Console_WriteString
 000053FB  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005401  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005407  50				push	EAX 
 00005408  52				push	EDX 
 00005409  E8 00000000 E		call	 Console_WriteDouble 
 0000540E  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005414  6A 00			push	000000000h 
 00005416  50				push	EAX 
 00005417  E8 00000000 E		call	 Console_WriteString 
 0000541C  E8 00000000 E		call	 Console_WriteCrLf 

				;{1310}:res= urv.Sample();
 00005421  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 00005427  8B 11			mov	EDX,dword ptr [ECX]
 00005429  FF 12			call	dword ptr [EDX]
 0000542B  50				push	EAX
 0000542C  52				push	EDX 
 0000542D  DD 04 24			fld	qword ptr [ESP]
 00005430  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1311}:Console::WriteLn("(2)An uniform random variable has : ", res, " as its value.");
 00005436  5A				pop	EDX
 00005437  58				pop	EAX 
 00005438  8D 05 000002B5 R		lea	EAX,OFFSET $S001254
 0000543E  6A 00			push	000000000h
 00005440  50				push	EAX 
 00005441  E8 00000000 E		call	 Console_WriteString
 00005446  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000544C  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005452  50				push	EAX 
 00005453  52				push	EDX 
 00005454  E8 00000000 E		call	 Console_WriteDouble 
 00005459  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 0000545F  6A 00			push	000000000h 
 00005461  50				push	EAX 
 00005462  E8 00000000 E		call	 Console_WriteString 
 00005467  E8 00000000 E		call	 Console_WriteCrLf 

				;{1312}:res= urv.Sample();
 0000546C  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 00005472  8B 11			mov	EDX,dword ptr [ECX]
 00005474  FF 12			call	dword ptr [EDX]
 00005476  50				push	EAX
 00005477  52				push	EDX 
 00005478  DD 04 24			fld	qword ptr [ESP]
 0000547B  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1313}:Console::WriteLn("(3)An uniform random variable has : ", res, " as its value.");
 00005481  5A				pop	EDX
 00005482  58				pop	EAX 
 00005483  8D 05 00000345 R		lea	EAX,OFFSET $S001255
 00005489  6A 00			push	000000000h
 0000548B  50				push	EAX 
 0000548C  E8 00000000 E		call	 Console_WriteString
 00005491  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005497  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 0000549D  50				push	EAX 
 0000549E  52				push	EDX 
 0000549F  E8 00000000 E		call	 Console_WriteDouble 
 000054A4  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 000054AA  6A 00			push	000000000h 
 000054AC  50				push	EAX 
 000054AD  E8 00000000 E		call	 Console_WriteString 
 000054B2  E8 00000000 E		call	 Console_WriteCrLf 

				;{1314}:res= urv.Sample();
 000054B7  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 000054BD  8B 11			mov	EDX,dword ptr [ECX]
 000054BF  FF 12			call	dword ptr [EDX]
 000054C1  50				push	EAX
 000054C2  52				push	EDX 
 000054C3  DD 04 24			fld	qword ptr [ESP]
 000054C6  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1315}:Console::WriteLn("(4)An uniform random variable has : ", res, " as its value.");
 000054CC  5A				pop	EDX
 000054CD  58				pop	EAX 
 000054CE  8D 05 000003D1 R		lea	EAX,OFFSET $S001256
 000054D4  6A 00			push	000000000h
 000054D6  50				push	EAX 
 000054D7  E8 00000000 E		call	 Console_WriteString
 000054DC  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000054E2  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000054E8  50				push	EAX 
 000054E9  52				push	EDX 
 000054EA  E8 00000000 E		call	 Console_WriteDouble 
 000054EF  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 000054F5  6A 00			push	000000000h 
 000054F7  50				push	EAX 
 000054F8  E8 00000000 E		call	 Console_WriteString 
 000054FD  E8 00000000 E		call	 Console_WriteCrLf 

				;{1316}:Console::WriteLn("my name is", urv.Name());
 00005502  8D 05 00000FCB R		lea	EAX,OFFSET $S001251
 00005508  6A 00			push	000000000h
 0000550A  50				push	EAX 
 0000550B  E8 00000000 E		call	 Console_WriteString
 00005510  8D 8D FFFFFF0C		lea	ECX,dword ptr [EBP-00F4h]
 00005516  8B 11			mov	EDX,dword ptr [ECX]
 00005518  FF 52 04			call	dword ptr [EDX+0004h]
 0000551B  6A 00			push	000000000h 
 0000551D  50				push	EAX 
 0000551E  E8 00000000 E		call	 Console_WriteString 
 00005523  E8 00000000 E		call	 Console_WriteCrLf 

				;{1318}:res= 0.0;
 00005528  D9 EE			fldz
 0000552A  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1320}:erv(Math::pi());
 00005530  E8 00000000 E		call	 Math_pi
 00005535  50				push	EAX
 00005536  52				push	EDX 
 00005537  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 0000553D  E8 FFFFECBD			call	 UnitTesting_TestVirtuals_ExponentialRV

				;{1322}:res= erv.Sample();
 00005542  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005548  8B 11			mov	EDX,dword ptr [ECX]
 0000554A  FF 12			call	dword ptr [EDX]
 0000554C  50				push	EAX
 0000554D  52				push	EDX 
 0000554E  DD 04 24			fld	qword ptr [ESP]
 00005551  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1323}:Console::WriteLn("(1)An exponential random variable has : ", res, " as its value.");
 00005557  5A				pop	EDX
 00005558  58				pop	EAX 
 00005559  8D 05 000001FC R		lea	EAX,OFFSET $S001258
 0000555F  6A 00			push	000000000h
 00005561  50				push	EAX 
 00005562  E8 00000000 E		call	 Console_WriteString
 00005567  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000556D  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005573  50				push	EAX 
 00005574  52				push	EDX 
 00005575  E8 00000000 E		call	 Console_WriteDouble 
 0000557A  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005580  6A 00			push	000000000h 
 00005582  50				push	EAX 
 00005583  E8 00000000 E		call	 Console_WriteString 
 00005588  E8 00000000 E		call	 Console_WriteCrLf 

				;{1324}:res= erv.Sample();
 0000558D  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005593  8B 11			mov	EDX,dword ptr [ECX]
 00005595  FF 12			call	dword ptr [EDX]
 00005597  50				push	EAX
 00005598  52				push	EDX 
 00005599  DD 04 24			fld	qword ptr [ESP]
 0000559C  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1325}:Console::WriteLn("(2)An exponential random variable has : ", res, " as its value.");
 000055A2  5A				pop	EDX
 000055A3  58				pop	EAX 
 000055A4  8D 05 0000028C R		lea	EAX,OFFSET $S001259
 000055AA  6A 00			push	000000000h
 000055AC  50				push	EAX 
 000055AD  E8 00000000 E		call	 Console_WriteString
 000055B2  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 000055B8  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 000055BE  50				push	EAX 
 000055BF  52				push	EDX 
 000055C0  E8 00000000 E		call	 Console_WriteDouble 
 000055C5  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 000055CB  6A 00			push	000000000h 
 000055CD  50				push	EAX 
 000055CE  E8 00000000 E		call	 Console_WriteString 
 000055D3  E8 00000000 E		call	 Console_WriteCrLf 

				;{1326}:res= erv.Sample();
 000055D8  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 000055DE  8B 11			mov	EDX,dword ptr [ECX]
 000055E0  FF 12			call	dword ptr [EDX]
 000055E2  50				push	EAX
 000055E3  52				push	EDX 
 000055E4  DD 04 24			fld	qword ptr [ESP]
 000055E7  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1327}:Console::WriteLn("(3)An exponential random variable has : ", res, " as its value.");
 000055ED  5A				pop	EDX
 000055EE  58				pop	EAX 
 000055EF  8D 05 0000031C R		lea	EAX,OFFSET $S001260
 000055F5  6A 00			push	000000000h
 000055F7  50				push	EAX 
 000055F8  E8 00000000 E		call	 Console_WriteString
 000055FD  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005603  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005609  50				push	EAX 
 0000560A  52				push	EDX 
 0000560B  E8 00000000 E		call	 Console_WriteDouble 
 00005610  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005616  6A 00			push	000000000h 
 00005618  50				push	EAX 
 00005619  E8 00000000 E		call	 Console_WriteString 
 0000561E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1328}:res= erv.Sample();
 00005623  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005629  8B 11			mov	EDX,dword ptr [ECX]
 0000562B  FF 12			call	dword ptr [EDX]
 0000562D  50				push	EAX
 0000562E  52				push	EDX 
 0000562F  DD 04 24			fld	qword ptr [ESP]
 00005632  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1329}:Console::WriteLn("(4)An exponential random variable has : ", res, " as its value.");
 00005638  5A				pop	EDX
 00005639  58				pop	EAX 
 0000563A  8D 05 000003A8 R		lea	EAX,OFFSET $S001261
 00005640  6A 00			push	000000000h
 00005642  50				push	EAX 
 00005643  E8 00000000 E		call	 Console_WriteString
 00005648  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 0000564E  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005654  50				push	EAX 
 00005655  52				push	EDX 
 00005656  E8 00000000 E		call	 Console_WriteDouble 
 0000565B  8D 05 00000141 R		lea	EAX,OFFSET $S001247
 00005661  6A 00			push	000000000h 
 00005663  50				push	EAX 
 00005664  E8 00000000 E		call	 Console_WriteString 
 00005669  E8 00000000 E		call	 Console_WriteCrLf 

				;{1330}:Console::WriteLn("my name is", erv.Name());
 0000566E  8D 05 00000FCB R		lea	EAX,OFFSET $S001251
 00005674  6A 00			push	000000000h
 00005676  50				push	EAX 
 00005677  E8 00000000 E		call	 Console_WriteString
 0000567C  8D 8D FFFFFF00		lea	ECX,dword ptr [EBP-0100h]
 00005682  8B 11			mov	EDX,dword ptr [ECX]
 00005684  FF 52 04			call	dword ptr [EDX+0004h]
 00005687  6A 00			push	000000000h 
 00005689  50				push	EAX 
 0000568A  E8 00000000 E		call	 Console_WriteString 
 0000568F  E8 00000000 E		call	 Console_WriteCrLf 

				;{1334}:UnitTesting::TestSwitch::RunTest(UnitTesting::TestSwitch::open);
 00005694  B8 00000001			mov	EAX,000000001h
 00005699  50				push	EAX
 0000569A  E8 FFFFEA11			call	 UnitTesting_TestSwitch_RunTest

				;{1337}:obj;
 0000569F  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056A5  E8 FFFFB093			call	 UnitTesting_Circle

				;{1339}:obj.Radius= 115.456;
 000056AA  BA 1A9FBE77			mov	EDX,01A9FBE77h
 000056AF  B8 405CDD2F			mov	EAX,0405CDD2Fh 
 000056B4  50				push	EAX
 000056B5  52				push	EDX 
 000056B6  DD 04 24			fld	qword ptr [ESP]
 000056B9  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056BF  E8 FFFFB045			call	 UnitTesting_Circle_put_Radius

				;{1343}:Console::WriteLn("Circle.Radius = ", obj.Radius);
 000056C4  8D 05 000007F1 R		lea	EAX,OFFSET $S001265
 000056CA  6A 00			push	000000000h
 000056CC  50				push	EAX 
 000056CD  E8 00000000 E		call	 Console_WriteString
 000056D2  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056D8  E8 FFFFB015			call	 UnitTesting_Circle_get_Radius
 000056DD  50				push	EAX 
 000056DE  52				push	EDX 
 000056DF  E8 00000000 E		call	 Console_WriteDouble 
 000056E4  E8 00000000 E		call	 Console_WriteCrLf 

				;{1345}:area= obj.ComputeArea();
 000056E9  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 000056EF  8B 11			mov	EDX,dword ptr [ECX]
 000056F1  FF 52 04			call	dword ptr [EDX+0004h]
 000056F4  50				push	EAX
 000056F5  52				push	EDX 
 000056F6  DD 04 24			fld	qword ptr [ESP]
 000056F9  DD 9D FFFFFEEC		fstp	qword ptr [EBP-0114h]

				;{1347}:Console::WriteLn("Circle.Area = ", area);
 000056FF  5A				pop	EDX
 00005700  58				pop	EAX 
 00005701  8D 05 000007E2 R		lea	EAX,OFFSET $S001267
 00005707  6A 00			push	000000000h
 00005709  50				push	EAX 
 0000570A  E8 00000000 E		call	 Console_WriteString
 0000570F  8B 95 FFFFFEEC		mov	EDX,dword ptr [EBP-0114h]
 00005715  8B 85 FFFFFEF0		mov	EAX,dword ptr [EBP-0110h] 
 0000571B  50				push	EAX 
 0000571C  52				push	EDX 
 0000571D  E8 00000000 E		call	 Console_WriteDouble 
 00005722  E8 00000000 E		call	 Console_WriteCrLf 

				;{1350}:obj2= obj;
 00005727  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 0000572D  E8 FFFFB00B			call	 UnitTesting_Circle
 00005732  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 00005738  8B F1			mov	ESI,ECX
 0000573A  8D 9D FFFFFEE0		lea	EBX,dword ptr [EBP-0120h]
 00005740  8B FB			mov	EDI,EBX 
 00005742  B9 0000000C			mov	ECX,00000000Ch 
 00005747  FC				cld	
 00005748  F3/ A4			rep movsb	

				;{1352}:what= (area == obj2.ComputeArea());
 0000574A  8B 95 FFFFFEEC		mov	EDX,dword ptr [EBP-0114h]
 00005750  8B 85 FFFFFEF0		mov	EAX,dword ptr [EBP-0110h] 
 00005756  50				push	EAX
 00005757  52				push	EDX 
 00005758  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 0000575E  8B 11			mov	EDX,dword ptr [ECX]
 00005760  FF 52 04			call	dword ptr [EDX+0004h]
 00005763  50				push	EAX
 00005764  52				push	EDX 
 00005765  E8 00000000 E		call	 FloatingPoint_Compare
 0000576A  83 F8 00			cmp	EAX,000000000h
 0000576D  F7 D8			neg	EAX
 0000576F  0F 94 C0			setz	AL
 00005772  88 45 A4			mov	byte ptr [EBP-005Ch],AL

				;{1354}:Console::WriteLn("what must be true = ", what);
 00005775  8D 05 0000115E R		lea	EAX,OFFSET $S001269
 0000577B  6A 00			push	000000000h
 0000577D  50				push	EAX 
 0000577E  E8 00000000 E		call	 Console_WriteString
 00005783  0F B6 45 A4			movzx	EAX,byte ptr [EBP-005Ch]
 00005787  50				push	EAX 
 00005788  E8 00000000 E		call	 Console_WriteBoolean 
 0000578D  E8 00000000 E		call	 Console_WriteCrLf 

				;{1356}:if(obj == obj2)
 00005792  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 00005798  51				push	ECX
 00005799  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 0000579F  5F				pop	EDI
 000057A0  8B F1			mov	ESI,ECX
 000057A2  B9 0000000C			mov	ECX,00000000Ch 
 000057A7  FC				cld	
 000057A8  F3/ A6			repe cmpsb	
 000057AA  0F 94 C0			setz	AL
 000057AD  84 C0			test	AL,AL
 000057AF  74 13			jz	OFFSET $L001658
				;{

				;{1358}:Console::WriteLn("obj==obj2");
 000057B1  8D 05 00001038 R		lea	EAX,OFFSET $S001270
 000057B7  6A 00			push	000000000h
 000057B9  50				push	EAX 
 000057BA  E8 00000000 E		call	 Console_WriteString
 000057BF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000057C4			$L001658:

				;{1361}:sq;
 000057C4  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 000057CA  E8 FFFFC097			call	 UnitTesting_Square

				;{1363}:sq.Width= 500.456;
 000057CF  BA C6A7EF9E			mov	EDX,0C6A7EF9Eh
 000057D4  B8 407F474B			mov	EAX,0407F474Bh 
 000057D9  50				push	EAX
 000057DA  52				push	EDX 
 000057DB  DD 04 24			fld	qword ptr [ESP]
 000057DE  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 000057E4  E8 FFFFC0B9			call	 UnitTesting_Square_put_Width

				;{1364}:sq.Height= 1045.4564;
 000057E9  BA 5A858794			mov	EDX,05A858794h
 000057EE  B8 409055D3			mov	EAX,0409055D3h 
 000057F3  50				push	EAX
 000057F4  52				push	EDX 
 000057F5  DD 04 24			fld	qword ptr [ESP]
 000057F8  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 000057FE  E8 FFFFC01B			call	 UnitTesting_Square_put_Height

				;{1366}:sq.ComputeArea();
 00005803  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005809  8B 11			mov	EDX,dword ptr [ECX]
 0000580B  FF 52 04			call	dword ptr [EDX+0004h]

				;{1368}:Console::WriteLn("sq.Width = ", sq.Width, ", sq.Height = ", sq.Height, ", area = ", sq.ComputeArea());
 0000580E  8D 05 0000105C R		lea	EAX,OFFSET $S001274
 00005814  6A 00			push	000000000h
 00005816  50				push	EAX 
 00005817  E8 00000000 E		call	 Console_WriteString
 0000581C  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005822  E8 FFFFC064			call	 UnitTesting_Square_get_Width
 00005827  50				push	EAX 
 00005828  52				push	EDX 
 00005829  E8 00000000 E		call	 Console_WriteDouble 
 0000582E  8D 05 00000730 R		lea	EAX,OFFSET $S001275
 00005834  6A 00			push	000000000h 
 00005836  50				push	EAX 
 00005837  E8 00000000 E		call	 Console_WriteString 
 0000583C  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005842  E8 FFFFBFC0			call	 UnitTesting_Square_get_Height
 00005847  50				push	EAX 
 00005848  52				push	EDX 
 00005849  E8 00000000 E		call	 Console_WriteDouble 
 0000584E  8D 05 00000726 R		lea	EAX,OFFSET $S001276
 00005854  6A 00			push	000000000h 
 00005856  50				push	EAX 
 00005857  E8 00000000 E		call	 Console_WriteString 
 0000585C  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00005862  8B 11			mov	EDX,dword ptr [ECX]
 00005864  FF 52 04			call	dword ptr [EDX+0004h]
 00005867  50				push	EAX 
 00005868  52				push	EDX 
 00005869  E8 00000000 E		call	 Console_WriteDouble 
 0000586E  E8 00000000 E		call	 Console_WriteCrLf 

				;{1370}:tri;
 00005873  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00005879  E8 FFFFEC96			call	 UnitTesting_Triangle

				;{1372}:tri.Base= 450.4564;
 0000587E  BA 6A161E50			mov	EDX,06A161E50h
 00005883  B8 407C274D			mov	EAX,0407C274Dh 
 00005888  50				push	EAX
 00005889  52				push	EDX 
 0000588A  DD 04 24			fld	qword ptr [ESP]
 0000588D  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00005893  E8 FFFFEB44			call	 UnitTesting_Triangle_put_Base

				;{1373}:tri.High= 4572.4564;
 00005898  BA D6A161E5			mov	EDX,0D6A161E5h
 0000589D  B8 40B1DC74			mov	EAX,040B1DC74h 
 000058A2  50				push	EAX
 000058A3  52				push	EDX 
 000058A4  DD 04 24			fld	qword ptr [ESP]
 000058A7  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058AD  E8 FFFFEC1A			call	 UnitTesting_Triangle_put_High

				;{1375}:tri.ComputeArea();
 000058B2  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058B8  8B 11			mov	EDX,dword ptr [ECX]
 000058BA  FF 52 04			call	dword ptr [EDX+0004h]

				;{1377}:Console::WriteLn("tri.Base = ", tri.Base, ", tri.High = ", tri.High, ", area = ", tri.ComputeArea());
 000058BD  8D 05 00001109 R		lea	EAX,OFFSET $S001280
 000058C3  6A 00			push	000000000h
 000058C5  50				push	EAX 
 000058C6  E8 00000000 E		call	 Console_WriteString
 000058CB  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058D1  E8 FFFFEAEF			call	 UnitTesting_Triangle_get_Base
 000058D6  50				push	EAX 
 000058D7  52				push	EDX 
 000058D8  E8 00000000 E		call	 Console_WriteDouble 
 000058DD  8D 05 0000073F R		lea	EAX,OFFSET $S001281
 000058E3  6A 00			push	000000000h 
 000058E5  50				push	EAX 
 000058E6  E8 00000000 E		call	 Console_WriteString 
 000058EB  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 000058F1  E8 FFFFEBBF			call	 UnitTesting_Triangle_get_High
 000058F6  50				push	EAX 
 000058F7  52				push	EDX 
 000058F8  E8 00000000 E		call	 Console_WriteDouble 
 000058FD  8D 05 00000726 R		lea	EAX,OFFSET $S001276
 00005903  6A 00			push	000000000h 
 00005905  50				push	EAX 
 00005906  E8 00000000 E		call	 Console_WriteString 
 0000590B  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00005911  8B 11			mov	EDX,dword ptr [ECX]
 00005913  FF 52 04			call	dword ptr [EDX+0004h]
 00005916  50				push	EAX 
 00005917  52				push	EDX 
 00005918  E8 00000000 E		call	 Console_WriteDouble 
 0000591D  E8 00000000 E		call	 Console_WriteCrLf 

				;{1381}:Console::WriteLn("I'm tired of waiting!!!");
 00005922  8D 05 00000AA9 R		lea	EAX,OFFSET $S001283
 00005928  6A 00			push	000000000h
 0000592A  50				push	EAX 
 0000592B  E8 00000000 E		call	 Console_WriteString
 00005930  E8 00000000 E		call	 Console_WriteCrLf 

				;{1382}:cant;
 00005935  8D 8D FFFFFEB4		lea	ECX,dword ptr [EBP-014Ch]
 0000593B  E8 FFFFE941			call	 UnitTesting_TestVirtuals_SimpleRV

				;{1384}:Console::WriteLn("My Name is: ", cant.Name());
 00005940  8D 05 00000B08 R		lea	EAX,OFFSET $S001285
 00005946  6A 00			push	000000000h
 00005948  50				push	EAX 
 00005949  E8 00000000 E		call	 Console_WriteString
 0000594E  8D 8D FFFFFEB4		lea	ECX,dword ptr [EBP-014Ch]
 00005954  8B 11			mov	EDX,dword ptr [ECX]
 00005956  FF 52 04			call	dword ptr [EDX+0004h]
 00005959  6A 00			push	000000000h 
 0000595B  50				push	EAX 
 0000595C  E8 00000000 E		call	 Console_WriteString 
 00005961  E8 00000000 E		call	 Console_WriteCrLf 

				;{1386}:if(false == bUnattended)
 00005966  33 C0			xor	EAX,EAX
 00005968  50				push	EAX
 00005969  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 0000596D  5A				pop	EDX
 0000596E  3A D0			cmp	DL,AL
 00005970  0F 94 C0			setz	AL
 00005973  84 C0			test	AL,AL
 00005975  74 0F			jz	OFFSET $L001660

				;{1387}:hello.ShowHello("H++ Unit Testing : Third Phase");
 00005977  8D 05 00000A2F R		lea	EAX,OFFSET $S001286
 0000597D  50				push	EAX
 0000597E  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00005981  E8 FFFFB1AF			call	 UnitTesting_HelloWorld_ShowHello
 00005986			$L001660:

				;{1389}:xtarget, ;
 00005986  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 0000598C  E8 FFFFD4FF			call	 UnitTesting_TestIntegers

				;{1390}:ysource;
 00005991  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 00005997  E8 FFFFD4F4			call	 UnitTesting_TestIntegers

				;{1392}:ysource.Width= 0x666;
 0000599C  B8 00000666			mov	EAX,000000666h
 000059A1  50				push	EAX
 000059A2  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059A8  E8 FFFFD25E			call	 UnitTesting_TestIntegers_put_Width

				;{1393}:ysource.Height= 0x777;
 000059AD  B8 00000777			mov	EAX,000000777h
 000059B2  50				push	EAX
 000059B3  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059B9  E8 FFFFD1B8			call	 UnitTesting_TestIntegers_put_Height

				;{1395}:Console::WriteLn("ysource.Width = ", ysource.Width, ", ysource.Height = ", ysource.Height);
 000059BE  8D 05 000011C7 R		lea	EAX,OFFSET $S001291
 000059C4  6A 00			push	000000000h
 000059C6  50				push	EAX 
 000059C7  E8 00000000 E		call	 Console_WriteString
 000059CC  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059D2  E8 FFFFD221			call	 UnitTesting_TestIntegers_get_Width
 000059D7  50				push	EAX 
 000059D8  E8 00000000 E		call	 Console_WriteInteger 
 000059DD  8D 05 0000074D R		lea	EAX,OFFSET $S001292
 000059E3  6A 00			push	000000000h 
 000059E5  50				push	EAX 
 000059E6  E8 00000000 E		call	 Console_WriteString 
 000059EB  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 000059F1  E8 FFFFD16C			call	 UnitTesting_TestIntegers_get_Height
 000059F6  50				push	EAX 
 000059F7  E8 00000000 E		call	 Console_WriteInteger 
 000059FC  E8 00000000 E		call	 Console_WriteCrLf 

				;try
 00005A01  54				push	ESP ;pPrevESP
 00005A02  55				push	EBP ;pPrevEBP
 00005A03  68 00005A2C R		push	OFFSET __except_handlerXXX001663 
					assume FS:nothing
 00005A08  64: FF 35			push	dword ptr  FS:[0] 
	   00000000
 00005A0F  64: 89 25			mov	dword ptr  FS:[0],ESP
	   00000000
 00005A16  CC				int	000000003h ;User breakpoint

				;{1400}:Console::WriteLn("This line will never be executed!");
 00005A17  8D 05 00000D5E R		lea	EAX,OFFSET $S001293
 00005A1D  6A 00			push	000000000h
 00005A1F  50				push	EAX 
 00005A20  E8 00000000 E		call	 Console_WriteString
 00005A25  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00005A2A  EB 3E			jmp	OFFSET $L001662
 00005A2C			__except_handlerXXX001663:
 00005A2C  8B 5C 24 04			mov	EBX,dword ptr [ESP+0004h] ;_ExceptionRecord
 00005A30  8B 0B			mov	ECX,dword ptr [EBX] ;_ExceptionRecord->ExceptionCode // The reason the exception occurred.
 00005A32  64: 8B 1D			mov	EBX,dword ptr  FS:[0] 
	   00000000
 00005A39  8B 23			mov	ESP,dword ptr [EBX] 
 00005A3B  64: 8F 05			pop	dword ptr  FS:[0]
	   00000000
 00005A42  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00005A46  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP

				;{1400}:(System::Exception::BREAKPOINT);
 00005A4A  B8 80000003			mov	EAX,080000003h
 00005A4F  3B C1			cmp	EAX,ECX
 00005A51  75 15			jnz	OFFSET $L001666

				;{1404}:Console::WriteLn("**A breakpoint was catched!**");
 00005A53  8D 05 0000065E R		lea	EAX,OFFSET $S001294
 00005A59  6A 00			push	000000000h
 00005A5B  50				push	EAX 
 00005A5C  E8 00000000 E		call	 Console_WriteString
 00005A61  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00005A66  EB 18			jmp	OFFSET $L001665 
 00005A68			$L001666:
 00005A68  EB 16			jmp	OFFSET $L001665 
 00005A6A			$L001662:
 00005A6A  64: 8B 25			mov	ESP,dword ptr  FS:[0] 
	   00000000
 00005A71  64: 8F 05			pop	dword ptr  FS:[0] 
	   00000000
 00005A78  8B 6C 24 04			mov	EBP,dword ptr [ESP+0004h] ;the prev EBP
 00005A7C  8B 64 24 08			mov	ESP,dword ptr [ESP+0008h] ;the prev ESP
 00005A80			$L001665:

				;{1408}:xtarget= ysource;
 00005A80  8D 8D FFFFFE54		lea	ECX,dword ptr [EBP-01ACh]
 00005A86  8B F1			mov	ESI,ECX
 00005A88  8D 9D FFFFFE84		lea	EBX,dword ptr [EBP-017Ch]
 00005A8E  8B FB			mov	EDI,EBX 
 00005A90  B9 00000030			mov	ECX,000000030h 
 00005A95  FC				cld	
 00005A96  F3/ A4			rep movsb	

				;{1410}:Console::WriteLn("(copied)xtarget.Width = ", xtarget.Width, ", (copied)xtarget.Height = ", xtarget.Height);
 00005A98  8D 05 0000044F R		lea	EAX,OFFSET $S001295
 00005A9E  6A 00			push	000000000h
 00005AA0  50				push	EAX 
 00005AA1  E8 00000000 E		call	 Console_WriteString
 00005AA6  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 00005AAC  E8 FFFFD147			call	 UnitTesting_TestIntegers_get_Width
 00005AB1  50				push	EAX 
 00005AB2  E8 00000000 E		call	 Console_WriteInteger 
 00005AB7  8D 05 000006FF R		lea	EAX,OFFSET $S001296
 00005ABD  6A 00			push	000000000h 
 00005ABF  50				push	EAX 
 00005AC0  E8 00000000 E		call	 Console_WriteString 
 00005AC5  8D 8D FFFFFE84		lea	ECX,dword ptr [EBP-017Ch]
 00005ACB  E8 FFFFD092			call	 UnitTesting_TestIntegers_get_Height
 00005AD0  50				push	EAX 
 00005AD1  E8 00000000 E		call	 Console_WriteInteger 
 00005AD6  E8 00000000 E		call	 Console_WriteCrLf 

				;{1412}:val1= 5, val2= 3;
 00005ADB  B8 00000005			mov	EAX,000000005h
 00005AE0  89 45 90			mov	dword ptr [EBP-0070h],EAX
 00005AE3  B8 00000003			mov	EAX,000000003h
 00005AE8  89 45 8C			mov	dword ptr [EBP-0074h],EAX

				;{1414}:UnitTesting::Integers_Inline::Test(void;
 00005AEB  E8 FFFFB088			call	 UnitTesting_Integers_Inline_Test

				;{1416}:Console::WriteLn("SummationSeries::ComputeRenderGamma() series: ");
 00005AF0  8D 05 00000BE9 R		lea	EAX,OFFSET $S001297
 00005AF6  6A 00			push	000000000h
 00005AF8  50				push	EAX 
 00005AF9  E8 00000000 E		call	 Console_WriteString
 00005AFE  E8 00000000 E		call	 Console_WriteCrLf 

				;{1417}:UnitTesting::SummationSeries::ComputeRenderGamma(void;
 00005B03  E8 FFFFBE65			call	 UnitTesting_SummationSeries_ComputeRenderGamma

				;{1419}:Console::WriteLn("Degrees to Radians of ", 90, " is = ", Math::DegreesToRadians(90.0), " Radians.");
 00005B08  8D 05 000008AA R		lea	EAX,OFFSET $S001298
 00005B0E  6A 00			push	000000000h
 00005B10  50				push	EAX 
 00005B11  E8 00000000 E		call	 Console_WriteString
 00005B16  B8 0000005A			mov	EAX,00000005Ah
 00005B1B  50				push	EAX 
 00005B1C  E8 00000000 E		call	 Console_WriteInteger 
 00005B21  8D 05 00000150 R		lea	EAX,OFFSET $S001300
 00005B27  6A 00			push	000000000h 
 00005B29  50				push	EAX 
 00005B2A  E8 00000000 E		call	 Console_WriteString 
 00005B2F  33 D2			xor	EDX,EDX
 00005B31  B8 40568000			mov	EAX,040568000h
 00005B36  50				push	EAX
 00005B37  52				push	EDX 
 00005B38  E8 FFFFA4C3			call	 Math_DegreesToRadians
 00005B3D  50				push	EAX 
 00005B3E  52				push	EDX 
 00005B3F  E8 00000000 E		call	 Console_WriteDouble 
 00005B44  8D 05 00000137 R		lea	EAX,OFFSET $S001302
 00005B4A  6A 00			push	000000000h 
 00005B4C  50				push	EAX 
 00005B4D  E8 00000000 E		call	 Console_WriteString 
 00005B52  E8 00000000 E		call	 Console_WriteCrLf 

				;{1420}:Console::WriteLn("Radians to Degrees of ", 1.57079, " is = ", Math::RadiansToDegrees(1.57079), " Degrees.");
 00005B57  8D 05 00000BB8 R		lea	EAX,OFFSET $S001303
 00005B5D  6A 00			push	000000000h
 00005B5F  50				push	EAX 
 00005B60  E8 00000000 E		call	 Console_WriteString
 00005B65  BA B1EE2436			mov	EDX,0B1EE2436h
 00005B6A  B8 3FF921F4			mov	EAX,03FF921F4h 
 00005B6F  50				push	EAX 
 00005B70  52				push	EDX 
 00005B71  E8 00000000 E		call	 Console_WriteDouble 
 00005B76  8D 05 00000150 R		lea	EAX,OFFSET $S001300
 00005B7C  6A 00			push	000000000h 
 00005B7E  50				push	EAX 
 00005B7F  E8 00000000 E		call	 Console_WriteString 
 00005B84  BA B1EE2436			mov	EDX,0B1EE2436h
 00005B89  B8 3FF921F4			mov	EAX,03FF921F4h 
 00005B8E  50				push	EAX
 00005B8F  52				push	EDX 
 00005B90  E8 FFFFAA32			call	 Math_RadiansToDegrees
 00005B95  50				push	EAX 
 00005B96  52				push	EDX 
 00005B97  E8 00000000 E		call	 Console_WriteDouble 
 00005B9C  8D 05 0000012D R		lea	EAX,OFFSET $S001305
 00005BA2  6A 00			push	000000000h 
 00005BA4  50				push	EAX 
 00005BA5  E8 00000000 E		call	 Console_WriteString 
 00005BAA  E8 00000000 E		call	 Console_WriteCrLf 

				;{1423}:p= new double;
 00005BAF  6A 08			push	000000008h
 00005BB1  E8 00000000 E		call	 System_Memory_New
 00005BB6  85 C0			test	EAX,EAX
 00005BB8  74 12			jz	 $L001667
 00005BBA  8B F0			mov	ESI,EAX
 00005BBC  8D 3E			lea	EDI,dword ptr [ESI]
 00005BBE  B9 00000002			mov	ECX,000000002h 
 00005BC3  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00005BC8  F3/ AB			rep stos	dword ptr [EDI]
 00005BCA  EB 02			jmp	 $L001668
 00005BCC			$L001667:
 00005BCC  33 F6			xor	ESI,ESI
 00005BCE			$L001668:
 00005BCE  89 B5 FFFFFE50		mov	dword ptr [EBP-01B0h],ESI 

				;{1426}:*p= 3.141516927;
 00005BD4  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005BDA  50				push	EAX
 00005BDB  BA A06A5D05			mov	EDX,0A06A5D05h
 00005BE0  B8 400921D3			mov	EAX,0400921D3h 
 00005BE5  5B				pop	EBX
 00005BE6  89 13			mov	dword ptr [EBX],EDX
 00005BE8  89 43 04			mov	dword ptr [EBX+4],EAX 

				;{1428}:Console::WriteLn("*p (3.1415...)= ", *p);
 00005BEB  8D 05 000006EB R		lea	EAX,OFFSET $S001308
 00005BF1  6A 00			push	000000000h
 00005BF3  50				push	EAX 
 00005BF4  E8 00000000 E		call	 Console_WriteString
 00005BF9  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005BFF  8B 10			mov	EDX,dword ptr [EAX]
 00005C01  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00005C04  50				push	EAX 
 00005C05  52				push	EDX 
 00005C06  E8 00000000 E		call	 Console_WriteDouble 
 00005C0B  E8 00000000 E		call	 Console_WriteCrLf 

				;{1430}:res= *p;
 00005C10  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C16  8B 10			mov	EDX,dword ptr [EAX]
 00005C18  8B 40 04			mov	EAX,dword ptr [EAX+4] 
 00005C1B  50				push	EAX
 00005C1C  52				push	EDX 
 00005C1D  DD 04 24			fld	qword ptr [ESP]
 00005C20  DD 9D FFFFFF24		fstp	qword ptr [EBP-00DCh]

				;{1432}:Console::WriteLn("res (3.1415...)= ", res);
 00005C26  5A				pop	EDX
 00005C27  58				pop	EAX 
 00005C28  8D 05 0000104A R		lea	EAX,OFFSET $S001309
 00005C2E  6A 00			push	000000000h
 00005C30  50				push	EAX 
 00005C31  E8 00000000 E		call	 Console_WriteString
 00005C36  8B 95 FFFFFF24		mov	EDX,dword ptr [EBP-00DCh]
 00005C3C  8B 85 FFFFFF28		mov	EAX,dword ptr [EBP-00D8h] 
 00005C42  50				push	EAX 
 00005C43  52				push	EDX 
 00005C44  E8 00000000 E		call	 Console_WriteDouble 
 00005C49  E8 00000000 E		call	 Console_WriteCrLf 

				;{1434}:destroy p;
 00005C4E  8B 85 FFFFFE50		mov	EAX,dword ptr [EBP-432]
 00005C54  85 C0			test	EAX,EAX
 00005C56  74 06			jz	OFFSET $L001669
 00005C58  50				push	EAX
 00005C59  E8 00000000 E		call	 System_Memory_Destroy
 00005C5E			$L001669:

				;{1444}:fpTester_ptr= new UnitTesting::TestFloatingPoint();
 00005C5E  6A 01			push	000000001h
 00005C60  E8 00000000 E		call	 System_Memory_New
 00005C65  85 C0			test	EAX,EAX
 00005C67  74 04			jz	 $L001670
 00005C69  8B F0			mov	ESI,EAX
 00005C6B  EB 02			jmp	 $L001671
 00005C6D			$L001670:
 00005C6D  33 F6			xor	ESI,ESI
 00005C6F			$L001671:
 00005C6F  89 B5 FFFFFE4C		mov	dword ptr [EBP-01B4h],ESI 
 00005C75  8B CE			mov	ECX,ESI 
 00005C77  E8 FFFFCD48			call	 UnitTesting_TestFloatingPoint
 00005C7C  8B C6			mov	EAX,ESI 

				;{1446}:_pow= fpTester_ptr.Power(2.0, 64);
 00005C7E  B8 00000040			mov	EAX,000000040h
 00005C83  50				push	EAX 
 00005C84  33 D2			xor	EDX,EDX
 00005C86  B8 40000000			mov	EAX,040000000h
 00005C8B  50				push	EAX
 00005C8C  52				push	EDX 
 00005C8D  8B 8D FFFFFE4C		mov	ECX,dword ptr [EBP-436]
 00005C93  E8 FFFFCC53			call	 UnitTesting_TestFloatingPoint_Power
 00005C98  50				push	EAX
 00005C99  52				push	EDX 
 00005C9A  DD 04 24			fld	qword ptr [ESP]
 00005C9D  DD 5D 80			fstp	qword ptr [EBP-0080h]

				;{1448}:destroy fpTester_ptr;
 00005CA0  5A				pop	EDX
 00005CA1  58				pop	EAX 
 00005CA2  8B 8D FFFFFE4C		mov	ECX,dword ptr [EBP-436]
 00005CA8  8B F1			mov	ESI,ECX
 00005CAA  85 C9			test	ECX,ECX
 00005CAC  74 05			jz	OFFSET $L001673
 00005CAE  E8 FFFFCC0D			call	 UnitTesting_TestFloatingPoint_Destructor
 00005CB3			$L001673:
 00005CB3  56				push	ESI
 00005CB4  E8 00000000 E		call	 System_Memory_Destroy

				;{1451}:iptr= new int[10];
 00005CB9  B8 0000000A			mov	EAX,00000000Ah
 00005CBE  6B C0 04			imul	EAX,000000004h
 00005CC1  50				push	EAX
 00005CC2  8B D8			mov	EBX,EAX
 00005CC4  E8 00000000 E		call	 System_Memory_New
 00005CC9  85 C0			test	EAX,EAX
 00005CCB  74 0F			jz	 $L001674
 00005CCD  8B F0			mov	ESI,EAX 
 00005CCF  8D 3E			lea	EDI,dword ptr [ESI]
 00005CD1  8B CB			mov	ECX,EBX 
 00005CD3  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00005CD8  F3/ AA			rep stos	byte ptr [EDI]
 00005CDA  EB 02			jmp	 $L001675
 00005CDC			$L001674:
 00005CDC  33 F6			xor	ESI,ESI
 00005CDE			$L001675:
 00005CDE  89 B5 FFFFFE48		mov	dword ptr [EBP-01B8h],ESI 

				;{1453}:iptr[0]= 145;
 00005CE4  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005CEA  50				push	EAX
 00005CEB  33 C0			xor	EAX,EAX
 00005CED  5E				pop	ESI
 00005CEE  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005CF1  50				push	EAX
 00005CF2  B8 00000091			mov	EAX,000000091h
 00005CF7  5B				pop	EBX
 00005CF8  89 03			mov	dword ptr [EBX],EAX

				;{1454}:iptr[9]= 541;
 00005CFA  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D00  50				push	EAX
 00005D01  B8 00000009			mov	EAX,000000009h
 00005D06  5E				pop	ESI
 00005D07  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D0A  50				push	EAX
 00005D0B  B8 0000021D			mov	EAX,00000021Dh
 00005D10  5B				pop	EBX
 00005D11  89 03			mov	dword ptr [EBX],EAX

				;{1455}:iptr[6]= 774;
 00005D13  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D19  50				push	EAX
 00005D1A  B8 00000006			mov	EAX,000000006h
 00005D1F  5E				pop	ESI
 00005D20  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D23  50				push	EAX
 00005D24  B8 00000306			mov	EAX,000000306h
 00005D29  5B				pop	EBX
 00005D2A  89 03			mov	dword ptr [EBX],EAX

				;{1456}:iptr[7]= 991;
 00005D2C  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D32  50				push	EAX
 00005D33  B8 00000007			mov	EAX,000000007h
 00005D38  5E				pop	ESI
 00005D39  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D3C  50				push	EAX
 00005D3D  B8 000003DF			mov	EAX,0000003DFh
 00005D42  5B				pop	EBX
 00005D43  89 03			mov	dword ptr [EBX],EAX

				;{1457}:iptr[2]= 123;
 00005D45  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D4B  50				push	EAX
 00005D4C  B8 00000002			mov	EAX,000000002h
 00005D51  5E				pop	ESI
 00005D52  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D55  50				push	EAX
 00005D56  B8 0000007B			mov	EAX,00000007Bh
 00005D5B  5B				pop	EBX
 00005D5C  89 03			mov	dword ptr [EBX],EAX

				;{1458}:iptr[1]= 667;
 00005D5E  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D64  50				push	EAX
 00005D65  B8 00000001			mov	EAX,000000001h
 00005D6A  5E				pop	ESI
 00005D6B  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005D6E  50				push	EAX
 00005D6F  B8 0000029B			mov	EAX,00000029Bh
 00005D74  5B				pop	EBX
 00005D75  89 03			mov	dword ptr [EBX],EAX

				;{1460}:Console::WriteLn("iptr[0] == 145 == ", iptr[0]);
 00005D77  8D 05 00000F54 R		lea	EAX,OFFSET $S001319
 00005D7D  6A 00			push	000000000h
 00005D7F  50				push	EAX 
 00005D80  E8 00000000 E		call	 Console_WriteString
 00005D85  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005D8B  50				push	EAX
 00005D8C  33 C0			xor	EAX,EAX
 00005D8E  5E				pop	ESI
 00005D8F  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005D92  50				push	EAX 
 00005D93  E8 00000000 E		call	 Console_WriteInteger 
 00005D98  E8 00000000 E		call	 Console_WriteCrLf 

				;{1461}:Console::WriteLn("iptr[9] == 541 == ", iptr[9]);
 00005D9D  8D 05 00000FB3 R		lea	EAX,OFFSET $S001320
 00005DA3  6A 00			push	000000000h
 00005DA5  50				push	EAX 
 00005DA6  E8 00000000 E		call	 Console_WriteString
 00005DAB  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005DB1  50				push	EAX
 00005DB2  B8 00000009			mov	EAX,000000009h
 00005DB7  5E				pop	ESI
 00005DB8  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005DBB  50				push	EAX 
 00005DBC  E8 00000000 E		call	 Console_WriteInteger 
 00005DC1  E8 00000000 E		call	 Console_WriteCrLf 

				;{1462}:Console::WriteLn("iptr[7] == 991 == ", iptr[7]);
 00005DC6  8D 05 00000FA0 R		lea	EAX,OFFSET $S001321
 00005DCC  6A 00			push	000000000h
 00005DCE  50				push	EAX 
 00005DCF  E8 00000000 E		call	 Console_WriteString
 00005DD4  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005DDA  50				push	EAX
 00005DDB  B8 00000007			mov	EAX,000000007h
 00005DE0  5E				pop	ESI
 00005DE1  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005DE4  50				push	EAX 
 00005DE5  E8 00000000 E		call	 Console_WriteInteger 
 00005DEA  E8 00000000 E		call	 Console_WriteCrLf 

				;{1463}:Console::WriteLn("iptr[2] == 123 == ", iptr[2]);
 00005DEF  8D 05 00000F7A R		lea	EAX,OFFSET $S001322
 00005DF5  6A 00			push	000000000h
 00005DF7  50				push	EAX 
 00005DF8  E8 00000000 E		call	 Console_WriteString
 00005DFD  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E03  50				push	EAX
 00005E04  B8 00000002			mov	EAX,000000002h
 00005E09  5E				pop	ESI
 00005E0A  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E0D  50				push	EAX 
 00005E0E  E8 00000000 E		call	 Console_WriteInteger 
 00005E13  E8 00000000 E		call	 Console_WriteCrLf 

				;{1464}:Console::WriteLn("iptr[1] == 667 == ", iptr[1]);
 00005E18  8D 05 00000F67 R		lea	EAX,OFFSET $S001323
 00005E1E  6A 00			push	000000000h
 00005E20  50				push	EAX 
 00005E21  E8 00000000 E		call	 Console_WriteString
 00005E26  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E2C  50				push	EAX
 00005E2D  B8 00000001			mov	EAX,000000001h
 00005E32  5E				pop	ESI
 00005E33  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E36  50				push	EAX 
 00005E37  E8 00000000 E		call	 Console_WriteInteger 
 00005E3C  E8 00000000 E		call	 Console_WriteCrLf 

				;{1465}:Console::WriteLn("iptr[6] == 774 == ", iptr[6]);
 00005E41  8D 05 00000F8D R		lea	EAX,OFFSET $S001324
 00005E47  6A 00			push	000000000h
 00005E49  50				push	EAX 
 00005E4A  E8 00000000 E		call	 Console_WriteString
 00005E4F  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E55  50				push	EAX
 00005E56  B8 00000006			mov	EAX,000000006h
 00005E5B  5E				pop	ESI
 00005E5C  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005E5F  50				push	EAX 
 00005E60  E8 00000000 E		call	 Console_WriteInteger 
 00005E65  E8 00000000 E		call	 Console_WriteCrLf 

				;{1467}:destroy iptr;
 00005E6A  8B 85 FFFFFE48		mov	EAX,dword ptr [EBP-440]
 00005E70  85 C0			test	EAX,EAX
 00005E72  74 06			jz	OFFSET $L001676
 00005E74  50				push	EAX
 00005E75  E8 00000000 E		call	 System_Memory_Destroy
 00005E7A			$L001676:

				;{1469}:iptr= null;
 00005E7A  33 C0			xor	EAX,EAX
 00005E7C  8D 9D FFFFFE48		lea	EBX,dword ptr [EBP-01B8h]
 00005E82  89 03			mov	dword ptr [EBX],EAX

				;{1471}:yes;
 00005E84  8D 85 FFFFFCB8		lea	EAX,dword ptr [EBP-0348h]

				;{1472}:yes[0][0]= 145;
 00005E8A  33 C0			xor	EAX,EAX
 00005E8C  6B C0 28			imul	EAX,EAX,000000028h
 00005E8F  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005E96  52				push	EDX
 00005E97  33 C0			xor	EAX,EAX
 00005E99  5E				pop	ESI
 00005E9A  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005E9D  50				push	EAX
 00005E9E  B8 00000091			mov	EAX,000000091h
 00005EA3  5B				pop	EBX
 00005EA4  89 03			mov	dword ptr [EBX],EAX

				;{1473}:yes[1][9]= 541;
 00005EA6  B8 00000001			mov	EAX,000000001h
 00005EAB  6B C0 28			imul	EAX,EAX,000000028h
 00005EAE  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005EB5  52				push	EDX
 00005EB6  B8 00000009			mov	EAX,000000009h
 00005EBB  5E				pop	ESI
 00005EBC  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005EBF  50				push	EAX
 00005EC0  B8 0000021D			mov	EAX,00000021Dh
 00005EC5  5B				pop	EBX
 00005EC6  89 03			mov	dword ptr [EBX],EAX

				;{1474}:yes[2][7]= 334;
 00005EC8  B8 00000002			mov	EAX,000000002h
 00005ECD  6B C0 28			imul	EAX,EAX,000000028h
 00005ED0  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005ED7  52				push	EDX
 00005ED8  B8 00000007			mov	EAX,000000007h
 00005EDD  5E				pop	ESI
 00005EDE  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005EE1  50				push	EAX
 00005EE2  B8 0000014E			mov	EAX,00000014Eh
 00005EE7  5B				pop	EBX
 00005EE8  89 03			mov	dword ptr [EBX],EAX

				;{1475}:yes[3][9]= 123;
 00005EEA  B8 00000003			mov	EAX,000000003h
 00005EEF  6B C0 28			imul	EAX,EAX,000000028h
 00005EF2  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005EF9  52				push	EDX
 00005EFA  B8 00000009			mov	EAX,000000009h
 00005EFF  5E				pop	ESI
 00005F00  8D 04 86			lea	EAX,dword ptr [ESI+EAX*0004h]
 00005F03  50				push	EAX
 00005F04  B8 0000007B			mov	EAX,00000007Bh
 00005F09  5B				pop	EBX
 00005F0A  89 03			mov	dword ptr [EBX],EAX

				;{1477}:Console::WriteLn("yes[0][0] == 145 == ", yes[0][0]);
 00005F0C  8D 05 00001173 R		lea	EAX,OFFSET $S001327
 00005F12  6A 00			push	000000000h
 00005F14  50				push	EAX 
 00005F15  E8 00000000 E		call	 Console_WriteString
 00005F1A  33 C0			xor	EAX,EAX
 00005F1C  6B C0 28			imul	EAX,EAX,000000028h
 00005F1F  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F26  52				push	EDX
 00005F27  33 C0			xor	EAX,EAX
 00005F29  5E				pop	ESI
 00005F2A  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005F2D  50				push	EAX 
 00005F2E  E8 00000000 E		call	 Console_WriteInteger 
 00005F33  E8 00000000 E		call	 Console_WriteCrLf 

				;{1478}:Console::WriteLn("yes[1][9] == 541 == ", yes[1][9]);
 00005F38  8D 05 00001188 R		lea	EAX,OFFSET $S001328
 00005F3E  6A 00			push	000000000h
 00005F40  50				push	EAX 
 00005F41  E8 00000000 E		call	 Console_WriteString
 00005F46  B8 00000001			mov	EAX,000000001h
 00005F4B  6B C0 28			imul	EAX,EAX,000000028h
 00005F4E  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F55  52				push	EDX
 00005F56  B8 00000009			mov	EAX,000000009h
 00005F5B  5E				pop	ESI
 00005F5C  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005F5F  50				push	EAX 
 00005F60  E8 00000000 E		call	 Console_WriteInteger 
 00005F65  E8 00000000 E		call	 Console_WriteCrLf 

				;{1479}:Console::WriteLn("yes[2][7] == 334 == ", yes[2][7]);
 00005F6A  8D 05 0000119D R		lea	EAX,OFFSET $S001329
 00005F70  6A 00			push	000000000h
 00005F72  50				push	EAX 
 00005F73  E8 00000000 E		call	 Console_WriteString
 00005F78  B8 00000002			mov	EAX,000000002h
 00005F7D  6B C0 28			imul	EAX,EAX,000000028h
 00005F80  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005F87  52				push	EDX
 00005F88  B8 00000007			mov	EAX,000000007h
 00005F8D  5E				pop	ESI
 00005F8E  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005F91  50				push	EAX 
 00005F92  E8 00000000 E		call	 Console_WriteInteger 
 00005F97  E8 00000000 E		call	 Console_WriteCrLf 

				;{1480}:Console::WriteLn("yes[3][9] == 123 == ", yes[3][9]);
 00005F9C  8D 05 000011B2 R		lea	EAX,OFFSET $S001330
 00005FA2  6A 00			push	000000000h
 00005FA4  50				push	EAX 
 00005FA5  E8 00000000 E		call	 Console_WriteString
 00005FAA  B8 00000003			mov	EAX,000000003h
 00005FAF  6B C0 28			imul	EAX,EAX,000000028h
 00005FB2  8D 94 28			lea	EDX,dword ptr [EBP+EAX-0348h]
	   FFFFFCB8
 00005FB9  52				push	EDX
 00005FBA  B8 00000009			mov	EAX,000000009h
 00005FBF  5E				pop	ESI
 00005FC0  8B 04 86			mov	EAX,dword ptr [ESI+EAX*0004h]
 00005FC3  50				push	EAX 
 00005FC4  E8 00000000 E		call	 Console_WriteInteger 
 00005FC9  E8 00000000 E		call	 Console_WriteCrLf 

				;{1482}:numbers;
 00005FCE  8D 85 FFFFFC68		lea	EAX,dword ptr [EBP-0398h]

				;{1486}:numbers[0]= Math::pi();
 00005FD4  33 C0			xor	EAX,EAX
 00005FD6  6B C0 08			imul	EAX,EAX,000000008h
 00005FD9  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00005FE0  50				push	EAX
 00005FE1  E8 00000000 E		call	 Math_pi
 00005FE6  50				push	EAX
 00005FE7  52				push	EDX 
 00005FE8  DD 04 24			fld	qword ptr [ESP]
 00005FEB  5A				pop	EDX
 00005FEC  58				pop	EAX 
 00005FED  5B				pop	EBX
 00005FEE  DD 1B			fstp	qword ptr [EBX]

				;{1487}:numbers[1]= Math::pi() * 2.1;
 00005FF0  B8 00000001			mov	EAX,000000001h
 00005FF5  6B C0 08			imul	EAX,EAX,000000008h
 00005FF8  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00005FFF  50				push	EAX
 00006000  E8 00000000 E		call	 Math_pi
 00006005  50				push	EAX
 00006006  52				push	EDX 
 00006007  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 0000600C  B8 4000CCCC			mov	EAX,04000CCCCh 
 00006011  9B DB E2			fclex
 00006014  50				push	EAX
 00006015  52				push	EDX 
 00006016  DD 04 24			fld	qword ptr [ESP]
 00006019  59				pop	ECX
 0000601A  59				pop	ECX 
 0000601B  DC 0C 24			fmul	qword ptr [ESP]
 0000601E  DD 1C 24			fstp	qword ptr [ESP]
 00006021  DD 04 24			fld	qword ptr [ESP]
 00006024  5A				pop	EDX
 00006025  58				pop	EAX 
 00006026  5B				pop	EBX
 00006027  DD 1B			fstp	qword ptr [EBX]

				;{1488}:numbers[2]= Math::pi() * 4.1;
 00006029  B8 00000002			mov	EAX,000000002h
 0000602E  6B C0 08			imul	EAX,EAX,000000008h
 00006031  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006038  50				push	EAX
 00006039  E8 00000000 E		call	 Math_pi
 0000603E  50				push	EAX
 0000603F  52				push	EDX 
 00006040  BA 66666667			mov	EDX,066666667h
 00006045  B8 40106666			mov	EAX,040106666h 
 0000604A  9B DB E2			fclex
 0000604D  50				push	EAX
 0000604E  52				push	EDX 
 0000604F  DD 04 24			fld	qword ptr [ESP]
 00006052  59				pop	ECX
 00006053  59				pop	ECX 
 00006054  DC 0C 24			fmul	qword ptr [ESP]
 00006057  DD 1C 24			fstp	qword ptr [ESP]
 0000605A  DD 04 24			fld	qword ptr [ESP]
 0000605D  5A				pop	EDX
 0000605E  58				pop	EAX 
 0000605F  5B				pop	EBX
 00006060  DD 1B			fstp	qword ptr [EBX]

				;{1489}:numbers[3]= Math::pi() * 8.1;
 00006062  B8 00000003			mov	EAX,000000003h
 00006067  6B C0 08			imul	EAX,EAX,000000008h
 0000606A  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006071  50				push	EAX
 00006072  E8 00000000 E		call	 Math_pi
 00006077  50				push	EAX
 00006078  52				push	EDX 
 00006079  BA 33333333			mov	EDX,033333333h
 0000607E  B8 40203333			mov	EAX,040203333h 
 00006083  9B DB E2			fclex
 00006086  50				push	EAX
 00006087  52				push	EDX 
 00006088  DD 04 24			fld	qword ptr [ESP]
 0000608B  59				pop	ECX
 0000608C  59				pop	ECX 
 0000608D  DC 0C 24			fmul	qword ptr [ESP]
 00006090  DD 1C 24			fstp	qword ptr [ESP]
 00006093  DD 04 24			fld	qword ptr [ESP]
 00006096  5A				pop	EDX
 00006097  58				pop	EAX 
 00006098  5B				pop	EBX
 00006099  DD 1B			fstp	qword ptr [EBX]

				;{1490}:numbers[4]= Math::pi() * 16.1;
 0000609B  B8 00000004			mov	EAX,000000004h
 000060A0  6B C0 08			imul	EAX,EAX,000000008h
 000060A3  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000060AA  50				push	EAX
 000060AB  E8 00000000 E		call	 Math_pi
 000060B0  50				push	EAX
 000060B1  52				push	EDX 
 000060B2  BA 9999999A			mov	EDX,09999999Ah
 000060B7  B8 40301999			mov	EAX,040301999h 
 000060BC  9B DB E2			fclex
 000060BF  50				push	EAX
 000060C0  52				push	EDX 
 000060C1  DD 04 24			fld	qword ptr [ESP]
 000060C4  59				pop	ECX
 000060C5  59				pop	ECX 
 000060C6  DC 0C 24			fmul	qword ptr [ESP]
 000060C9  DD 1C 24			fstp	qword ptr [ESP]
 000060CC  DD 04 24			fld	qword ptr [ESP]
 000060CF  5A				pop	EDX
 000060D0  58				pop	EAX 
 000060D1  5B				pop	EBX
 000060D2  DD 1B			fstp	qword ptr [EBX]

				;{1491}:numbers[5]= Math::pi() * 32.1;
 000060D4  B8 00000005			mov	EAX,000000005h
 000060D9  6B C0 08			imul	EAX,EAX,000000008h
 000060DC  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000060E3  50				push	EAX
 000060E4  E8 00000000 E		call	 Math_pi
 000060E9  50				push	EAX
 000060EA  52				push	EDX 
 000060EB  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000060F0  B8 40400CCC			mov	EAX,040400CCCh 
 000060F5  9B DB E2			fclex
 000060F8  50				push	EAX
 000060F9  52				push	EDX 
 000060FA  DD 04 24			fld	qword ptr [ESP]
 000060FD  59				pop	ECX
 000060FE  59				pop	ECX 
 000060FF  DC 0C 24			fmul	qword ptr [ESP]
 00006102  DD 1C 24			fstp	qword ptr [ESP]
 00006105  DD 04 24			fld	qword ptr [ESP]
 00006108  5A				pop	EDX
 00006109  58				pop	EAX 
 0000610A  5B				pop	EBX
 0000610B  DD 1B			fstp	qword ptr [EBX]

				;{1492}:numbers[6]= Math::pi() * 64.1;
 0000610D  B8 00000006			mov	EAX,000000006h
 00006112  6B C0 08			imul	EAX,EAX,000000008h
 00006115  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 0000611C  50				push	EAX
 0000611D  E8 00000000 E		call	 Math_pi
 00006122  50				push	EAX
 00006123  52				push	EDX 
 00006124  BA 66666667			mov	EDX,066666667h
 00006129  B8 40500666			mov	EAX,040500666h 
 0000612E  9B DB E2			fclex
 00006131  50				push	EAX
 00006132  52				push	EDX 
 00006133  DD 04 24			fld	qword ptr [ESP]
 00006136  59				pop	ECX
 00006137  59				pop	ECX 
 00006138  DC 0C 24			fmul	qword ptr [ESP]
 0000613B  DD 1C 24			fstp	qword ptr [ESP]
 0000613E  DD 04 24			fld	qword ptr [ESP]
 00006141  5A				pop	EDX
 00006142  58				pop	EAX 
 00006143  5B				pop	EBX
 00006144  DD 1B			fstp	qword ptr [EBX]

				;{1493}:numbers[7]= Math::pi() * 128.1;
 00006146  B8 00000007			mov	EAX,000000007h
 0000614B  6B C0 08			imul	EAX,EAX,000000008h
 0000614E  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006155  50				push	EAX
 00006156  E8 00000000 E		call	 Math_pi
 0000615B  50				push	EAX
 0000615C  52				push	EDX 
 0000615D  BA 33333333			mov	EDX,033333333h
 00006162  B8 40600333			mov	EAX,040600333h 
 00006167  9B DB E2			fclex
 0000616A  50				push	EAX
 0000616B  52				push	EDX 
 0000616C  DD 04 24			fld	qword ptr [ESP]
 0000616F  59				pop	ECX
 00006170  59				pop	ECX 
 00006171  DC 0C 24			fmul	qword ptr [ESP]
 00006174  DD 1C 24			fstp	qword ptr [ESP]
 00006177  DD 04 24			fld	qword ptr [ESP]
 0000617A  5A				pop	EDX
 0000617B  58				pop	EAX 
 0000617C  5B				pop	EBX
 0000617D  DD 1B			fstp	qword ptr [EBX]

				;{1494}:numbers[8]= Math::pi() * 256.1;
 0000617F  B8 00000008			mov	EAX,000000008h
 00006184  6B C0 08			imul	EAX,EAX,000000008h
 00006187  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 0000618E  50				push	EAX
 0000618F  E8 00000000 E		call	 Math_pi
 00006194  50				push	EAX
 00006195  52				push	EDX 
 00006196  BA 9999999A			mov	EDX,09999999Ah
 0000619B  B8 40700199			mov	EAX,040700199h 
 000061A0  9B DB E2			fclex
 000061A3  50				push	EAX
 000061A4  52				push	EDX 
 000061A5  DD 04 24			fld	qword ptr [ESP]
 000061A8  59				pop	ECX
 000061A9  59				pop	ECX 
 000061AA  DC 0C 24			fmul	qword ptr [ESP]
 000061AD  DD 1C 24			fstp	qword ptr [ESP]
 000061B0  DD 04 24			fld	qword ptr [ESP]
 000061B3  5A				pop	EDX
 000061B4  58				pop	EAX 
 000061B5  5B				pop	EBX
 000061B6  DD 1B			fstp	qword ptr [EBX]

				;{1495}:numbers[9]= Math::pi() * 512.1;
 000061B8  B8 00000009			mov	EAX,000000009h
 000061BD  6B C0 08			imul	EAX,EAX,000000008h
 000061C0  8D 84 28			lea	EAX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 000061C7  50				push	EAX
 000061C8  E8 00000000 E		call	 Math_pi
 000061CD  50				push	EAX
 000061CE  52				push	EDX 
 000061CF  BA CCCCCCCD			mov	EDX,0CCCCCCCDh
 000061D4  B8 408000CC			mov	EAX,0408000CCh 
 000061D9  9B DB E2			fclex
 000061DC  50				push	EAX
 000061DD  52				push	EDX 
 000061DE  DD 04 24			fld	qword ptr [ESP]
 000061E1  59				pop	ECX
 000061E2  59				pop	ECX 
 000061E3  DC 0C 24			fmul	qword ptr [ESP]
 000061E6  DD 1C 24			fstp	qword ptr [ESP]
 000061E9  DD 04 24			fld	qword ptr [ESP]
 000061EC  5A				pop	EDX
 000061ED  58				pop	EAX 
 000061EE  5B				pop	EBX
 000061EF  DD 1B			fstp	qword ptr [EBX]

				;{1497}:sz= sizeof (numbers) / sizeof (double);
 000061F1  B8 00000050			mov	EAX,000000050h
 000061F6  50				push	EAX
 000061F7  B8 00000008			mov	EAX,000000008h
 000061FC  9B DB E2			fclex
 000061FF  50				push	EAX
 00006200  E8 00000000 E		call	 FloatingPoint_FromInt
 00006205  50				push	EAX
 00006206  52				push	EDX 
 00006207  DD 04 24			fld	qword ptr [ESP]
 0000620A  59				pop	ECX
 0000620B  59				pop	ECX 
 0000620C  E8 00000000 E		call	 FloatingPoint_FromInt
 00006211  50				push	EAX
 00006212  52				push	EDX 
 00006213  DC 3C 24			fdivr	qword ptr [ESP]
 00006216  DD 1C 24			fstp	qword ptr [ESP]
 00006219  E8 00000000 E		call	 FloatingPoint_ToInt
 0000621E  89 85 FFFFFC64		mov	dword ptr [EBP-039Ch],EAX

				;{1499}:for(index= 0; index < sz; index++ )
 00006224  33 C0			xor	EAX,EAX
 00006226  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006229  EB 06			jmp	OFFSET $L001677
 0000622B			$L001678:
 0000622B  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 0000622E  FF 45 A8			inc	dword ptr [EBP-88]
 00006231			$L001677:
 00006231  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006234  50				push	EAX
 00006235  8B 85 FFFFFC64		mov	EAX,dword ptr [EBP-039Ch]
 0000623B  5A				pop	EDX
 0000623C  3B D0			cmp	EDX,EAX
 0000623E  0F 9C C0			setl	AL
 00006241  84 C0			test	AL,AL
 00006243  74 4A			jz	OFFSET $L001679
				;{

				;{1501}:Console::WriteLn("numbers[", index, "] = ", numbers[index]);
 00006245  8D 05 0000102F R		lea	EAX,OFFSET $S001339
 0000624B  6A 00			push	000000000h
 0000624D  50				push	EAX 
 0000624E  E8 00000000 E		call	 Console_WriteString
 00006253  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006256  50				push	EAX 
 00006257  E8 00000000 E		call	 Console_WriteInteger 
 0000625C  8D 05 00000DC1 R		lea	EAX,OFFSET $S001148
 00006262  6A 00			push	000000000h 
 00006264  50				push	EAX 
 00006265  E8 00000000 E		call	 Console_WriteString 
 0000626A  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 0000626D  6B C0 08			imul	EAX,EAX,000000008h
 00006270  8B 94 28			mov	EDX,dword ptr [EBP+EAX-0398h]
	   FFFFFC68
 00006277  83 C0 04			add	EAX,000000004h ;low part
 0000627A  8B 84 28			mov	EAX,dword ptr [EBP+EAX-0398h] 
	   FFFFFC68
 00006281  50				push	EAX 
 00006282  52				push	EDX 
 00006283  E8 00000000 E		call	 Console_WriteDouble 
 00006288  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000628D  EB 9C			jmp	OFFSET $L001678 
 0000628F			$L001679:

				;{1505}:objs;
 0000628F  8D 85 FFFFFC40		lea	EAX,dword ptr [EBP-03C0h]
 00006295  8B F0			mov	ESI,EAX
 00006297  8B DE			mov	EBX,ESI
 00006299  8B CB			mov	ECX,EBX 
 0000629B  E8 FFFFA49D			call	 UnitTesting_Circle
 000062A0  83 C3 0C			add	EBX,00000000Ch
 000062A3  8B CB			mov	ECX,EBX 
 000062A5  E8 FFFFA493			call	 UnitTesting_Circle
 000062AA  83 C3 0C			add	EBX,00000000Ch 
 000062AD  8B CB			mov	ECX,EBX 
 000062AF  E8 FFFFA489			call	 UnitTesting_Circle

				;{1507}:objs[1].Radius= Math::pi();
 000062B4  B8 00000001			mov	EAX,000000001h
 000062B9  6B C0 0C			imul	EAX,EAX,00000000Ch
 000062BC  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000062C3  51				push	ECX
 000062C4  E8 00000000 E		call	 Math_pi
 000062C9  50				push	EAX
 000062CA  52				push	EDX 
 000062CB  DD 04 24			fld	qword ptr [ESP]
 000062CE  5A				pop	EDX
 000062CF  58				pop	EAX 
 000062D0  59				pop	ECX
 000062D1  50				push	EAX
 000062D2  52				push	EDX 
 000062D3  E8 FFFFA431			call	 UnitTesting_Circle_put_Radius

				;{1509}:objs[1].Draw();
 000062D8  B8 00000001			mov	EAX,000000001h
 000062DD  6B C0 0C			imul	EAX,EAX,00000000Ch
 000062E0  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000062E7  8B 11			mov	EDX,dword ptr [ECX]
 000062E9  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{1511}:Console::WriteLn("Circle[1].Radius = 3.14 = ", objs[1].Radius);
 000062EC  8D 05 00000835 R		lea	EAX,OFFSET $S001341
 000062F2  6A 00			push	000000000h
 000062F4  50				push	EAX 
 000062F5  E8 00000000 E		call	 Console_WriteString
 000062FA  B8 00000001			mov	EAX,000000001h
 000062FF  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006302  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006309  E8 FFFFA3E4			call	 UnitTesting_Circle_get_Radius
 0000630E  50				push	EAX 
 0000630F  52				push	EDX 
 00006310  E8 00000000 E		call	 Console_WriteDouble 
 00006315  E8 00000000 E		call	 Console_WriteCrLf 

				;{1513}:objs[2]= objs[1];
 0000631A  B8 00000002			mov	EAX,000000002h
 0000631F  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006322  8D 84 28			lea	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006329  50				push	EAX
 0000632A  B8 00000001			mov	EAX,000000001h
 0000632F  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006332  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006339  8B 84 28			mov	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006340  8B F1			mov	ESI,ECX
 00006342  5F				pop	EDI
 00006343  B9 0000000C			mov	ECX,00000000Ch 
 00006348  FC				cld	
 00006349  F3/ A4			rep movsb	

				;{1515}:Console::WriteLn("Circle[2].Radius = 3.14 = ", objs[2].Radius);
 0000634B  8D 05 00000850 R		lea	EAX,OFFSET $S001342
 00006351  6A 00			push	000000000h
 00006353  50				push	EAX 
 00006354  E8 00000000 E		call	 Console_WriteString
 00006359  B8 00000002			mov	EAX,000000002h
 0000635E  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006361  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006368  E8 FFFFA385			call	 UnitTesting_Circle_get_Radius
 0000636D  50				push	EAX 
 0000636E  52				push	EDX 
 0000636F  E8 00000000 E		call	 Console_WriteDouble 
 00006374  E8 00000000 E		call	 Console_WriteCrLf 

				;{1517}:dest;
 00006379  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 0000637F  E8 FFFFA3B9			call	 UnitTesting_Circle

				;{1519}:dest= objs[1];
 00006384  B8 00000001			mov	EAX,000000001h
 00006389  6B C0 0C			imul	EAX,EAX,00000000Ch
 0000638C  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006393  8B 84 28			mov	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 0000639A  8B F1			mov	ESI,ECX
 0000639C  8D 9D FFFFFC34		lea	EBX,dword ptr [EBP-03CCh]
 000063A2  8B FB			mov	EDI,EBX 
 000063A4  B9 0000000C			mov	ECX,00000000Ch 
 000063A9  FC				cld	
 000063AA  F3/ A4			rep movsb	

				;{1521}:Console::WriteLn("Circle.Radius = 3.14 = ", dest.Radius);
 000063AC  8D 05 00000802 R		lea	EAX,OFFSET $S001344
 000063B2  6A 00			push	000000000h
 000063B4  50				push	EAX 
 000063B5  E8 00000000 E		call	 Console_WriteString
 000063BA  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 000063C0  E8 FFFFA32D			call	 UnitTesting_Circle_get_Radius
 000063C5  50				push	EAX 
 000063C6  52				push	EDX 
 000063C7  E8 00000000 E		call	 Console_WriteDouble 
 000063CC  E8 00000000 E		call	 Console_WriteCrLf 

				;{1523}:objs[0]= dest;
 000063D1  33 C0			xor	EAX,EAX
 000063D3  6B C0 0C			imul	EAX,EAX,00000000Ch
 000063D6  8D 84 28			lea	EAX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 000063DD  50				push	EAX
 000063DE  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 000063E4  8B F1			mov	ESI,ECX
 000063E6  5F				pop	EDI
 000063E7  B9 0000000C			mov	ECX,00000000Ch 
 000063EC  FC				cld	
 000063ED  F3/ A4			rep movsb	

				;{1525}:Console::WriteLn("Circle[0].Radius = 3.14 = ", objs[0].Radius);
 000063EF  8D 05 0000081A R		lea	EAX,OFFSET $S001345
 000063F5  6A 00			push	000000000h
 000063F7  50				push	EAX 
 000063F8  E8 00000000 E		call	 Console_WriteString
 000063FD  33 C0			xor	EAX,EAX
 000063FF  6B C0 0C			imul	EAX,EAX,00000000Ch
 00006402  8D 8C 28			lea	ECX,dword ptr [EBP+EAX-03C0h]
	   FFFFFC40
 00006409  E8 FFFFA2E4			call	 UnitTesting_Circle_get_Radius
 0000640E  50				push	EAX 
 0000640F  52				push	EDX 
 00006410  E8 00000000 E		call	 Console_WriteDouble 
 00006415  E8 00000000 E		call	 Console_WriteCrLf 

				;{1527}:xptr= null;
 0000641A  33 C0			xor	EAX,EAX
 0000641C  8D 9D FFFFFC30		lea	EBX,dword ptr [EBP-03D0h]
 00006422  89 03			mov	dword ptr [EBX],EAX

				;{1529}:xptr= new int;
 00006424  6A 04			push	000000004h
 00006426  E8 00000000 E		call	 System_Memory_New
 0000642B  85 C0			test	EAX,EAX
 0000642D  74 12			jz	 $L001680
 0000642F  8B F0			mov	ESI,EAX
 00006431  8D 3E			lea	EDI,dword ptr [ESI]
 00006433  B9 00000001			mov	ECX,000000001h 
 00006438  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 0000643D  F3/ AB			rep stos	dword ptr [EDI]
 0000643F  EB 02			jmp	 $L001681
 00006441			$L001680:
 00006441  33 F6			xor	ESI,ESI
 00006443			$L001681:
 00006443  89 B5 FFFFFC30		mov	dword ptr [EBP-03D0h],ESI 

				;{1531}:if(false == bUnattended)
 00006449  33 C0			xor	EAX,EAX
 0000644B  50				push	EAX
 0000644C  0F B6 45 F8			movzx	EAX,byte ptr [EBP-0008h]
 00006450  5A				pop	EDX
 00006451  3A D0			cmp	DL,AL
 00006453  0F 94 C0			setz	AL
 00006456  84 C0			test	AL,AL
 00006458  74 0F			jz	OFFSET $L001682

				;{1532}:hello.ShowHello("H++ Unit Testing : Fourth Phase");
 0000645A  8D 05 000009EF R		lea	EAX,OFFSET $S001347
 00006460  50				push	EAX
 00006461  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00006464  E8 FFFFA6CC			call	 UnitTesting_HelloWorld_ShowHello
 00006469			$L001682:

				;{1536}:npi= sizeof (UnitTesting::misc1::pi);
 00006469  B8 00000008			mov	EAX,000000008h
 0000646E  89 85 FFFFFC2C		mov	dword ptr [EBP-03D4h],EAX

				;{1538}:npi= sizeof UnitTesting::misc1::pi;
 00006474  B8 00000008			mov	EAX,000000008h
 00006479  89 85 FFFFFC2C		mov	dword ptr [EBP-03D4h],EAX

				;{1540}:nint= sizeof (int), ndbl= sizeof (double), ni64= sizeof Int64, ntit= sizeof (UnitTesting::TestIntegers), nptr= sizeof (p), narr= sizeof (iptr), nar2= sizeof (array1), nar3= sizeof (UnitTesting::misc1::array);
 0000647F  B8 00000004			mov	EAX,000000004h
 00006484  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX
 0000648A  B8 00000008			mov	EAX,000000008h
 0000648F  89 85 FFFFFC24		mov	dword ptr [EBP-03DCh],EAX
 00006495  B8 00000008			mov	EAX,000000008h
 0000649A  89 85 FFFFFC20		mov	dword ptr [EBP-03E0h],EAX
 000064A0  B8 00000030			mov	EAX,000000030h
 000064A5  89 85 FFFFFC1C		mov	dword ptr [EBP-03E4h],EAX
 000064AB  B8 00000004			mov	EAX,000000004h
 000064B0  89 85 FFFFFC18		mov	dword ptr [EBP-03E8h],EAX
 000064B6  B8 00000004			mov	EAX,000000004h
 000064BB  89 85 FFFFFC14		mov	dword ptr [EBP-03ECh],EAX
 000064C1  B8 00000050			mov	EAX,000000050h
 000064C6  89 85 FFFFFC10		mov	dword ptr [EBP-03F0h],EAX
 000064CC  B8 00000050			mov	EAX,SIZEOF UnitTesting_misc1_array
 000064D1  89 85 FFFFFC0C		mov	dword ptr [EBP-03F4h],EAX

				;{1549}:nint= sizeof int + sizeof double;
 000064D7  B8 00000004			mov	EAX,000000004h
 000064DC  50				push	EAX
 000064DD  B8 00000008			mov	EAX,000000008h
 000064E2  5A				pop	EDX
 000064E3  03 C2			add	EAX,EDX
 000064E5  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX

				;{1551}:nint= sizeof (int) + sizeof (Int64);
 000064EB  B8 00000004			mov	EAX,000000004h
 000064F0  50				push	EAX
 000064F1  B8 00000008			mov	EAX,000000008h
 000064F6  5A				pop	EDX
 000064F7  03 C2			add	EAX,EDX
 000064F9  89 85 FFFFFC28		mov	dword ptr [EBP-03D8h],EAX

				;{1553}:if(nint >= ndbl && ni64 < ntit)
 000064FF  8B 85 FFFFFC28		mov	EAX,dword ptr [EBP-03D8h]
 00006505  50				push	EAX
 00006506  8B 85 FFFFFC24		mov	EAX,dword ptr [EBP-03DCh]
 0000650C  5A				pop	EDX
 0000650D  3B D0			cmp	EDX,EAX
 0000650F  0F 9D C0			setge	AL
 00006512  84 C0			test	AL,AL
 00006514  74 13			jz	OFFSET $L001686
 00006516  8B 85 FFFFFC20		mov	EAX,dword ptr [EBP-03E0h]
 0000651C  50				push	EAX
 0000651D  8B 85 FFFFFC1C		mov	EAX,dword ptr [EBP-03E4h]
 00006523  5A				pop	EDX
 00006524  3B D0			cmp	EDX,EAX
 00006526  0F 9C C0			setl	AL
 00006529			$L001686:
 00006529  84 C0			test	AL,AL
 0000652B  74 13			jz	OFFSET $L001684
				;{

				;{1555}:Console::WriteLn("This is getting complex and better each time!");
 0000652D  8D 05 00000D30 R		lea	EAX,OFFSET $S001357
 00006533  6A 00			push	000000000h
 00006535  50				push	EAX 
 00006536  E8 00000000 E		call	 Console_WriteString
 0000653B  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006540			$L001684:

				;{1558}:destroy xptr;
 00006540  8B 85 FFFFFC30		mov	EAX,dword ptr [EBP-976]
 00006546  85 C0			test	EAX,EAX
 00006548  74 06			jz	OFFSET $L001687
 0000654A  50				push	EAX
 0000654B  E8 00000000 E		call	 System_Memory_Destroy
 00006550			$L001687:

				;{1560}:ii2ptr= null;
 00006550  33 C0			xor	EAX,EAX
 00006552  8D 9D FFFFFC08		lea	EBX,dword ptr [EBP-03F8h]
 00006558  89 03			mov	dword ptr [EBX],EAX

				;{1562}:xptr= xptr + 1;
 0000655A  8B 85 FFFFFC30		mov	EAX,dword ptr [EBP-976]
 00006560  50				push	EAX
 00006561  B8 00000001			mov	EAX,000000001h
 00006566  5A				pop	EDX
 00006567  03 C2			add	EAX,EDX
 00006569  8D 9D FFFFFC30		lea	EBX,dword ptr [EBP-03D0h]
 0000656F  89 03			mov	dword ptr [EBX],EAX

				;{1565}:name1= "Harold", name2= "Harold L.", name3= "Harold L. Marzan", name4= name1;
 00006571  8D 05 00000A71 R		lea	EAX,OFFSET $S001360
 00006577  89 85 FFFFFC04		mov	dword ptr [EBP-03FCh],EAX
 0000657D  8D 05 00000A67 R		lea	EAX,OFFSET $S001362
 00006583  89 85 FFFFFC00		mov	dword ptr [EBP-0400h],EAX
 00006589  8D 05 00000A56 R		lea	EAX,OFFSET $S001150
 0000658F  89 85 FFFFFBFC		mov	dword ptr [EBP-0404h],EAX
 00006595  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 0000659B  89 85 FFFFFBF8		mov	dword ptr [EBP-0408h],EAX

				;{1570}:if(name1 <= name2)
 000065A1  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 000065A7  50				push	EAX
 000065A8  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 000065AE  5F				pop	EDI
 000065AF  8B F0			mov	ESI,EAX
 000065B1  50				push	EAX
 000065B2  E8 00000000 E		call	 StringHandling_StringLength
 000065B7  50				push	EAX 
 000065B8  56				push	ESI 
 000065B9  57				push	EDI 
 000065BA  E8 00000000 E		call	 StringHandling_StringCompare 
 000065BF  83 F8 00			cmp	EAX,000000000h
 000065C2  0F 9E C0			setle	AL
 000065C5  84 C0			test	AL,AL
 000065C7  74 13			jz	OFFSET $L001688
				;{

				;{1572}:Console::WriteLn("name1 =< name2");
 000065C9  8D 05 00000FF5 R		lea	EAX,OFFSET $S001365
 000065CF  6A 00			push	000000000h
 000065D1  50				push	EAX 
 000065D2  E8 00000000 E		call	 Console_WriteString
 000065D7  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000065DC			$L001688:

				;{1574}:if(StringHandling::StringLength(name3) > StringHandling::StringLength(name2))
 000065DC  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 000065E2  50				push	EAX
 000065E3  E8 00000000 E		call	 StringHandling_StringLength
 000065E8  50				push	EAX
 000065E9  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 000065EF  50				push	EAX
 000065F0  E8 00000000 E		call	 StringHandling_StringLength
 000065F5  5A				pop	EDX
 000065F6  3B D0			cmp	EDX,EAX
 000065F8  0F 9F C0			setg	AL
 000065FB  84 C0			test	AL,AL
 000065FD  74 13			jz	OFFSET $L001690
				;{

				;{1576}:Console::WriteLn("name3.length > name2.length");
 000065FF  8D 05 00001013 R		lea	EAX,OFFSET $S001366
 00006605  6A 00			push	000000000h
 00006607  50				push	EAX 
 00006608  E8 00000000 E		call	 Console_WriteString
 0000660D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006612			$L001690:

				;{1579}:if(name2 <= name3)
 00006612  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 00006618  50				push	EAX
 00006619  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 0000661F  5F				pop	EDI
 00006620  8B F0			mov	ESI,EAX
 00006622  50				push	EAX
 00006623  E8 00000000 E		call	 StringHandling_StringLength
 00006628  50				push	EAX 
 00006629  56				push	ESI 
 0000662A  57				push	EDI 
 0000662B  E8 00000000 E		call	 StringHandling_StringCompare 
 00006630  83 F8 00			cmp	EAX,000000000h
 00006633  0F 9E C0			setle	AL
 00006636  84 C0			test	AL,AL
 00006638  74 13			jz	OFFSET $L001692
				;{

				;{1581}:Console::WriteLn("name2 <= name3");
 0000663A  8D 05 00001004 R		lea	EAX,OFFSET $S001367
 00006640  6A 00			push	000000000h
 00006642  50				push	EAX 
 00006643  E8 00000000 E		call	 Console_WriteString
 00006648  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000664D			$L001692:

				;{1585}:if(!(name3 < name2))
 0000664D  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006653  50				push	EAX
 00006654  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 0000665A  5F				pop	EDI
 0000665B  8B F0			mov	ESI,EAX
 0000665D  50				push	EAX
 0000665E  E8 00000000 E		call	 StringHandling_StringLength
 00006663  50				push	EAX 
 00006664  56				push	ESI 
 00006665  57				push	EDI 
 00006666  E8 00000000 E		call	 StringHandling_StringCompare 
 0000666B  83 F8 00			cmp	EAX,000000000h
 0000666E  0F 9C C0			setl	AL
 00006671  F7 D8			neg	EAX
 00006673  F7 D0			not	EAX
 00006675  84 C0			test	AL,AL
 00006677  74 13			jz	OFFSET $L001694
				;{

				;{1587}:Console::WriteLn("!(name3 < name2)");
 00006679  8D 05 0000016D R		lea	EAX,OFFSET $S001368
 0000667F  6A 00			push	000000000h
 00006681  50				push	EAX 
 00006682  E8 00000000 E		call	 Console_WriteString
 00006687  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000668C			$L001694:

				;{1590}:if(false == !(name2 < name3))
 0000668C  33 C0			xor	EAX,EAX
 0000668E  50				push	EAX
 0000668F  8B 85 FFFFFC00		mov	EAX,dword ptr [EBP-0400h]
 00006695  50				push	EAX
 00006696  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 0000669C  5F				pop	EDI
 0000669D  8B F0			mov	ESI,EAX
 0000669F  50				push	EAX
 000066A0  E8 00000000 E		call	 StringHandling_StringLength
 000066A5  50				push	EAX 
 000066A6  56				push	ESI 
 000066A7  57				push	EDI 
 000066A8  E8 00000000 E		call	 StringHandling_StringCompare 
 000066AD  83 F8 00			cmp	EAX,000000000h
 000066B0  0F 9C C0			setl	AL
 000066B3  F7 D8			neg	EAX
 000066B5  F7 D0			not	EAX
 000066B7  5A				pop	EDX
 000066B8  3A D0			cmp	DL,AL
 000066BA  0F 94 C0			setz	AL
 000066BD  84 C0			test	AL,AL
 000066BF  74 13			jz	OFFSET $L001696
				;{

				;{1592}:Console::WriteLn("false==!(name2 < name3)");
 000066C1  8D 05 00000F3C R		lea	EAX,OFFSET $S001369
 000066C7  6A 00			push	000000000h
 000066C9  50				push	EAX 
 000066CA  E8 00000000 E		call	 Console_WriteString
 000066CF  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 000066D4			$L001696:

				;{1595}:if(name1 == name4)
 000066D4  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 000066DA  50				push	EAX
 000066DB  8B 85 FFFFFBF8		mov	EAX,dword ptr [EBP-0408h]
 000066E1  5F				pop	EDI
 000066E2  8B F0			mov	ESI,EAX
 000066E4  50				push	EAX
 000066E5  E8 00000000 E		call	 StringHandling_StringLength
 000066EA  50				push	EAX 
 000066EB  56				push	ESI 
 000066EC  57				push	EDI 
 000066ED  E8 00000000 E		call	 StringHandling_StringCompare 
 000066F2  83 F8 00			cmp	EAX,000000000h
 000066F5  0F 94 C0			setz	AL
 000066F8  84 C0			test	AL,AL
 000066FA  74 13			jz	OFFSET $L001698
				;{

				;{1597}:Console::WriteLn("It's working as designed!");
 000066FC  8D 05 00000AD3 R		lea	EAX,OFFSET $S001370
 00006702  6A 00			push	000000000h
 00006704  50				push	EAX 
 00006705  E8 00000000 E		call	 Console_WriteString
 0000670A  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000670F			$L001698:

				;{1600}:if(name1 == name3)
 0000670F  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 00006715  50				push	EAX
 00006716  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 0000671C  5F				pop	EDI
 0000671D  8B F0			mov	ESI,EAX
 0000671F  50				push	EAX
 00006720  E8 00000000 E		call	 StringHandling_StringLength
 00006725  50				push	EAX 
 00006726  56				push	ESI 
 00006727  57				push	EDI 
 00006728  E8 00000000 E		call	 StringHandling_StringCompare 
 0000672D  83 F8 00			cmp	EAX,000000000h
 00006730  0F 94 C0			setz	AL
 00006733  84 C0			test	AL,AL
 00006735  74 13			jz	OFFSET $L001700
				;{

				;{1602}:Console::WriteLn("I should never get here!");
 00006737  8D 05 00000A90 R		lea	EAX,OFFSET $S001371
 0000673D  6A 00			push	000000000h
 0000673F  50				push	EAX 
 00006740  E8 00000000 E		call	 Console_WriteString
 00006745  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 0000674A			$L001700:

				;{1605}:if(name1 != name3)
 0000674A  8B 85 FFFFFC04		mov	EAX,dword ptr [EBP-03FCh]
 00006750  50				push	EAX
 00006751  8B 85 FFFFFBFC		mov	EAX,dword ptr [EBP-0404h]
 00006757  5F				pop	EDI
 00006758  8B F0			mov	ESI,EAX
 0000675A  50				push	EAX
 0000675B  E8 00000000 E		call	 StringHandling_StringLength
 00006760  50				push	EAX 
 00006761  56				push	ESI 
 00006762  57				push	EDI 
 00006763  E8 00000000 E		call	 StringHandling_StringCompare 
 00006768  83 F8 00			cmp	EAX,000000000h
 0000676B  0F 95 C0			setnz	AL
 0000676E  84 C0			test	AL,AL
 00006770  74 13			jz	OFFSET $L001702
				;{

				;{1607}:Console::WriteLn("Yes (name1 != name3)!");
 00006772  8D 05 00000D89 R		lea	EAX,OFFSET $S001372
 00006778  6A 00			push	000000000h
 0000677A  50				push	EAX 
 0000677B  E8 00000000 E		call	 Console_WriteString
 00006780  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006785			$L001702:

				;{1611}:UnitTesting::TestIntegers::bigValue*= 4;
 00006785  B8 00000004			mov	EAX,000000004h
 0000678A  99				cdq	
 0000678B  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 00006791  52				push	EDX
 00006792  50				push	EAX 
 00006793  DF 2C 24			fild	qword ptr [ESP]
 00006796  DF 2B			fild	qword ptr [EBX]
 00006798  D8 C9			fmul	st,st(1)
 0000679A  DF 3C 24			fistp	qword ptr [ESP]
 0000679D  58				pop	EAX
 0000679E  5A				pop	EDX 
 0000679F  89 53 04			mov	dword ptr [EBX+4],EDX
 000067A2  89 03			mov	dword ptr [EBX],EAX 

				;{1614}:UnitTesting::TestIntegers::bigValue/= 4;
 000067A4  B8 00000004			mov	EAX,000000004h
 000067A9  99				cdq	
 000067AA  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 000067B0  52				push	EDX
 000067B1  50				push	EAX 
 000067B2  DF 2C 24			fild	qword ptr [ESP]
 000067B5  DF 2B			fild	qword ptr [EBX]
 000067B7  D8 F1			fdiv	st,st(1)
 000067B9  D9 FC			frndint
 000067BB  DF 3C 24			fistp	qword ptr [ESP]
 000067BE  58				pop	EAX
 000067BF  5A				pop	EDX 
 000067C0  89 53 04			mov	dword ptr [EBX+4],EDX
 000067C3  89 03			mov	dword ptr [EBX],EAX 

				;{1617}:UnitTesting::TestIntegers::bigValue+= 1024;
 000067C5  B8 00000400			mov	EAX,000000400h
 000067CA  F8				clc	
 000067CB  99				cdq	
 000067CC  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 000067D2  01 03			add	dword ptr [EBX],EAX
 000067D4  11 53 04			adc	dword ptr [EBX+4],EDX

				;{1620}:UnitTesting::TestIntegers::bigValue-= 1024;
 000067D7  B8 00000400			mov	EAX,000000400h
 000067DC  F8				clc	
 000067DD  99				cdq	
 000067DE  8D 1D 00001274 R		lea	EBX,OFFSET UnitTesting_TestIntegers_bigValue
 000067E4  29 03			sub	dword ptr [EBX],EAX
 000067E6  19 53 04			sbb	dword ptr [EBX+4],EDX

				;{1623}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Circle");
 000067E9  8D 05 000007DB R		lea	EAX,OFFSET $S000652
 000067EF  50				push	EAX
 000067F0  E8 FFFFAAA5			call	 UnitTesting_ShapeFactoryCreator_Create
 000067F5  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 000067FB  89 03			mov	dword ptr [EBX],EAX

				;{1625}:obj_ptr.Draw();
 000067FD  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006803  8B 11			mov	EDX,dword ptr [ECX]
 00006805  FF 52 0C			call	dword ptr [EDX+000Ch]

				;{1627}:visitor;

				;{1628}:visitor.Visit(obj_ptr);
 00006808  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 0000680E  50				push	EAX
 0000680F  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 00006815  E8 FFFFDD1F			call	 UnitTesting_Visitor_Visit

				;{1630}:circl= dynamic_cast(obj_ptr);
 0000681A  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 00006820  8D 9D FFFFFBEC		lea	EBX,dword ptr [EBP-0414h]
 00006826  89 03			mov	dword ptr [EBX],EAX

				;{1632}:circl= dynamic_cast(UnitTesting::Circle, obj_ptr);
 00006828  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 0000682E  8D 9D FFFFFBEC		lea	EBX,dword ptr [EBP-0414h]
 00006834  89 03			mov	dword ptr [EBX],EAX

				;{1637}:circl.DrawSphere();
 00006836  8B 8D FFFFFBEC		mov	ECX,dword ptr [EBP-1044]
 0000683C  8B 11			mov	EDX,dword ptr [ECX]
 0000683E  FF 52 14			call	dword ptr [EDX+0014h]

				;{1639}:destroy dynamic_cast(UnitTesting::Circle, obj_ptr);
 00006841  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006847  8B F1			mov	ESI,ECX
 00006849  85 C9			test	ECX,ECX
 0000684B  74 05			jz	OFFSET $L001705
 0000684D  8B 01			mov	EAX,dword ptr [ECX] 
 0000684F  FF 50 10			call	dword ptr [EAX+0010h]
 00006852			$L001705:
 00006852  56				push	ESI
 00006853  E8 00000000 E		call	 System_Memory_Destroy

				;{1643}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Square");
 00006858  8D 05 00000BE2 R		lea	EAX,OFFSET $S000678
 0000685E  50				push	EAX
 0000685F  E8 FFFFAA36			call	 UnitTesting_ShapeFactoryCreator_Create
 00006864  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 0000686A  89 03			mov	dword ptr [EBX],EAX

				;{1644}:visitor.Visit(obj_ptr);
 0000686C  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 00006872  50				push	EAX
 00006873  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 00006879  E8 FFFFDCBB			call	 UnitTesting_Visitor_Visit

				;{1646}:destroy obj_ptr;
 0000687E  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 00006884  8B F1			mov	ESI,ECX
 00006886  85 C9			test	ECX,ECX
 00006888  74 05			jz	OFFSET $L001707
 0000688A  8B 01			mov	EAX,dword ptr [ECX] 
 0000688C  FF 50 10			call	dword ptr [EAX+0010h]
 0000688F			$L001707:
 0000688F  56				push	ESI
 00006890  E8 00000000 E		call	 System_Memory_Destroy

				;{1648}:obj_ptr= UnitTesting::ShapeFactoryCreator::Create("Triangle");
 00006895  8D 05 00000D80 R		lea	EAX,OFFSET $S000698
 0000689B  50				push	EAX
 0000689C  E8 FFFFA9F9			call	 UnitTesting_ShapeFactoryCreator_Create
 000068A1  8D 9D FFFFFBF4		lea	EBX,dword ptr [EBP-040Ch]
 000068A7  89 03			mov	dword ptr [EBX],EAX

				;{1649}:visitor.Visit(obj_ptr);
 000068A9  8B 85 FFFFFBF4		mov	EAX,dword ptr [EBP-1036]
 000068AF  50				push	EAX
 000068B0  8D 8D FFFFFBF0		lea	ECX,dword ptr [EBP-0410h]
 000068B6  E8 FFFFDC7E			call	 UnitTesting_Visitor_Visit

				;{1651}:destroy obj_ptr;
 000068BB  8B 8D FFFFFBF4		mov	ECX,dword ptr [EBP-1036]
 000068C1  8B F1			mov	ESI,ECX
 000068C3  85 C9			test	ECX,ECX
 000068C5  74 05			jz	OFFSET $L001709
 000068C7  8B 01			mov	EAX,dword ptr [ECX] 
 000068C9  FF 50 10			call	dword ptr [EAX+0010h]
 000068CC			$L001709:
 000068CC  56				push	ESI
 000068CD  E8 00000000 E		call	 System_Memory_Destroy

				;{1654}:testProp;
 000068D2  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 000068D8  E8 FFFFD70E			call	 UnitTesting_TestProperties

				;{1656}:shapes= new UnitTesting::Circle[20];
 000068DD  B8 00000014			mov	EAX,000000014h
 000068E2  6B C0 0C			imul	EAX,00000000Ch
 000068E5  8D 58 04			lea	EBX,dword ptr [EAX+4]
 000068E8  53				push	EBX
 000068E9  8B D8			mov	EBX,EAX
 000068EB  E8 00000000 E		call	 System_Memory_New
 000068F0  85 C0			test	EAX,EAX
 000068F2  74 14			jz	 $L001710
 000068F4  8B F0			mov	ESI,EAX 
 000068F6  8D 3E			lea	EDI,dword ptr [ESI]
 000068F8  8B CB			mov	ECX,EBX 
 000068FA  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 000068FF  F3/ AA			rep stos	byte ptr [EDI]
 00006901  89 1E			mov	dword ptr [ESI],EBX 
 00006903  83 C6 04			add	ESI,000000004h
 00006906  EB 02			jmp	 $L001711
 00006908			$L001710:
 00006908  33 F6			xor	ESI,ESI
 0000690A			$L001711:
 0000690A  89 B5 FFFFFB9C		mov	dword ptr [EBP-0464h],ESI 
 00006910  8B 4E FC	mov	ECX,dword ptr [ESI-0004h] 
 00006913  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00006916  8B DE			mov	EBX,ESI 
 00006918			$L001712:
 00006918  8B CB			mov	ECX,EBX 
 0000691A  E8 FFFF9E1E			call	 UnitTesting_Circle
 0000691F  83 C3 0C			add	EBX,00000000Ch 
 00006922  3B DF			cmp	EBX,EDI
 00006924  75 F2			jnz	OFFSET $L001712
 00006926  8B C6			mov	EAX,ESI 

				;{1657}:testProp.Shapes= shapes;
 00006928  8B 85 FFFFFB9C		mov	EAX,dword ptr [EBP-1124]
 0000692E  50				push	EAX
 0000692F  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 00006935  E8 FFFFD2F6			call	 UnitTesting_TestProperties_put_Shapes

				;{1659}:sorter;

				;{1660}:n= 10;
 0000693A  B8 0000000A			mov	EAX,00000000Ah
 0000693F  89 45 AC			mov	dword ptr [EBP-0054h],EAX

				;{1661}:array= new UnitTesting::DoubleProxy[n];
 00006942  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006945  6B C0 0C			imul	EAX,00000000Ch
 00006948  8D 58 04			lea	EBX,dword ptr [EAX+4]
 0000694B  53				push	EBX
 0000694C  8B D8			mov	EBX,EAX
 0000694E  E8 00000000 E		call	 System_Memory_New
 00006953  85 C0			test	EAX,EAX
 00006955  74 14			jz	 $L001713
 00006957  8B F0			mov	ESI,EAX 
 00006959  8D 3E			lea	EDI,dword ptr [ESI]
 0000695B  8B CB			mov	ECX,EBX 
 0000695D  B8 CDCDCDCD			mov	EAX,0CDCDCDCDh 
 00006962  F3/ AA			rep stos	byte ptr [EDI]
 00006964  89 1E			mov	dword ptr [ESI],EBX 
 00006966  83 C6 04			add	ESI,000000004h
 00006969  EB 02			jmp	 $L001714
 0000696B			$L001713:
 0000696B  33 F6			xor	ESI,ESI
 0000696D			$L001714:
 0000696D  89 B5 FFFFFB94		mov	dword ptr [EBP-046Ch],ESI 
 00006973  8B 4E FC			mov	ECX,dword ptr [ESI-0004h] 
 00006976  8D 3C 31			lea	EDI,dword ptr [ESI+ECX] 
 00006979  8B DE			mov	EBX,ESI 
 0000697B			$L001715:
 0000697B  8B CB			mov	ECX,EBX 
 0000697D  E8 FFFF9E6C			call	 UnitTesting_DoubleProxy
 00006982  83 C3 0C			add	EBX,00000000Ch 
 00006985  3B DF			cmp	EBX,EDI
 00006987  75 F2			jnz	OFFSET $L001715
 00006989  8B C6			mov	EAX,ESI 

				;{1663}:array[0].val= 19.2;
 0000698B  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006991  50				push	EAX
 00006992  33 C0			xor	EAX,EAX
 00006994  5E				pop	ESI
 00006995  6B C0 0C			imul	EAX,00000000Ch
 00006998  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 0000699B  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 0000699E  50				push	EAX
 0000699F  BA 33333334			mov	EDX,033333334h
 000069A4  B8 40333333			mov	EAX,040333333h 
 000069A9  50				push	EAX
 000069AA  52				push	EDX 
 000069AB  DD 04 24			fld	qword ptr [ESP]
 000069AE  5A				pop	EDX
 000069AF  58				pop	EAX 
 000069B0  5B				pop	EBX
 000069B1  DD 1B			fstp	qword ptr [EBX]

				;{1664}:array[1].val= 3.2345;
 000069B3  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 000069B9  50				push	EAX
 000069BA  B8 00000001			mov	EAX,000000001h
 000069BF  5E				pop	ESI
 000069C0  6B C0 0C			imul	EAX,00000000Ch
 000069C3  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000069C6  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000069C9  50				push	EAX
 000069CA  BA 89374BC7			mov	EDX,089374BC7h
 000069CF  B8 4009E041			mov	EAX,04009E041h 
 000069D4  50				push	EAX
 000069D5  52				push	EDX 
 000069D6  DD 04 24			fld	qword ptr [ESP]
 000069D9  5A				pop	EDX
 000069DA  58				pop	EAX 
 000069DB  5B				pop	EBX
 000069DC  DD 1B			fstp	qword ptr [EBX]

				;{1665}:array[2].val= 6.3456;
 000069DE  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 000069E4  50				push	EAX
 000069E5  B8 00000002			mov	EAX,000000002h
 000069EA  5E				pop	ESI
 000069EB  6B C0 0C			imul	EAX,00000000Ch
 000069EE  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 000069F1  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 000069F4  50				push	EAX
 000069F5  BA F765FD8B			mov	EDX,0F765FD8Bh
 000069FA  B8 401961E4			mov	EAX,0401961E4h 
 000069FF  50				push	EAX
 00006A00  52				push	EDX 
 00006A01  DD 04 24			fld	qword ptr [ESP]
 00006A04  5A				pop	EDX
 00006A05  58				pop	EAX 
 00006A06  5B				pop	EBX
 00006A07  DD 1B			fstp	qword ptr [EBX]

				;{1666}:array[3].val= 11.5676;
 00006A09  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A0F  50				push	EAX
 00006A10  B8 00000003			mov	EAX,000000003h
 00006A15  5E				pop	ESI
 00006A16  6B C0 0C			imul	EAX,00000000Ch
 00006A19  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A1C  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A1F  50				push	EAX
 00006A20  BA 779A6B51			mov	EDX,0779A6B51h
 00006A25  B8 4027229C			mov	EAX,04027229Ch 
 00006A2A  50				push	EAX
 00006A2B  52				push	EDX 
 00006A2C  DD 04 24			fld	qword ptr [ESP]
 00006A2F  5A				pop	EDX
 00006A30  58				pop	EAX 
 00006A31  5B				pop	EBX
 00006A32  DD 1B			fstp	qword ptr [EBX]

				;{1667}:array[4].val= 7.2345;
 00006A34  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A3A  50				push	EAX
 00006A3B  B8 00000004			mov	EAX,000000004h
 00006A40  5E				pop	ESI
 00006A41  6B C0 0C			imul	EAX,00000000Ch
 00006A44  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A47  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A4A  50				push	EAX
 00006A4B  BA C49BA5E4			mov	EDX,0C49BA5E4h
 00006A50  B8 401CF020			mov	EAX,0401CF020h 
 00006A55  50				push	EAX
 00006A56  52				push	EDX 
 00006A57  DD 04 24			fld	qword ptr [ESP]
 00006A5A  5A				pop	EDX
 00006A5B  58				pop	EAX 
 00006A5C  5B				pop	EBX
 00006A5D  DD 1B			fstp	qword ptr [EBX]

				;{1668}:array[5].val= 12.4567;
 00006A5F  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A65  50				push	EAX
 00006A66  B8 00000005			mov	EAX,000000005h
 00006A6B  5E				pop	ESI
 00006A6C  6B C0 0C			imul	EAX,00000000Ch
 00006A6F  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A72  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006A75  50				push	EAX
 00006A76  BA 95182A9A			mov	EDX,095182A9Ah
 00006A7B  B8 4028E9D4			mov	EAX,04028E9D4h 
 00006A80  50				push	EAX
 00006A81  52				push	EDX 
 00006A82  DD 04 24			fld	qword ptr [ESP]
 00006A85  5A				pop	EDX
 00006A86  58				pop	EAX 
 00006A87  5B				pop	EBX
 00006A88  DD 1B			fstp	qword ptr [EBX]

				;{1669}:array[6].val= 9.2345;
 00006A8A  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006A90  50				push	EAX
 00006A91  B8 00000006			mov	EAX,000000006h
 00006A96  5E				pop	ESI
 00006A97  6B C0 0C			imul	EAX,00000000Ch
 00006A9A  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006A9D  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006AA0  50				push	EAX
 00006AA1  BA 624DD2F2			mov	EDX,0624DD2F2h
 00006AA6  B8 40227810			mov	EAX,040227810h 
 00006AAB  50				push	EAX
 00006AAC  52				push	EDX 
 00006AAD  DD 04 24			fld	qword ptr [ESP]
 00006AB0  5A				pop	EDX
 00006AB1  58				pop	EAX 
 00006AB2  5B				pop	EBX
 00006AB3  DD 1B			fstp	qword ptr [EBX]

				;{1670}:array[7].val= 15.123;
 00006AB5  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006ABB  50				push	EAX
 00006ABC  B8 00000007			mov	EAX,000000007h
 00006AC1  5E				pop	ESI
 00006AC2  6B C0 0C			imul	EAX,00000000Ch
 00006AC5  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006AC8  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006ACB  50				push	EAX
 00006ACC  BA DB22D0E6			mov	EDX,0DB22D0E6h
 00006AD1  B8 402E3EF9			mov	EAX,0402E3EF9h 
 00006AD6  50				push	EAX
 00006AD7  52				push	EDX 
 00006AD8  DD 04 24			fld	qword ptr [ESP]
 00006ADB  5A				pop	EDX
 00006ADC  58				pop	EAX 
 00006ADD  5B				pop	EBX
 00006ADE  DD 1B			fstp	qword ptr [EBX]

				;{1671}:array[8].val= 1.2;
 00006AE0  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006AE6  50				push	EAX
 00006AE7  B8 00000008			mov	EAX,000000008h
 00006AEC  5E				pop	ESI
 00006AED  6B C0 0C			imul	EAX,00000000Ch
 00006AF0  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006AF3  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006AF6  50				push	EAX
 00006AF7  BA 33333334			mov	EDX,033333334h
 00006AFC  B8 3FF33333			mov	EAX,03FF33333h 
 00006B01  50				push	EAX
 00006B02  52				push	EDX 
 00006B03  DD 04 24			fld	qword ptr [ESP]
 00006B06  5A				pop	EDX
 00006B07  58				pop	EAX 
 00006B08  5B				pop	EBX
 00006B09  DD 1B			fstp	qword ptr [EBX]

				;{1672}:array[9].val= 18.1234;
 00006B0B  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006B11  50				push	EAX
 00006B12  B8 00000009			mov	EAX,000000009h
 00006B17  5E				pop	ESI
 00006B18  6B C0 0C			imul	EAX,00000000Ch
 00006B1B  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006B1E  8D 41 04			lea	EAX,dword ptr [ECX+0004h]
 00006B21  50				push	EAX
 00006B22  BA 2474538F			mov	EDX,02474538Fh
 00006B27  B8 40321F97			mov	EAX,040321F97h 
 00006B2C  50				push	EAX
 00006B2D  52				push	EDX 
 00006B2E  DD 04 24			fld	qword ptr [ESP]
 00006B31  5A				pop	EDX
 00006B32  58				pop	EAX 
 00006B33  5B				pop	EBX
 00006B34  DD 1B			fstp	qword ptr [EBX]

				;{1674}:for(index= 0; index < n; index++ )
 00006B36  33 C0			xor	EAX,EAX
 00006B38  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006B3B  EB 06			jmp	OFFSET $L001716
 00006B3D			$L001717:
 00006B3D  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006B40  FF 45 A8			inc	dword ptr [EBP-88]
 00006B43			$L001716:
 00006B43  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006B46  50				push	EAX
 00006B47  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006B4A  5A				pop	EDX
 00006B4B  3B D0			cmp	EDX,EAX
 00006B4D  0F 9C C0			setl	AL
 00006B50  84 C0			test	AL,AL
 00006B52  74 4A			jz	OFFSET $L001718

				;{1675}:Console::WriteLn("array[", index, "]= ", array[index].val);
 00006B54  8D 05 00000E81 R		lea	EAX,OFFSET $S001391
 00006B5A  6A 00			push	000000000h
 00006B5C  50				push	EAX 
 00006B5D  E8 00000000 E		call	 Console_WriteString
 00006B62  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006B65  50				push	EAX 
 00006B66  E8 00000000 E		call	 Console_WriteInteger 
 00006B6B  8D 05 00000DCC R		lea	EAX,OFFSET $S001184
 00006B71  6A 00			push	000000000h 
 00006B73  50				push	EAX 
 00006B74  E8 00000000 E		call	 Console_WriteString 
 00006B79  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006B7F  50				push	EAX
 00006B80  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006B83  5E				pop	ESI
 00006B84  6B C0 0C			imul	EAX,00000000Ch
 00006B87  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006B8A  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00006B8D  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00006B90  50				push	EAX 
 00006B91  52				push	EDX 
 00006B92  E8 00000000 E		call	 Console_WriteDouble 
 00006B97  E8 00000000 E		call	 Console_WriteCrLf 
 00006B9C  EB 9F			jmp	OFFSET $L001717 
 00006B9E			$L001718:

				;{1677}:sorter.PrintObject(array[9]);
 00006B9E  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006BA4  50				push	EAX
 00006BA5  B8 00000009			mov	EAX,000000009h
 00006BAA  5E				pop	ESI
 00006BAB  6B C0 0C			imul	EAX,00000000Ch
 00006BAE  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006BB1  51				push	ECX
 00006BB2  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006BB8  E8 FFFFA86A			call	 UnitTesting_SortDoubleProxy_PrintObject

				;{1679}:swapper;
 00006BBD  8D 8D FFFFFB90		lea	ECX,dword ptr [EBP-0470h]
 00006BC3  E8 FFFF9EE4			call	 UnitTesting_DoubleSwapper

				;{1681}:sorter.Sort(array, n, swapper);
 00006BC8  8D 85 FFFFFB90		lea	EAX,dword ptr [EBP-0470h]
 00006BCE  50				push	EAX
 00006BCF  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006BD2  50				push	EAX 
 00006BD3  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006BD9  50				push	EAX
 00006BDA  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006BE0  E8 FFFFA892			call	 UnitTesting_SortDoubleProxy_Sort

				;{1683}:sorter.SortEx(array, n, swapper);
 00006BE5  8D 85 FFFFFB90		lea	EAX,dword ptr [EBP-0470h]
 00006BEB  50				push	EAX
 00006BEC  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006BEF  50				push	EAX 
 00006BF0  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006BF6  50				push	EAX
 00006BF7  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006BFD  E8 FFFFAA51			call	 UnitTesting_SortDoubleProxy_SortEx

				;{1685}:Console::WriteLn("Now sorted:");
 00006C02  8D 05 00000B22 R		lea	EAX,OFFSET $S001393
 00006C08  6A 00			push	000000000h
 00006C0A  50				push	EAX 
 00006C0B  E8 00000000 E		call	 Console_WriteString
 00006C10  E8 00000000 E		call	 Console_WriteCrLf 

				;{1687}:for(index= 0; index < n; index++ )
 00006C15  33 C0			xor	EAX,EAX
 00006C17  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006C1A  EB 06			jmp	OFFSET $L001719
 00006C1C			$L001720:
 00006C1C  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006C1F  FF 45 A8			inc	dword ptr [EBP-88]
 00006C22			$L001719:
 00006C22  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006C25  50				push	EAX
 00006C26  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006C29  5A				pop	EDX
 00006C2A  3B D0			cmp	EDX,EAX
 00006C2C  0F 9C C0			setl	AL
 00006C2F  84 C0			test	AL,AL
 00006C31  74 4A			jz	OFFSET $L001721

				;{1688}:Console::WriteLn("array[", index, "]= ", array[index].val);
 00006C33  8D 05 00000E81 R		lea	EAX,OFFSET $S001391
 00006C39  6A 00			push	000000000h
 00006C3B  50				push	EAX 
 00006C3C  E8 00000000 E		call	 Console_WriteString
 00006C41  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006C44  50				push	EAX 
 00006C45  E8 00000000 E		call	 Console_WriteInteger 
 00006C4A  8D 05 00000DCC R		lea	EAX,OFFSET $S001184
 00006C50  6A 00			push	000000000h 
 00006C52  50				push	EAX 
 00006C53  E8 00000000 E		call	 Console_WriteString 
 00006C58  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006C5E  50				push	EAX
 00006C5F  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006C62  5E				pop	ESI
 00006C63  6B C0 0C			imul	EAX,00000000Ch
 00006C66  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006C69  8B 41 08			mov	EAX,dword ptr [ECX+0008h]
 00006C6C  8B 51 04			mov	EDX,dword ptr [ECX+0004h] 
 00006C6F  50				push	EAX 
 00006C70  52				push	EDX 
 00006C71  E8 00000000 E		call	 Console_WriteDouble 
 00006C76  E8 00000000 E		call	 Console_WriteCrLf 
 00006C7B  EB 9F			jmp	OFFSET $L001720 
 00006C7D			$L001721:

				;{1690}:sorter.PrintObject(array[9]);
 00006C7D  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006C83  50				push	EAX
 00006C84  B8 00000009			mov	EAX,000000009h
 00006C89  5E				pop	ESI
 00006C8A  6B C0 0C			imul	EAX,00000000Ch
 00006C8D  8D 0C 30			lea	ECX,dword ptr [ESI+EAX]
 00006C90  51				push	ECX
 00006C91  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006C97  E8 FFFFA78B			call	 UnitTesting_SortDoubleProxy_PrintObject

				;{1692}:destroy []array;
 00006C9C  8B 85 FFFFFB94		mov	EAX,dword ptr [EBP-1132]
 00006CA2  85 C0			test	EAX,EAX
 00006CA4  74 25			jz	OFFSET $L001722
 00006CA6  8B F0			mov	ESI,EAX
 00006CA8  8B 4E FC			mov	ECX,dword ptr [ESI-0004h]
 00006CAB  8D 3C 31			lea	EDI,dword ptr [ESI+ECX]
 00006CAE  8B DE			mov	EBX,ESI 
 00006CB0			$L001723:
 00006CB0  8B CB			mov	ECX,EBX 
 00006CB2  85 C9			test	ECX,ECX
 00006CB4  74 05			jz	OFFSET $L001724
 00006CB6  8B 01			mov	EAX,dword ptr [ECX]
 00006CB8  FF 50 0C			call	dword ptr [EAX+000Ch]
 00006CBB			$L001724:
 00006CBB  83 C3 0C			add	EBX,00000000Ch
 00006CBE  3B DF			cmp	EBX,EDI
 00006CC0  75 EE			jnz	OFFSET $L001723

 00006CC2  83 C6 FC			add	ESI,0FFFFFFFCh
 00006CC5  56				push	ESI
 00006CC6  E8 00000000 E		call	 System_Memory_Destroy
 00006CCB			$L001722:

				;{1695}:arr;
 00006CCB  8D 85 FFFFFB40		lea	EAX,dword ptr [EBP-04C0h]

				;{1699}:arr[0]= 19.2;
 00006CD1  33 C0			xor	EAX,EAX
 00006CD3  6B C0 08			imul	EAX,EAX,000000008h
 00006CD6  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006CDD  50				push	EAX
 00006CDE  BA 33333334			mov	EDX,033333334h
 00006CE3  B8 40333333			mov	EAX,040333333h 
 00006CE8  50				push	EAX
 00006CE9  52				push	EDX 
 00006CEA  DD 04 24			fld	qword ptr [ESP]
 00006CED  5A				pop	EDX
 00006CEE  58				pop	EAX 
 00006CEF  5B				pop	EBX
 00006CF0  DD 1B			fstp	qword ptr [EBX]

				;{1700}:arr[1]= 3.2345;
 00006CF2  B8 00000001			mov	EAX,000000001h
 00006CF7  6B C0 08			imul	EAX,EAX,000000008h
 00006CFA  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D01  50				push	EAX
 00006D02  BA 89374BC7			mov	EDX,089374BC7h
 00006D07  B8 4009E041			mov	EAX,04009E041h 
 00006D0C  50				push	EAX
 00006D0D  52				push	EDX 
 00006D0E  DD 04 24			fld	qword ptr [ESP]
 00006D11  5A				pop	EDX
 00006D12  58				pop	EAX 
 00006D13  5B				pop	EBX
 00006D14  DD 1B			fstp	qword ptr [EBX]

				;{1701}:arr[2]= 6.3456;
 00006D16  B8 00000002			mov	EAX,000000002h
 00006D1B  6B C0 08			imul	EAX,EAX,000000008h
 00006D1E  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D25  50				push	EAX
 00006D26  BA F765FD8B			mov	EDX,0F765FD8Bh
 00006D2B  B8 401961E4			mov	EAX,0401961E4h 
 00006D30  50				push	EAX
 00006D31  52				push	EDX 
 00006D32  DD 04 24			fld	qword ptr [ESP]
 00006D35  5A				pop	EDX
 00006D36  58				pop	EAX 
 00006D37  5B				pop	EBX
 00006D38  DD 1B			fstp	qword ptr [EBX]

				;{1702}:arr[3]= 11.5676;
 00006D3A  B8 00000003			mov	EAX,000000003h
 00006D3F  6B C0 08			imul	EAX,EAX,000000008h
 00006D42  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D49  50				push	EAX
 00006D4A  BA 779A6B51			mov	EDX,0779A6B51h
 00006D4F  B8 4027229C			mov	EAX,04027229Ch 
 00006D54  50				push	EAX
 00006D55  52				push	EDX 
 00006D56  DD 04 24			fld	qword ptr [ESP]
 00006D59  5A				pop	EDX
 00006D5A  58				pop	EAX 
 00006D5B  5B				pop	EBX
 00006D5C  DD 1B			fstp	qword ptr [EBX]

				;{1703}:arr[4]= 7.2345;
 00006D5E  B8 00000004			mov	EAX,000000004h
 00006D63  6B C0 08			imul	EAX,EAX,000000008h
 00006D66  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D6D  50				push	EAX
 00006D6E  BA C49BA5E4			mov	EDX,0C49BA5E4h
 00006D73  B8 401CF020			mov	EAX,0401CF020h 
 00006D78  50				push	EAX
 00006D79  52				push	EDX 
 00006D7A  DD 04 24			fld	qword ptr [ESP]
 00006D7D  5A				pop	EDX
 00006D7E  58				pop	EAX 
 00006D7F  5B				pop	EBX
 00006D80  DD 1B			fstp	qword ptr [EBX]

				;{1704}:arr[5]= 12.4567;
 00006D82  B8 00000005			mov	EAX,000000005h
 00006D87  6B C0 08			imul	EAX,EAX,000000008h
 00006D8A  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006D91  50				push	EAX
 00006D92  BA 95182A9A			mov	EDX,095182A9Ah
 00006D97  B8 4028E9D4			mov	EAX,04028E9D4h 
 00006D9C  50				push	EAX
 00006D9D  52				push	EDX 
 00006D9E  DD 04 24			fld	qword ptr [ESP]
 00006DA1  5A				pop	EDX
 00006DA2  58				pop	EAX 
 00006DA3  5B				pop	EBX
 00006DA4  DD 1B			fstp	qword ptr [EBX]

				;{1705}:arr[6]= 9.2345;
 00006DA6  B8 00000006			mov	EAX,000000006h
 00006DAB  6B C0 08			imul	EAX,EAX,000000008h
 00006DAE  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DB5  50				push	EAX
 00006DB6  BA 624DD2F2			mov	EDX,0624DD2F2h
 00006DBB  B8 40227810			mov	EAX,040227810h 
 00006DC0  50				push	EAX
 00006DC1  52				push	EDX 
 00006DC2  DD 04 24			fld	qword ptr [ESP]
 00006DC5  5A				pop	EDX
 00006DC6  58				pop	EAX 
 00006DC7  5B				pop	EBX
 00006DC8  DD 1B			fstp	qword ptr [EBX]

				;{1706}:arr[7]= 15.123;
 00006DCA  B8 00000007			mov	EAX,000000007h
 00006DCF  6B C0 08			imul	EAX,EAX,000000008h
 00006DD2  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DD9  50				push	EAX
 00006DDA  BA DB22D0E6			mov	EDX,0DB22D0E6h
 00006DDF  B8 402E3EF9			mov	EAX,0402E3EF9h 
 00006DE4  50				push	EAX
 00006DE5  52				push	EDX 
 00006DE6  DD 04 24			fld	qword ptr [ESP]
 00006DE9  5A				pop	EDX
 00006DEA  58				pop	EAX 
 00006DEB  5B				pop	EBX
 00006DEC  DD 1B			fstp	qword ptr [EBX]

				;{1707}:arr[8]= 1.2;
 00006DEE  B8 00000008			mov	EAX,000000008h
 00006DF3  6B C0 08			imul	EAX,EAX,000000008h
 00006DF6  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006DFD  50				push	EAX
 00006DFE  BA 33333334			mov	EDX,033333334h
 00006E03  B8 3FF33333			mov	EAX,03FF33333h 
 00006E08  50				push	EAX
 00006E09  52				push	EDX 
 00006E0A  DD 04 24			fld	qword ptr [ESP]
 00006E0D  5A				pop	EDX
 00006E0E  58				pop	EAX 
 00006E0F  5B				pop	EBX
 00006E10  DD 1B			fstp	qword ptr [EBX]

				;{1708}:arr[9]= 18.1234;
 00006E12  B8 00000009			mov	EAX,000000009h
 00006E17  6B C0 08			imul	EAX,EAX,000000008h
 00006E1A  8D 84 28			lea	EAX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E21  50				push	EAX
 00006E22  BA 2474538F			mov	EDX,02474538Fh
 00006E27  B8 40321F97			mov	EAX,040321F97h 
 00006E2C  50				push	EAX
 00006E2D  52				push	EDX 
 00006E2E  DD 04 24			fld	qword ptr [ESP]
 00006E31  5A				pop	EDX
 00006E32  58				pop	EAX 
 00006E33  5B				pop	EBX
 00006E34  DD 1B			fstp	qword ptr [EBX]

				;{1710}:for(index= 0; index < nn; index++ )
 00006E36  33 C0			xor	EAX,EAX
 00006E38  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006E3B  EB 06			jmp	OFFSET $L001725
 00006E3D			$L001726:
 00006E3D  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006E40  FF 45 A8			inc	dword ptr [EBP-88]
 00006E43			$L001725:
 00006E43  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006E46  50				push	EAX
 00006E47  B8 0000000A			mov	EAX,00000000Ah
 00006E4C  5A				pop	EDX
 00006E4D  3B D0			cmp	EDX,EAX
 00006E4F  0F 9C C0			setl	AL
 00006E52  84 C0			test	AL,AL
 00006E54  74 4A			jz	OFFSET $L001727

				;{1711}:Console::WriteLn("array[", index, "]= ", arr[index]);
 00006E56  8D 05 00000E81 R		lea	EAX,OFFSET $S001391
 00006E5C  6A 00			push	000000000h
 00006E5E  50				push	EAX 
 00006E5F  E8 00000000 E		call	 Console_WriteString
 00006E64  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006E67  50				push	EAX 
 00006E68  E8 00000000 E		call	 Console_WriteInteger 
 00006E6D  8D 05 00000DCC R		lea	EAX,OFFSET $S001184
 00006E73  6A 00			push	000000000h 
 00006E75  50				push	EAX 
 00006E76  E8 00000000 E		call	 Console_WriteString 
 00006E7B  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006E7E  6B C0 08			imul	EAX,EAX,000000008h
 00006E81  8B 94 28			mov	EDX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006E88  83 C0 04			add	EAX,000000004h ;low part
 00006E8B  8B 84 28			mov	EAX,dword ptr [EBP+EAX-04C0h] 
	   FFFFFB40
 00006E92  50				push	EAX 
 00006E93  52				push	EDX 
 00006E94  E8 00000000 E		call	 Console_WriteDouble 
 00006E99  E8 00000000 E		call	 Console_WriteCrLf 
 00006E9E  EB 9D			jmp	OFFSET $L001726 
 00006EA0			$L001727:

				;{1713}:sorter.Sort2(arr, n);
 00006EA0  8B 45 AC			mov	EAX,dword ptr [EBP-0054h]
 00006EA3  50				push	EAX 
 00006EA4  8D 85 FFFFFB40		lea	EAX,dword ptr [EBP-04C0h]
 00006EAA  50				push	EAX
 00006EAB  8D 8D FFFFFB98		lea	ECX,dword ptr [EBP-0468h]
 00006EB1  E8 FFFFA6A7			call	 UnitTesting_SortDoubleProxy_Sort2

				;{1715}:Console::WriteLn("Now sorted:");
 00006EB6  8D 05 00000B22 R		lea	EAX,OFFSET $S001393
 00006EBC  6A 00			push	000000000h
 00006EBE  50				push	EAX 
 00006EBF  E8 00000000 E		call	 Console_WriteString
 00006EC4  E8 00000000 E		call	 Console_WriteCrLf 

				;{1717}:for(index= 0; index < nn; index++ )
 00006EC9  33 C0			xor	EAX,EAX
 00006ECB  89 45 A8			mov	dword ptr [EBP-0058h],EAX
 00006ECE  EB 06			jmp	OFFSET $L001728
 00006ED0			$L001729:
 00006ED0  8B 45 A8			mov	EAX,dword ptr [EBP-88]
 00006ED3  FF 45 A8			inc	dword ptr [EBP-88]
 00006ED6			$L001728:
 00006ED6  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006ED9  50				push	EAX
 00006EDA  B8 0000000A			mov	EAX,00000000Ah
 00006EDF  5A				pop	EDX
 00006EE0  3B D0			cmp	EDX,EAX
 00006EE2  0F 9C C0			setl	AL
 00006EE5  84 C0			test	AL,AL
 00006EE7  74 4A			jz	OFFSET $L001730

				;{1718}:Console::WriteLn("array[", index, "]= ", arr[index]);
 00006EE9  8D 05 00000E81 R		lea	EAX,OFFSET $S001391
 00006EEF  6A 00			push	000000000h
 00006EF1  50				push	EAX 
 00006EF2  E8 00000000 E		call	 Console_WriteString
 00006EF7  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006EFA  50				push	EAX 
 00006EFB  E8 00000000 E		call	 Console_WriteInteger 
 00006F00  8D 05 00000DCC R		lea	EAX,OFFSET $S001184
 00006F06  6A 00			push	000000000h 
 00006F08  50				push	EAX 
 00006F09  E8 00000000 E		call	 Console_WriteString 
 00006F0E  8B 45 A8			mov	EAX,dword ptr [EBP-0058h]
 00006F11  6B C0 08			imul	EAX,EAX,000000008h
 00006F14  8B 94 28			mov	EDX,dword ptr [EBP+EAX-04C0h]
	   FFFFFB40
 00006F1B  83 C0 04			add	EAX,000000004h ;low part
 00006F1E  8B 84 28			mov	EAX,dword ptr [EBP+EAX-04C0h] 
	   FFFFFB40
 00006F25  50				push	EAX 
 00006F26  52				push	EDX 
 00006F27  E8 00000000 E		call	 Console_WriteDouble 
 00006F2C  E8 00000000 E		call	 Console_WriteCrLf 
 00006F31  EB 9D			jmp	OFFSET $L001729 
 00006F33			$L001730:

				;{1721}:Console::WriteLn("\nComputing the PI constant...\n");
 00006F33  8D 05 00000D9F R		lea	EAX,OFFSET $S001396
 00006F39  6A 00			push	000000000h
 00006F3B  50				push	EAX 
 00006F3C  E8 00000000 E		call	 Console_WriteString
 00006F41  E8 00000000 E		call	 Console_WriteCrLf 

				;{1722}:PI= UnitTesting::MonteCarlo::PI(1000000);
 00006F46  B8 000F4240			mov	EAX,0000F4240h
 00006F4B  50				push	EAX
 00006F4C  E8 FFFF9CED			call	 UnitTesting_MonteCarlo_PI
 00006F51  50				push	EAX
 00006F52  52				push	EDX 
 00006F53  DD 04 24			fld	qword ptr [ESP]
 00006F56  DD 9D FFFFFB38		fstp	qword ptr [EBP-04C8h]

				;{1723}:Console::WriteLn("The PI value = ", PI, "\n\n");
 00006F5C  5A				pop	EDX
 00006F5D  58				pop	EAX 
 00006F5E  8D 05 00000C90 R		lea	EAX,OFFSET $S001399
 00006F64  6A 00			push	000000000h
 00006F66  50				push	EAX 
 00006F67  E8 00000000 E		call	 Console_WriteString
 00006F6C  8B 95 FFFFFB38		mov	EDX,dword ptr [EBP-04C8h]
 00006F72  8B 85 FFFFFB3C		mov	EAX,dword ptr [EBP-04C4h] 
 00006F78  50				push	EAX 
 00006F79  52				push	EDX 
 00006F7A  E8 00000000 E		call	 Console_WriteDouble 
 00006F7F  8D 05 00000DBE R		lea	EAX,OFFSET $S001400
 00006F85  6A 00			push	000000000h 
 00006F87  50				push	EAX 
 00006F88  E8 00000000 E		call	 Console_WriteString 
 00006F8D  E8 00000000 E		call	 Console_WriteCrLf 
				;}
 00006F92			$L001179:
 00006F92  8D 8D FFFFFBA0		lea	ECX,dword ptr [EBP-0460h]
 00006F98  8B 41 48			mov	EAX,dword ptr [ECX+0048h]
 00006F9B  FF 10			call	dword ptr [EAX]
 00006F9D			$L001733:
 00006F9D  8D 8D FFFFFC34		lea	ECX,dword ptr [EBP-03CCh]
 00006FA3  8B 01			mov	EAX,dword ptr [ECX]
 00006FA5  FF 50 10			call	dword ptr [EAX+0010h]
 00006FA8			$L001735:
 00006FA8  8D 8D FFFFFEB8		lea	ECX,dword ptr [EBP-0148h]
 00006FAE  8B 01			mov	EAX,dword ptr [ECX]
 00006FB0  FF 50 10			call	dword ptr [EAX+0010h]
 00006FB3			$L001740:
 00006FB3  8D 8D FFFFFECC		lea	ECX,dword ptr [EBP-0134h]
 00006FB9  8B 01			mov	EAX,dword ptr [ECX]
 00006FBB  FF 50 10			call	dword ptr [EAX+0010h]
 00006FBE			$L001741:
 00006FBE  8D 8D FFFFFEE0		lea	ECX,dword ptr [EBP-0120h]
 00006FC4  8B 01			mov	EAX,dword ptr [ECX]
 00006FC6  FF 50 10			call	dword ptr [EAX+0010h]
 00006FC9			$L001742:
 00006FC9  8D 8D FFFFFEF4		lea	ECX,dword ptr [EBP-010Ch]
 00006FCF  8B 01			mov	EAX,dword ptr [ECX]
 00006FD1  FF 50 10			call	dword ptr [EAX+0010h]
 00006FD4			$L001743:
 00006FD4  8D 4D 88			lea	ECX,dword ptr [EBP-0078h]
 00006FD7  E8 FFFFB8E4			call	 UnitTesting_TestFloatingPoint_Destructor
 00006FDC			$L001748:
 00006FDC  8D 4D F4			lea	ECX,dword ptr [EBP-000Ch]
 00006FDF  E8 FFFF9B06			call	 UnitTesting_HelloWorld_Destructor
 00006FE4			$L001750:

 00006FE4  5F				pop	EDI
 00006FE5  5E				pop	ESI 
 00006FE6  5B				pop	EBX 
 00006FE7  C9				leave	
 00006FE8  C2 0008			retn	000000008h
 00006FEB			UnitTesting_Test1_TestRunner_main ENDP

 00006FEB			__System_Hpp_Runtime_Init PROC

 00006FEB  55				push	EBP
 00006FEC  8B EC			mov	EBP,ESP
 00006FEE  51				push	ECX 
 00006FEF  53				push	EBX 
 00006FF0  56				push	ESI 
 00006FF1  57				push	EDI 
 00006FF2  E8 00000000 E		call	 GetVersion
 00006FF7  A3 000011D8 R		mov	 __osver,EAX ;os version
 00006FFC  A1 000011D8 R		mov	EAX, __osver 
 00007001  C1 E8 08			shr	EAX,000000008h
 00007004  25 000000FF			and	EAX,0000000FFh
 00007009  A3 000011DC R		mov	 __winminor,EAX ;windows minor
 0000700E  8B 0D 000011D8 R		mov	ECX, __osver 
 00007014  81 E1 000000FF		and	ECX,0000000FFh 
 0000701A  89 0D 000011E0 R		mov	 __winmajor,ECX ;windows major
 00007020  8B 15 000011E0 R		mov	EDX,dword ptr __winmajor 
 00007026  C1 E2 08			shl	EDX,000000008h
 00007029  03 15 000011DC R		add	EDX,dword ptr __winminor
 0000702F  89 15 000011E4 R		mov	dword ptr __winver,EDX ;windows version
 00007035  A1 000011D8 R		mov	EAX, __osver 
 0000703A  C1 E8 10			shr	EAX,000000010h 
 0000703D  25 0000FFFF			and	EAX,00000FFFFh 
 00007042  A3 000011D8 R		mov	 __osver,EAX 
 00007047  8D 1D 0000120C R		lea	EBX,dword ptr ___argc
 0000704D  53				push	EBX
 0000704E  E8 00000000 E		call	 System_GetCommandLineArgv 
 00007053  A3 00001208 R		mov	dword ptr ___argv,EAX 
 00007058  50				push	EAX 
 00007059  8B 0D 0000120C R		mov	ECX,dword ptr ___argc 
 0000705F  51				push	ECX 
 00007060  E8 FFFFD886			call	 UnitTesting_Test1_TestRunner_main ;user entry point (stdcall calling convention)
 00007065  50				push	EAX 
 00007066  A1 00001208 R		mov	EAX,dword ptr ___argv 
 0000706B  50				push	EAX 
 0000706C  E8 00000000 E		call	 System_Memory_GetProcessHeap 
 00007071  50				push	EAX 
 00007072  E8 00000000 E		call	 System_Memory_Free 
 00007077  E8 00000000 E		call	 System_Exit 

 0000707C  5F				pop	EDI
 0000707D  5E				pop	ESI 
 0000707E  5B				pop	EBX 
 0000707F  C9				leave	
 00007080  C3				ret	
 00007081			__System_Hpp_Runtime_Init ENDP

 00000000			.DATA ;data segment
 00000000 0000072A R		@@class_vptr_vtbl@@__UnitTesting_Circle	DWORD	OFFSET UnitTesting_Circle_Type,
	   00000640 R
	   000006DE R
	   000006A0 R
	   00000675 R
	   000006BF R
										OFFSET UnitTesting_Circle_ComputeArea,
										OFFSET UnitTesting_Circle_Name,
										OFFSET UnitTesting_Circle_Draw,
										OFFSET UnitTesting_Circle_Destructor,
										OFFSET UnitTesting_Circle_DrawSphere

 00000018 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Shape	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 0000002C 00000878 R		@@class_vptr_vtbl@@__UnitTesting_DoubleProxy	DWORD	OFFSET UnitTesting_DoubleProxy_lessThan,
	   00000826 R
	   00000781 R
	   00000762 R
										OFFSET UnitTesting_DoubleProxy_isEqual,
										OFFSET UnitTesting_DoubleProxy_Swap,
										OFFSET UnitTesting_DoubleProxy_Destructor

 0000003C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_SimpleObject	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   000013F3 R
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET UnitTesting_SimpleObject_Destructor

 0000004C 000009DA R		@@class_vptr_vtbl@@__UnitTesting_DoubleSwapper	DWORD	OFFSET UnitTesting_DoubleSwapper_lessThan,
	   000008CA R
	   00000A34 R
	   00000943 R
										OFFSET UnitTesting_DoubleSwapper_Swap,
										OFFSET UnitTesting_DoubleSwapper_lessThanEx,
										OFFSET UnitTesting_DoubleSwapper_SwapEx

 0000005C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_SwapperObject	DWORD	OFFSET __purecall,
	   00000000 E
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall,
										OFFSET __purecall

 0000006C 00000AC9 R		@@class_vptr_vtbl@@__UnitTesting_HObject	DWORD	OFFSET UnitTesting_HObject_Destructor

 00000070 00000D4B R		@@class_vptr_vtbl@@__UnitTesting_Objects_Array	DWORD	OFFSET UnitTesting_Objects_Array_Destructor,
	   00000000 E
	   00000000 E
										OFFSET __purecall,
										OFFSET __purecall

 0000007C 00000D4B R		@@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles	DWORD	OFFSET UnitTesting_Objects_Array_Destructor,
	   00000EB6 R
	   00000DB3 R
										OFFSET UnitTesting_Objects_ArrayOfAutomobiles_getAt,
										OFFSET UnitTesting_Objects_ArrayOfAutomobiles_Swap

 00000088 00000EDA R		@@class_vptr_vtbl@@__UnitTesting_Objects_Automobile	DWORD	OFFSET UnitTesting_Objects_Automobile_Compare

 0000008C 00000000 E		@@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject	DWORD	OFFSET __purecall

 00000090 00001853 R		@@class_vptr_vtbl@@__UnitTesting_Square	DWORD	OFFSET UnitTesting_Square_Type,
	   0000176C R
	   0000183F R
	   000017C9 R
	   0000179E R
										OFFSET UnitTesting_Square_ComputeArea,
										OFFSET UnitTesting_Square_Name,
										OFFSET UnitTesting_Square_Draw,
										OFFSET UnitTesting_Square_Destructor

 000000A4 00003B74 R		@@class_vptr_vtbl@@__UnitTesting_TestProperties	DWORD	OFFSET UnitTesting_TestProperties_Destructor

 000000A8 000041C1 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV	DWORD	OFFSET UnitTesting_TestVirtuals_ExponentialRV_Sample,
	   000041AD R
										OFFSET UnitTesting_TestVirtuals_ExponentialRV_Name

 000000B0 00000000 E		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable	DWORD	OFFSET __purecall,
	   00004231 R
										OFFSET UnitTesting_TestVirtuals_RandomVariable_Name

 000000B8 0000426E R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV	DWORD	OFFSET UnitTesting_TestVirtuals_SimpleRV_Sample,
	   0000425A R
										OFFSET UnitTesting_TestVirtuals_SimpleRV_Name

 000000C0 000042B2 R		@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV	DWORD	OFFSET UnitTesting_TestVirtuals_UniformRV_Sample,
	   0000429E R
										OFFSET UnitTesting_TestVirtuals_UniformRV_Name

 000000C8 00004501 R		@@class_vptr_vtbl@@__UnitTesting_Triangle	DWORD	OFFSET UnitTesting_Triangle_Type,
	   000043FD R
	   000044ED R
	   00004477 R
	   0000444A R
	   00004496 R
										OFFSET UnitTesting_Triangle_ComputeArea,
										OFFSET UnitTesting_Triangle_Name,
										OFFSET UnitTesting_Triangle_Draw,
										OFFSET UnitTesting_Triangle_Destructor,
										OFFSET UnitTesting_Triangle_DrawPiramid

 = FFFFFFFF			File_INVALID_HANDLE_VALUE	=	0FFFFFFFFh
 = FFFFFFFF			File_INVALID_SET_FILE_POINTER	=	0FFFFFFFFh
 = 00000001			UnitTesting_TestSwitch_open	=	000000001h
 = 00000002			UnitTesting_TestSwitch_close	=	000000002h
 = 00000003			UnitTesting_TestSwitch_write	=	000000003h
 = 00000004			UnitTesting_TestSwitch_read	=	000000004h
 = 0000000A			UnitTesting_ten	=	00000000Ah
 = FFFFFFF6			UnitTesting_minusten	=	0FFFFFFF6h
 = 00000064			UnitTesting_hundred	=	000000064h
 = 00000050			UnitTesting_max_length	=	000000050h
 000000E0			UnitTesting_max_64	QWORD	00000000002893052h
	   0000000002893052
 000000E8			UnitTesting_max_64_neg	QWORD	0FFFFFFFFFD76CFAEh
	   FFFFFFFFFD76CFAE
 000000F0			UnitTesting_misc1_pi	REAL8	3.141593
	   400921FB82C2BD7F
 000000F8 400D8794		UnitTesting_misc1_e	REAL4	2.211400
 = 0000000A			UnitTesting_misc1_ten_plus	=	00000000Ah
 = 00000061			UnitTesting_misc1_ch1	=	'a'
 = 0000007A			UnitTesting_misc1_ch2	=	'z'
 000000FC 68 65 6C 6C 6F	UnitTesting_misc1_hello	BYTE "hello, world.",0
	   2C 20 77 6F 72
	   6C 64 2E 00
 0000010A 68 75 6D 61 6E	UnitTesting_misc1_hell	BYTE "human",0
	   00
 00000110 6D 69 73 74 61	UnitTesting_misc1_boy	BYTE "mistakes",0
	   6B 65 73 00
 00000119			UnitTesting_misc1_dX	REAL8	4.990000
	   4013F5C28F5C28F6
 00000121			UnitTesting_misc1_dY	REAL8	9.456700
	   4022E9D495182A99

 00000129 20 3D 20 00		$S001207 		BYTE 	" = ",0
 0000012D 20 44 65 67 72	$S001305 		BYTE 	" Degrees.",0
	   65 65 73 2E 00
 00000137 20 52 61 64 69	$S001302 		BYTE 	" Radians.",0
	   61 6E 73 2E 00
 00000141 20 61 73 20 69	$S001247 		BYTE 	" as its value.",0
	   74 73 20 76 61
	   6C 75 65 2E 00
 00000150 20 69 73 20 3D	$S001300 		BYTE 	" is = ",0
	   20 00
 00000157 20 6A 20 3D 20	$S000965 		BYTE 	" j = (4 + (--j))%4 ==",0
	   28 34 20 2B 20
	   28 2D 2D 6A 29
	   29 25 34 20 3D
	   3D 00
 0000016D 21 28 6E 61 6D	$S001368 		BYTE 	"!(name3 < name2)",0
	   65 33 20 3C 20
	   6E 61 6D 65 32
	   29 00
 0000017E 28 2A 29 20 74	$S001065 		BYTE 	"(*) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 00000192 28 2B 29 20 74	$S001055 		BYTE 	"(+) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000001A6 28 2D 29 20 74	$S001060 		BYTE 	"(-) the result is: ",0
	   68 65 20 72 65
	   73 75 6C 74 20
	   69 73 3A 20 00
 000001BA 28 31 29 00		$S001131 		BYTE 	"(1)",0
 000001BE 28 31 29 41 20	$S001236 		BYTE 	"(1)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 000001D9 28 31 29 41 20	$S001246 		BYTE 	"(1)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000001FC 28 31 29 41 6E	$S001258 		BYTE 	"(1)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 00000225 28 31 29 41 6E	$S001253 		BYTE 	"(1)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 0000024A 28 32 29 00		$S001133 		BYTE 	"(2)",0
 0000024E 28 32 29 41 20	$S001237 		BYTE 	"(2)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000269 28 32 29 41 20	$S001248 		BYTE 	"(2)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 0000028C 28 32 29 41 6E	$S001259 		BYTE 	"(2)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000002B5 28 32 29 41 6E	$S001254 		BYTE 	"(2)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 000002DA 28 33 29 00		$S001134 		BYTE 	"(3)",0
 000002DE 28 33 29 41 20	$S001238 		BYTE 	"(3)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 000002F9 28 33 29 41 20	$S001249 		BYTE 	"(3)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 0000031C 28 33 29 41 6E	$S001260 		BYTE 	"(3)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 00000345 28 33 29 41 6E	$S001255 		BYTE 	"(3)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 0000036A 28 34 29 41 20	$S001239 		BYTE 	"(4)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000385 28 34 29 41 20	$S001250 		BYTE 	"(4)A simple random variable has : ",0
	   73 69 6D 70 6C
	   65 20 72 61 6E
	   64 6F 6D 20 76
	   61 72 69 61 62
	   6C 65 20 68 61
	   73 20 3A 20 00
 000003A8 28 34 29 41 6E	$S001261 		BYTE 	"(4)An exponential random variable has : ",0
	   20 65 78 70 6F
	   6E 65 6E 74 69
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   76 61 72 69 61
	   62 6C 65 20 68
	   61 73 20 3A 20
	   00
 000003D1 28 34 29 41 6E	$S001256 		BYTE 	"(4)An uniform random variable has : ",0
	   20 75 6E 69 66
	   6F 72 6D 20 72
	   61 6E 64 6F 6D
	   20 76 61 72 69
	   61 62 6C 65 20
	   68 61 73 20 3A
	   20 00
 000003F6 28 35 29 41 20	$S001240 		BYTE 	"(5)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 00000411 28 36 29 41 20	$S001241 		BYTE 	"(6)A pseudo-random value: ",0
	   70 73 65 75 64
	   6F 2D 72 61 6E
	   64 6F 6D 20 76
	   61 6C 75 65 3A
	   20 00
 0000042C 28 61 20 3D 20	$S001030 		BYTE 	"(a = l * w * 0.9) = ",0
	   6C 20 2A 20 77
	   20 2A 20 30 2E
	   39 29 20 3D 20
	   00
 00000441 28 61 20 3D 20	$S001023 		BYTE 	"(a = l * w) =",0
	   6C 20 2A 20 77
	   29 20 3D 00
 0000044F 28 63 6F 70 69	$S001295 		BYTE 	"(copied)xtarget.Width = ",0
	   65 64 29 78 74
	   61 72 67 65 74
	   2E 57 69 64 74
	   68 20 3D 20 00
 00000468 28 64 69 76 29	$S001070 		BYTE 	"(div) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 0000047E 28 64 6F 75 62	$S001214 		BYTE 	"(double)the area is: ",0
	   6C 65 29 74 68
	   65 20 61 72 65
	   61 20 69 73 3A
	   20 00
 00000494 28 69 6E 74 29	$S001213 		BYTE 	"(int)the area is: ",0
	   74 68 65 20 61
	   72 65 61 20 69
	   73 3A 20 00
 000004A7 28 6D 6F 64 29	$S001075 		BYTE 	"(mod) the result is: ",0
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000004BD 28 6E 6F 6E 65	$S000529 		BYTE 	"(none)",0
	   29 00
 000004C4 28 72 6F 75 6E	$S001080 		BYTE 	"(round(/)) the result is: ",0
	   64 28 2F 29 29
	   20 74 68 65 20
	   72 65 73 75 6C
	   74 20 69 73 3A
	   20 00
 000004DF 28 77 68 61 74	$S000989 		BYTE 	"(what = (result==1024)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 31 30 32
	   34 29 29 20 09
	   3D 20 00
 000004FB 28 77 68 61 74	$S000987 		BYTE 	"(what = (result==1365.0)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 31 33 36
	   35 2E 30 29 29
	   20 09 3D 20 00
 00000519 28 77 68 61 74	$S000999 		BYTE 	"(what = (result==33335)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 33 33 33
	   33 35 29 29 20
	   09 3D 20 00
 00000536 28 77 68 61 74	$S000997 		BYTE 	"(what = (result==50000)) 	= ",0
	   20 3D 20 28 72
	   65 73 75 6C 74
	   3D 3D 35 30 30
	   30 30 29 29 20
	   09 3D 20 00
 00000553 28 77 68 61 74	$S001001 		BYTE 	"(what = disc==0.0) 		= ",0
	   20 3D 20 64 69
	   73 63 3D 3D 30
	   2E 30 29 20 09
	   09 3D 20 00
 0000056B 28 77 68 61 74	$S000995 		BYTE 	"(what = result==0xC3500h) 	= ",0
	   20 3D 20 72 65
	   73 75 6C 74 3D
	   3D 30 78 43 33
	   35 30 30 68 29
	   20 09 3D 20 00
 00000589 28 77 68 61 74	$S001224 		BYTE 	"(what = val1 == 0x78000000) = ",0
	   20 3D 20 76 61
	   6C 31 20 3D 3D
	   20 30 78 37 38
	   30 30 30 30 30
	   30 29 20 3D 20
	   00
 000005A8 28 77 68 61 74	$S000979 		BYTE 	"(what = x == 68) 		= ",0
	   20 3D 20 78 20
	   3D 3D 20 36 38
	   29 20 09 09 3D
	   20 00
 000005BE 28 77 68 61 74	$S001004 		BYTE 	"(what = x1==-2.0) 		= ",0
	   20 3D 20 78 31
	   3D 3D 2D 32 2E
	   30 29 20 09 09
	   3D 20 00
 000005D5 28 77 68 61 74	$S001006 		BYTE 	"(what = x2==-2.0) 		= ",0
	   20 3D 20 78 32
	   3D 3D 2D 32 2E
	   30 29 20 09 09
	   3D 20 00
 000005EC 28 77 68 61 74	$S000973 		BYTE 	"(what = x==0x10h)		= ",0
	   20 3D 20 78 3D
	   3D 30 78 31 30
	   68 29 09 09 3D
	   20 00
 00000602 28 77 68 61 74	$S000981 		BYTE 	"(what = x==0x4000) 		= ",0
	   20 3D 20 78 3D
	   3D 30 78 34 30
	   30 30 29 20 09
	   09 3D 20 00
 0000061A 28 77 68 61 74	$S000975 		BYTE 	"(what = x==1)			= ",0
	   20 3D 20 78 3D
	   3D 31 29 09 09
	   09 3D 20 00
 0000062D 28 77 68 61 74	$S000983 		BYTE 	"(what = x==4096) 		= ",0
	   20 3D 20 78 3D
	   3D 34 30 39 36
	   29 20 09 09 3D
	   20 00
 00000643 28 77 68 61 74	$S000985 		BYTE 	"(what = y==1365) 		= ",0
	   20 3D 20 79 3D
	   3D 31 33 36 35
	   29 20 09 09 3D
	   20 00
 00000659 29 20 3D 20 00	$S001230 		BYTE 	") = ",0
 0000065E 2A 2A 41 20 62	$S001294 		BYTE 	"**A breakpoint was catched!**",0
	   72 65 61 6B 70
	   6F 69 6E 74 20
	   77 61 73 20 63
	   61 74 63 68 65
	   64 21 2A 2A 00
 0000067C 2A 2A 42 65 66	$S000897 		BYTE 	"**Before destroying all object in shapes1:",0
	   6F 72 65 20 64
	   65 73 74 72 6F
	   79 69 6E 67 20
	   61 6C 6C 20 6F
	   62 6A 65 63 74
	   20 69 6E 20 73
	   68 61 70 65 73
	   31 3A 00
 000006A7 2A 2A 42 65 66	$S000898 		BYTE 	"**Before destroying all object in shapes2:",0
	   6F 72 65 20 64
	   65 73 74 72 6F
	   79 69 6E 67 20
	   61 6C 6C 20 6F
	   62 6A 65 63 74
	   20 69 6E 20 73
	   68 61 70 65 73
	   32 3A 00
 000006D2 2A 2A 56 69 73	$S000722 		BYTE 	"**Visited object name = ",0
	   69 74 65 64 20
	   6F 62 6A 65 63
	   74 20 6E 61 6D
	   65 20 3D 20 00
 000006EB 2A 70 20 28 33	$S001308 		BYTE 	"*p (3.1415...)= ",0
	   2E 31 34 31 35
	   2E 2E 2E 29 3D
	   20 00
 000006FC 2C 20 00		$S001167 		BYTE 	", ",0
 000006FF 2C 20 28 63 6F	$S001296 		BYTE 	", (copied)xtarget.Height = ",0
	   70 69 65 64 29
	   78 74 61 72 67
	   65 74 2E 48 65
	   69 67 68 74 20
	   3D 20 00
 0000071B 2C 20 61 6E 64	$S000609 		BYTE 	", and b = ",0
	   20 62 20 3D 20
	   00
 00000726 2C 20 61 72 65	$S001276 		BYTE 	", area = ",0
	   61 20 3D 20 00
 00000730 2C 20 73 71 2E	$S001275 		BYTE 	", sq.Height = ",0
	   48 65 69 67 68
	   74 20 3D 20 00
 0000073F 2C 20 74 72 69	$S001281 		BYTE 	", tri.High = ",0
	   2E 48 69 67 68
	   20 3D 20 00
 0000074D 2C 20 79 73 6F	$S001292 		BYTE 	", ysource.Height = ",0
	   75 72 63 65 2E
	   48 65 69 67 68
	   74 20 3D 20 00
 00000761 2F 53 69 6C 65	$S001186 		BYTE 	"/Silent",0
	   6E 74 00
 00000769 41 20 64 6F 75	$S000857 		BYTE 	"A double proxy = ",0
	   62 6C 65 20 70
	   72 6F 78 79 20
	   3D 20 00
 0000077B 41 20 73 69 6D	$S000534 		BYTE 	"A simple variable",0
	   70 6C 65 20 76
	   61 72 69 61 62
	   6C 65 00
 0000078D 41 6E 20 65 78	$S000562 		BYTE 	"An exponential variable",0
	   70 6F 6E 65 6E
	   74 69 61 6C 20
	   76 61 72 69 61
	   62 6C 65 00
 000007A5 41 6E 20 75 6E	$S000552 		BYTE 	"An uniform variable",0
	   69 66 6F 72 6D
	   20 76 61 72 69
	   61 62 6C 65 00
 000007B9 41 72 67 75 6D	$S001183 		BYTE 	"Argument: [",0
	   65 6E 74 3A 20
	   5B 00
 000007C5 43 68 61 72 20	$S001166 		BYTE 	"Char at [",0
	   61 74 20 5B 00
 000007CF 43 68 61 72 20	$S001124 		BYTE 	"Char at i:[",0
	   61 74 20 69 3A
	   5B 00
 000007DB 43 69 72 63 6C	$S000652 		BYTE 	"Circle",0
	   65 00
 000007E2 43 69 72 63 6C	$S001267 		BYTE 	"Circle.Area = ",0
	   65 2E 41 72 65
	   61 20 3D 20 00
 000007F1 43 69 72 63 6C	$S001265 		BYTE 	"Circle.Radius = ",0
	   65 2E 52 61 64
	   69 75 73 20 3D
	   20 00
 00000802 43 69 72 63 6C	$S001344 		BYTE 	"Circle.Radius = 3.14 = ",0
	   65 2E 52 61 64
	   69 75 73 20 3D
	   20 33 2E 31 34
	   20 3D 20 00
 0000081A 43 69 72 63 6C	$S001345 		BYTE 	"Circle[0].Radius = 3.14 = ",0
	   65 5B 30 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 00000835 43 69 72 63 6C	$S001341 		BYTE 	"Circle[1].Radius = 3.14 = ",0
	   65 5B 31 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 00000850 43 69 72 63 6C	$S001342 		BYTE 	"Circle[2].Radius = 3.14 = ",0
	   65 5B 32 5D 2E
	   52 61 64 69 75
	   73 20 3D 20 33
	   2E 31 34 20 3D
	   20 00
 0000086B 43 6C 6F 73 69	$S000622 		BYTE 	"Closing file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 0000087B 43 6F 6E 73 74	$S000777 		BYTE 	"Constructing a Double Proxy...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   44 6F 75 62 6C
	   65 20 50 72 6F
	   78 79 2E 2E 2E
	   00
 0000089A 43 75 72 72 65	$S001202 		BYTE 	"Current Index :",0
	   6E 74 20 49 6E
	   64 65 78 20 3A
	   00
 000008AA 44 65 67 72 65	$S001298 		BYTE 	"Degrees to Radians of ",0
	   65 73 20 74 6F
	   20 52 61 64 69
	   61 6E 73 20 6F
	   66 20 00
 000008C1 44 65 73 74 72	$S000789 		BYTE 	"Destroying a Double Proxy object...",0
	   6F 79 69 6E 67
	   20 61 20 44 6F
	   75 62 6C 65 20
	   50 72 6F 78 79
	   20 6F 62 6A 65
	   63 74 2E 2E 2E
	   00
 000008E5 44 65 73 74 72	$S000772 		BYTE 	"Destroying a Simple Object...",0
	   6F 79 69 6E 67
	   20 61 20 53 69
	   6D 70 6C 65 20
	   4F 62 6A 65 63
	   74 2E 2E 2E 00
 00000903 44 6F 20 36 2C	$S000627 		BYTE 	"Do 6, then finish",0
	   20 74 68 65 6E
	   20 66 69 6E 69
	   73 68 00
 00000915 44 6F 20 52 65	$S000624 		BYTE 	"Do Read from file...",0
	   61 64 20 66 72
	   6F 6D 20 66 69
	   6C 65 2E 2E 2E
	   00
 0000092A 44 6F 20 57 72	$S000623 		BYTE 	"Do Write to file...",0
	   69 74 65 20 74
	   6F 20 66 69 6C
	   65 2E 2E 2E 00
 0000093E 44 6F 20 66 6F	$S000625 		BYTE 	"Do for 5 and follow to 6",0
	   72 20 35 20 61
	   6E 64 20 66 6F
	   6C 6C 6F 77 20
	   74 6F 20 36 00
 00000957 44 72 61 77 69	$S000654 		BYTE 	"Drawing a Circle!",0
	   6E 67 20 61 20
	   43 69 72 63 6C
	   65 21 00
 00000969 44 72 61 77 69	$S000682 		BYTE 	"Drawing a Cube!",0
	   6E 67 20 61 20
	   43 75 62 65 21
	   00
 00000979 44 72 61 77 69	$S000705 		BYTE 	"Drawing a Piramid!",0
	   6E 67 20 61 20
	   50 69 72 61 6D
	   69 64 21 00
 0000098C 44 72 61 77 69	$S000659 		BYTE 	"Drawing a Sphere!",0
	   6E 67 20 61 20
	   53 70 68 65 72
	   65 21 00
 0000099E 44 72 61 77 69	$S000680 		BYTE 	"Drawing a Square!",0
	   6E 67 20 61 20
	   53 71 75 61 72
	   65 21 00
 000009B0 44 72 61 77 69	$S000700 		BYTE 	"Drawing a Triangle!",0
	   6E 67 20 61 20
	   54 72 69 61 6E
	   67 6C 65 21 00
 000009C4 46 61 63 74 6F	$S001206 		BYTE 	"Factorial of ",0
	   72 69 61 6C 20
	   6F 66 20 00
 000009D2 47 61 6D 6D 61	$S000598 		BYTE 	"Gamma y = ",0
	   20 79 20 3D 20
	   00
 000009DD 48 2B 2B 20 46	$S000907 		BYTE 	"H++ First program",0
	   69 72 73 74 20
	   70 72 6F 67 72
	   61 6D 00
 000009EF 48 2B 2B 20 55	$S001347 		BYTE 	"H++ Unit Testing : Fourth Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 46
	   6F 75 72 74 68
	   20 50 68 61 73
	   65 00
 00000A0F 48 2B 2B 20 55	$S001225 		BYTE 	"H++ Unit Testing : Second Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 53
	   65 63 6F 6E 64
	   20 50 68 61 73
	   65 00
 00000A2F 48 2B 2B 20 55	$S001286 		BYTE 	"H++ Unit Testing : Third Phase",0
	   6E 69 74 20 54
	   65 73 74 69 6E
	   67 20 3A 20 54
	   68 69 72 64 20
	   50 68 61 73 65
	   00
 00000A4E 48 61 72 6F 6C	$S001173 		BYTE 	"Harold ",0
	   64 20 00
 00000A56 48 61 72 6F 6C	$S001150 		BYTE 	"Harold L. Marzan",0
	   64 20 4C 2E 20
	   4D 61 72 7A 61
	   6E 00
 00000A67 48 61 72 6F 6C	$S001362 		BYTE 	"Harold L.",0
	   64 20 4C 2E 00
 00000A71 48 61 72 6F 6C	$S001360 		BYTE 	"Harold",0
	   64 00
 00000A78 48 65 6C 6C 6F	$S001191 		BYTE 	"Hello World from H++!!!",0
	   20 57 6F 72 6C
	   64 20 66 72 6F
	   6D 20 48 2B 2B
	   21 21 21 00
 00000A90 49 20 73 68 6F	$S001371 		BYTE 	"I should never get here!",0
	   75 6C 64 20 6E
	   65 76 65 72 20
	   67 65 74 20 68
	   65 72 65 21 00
 00000AA9 49 27 6D 20 74	$S001283 		BYTE 	"I'm tired of waiting!!!",0
	   69 72 65 64 20
	   6F 66 20 77 61
	   69 74 69 6E 67
	   21 21 21 00
 00000AC1 49 6E 76 61 6C	$S000628 		BYTE 	"Invalid Option : ",0
	   69 64 20 4F 70
	   74 69 6F 6E 20
	   3A 20 00
 00000AD3 49 74 27 73 20	$S001370 		BYTE 	"It's working as designed!",0
	   77 6F 72 6B 69
	   6E 67 20 61 73
	   20 64 65 73 69
	   67 6E 65 64 21
	   00
 00000AED 4C 61 77 72 65	$S001174 		BYTE 	"Lawrence ",0
	   6E 63 65 20 00
 00000AF7 4D 61 72 7A 61	$S001175 		BYTE 	"Marzan ",0
	   6E 20 00
 00000AFF 4D 65 72 63 61	$S001176 		BYTE 	"Mercado.",0
	   64 6F 2E 00
 00000B08 4D 79 20 4E 61	$S001285 		BYTE 	"My Name is: ",0
	   6D 65 20 69 73
	   3A 20 00
 00000B15 4D 79 20 6E 61	$S001159 		BYTE 	"My name is :",0
	   6D 65 20 69 73
	   20 3A 00
 00000B22 4E 6F 77 20 73	$S001393 		BYTE 	"Now sorted:",0
	   6F 72 74 65 64
	   3A 00
 00000B2E 4F 6F 70 73 21	$S001126 		BYTE 	"Oops! there was a serious bug in this code!",0
	   20 74 68 65 72
	   65 20 77 61 73
	   20 61 20 73 65
	   72 69 6F 75 73
	   20 62 75 67 20
	   69 6E 20 74 68
	   69 73 20 63 6F
	   64 65 21 00
 00000B5A 4F 70 65 6E 69	$S000621 		BYTE 	"Opening file...",0
	   6E 67 20 66 69
	   6C 65 2E 2E 2E
	   00
 00000B6A 50 61 72 74 69	$S000597 		BYTE 	"Partial results = ",0
	   61 6C 20 72 65
	   73 75 6C 74 73
	   20 3D 20 00
 00000B7D 50 73 65 75 64	$S001243 		BYTE 	"Pseudo-Random Double values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 44
	   6F 75 62 6C 65
	   20 76 61 6C 75
	   65 73 3A 00
 00000B9A 50 73 65 75 64	$S001235 		BYTE 	"Pseudo-Random Integer values:",0
	   6F 2D 52 61 6E
	   64 6F 6D 20 49
	   6E 74 65 67 65
	   72 20 76 61 6C
	   75 65 73 3A 00
 00000BB8 52 61 64 69 61	$S001303 		BYTE 	"Radians to Degrees of ",0
	   6E 73 20 74 6F
	   20 44 65 67 72
	   65 65 73 20 6F
	   66 20 00
 00000BCF 52 65 73 75 6C	$S001233 		BYTE 	"Result for array1[",0
	   74 20 66 6F 72
	   20 61 72 72 61
	   79 31 5B 00
 00000BE2 53 71 75 61 72	$S000678 		BYTE 	"Square",0
	   65 00
 00000BE9 53 75 6D 6D 61	$S001297 		BYTE 	"SummationSeries::ComputeRenderGamma() series: ",0
	   74 69 6F 6E 53
	   65 72 69 65 73
	   3A 3A 43 6F 6D
	   70 75 74 65 52
	   65 6E 64 65 72
	   47 61 6D 6D 61
	   28 29 20 73 65
	   72 69 65 73 3A
	   20 00
 00000C18 53 77 61 70 69	$S001093 		BYTE 	"Swaping values...",0
	   6E 67 20 76 61
	   6C 75 65 73 2E
	   2E 2E 00
 00000C2A 54 65 72 6E 61	$S001037 		BYTE 	"Ternary (false ) = ",0
	   72 79 20 28 66
	   61 6C 73 65 20
	   29 20 3D 20 00
 00000C3E 54 65 72 6E 61	$S001036 		BYTE 	"Ternary (true) = ",0
	   72 79 20 28 74
	   72 75 65 29 20
	   3D 20 00
 00000C50 54 65 73 74 69	$S001171 		BYTE 	"Testing!!!",0
	   6E 67 21 21 21
	   00
 00000C5B 54 68 65 20 48	$S000901 		BYTE 	"The HelloWorld constructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   63 6F 6E 73 74
	   72 75 63 74 6F
	   72 00
 00000C76 54 68 65 20 48	$S000909 		BYTE 	"The HelloWorld destructor",0
	   65 6C 6C 6F 57
	   6F 72 6C 64 20
	   64 65 73 74 72
	   75 63 74 6F 72
	   00
 00000C90 54 68 65 20 50	$S001399 		BYTE 	"The PI value = ",0
	   49 20 76 61 6C
	   75 65 20 3D 20
	   00
 00000CA0 54 68 65 20 6D	$S000611 		BYTE 	"The max value is = ",0
	   61 78 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000CB4 54 68 65 20 6D	$S000613 		BYTE 	"The min value is = ",0
	   69 6E 20 76 61
	   6C 75 65 20 69
	   73 20 3D 20 00
 00000CC8 54 68 65 20 76	$S001211 		BYTE 	"The value of myRef1 must be 65536 ==",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   52 65 66 31 20
	   6D 75 73 74 20
	   62 65 20 36 35
	   35 33 36 20 3D
	   3D 00
 00000CED 54 68 65 20 76	$S001212 		BYTE 	"The value of myVar1 is not 65536 but zero (0) == ",0
	   61 6C 75 65 20
	   6F 66 20 6D 79
	   56 61 72 31 20
	   69 73 20 6E 6F
	   74 20 36 35 35
	   33 36 20 62 75
	   74 20 7A 65 72
	   6F 20 28 30 29
	   20 3D 3D 20 00
 00000D1F 54 68 65 20 76	$S000608 		BYTE 	"The values: a = ",0
	   61 6C 75 65 73
	   3A 20 61 20 3D
	   20 00
 00000D30 54 68 69 73 20	$S001357 		BYTE 	"This is getting complex and better each time!",0
	   69 73 20 67 65
	   74 74 69 6E 67
	   20 63 6F 6D 70
	   6C 65 78 20 61
	   6E 64 20 62 65
	   74 74 65 72 20
	   65 61 63 68 20
	   74 69 6D 65 21
	   00
 00000D5E 54 68 69 73 20	$S001293 		BYTE 	"This line will never be executed!",0
	   6C 69 6E 65 20
	   77 69 6C 6C 20
	   6E 65 76 65 72
	   20 62 65 20 65
	   78 65 63 75 74
	   65 64 21 00
 00000D80 54 72 69 61 6E	$S000698 		BYTE 	"Triangle",0
	   67 6C 65 00
 00000D89 59 65 73 20 28	$S001372 		BYTE 	"Yes (name1 != name3)!",0
	   6E 61 6D 65 31
	   20 21 3D 20 6E
	   61 6D 65 33 29
	   21 00
 00000D9F 0A 43 6F 6D 70	$S001396 		BYTE 	0Ah,"Computing the PI constant...",0Ah,0
	   75 74 69 6E 67
	   20 74 68 65 20
	   50 49 20 63 6F
	   6E 73 74 61 6E
	   74 2E 2E 2E 0A
	   00
 00000DBE 0A 0A 00		$S001400 		BYTE 	0Ah,0Ah,0
 00000DC1 5D 20 3D 20 00	$S001148 		BYTE 	"] = ",0
 00000DC6 5D 20 3D 3D 20	$S001125 		BYTE 	"] == ",0
	   00
 00000DCC 5D 3D 20 00		$S001184 		BYTE 	"]= ",0
 00000DD0 5D 3D 00		$S001168 		BYTE 	"]=",0
 00000DD3 61 72 72 61 79	$S001137 		BYTE 	"array2[3].my_array1[0] (double)== 9.99 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 31 5B
	   30 5D 20 28 64
	   6F 75 62 6C 65
	   29 3D 3D 20 39
	   2E 39 39 20 3D
	   3D 20 00
 00000DFE 61 72 72 61 79	$S001138 		BYTE 	"array2[3].my_array1[1] (double)== 3.1415927 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 31 5B
	   31 5D 20 28 64
	   6F 75 62 6C 65
	   29 3D 3D 20 33
	   2E 31 34 31 35
	   39 32 37 20 3D
	   3D 20 00
 00000E2E 61 72 72 61 79	$S001139 		BYTE 	"array2[3].my_array2[0] (int)== 10 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 32 5B
	   30 5D 20 28 69
	   6E 74 29 3D 3D
	   20 31 30 20 3D
	   3D 20 00
 00000E54 61 72 72 61 79	$S001140 		BYTE 	"array2[3].my_array2[1] (int)== 3 == ",0
	   32 5B 33 5D 2E
	   6D 79 5F 61 72
	   72 61 79 32 5B
	   31 5D 20 28 69
	   6E 74 29 3D 3D
	   20 33 20 3D 3D
	   20 00
 00000E79 61 72 72 61 79	$S001147 		BYTE 	"array4[",0
	   34 5B 00
 00000E81 61 72 72 61 79	$S001391 		BYTE 	"array[",0
	   5B 00
 00000E88 63 6F 6E 73 74	$S001100 		BYTE 	"constructing a TestFloatingPoint() object...",0
	   72 75 63 74 69
	   6E 67 20 61 20
	   54 65 73 74 46
	   6C 6F 61 74 69
	   6E 67 50 6F 69
	   6E 74 28 29 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000EB5 64 65 73 74 72	$S000657 		BYTE 	"destroying a Circle object...",0
	   6F 79 69 6E 67
	   20 61 20 43 69
	   72 63 6C 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000ED3 64 65 73 74 72	$S000666 		BYTE 	"destroying a Square object...",0
	   6F 79 69 6E 67
	   20 61 20 53 71
	   75 61 72 65 20
	   6F 62 6A 65 63
	   74 2E 2E 2E 00
 00000EF1 64 65 73 74 72	$S001102 		BYTE 	"destroying a TestFloatingPoint() object...",0
	   6F 79 69 6E 67
	   20 61 20 54 65
	   73 74 46 6C 6F
	   61 74 69 6E 67
	   50 6F 69 6E 74
	   28 29 20 6F 62
	   6A 65 63 74 2E
	   2E 2E 00
 00000F1C 64 65 73 74 72	$S000703 		BYTE 	"destroying a Triangle object...",0
	   6F 79 69 6E 67
	   20 61 20 54 72
	   69 61 6E 67 6C
	   65 20 6F 62 6A
	   65 63 74 2E 2E
	   2E 00
 00000F3C 66 61 6C 73 65	$S001369 		BYTE 	"false==!(name2 < name3)",0
	   3D 3D 21 28 6E
	   61 6D 65 32 20
	   3C 20 6E 61 6D
	   65 33 29 00
 00000F54 69 70 74 72 5B	$S001319 		BYTE 	"iptr[0] == 145 == ",0
	   30 5D 20 3D 3D
	   20 31 34 35 20
	   3D 3D 20 00
 00000F67 69 70 74 72 5B	$S001323 		BYTE 	"iptr[1] == 667 == ",0
	   31 5D 20 3D 3D
	   20 36 36 37 20
	   3D 3D 20 00
 00000F7A 69 70 74 72 5B	$S001322 		BYTE 	"iptr[2] == 123 == ",0
	   32 5D 20 3D 3D
	   20 31 32 33 20
	   3D 3D 20 00
 00000F8D 69 70 74 72 5B	$S001324 		BYTE 	"iptr[6] == 774 == ",0
	   36 5D 20 3D 3D
	   20 37 37 34 20
	   3D 3D 20 00
 00000FA0 69 70 74 72 5B	$S001321 		BYTE 	"iptr[7] == 991 == ",0
	   37 5D 20 3D 3D
	   20 39 39 31 20
	   3D 3D 20 00
 00000FB3 69 70 74 72 5B	$S001320 		BYTE 	"iptr[9] == 541 == ",0
	   39 5D 20 3D 3D
	   20 35 34 31 20
	   3D 3D 20 00
 00000FC6 6C 20 3D 20 00	$S001021 		BYTE 	"l = ",0
 00000FCB 6D 79 20 6E 61	$S001251 		BYTE 	"my name is",0
	   6D 65 20 69 73
	   00
 00000FD6 6E 41 72 65 61	$S001197 		BYTE 	"nArea = ",0
	   20 3D 20 00
 00000FDF 6E 41 72 65 61	$S001132 		BYTE 	"nArea = 100 * 200 == ",0
	   20 3D 20 31 30
	   30 20 2A 20 32
	   30 30 20 3D 3D
	   20 00
 00000FF5 6E 61 6D 65 31	$S001365 		BYTE 	"name1 =< name2",0
	   20 3D 3C 20 6E
	   61 6D 65 32 00
 00001004 6E 61 6D 65 32	$S001367 		BYTE 	"name2 <= name3",0
	   20 3C 3D 20 6E
	   61 6D 65 33 00
 00001013 6E 61 6D 65 33	$S001366 		BYTE 	"name3.length > name2.length",0
	   2E 6C 65 6E 67
	   74 68 20 3E 20
	   6E 61 6D 65 32
	   2E 6C 65 6E 67
	   74 68 00
 0000102F 6E 75 6D 62 65	$S001339 		BYTE 	"numbers[",0
	   72 73 5B 00
 00001038 6F 62 6A 3D 3D	$S001270 		BYTE 	"obj==obj2",0
	   6F 62 6A 32 00
 00001042 70 6F 77 28 32	$S001229 		BYTE 	"pow(2, ",0
	   2C 20 00
 0000104A 72 65 73 20 28	$S001309 		BYTE 	"res (3.1415...)= ",0
	   33 2E 31 34 31
	   35 2E 2E 2E 29
	   3D 20 00
 0000105C 73 71 2E 57 69	$S001274 		BYTE 	"sq.Width = ",0
	   64 74 68 20 3D
	   20 00
 00001068 74 68 65 20 76	$S001011 		BYTE 	"the value is (3): ",0
	   61 6C 75 65 20
	   69 73 20 28 33
	   29 3A 20 00
 0000107B 74 68 65 20 76	$S001010 		BYTE 	"the value is (5): ",0
	   61 6C 75 65 20
	   69 73 20 28 35
	   29 3A 20 00
 0000108E 74 68 65 20 76	$S001008 		BYTE 	"the value of x is (1): ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 20 28 31
	   29 3A 20 00
 000010A6 74 68 65 20 76	$S001009 		BYTE 	"the value of x is (2): ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 20 28 32
	   29 3A 20 00
 000010BE 74 68 65 20 76	$S001007 		BYTE 	"the value of x is: ",0
	   61 6C 75 65 20
	   6F 66 20 78 20
	   69 73 3A 20 00
 000010D2 74 68 69 73 20	$S000904 		BYTE 	"this is what I have to say for the first time in H++ :",0
	   69 73 20 77 68
	   61 74 20 49 20
	   68 61 76 65 20
	   74 6F 20 73 61
	   79 20 66 6F 72
	   20 74 68 65 20
	   66 69 72 73 74
	   20 74 69 6D 65
	   20 69 6E 20 48
	   2B 2B 20 3A 00
 00001109 74 72 69 2E 42	$S001280 		BYTE 	"tri.Base = ",0
	   61 73 65 20 3D
	   20 00
 00001115 74 79 70 65 20	$S000716 		BYTE 	"type == stCircle",0
	   3D 3D 20 73 74
	   43 69 72 63 6C
	   65 00
 00001126 74 79 70 65 20	$S000718 		BYTE 	"type == stSquare",0
	   3D 3D 20 73 74
	   53 71 75 61 72
	   65 00
 00001137 74 79 70 65 20	$S000720 		BYTE 	"type == stTriangle",0
	   3D 3D 20 73 74
	   54 72 69 61 6E
	   67 6C 65 00
 0000114A 77 20 3D 20 00	$S001022 		BYTE 	"w = ",0
 0000114F 77 68 61 74 20	$S001220 		BYTE 	"what == True ?",0
	   3D 3D 20 54 72
	   75 65 20 3F 00
 0000115E 77 68 61 74 20	$S001269 		BYTE 	"what must be true = ",0
	   6D 75 73 74 20
	   62 65 20 74 72
	   75 65 20 3D 20
	   00
 00001173 79 65 73 5B 30	$S001327 		BYTE 	"yes[0][0] == 145 == ",0
	   5D 5B 30 5D 20
	   3D 3D 20 31 34
	   35 20 3D 3D 20
	   00
 00001188 79 65 73 5B 31	$S001328 		BYTE 	"yes[1][9] == 541 == ",0
	   5D 5B 39 5D 20
	   3D 3D 20 35 34
	   31 20 3D 3D 20
	   00
 0000119D 79 65 73 5B 32	$S001329 		BYTE 	"yes[2][7] == 334 == ",0
	   5D 5B 37 5D 20
	   3D 3D 20 33 33
	   34 20 3D 3D 20
	   00
 000011B2 79 65 73 5B 33	$S001330 		BYTE 	"yes[3][9] == 123 == ",0
	   5D 5B 39 5D 20
	   3D 3D 20 31 32
	   33 20 3D 3D 20
	   00
 000011C7 79 73 6F 75 72	$S001291 		BYTE 	"ysource.Width = ",0
	   63 65 2E 57 69
	   64 74 68 20 3D
	   20 00

 000011D8 00000000		__osver 		DWORD 	0;Windows OS version
 000011DC 00000000		__winminor 		DWORD 	0;Windows minor version
 000011E0 00000000		__winmajor 		DWORD 	0;Windows major version
 000011E4 00000000		__winver 		DWORD 	0;Windows version
 000011E8  00000020 [		__computer 		BYTE 	000000020h DUP(?);Computer name
	    00
	   ]
 00001208 00000000		___argv 		DWORD 	0;Array of argument values
 0000120C 00000000		___argc 		DWORD 	0;Argument count
 00001210 00000000		UnitTesting_Rnd_seed	 DWORD	0
 00001214 00000000		UnitTesting_Rnd_a	 DWORD	0
 00001218 00000000		UnitTesting_Rnd_m	 DWORD	0
 0000121C 00000000		UnitTesting_Rnd_q	 DWORD	0
 00001220 00000000		UnitTesting_Rnd_r	 DWORD	0
 00001224  0000000A [		UnitTesting_misc1_array	 REAL8 00000000Ah DUP(?) 
	    0000000000000000
	   ]
 00001274			UnitTesting_TestIntegers_bigValue	 DQ	0
	   0000000000000000
 0000127C  00000004 [		UnitTesting_array3	 BYTE 000000004h DUP(?) 
	    00
	   ]
 00001280  00000004 [		UnitTesting_array4	 REAL8 000000004h DUP(?) 
	    0000000000000000
	   ]

				END __System_Hpp_Runtime_Init

Microsoft (R) Macro Assembler Version 8.00.50727.762	    03/03/09 12:30:56
&c:\hcc\hcc\TestSource\unittesting1.hp			     Symbols 2 - 1
<This file was automatically generated by the 32-bit H++ Com



Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00100000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000012A0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00007081 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ClearScreen  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_GetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_MoveWindow . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadChar . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadDouble . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadInteger  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_ReadString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetConsoleSize . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetCursorPos . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTextColor . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_SetTitle . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteBoolean . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteChar  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteCrlf  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteDouble  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger64 . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteInteger . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Console_WriteString  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Close . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_FileSize  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Open  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Read  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Seek  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
File_Write . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_CompareToInteger .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_Compare  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt64  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_FromInt  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt64  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_ToInt  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_fromString . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toStringEx . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FloatingPoint_toString . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVersion . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_fromString . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toStringEx . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Integer_toString . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Abs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ArcTan  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ChangeSign  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cosec . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cos . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Cotan . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_DegreesToRadians  . . . . .	P Near	 00000000 _TEXT	Length= 0000004A Public STDCALL
  $L000463 . . . . . . . . . . .	L Near	 00000043 _TEXT	
Math_Even  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Exp . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Gcd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_GetNumberFrom . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Hyperbolic_HCosec . . . . .	P Near	 000000A8 _TEXT	Length= 00000060 Public STDCALL
  $L000486 . . . . . . . . . . .	L Near	 00000101 _TEXT	
Math_Hyperbolic_HCos . . . . . .	P Near	 0000004A _TEXT	Length= 0000005E Public STDCALL
  $L000480 . . . . . . . . . . .	L Near	 000000A1 _TEXT	
Math_Hyperbolic_HCotan . . . . .	P Near	 00000108 _TEXT	Length= 00000084 Public STDCALL
  $L000488 . . . . . . . . . . .	L Near	 00000185 _TEXT	
Math_Hyperbolic_HSec . . . . . .	P Near	 0000018C _TEXT	Length= 0000005E Public STDCALL
  $L000484 . . . . . . . . . . .	L Near	 000001E3 _TEXT	
Math_Hyperbolic_HSin . . . . . .	P Near	 000001EA _TEXT	Length= 00000060 Public STDCALL
  $L000477 . . . . . . . . . . .	L Near	 00000243 _TEXT	
Math_Hyperbolic_HTan . . . . . .	P Near	 0000024A _TEXT	Length= 00000084 Public STDCALL
  $L000482 . . . . . . . . . . .	L Near	 000002C7 _TEXT	
Math_Hyperbolic_Inverse_HArccosec 	P Near	 00000335 _TEXT	Length= 0000009D Public STDCALL
  $L000500 . . . . . . . . . . .	L Near	 000003CB _TEXT	
Math_Hyperbolic_Inverse_HArccos 	P Near	 000002CE _TEXT	Length= 00000067 Public STDCALL
  $L000494 . . . . . . . . . . .	L Near	 0000032E _TEXT	
Math_Hyperbolic_Inverse_HArccotan 	P Near	 000003D2 _TEXT	Length= 00000084 Public STDCALL
  $L000502 . . . . . . . . . . .	L Near	 0000044F _TEXT	
Math_Hyperbolic_Inverse_HArcsec 	P Near	 00000456 _TEXT	Length= 00000088 Public STDCALL
  $L000498 . . . . . . . . . . .	L Near	 000004D7 _TEXT	
Math_Hyperbolic_Inverse_HArcsin 	P Near	 000004DE _TEXT	Length= 00000065 Public STDCALL
  $L000491 . . . . . . . . . . .	L Near	 0000053C _TEXT	
Math_Hyperbolic_Inverse_HArctan 	P Near	 00000543 _TEXT	Length= 00000084 Public STDCALL
  $L000496 . . . . . . . . . . .	L Near	 000005C0 _TEXT	
Math_IEEEModulus . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Init  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccosec  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccos  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arccotan  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsec  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Inverse_Arcsin  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Ln  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_LogN_base . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_MantissaOf  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Max . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Min . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_ModulusTruncateDivisor  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Modulus . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Odd . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Pow . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_RadiansToDegrees  . . . . .	P Near	 000005C7 _TEXT	Length= 0000004A Public STDCALL
  $L000460 . . . . . . . . . . .	L Near	 0000060A _TEXT	
Math_Round . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sign  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqrt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Sqr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Tan . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_Trunc . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log10 . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log2  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_10_base2  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base10  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_2_base_e  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_log_e_base2 . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Math_pi  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCompare . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringCopy  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength2 . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringLength  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringSet . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StringHandling_StringUCase . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_BreakPoint  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_CommandLineArgs . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Debug_OutputString  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Execute . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Exit  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetCommandLineArgv  . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_GetTickCount  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_IsDebuggerPresent . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_LastError . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Alloc  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Destroy  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Free . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_GetProcessHeap . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Memset . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_New  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_SizeFor  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Memory_Size . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_ShowMessage . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
System_Sleep . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UnitTesting_Circle_Circumference .	P Near	 00000611 _TEXT	Length= 0000002F Public STDCALL
  $L000649 . . . . . . . . . . .	L Near	 0000063B _TEXT	
UnitTesting_Circle_ComputeArea .	P Near	 00000640 _TEXT	Length= 00000035 Public STDCALL
  $L000655 . . . . . . . . . . .	L Near	 00000670 _TEXT	
UnitTesting_Circle_Destructor  .	P Near	 00000675 _TEXT	Length= 0000002B Public STDCALL
  $L000656 . . . . . . . . . . .	L Near	 0000069B _TEXT	
UnitTesting_Circle_DrawSphere  .	P Near	 000006BF _TEXT	Length= 0000001F Public STDCALL
  $L000658 . . . . . . . . . . .	L Near	 000006D9 _TEXT	
UnitTesting_Circle_Draw  . . . .	P Near	 000006A0 _TEXT	Length= 0000001F Public STDCALL
  $L000653 . . . . . . . . . . .	L Near	 000006BA _TEXT	
UnitTesting_Circle_Name  . . . .	P Near	 000006DE _TEXT	Length= 00000014 Public STDCALL
  $L000651 . . . . . . . . . . .	L Near	 000006ED _TEXT	
UnitTesting_Circle_Type  . . . .	P Near	 0000072A _TEXT	Length= 00000013 Public STDCALL
  $L000650 . . . . . . . . . . .	L Near	 00000738 _TEXT	
UnitTesting_Circle_get_Radius  .	P Near	 000006F2 _TEXT	Length= 00000017 Public STDCALL
  $L000646 . . . . . . . . . . .	L Near	 00000704 _TEXT	
UnitTesting_Circle_put_Radius  .	P Near	 00000709 _TEXT	Length= 00000021 Public STDCALL
  $L000647 . . . . . . . . . . .	L Near	 00000721 _TEXT	
UnitTesting_Circle . . . . . . .	P Near	 0000073D _TEXT	Length= 00000025 Public STDCALL
UnitTesting_DoubleProxy_Destructor .	P Near	 00000762 _TEXT	Length= 0000001F Public STDCALL
  $L000788 . . . . . . . . . . .	L Near	 0000077C _TEXT	
UnitTesting_DoubleProxy_Swap . .	P Near	 00000781 _TEXT	Length= 0000006D Public STDCALL
  $L000784 . . . . . . . . . . .	L Near	 000007E7 _TEXT	
UnitTesting_DoubleProxy_isEqual 	P Near	 00000826 _TEXT	Length= 00000052 Public STDCALL
  $L000781 . . . . . . . . . . .	L Near	 00000871 _TEXT	
UnitTesting_DoubleProxy_lessThan .	P Near	 00000878 _TEXT	Length= 00000052 Public STDCALL
  $L000778 . . . . . . . . . . .	L Near	 000008C3 _TEXT	
UnitTesting_DoubleProxy  . . . .	P Near	 000007EE _TEXT	Length= 00000038 Public STDCALL
UnitTesting_DoubleSwapper_SwapEx .	P Near	 00000943 _TEXT	Length= 00000097 Public STDCALL
  $L000825 . . . . . . . . . . .	L Near	 000009D3 _TEXT	
UnitTesting_DoubleSwapper_Swap .	P Near	 000008CA _TEXT	Length= 00000079 Public STDCALL
  $L000813 . . . . . . . . . . .	L Near	 0000093C _TEXT	
UnitTesting_DoubleSwapper_lessThanEx .	P Near	 00000A34 _TEXT	Length= 00000078 Public STDCALL
  $L000819 . . . . . . . . . . .	L Near	 00000AA5 _TEXT	
UnitTesting_DoubleSwapper_lessThan .	P Near	 000009DA _TEXT	Length= 0000005A Public STDCALL
  $L000808 . . . . . . . . . . .	L Near	 00000A2D _TEXT	
UnitTesting_DoubleSwapper  . . .	P Near	 00000AAC _TEXT	Length= 0000001D Public STDCALL
UnitTesting_HObject_Destructor .	P Near	 00000AC9 _TEXT	Length= 0000000C Public STDCALL
  $L000860 . . . . . . . . . . .	L Near	 00000AD0 _TEXT	
UnitTesting_HObject  . . . . . .	P Near	 00000AD5 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_HelloWorld_Destructor 	P Near	 00000AEA _TEXT	Length= 0000001F Public STDCALL
  $L000908 . . . . . . . . . . .	L Near	 00000B04 _TEXT	
UnitTesting_HelloWorld_SayHello 	P Near	 00000B09 _TEXT	Length= 0000002C Public STDCALL
  $L000902 . . . . . . . . . . .	L Near	 00000B2E _TEXT	
UnitTesting_HelloWorld_ShowHello .	P Near	 00000B35 _TEXT	Length= 00000024 Public STDCALL
  $L000905 . . . . . . . . . . .	L Near	 00000B52 _TEXT	
UnitTesting_HelloWorld . . . . .	P Near	 00000B59 _TEXT	Length= 0000001F Public STDCALL
UnitTesting_Integers_Inline_Test .	P Near	 00000B78 _TEXT	Length= 000000C6 Public STDCALL
  $L000603 . . . . . . . . . . .	L Near	 00000C39 _TEXT	
UnitTesting_MonteCarlo_PI  . . .	P Near	 00000C3E _TEXT	Length= 0000010D Public STDCALL
  $L001403 . . . . . . . . . . .	L Near	 00000C62 _TEXT	
  $L001402 . . . . . . . . . . .	L Near	 00000C68 _TEXT	
  $L001405 . . . . . . . . . . .	L Near	 00000D00 _TEXT	
  $L001404 . . . . . . . . . . .	L Near	 00000D05 _TEXT	
  $L000863 . . . . . . . . . . .	L Near	 00000D44 _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles_Swap  P Near   00000DB3 _TEXT	Length= 00000095 Public STDCALL
  $L000759 . . . . . . . . . . .	L Near	 00000E41 _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles_getAt . P Near   00000EB6 _TEXT	Length= 00000024 Public STDCALL
  $L000757 . . . . . . . . . . .	L Near	 00000ED3 _TEXT	
UnitTesting_Objects_ArrayOfAutomobiles . P Near	  00000E48 _TEXT	Length= 0000006E Public STDCALL
  $L001414 . . . . . . . . . . .	L Near	 00000E90 _TEXT	
  $L001415 . . . . . . . . . . .	L Near	 00000E92 _TEXT	
  $L001416 . . . . . . . . . . .	L Near	 00000E9F _TEXT	
UnitTesting_Objects_Array_Destructor .	P Near	 00000D4B _TEXT	Length= 00000036 Public STDCALL
  $L001409 . . . . . . . . . . .	L Near	 00000D7C _TEXT	
  $L001407 . . . . . . . . . . .	L Near	 00000D7C _TEXT	
  $L000746 . . . . . . . . . . .	L Near	 00000D7C _TEXT	
UnitTesting_Objects_Array_get_length .	P Near	 00000D81 _TEXT	Length= 00000014 Public STDCALL
  $L000745 . . . . . . . . . . .	L Near	 00000D90 _TEXT	
UnitTesting_Objects_Array  . . .	P Near	 00000D95 _TEXT	Length= 0000001E Public STDCALL
UnitTesting_Objects_Automobile_Compare . P Near	  00000EDA _TEXT	Length= 00000091 Public STDCALL
  $L001417 . . . . . . . . . . .	L Near	 00000F32 _TEXT	
  $L001419 . . . . . . . . . . .	L Near	 00000F60 _TEXT	
  $L001418 . . . . . . . . . . .	L Near	 00000F60 _TEXT	
  $L000737 . . . . . . . . . . .	L Near	 00000F64 _TEXT	
UnitTesting_Objects_Automobile_get_Speed . P Near   00000F6B _TEXT	Length= 00000017 Public STDCALL
  $L000734 . . . . . . . . . . .	L Near	 00000F7D _TEXT	
UnitTesting_Objects_Automobile_put_Speed . P Near   00000F82 _TEXT	Length= 00000021 Public STDCALL
  $L000735 . . . . . . . . . . .	L Near	 00000F9A _TEXT	
UnitTesting_Objects_Automobile .	P Near	 00000FA3 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_Objects_ProxyObject 	P Near	 00000FC8 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Rnd_NextDblEx  . . .	P Near	 00001037 _TEXT	Length= 000000F7 Public STDCALL
  $L001422 . . . . . . . . . . .	L Near	 000010EE _TEXT	
  $L001423 . . . . . . . . . . .	L Near	 000010F0 _TEXT	
  $L000519 . . . . . . . . . . .	L Near	 00001129 _TEXT	
UnitTesting_Rnd_NextDbl  . . . .	P Near	 00000FDD _TEXT	Length= 00000013 Public STDCALL
  $L000522 . . . . . . . . . . .	L Near	 00000FEB _TEXT	
UnitTesting_Rnd_NextIntEx  . . .	P Near	 0000112E _TEXT	Length= 000000DF Public STDCALL
  $L001424 . . . . . . . . . . .	L Near	 000011DD _TEXT	
  $L001425 . . . . . . . . . . .	L Near	 000011DF _TEXT	
  $L000521 . . . . . . . . . . .	L Near	 00001208 _TEXT	
UnitTesting_Rnd_NextInt  . . . .	P Near	 00000FF0 _TEXT	Length= 00000013 Public STDCALL
  $L000523 . . . . . . . . . . .	L Near	 00000FFE _TEXT	
UnitTesting_Rnd_setSeed  . . . .	P Near	 00001021 _TEXT	Length= 00000016 Public STDCALL
  $L000517 . . . . . . . . . . .	L Near	 00001030 _TEXT	
UnitTesting_Rnd  . . . . . . . .	P Near	 00001003 _TEXT	Length= 0000001E Public STDCALL
UnitTesting_ShapeFactoryCreator_Create . P Near	  0000129A _TEXT	Length= 00000159 Public STDCALL
  $L001436 . . . . . . . . . . .	L Near	 000012CF _TEXT	
  $L001437 . . . . . . . . . . .	L Near	 000012D1 _TEXT	
  $L001439 . . . . . . . . . . .	L Near	 000012EB _TEXT	
  $L001442 . . . . . . . . . . .	L Near	 00001333 _TEXT	
  $L001443 . . . . . . . . . . .	L Near	 00001335 _TEXT	
  $L001440 . . . . . . . . . . .	L Near	 00001348 _TEXT	
  $L001446 . . . . . . . . . . .	L Near	 0000138A _TEXT	
  $L001447 . . . . . . . . . . .	L Near	 0000138C _TEXT	
  $L001444 . . . . . . . . . . .	L Near	 00001399 _TEXT	
  $L001450 . . . . . . . . . . .	L Near	 000013DB _TEXT	
  $L001451 . . . . . . . . . . .	L Near	 000013DD _TEXT	
  $L001448 . . . . . . . . . . .	L Near	 000013E8 _TEXT	
  $L001445 . . . . . . . . . . .	L Near	 000013E8 _TEXT	
  $L001441 . . . . . . . . . . .	L Near	 000013E8 _TEXT	
  $L000708 . . . . . . . . . . .	L Near	 000013EC _TEXT	
UnitTesting_ShapeFactoryCreator_Destructor . P Near   00001222 _TEXT	Length= 00000064 Public STDCALL
  $L001430 . . . . . . . . . . .	L Near	 0000124F _TEXT	
  $L001427 . . . . . . . . . . .	L Near	 00001255 _TEXT	
  $L001434 . . . . . . . . . . .	L Near	 0000127B _TEXT	
  $L001431 . . . . . . . . . . .	L Near	 00001281 _TEXT	
  $L000711 . . . . . . . . . . .	L Near	 00001281 _TEXT	
UnitTesting_ShapeFactoryCreator 	P Near	 00001286 _TEXT	Length= 00000014 Public STDCALL
UnitTesting_Shape  . . . . . . .	P Near	 0000120D _TEXT	Length= 00000015 Public STDCALL
UnitTesting_SimpleObject_Destructor 	P Near	 000013F3 _TEXT	Length= 0000001F Public STDCALL
  $L000771 . . . . . . . . . . .	L Near	 0000140D _TEXT	
UnitTesting_SimpleObject . . . .	P Near	 00001412 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_SortDoubleProxy_PrintObject  P Near	  00001427 _TEXT	Length= 00000050 Public STDCALL
  $L000854 . . . . . . . . . . .	L Near	 00001470 _TEXT	
UnitTesting_SortDoubleProxy_Sort2 	P Near	 0000155D _TEXT	Length= 000000F6 Public STDCALL
  $L001462 . . . . . . . . . . .	L Near	 00001585 _TEXT	
  $L001461 . . . . . . . . . . .	L Near	 0000158B _TEXT	
  $L001465 . . . . . . . . . . .	L Near	 000015B3 _TEXT	
  $L001464 . . . . . . . . . . .	L Near	 000015B9 _TEXT	
  $L001467 . . . . . . . . . . .	L Near	 00001642 _TEXT	
  $L001466 . . . . . . . . . . .	L Near	 00001647 _TEXT	
  $L001463 . . . . . . . . . . .	L Near	 0000164C _TEXT	
  $L000843 . . . . . . . . . . .	L Near	 0000164C _TEXT	
UnitTesting_SortDoubleProxy_SortEx .	P Near	 00001653 _TEXT	Length= 000000B8 Public STDCALL
  $L001470 . . . . . . . . . . .	L Near	 0000167B _TEXT	
  $L001469 . . . . . . . . . . .	L Near	 00001681 _TEXT	
  $L001473 . . . . . . . . . . .	L Near	 000016A5 _TEXT	
  $L001472 . . . . . . . . . . .	L Near	 000016AB _TEXT	
  $L001475 . . . . . . . . . . .	L Near	 000016FD _TEXT	
  $L001474 . . . . . . . . . . .	L Near	 000016FF _TEXT	
  $L001471 . . . . . . . . . . .	L Near	 00001704 _TEXT	
  $L000848 . . . . . . . . . . .	L Near	 00001704 _TEXT	
UnitTesting_SortDoubleProxy_Sort .	P Near	 00001477 _TEXT	Length= 000000E6 Public STDCALL
  $L001454 . . . . . . . . . . .	L Near	 0000149F _TEXT	
  $L001453 . . . . . . . . . . .	L Near	 000014A5 _TEXT	
  $L001457 . . . . . . . . . . .	L Near	 000014CD _TEXT	
  $L001456 . . . . . . . . . . .	L Near	 000014D3 _TEXT	
  $L001459 . . . . . . . . . . .	L Near	 0000154C _TEXT	
  $L001458 . . . . . . . . . . .	L Near	 00001551 _TEXT	
  $L001455 . . . . . . . . . . .	L Near	 00001556 _TEXT	
  $L000833 . . . . . . . . . . .	L Near	 00001556 _TEXT	
UnitTesting_SortDoubleProxy_Swap .	P Near	 0000170B _TEXT	Length= 00000061 Public STDCALL
  $L000839 . . . . . . . . . . .	L Near	 00001763 _TEXT	
UnitTesting_Square_ComputeArea .	P Near	 0000176C _TEXT	Length= 00000032 Public STDCALL
  $L000675 . . . . . . . . . . .	L Near	 00001799 _TEXT	
UnitTesting_Square_Destructor  .	P Near	 0000179E _TEXT	Length= 0000002B Public STDCALL
  $L000665 . . . . . . . . . . .	L Near	 000017C4 _TEXT	
UnitTesting_Square_DrawCube  . .	P Near	 000017E8 _TEXT	Length= 0000001F Public STDCALL
  $L000681 . . . . . . . . . . .	L Near	 00001802 _TEXT	
UnitTesting_Square_Draw  . . . .	P Near	 000017C9 _TEXT	Length= 0000001F Public STDCALL
  $L000679 . . . . . . . . . . .	L Near	 000017E3 _TEXT	
UnitTesting_Square_Name  . . . .	P Near	 0000183F _TEXT	Length= 00000014 Public STDCALL
  $L000677 . . . . . . . . . . .	L Near	 0000184E _TEXT	
UnitTesting_Square_Type  . . . .	P Near	 00001853 _TEXT	Length= 00000013 Public STDCALL
  $L000676 . . . . . . . . . . .	L Near	 00001861 _TEXT	
UnitTesting_Square_get_Height  .	P Near	 00001807 _TEXT	Length= 00000017 Public STDCALL
  $L000672 . . . . . . . . . . .	L Near	 00001819 _TEXT	
UnitTesting_Square_get_Width . .	P Near	 0000188B _TEXT	Length= 00000017 Public STDCALL
  $L000668 . . . . . . . . . . .	L Near	 0000189D _TEXT	
UnitTesting_Square_put_Height  .	P Near	 0000181E _TEXT	Length= 00000021 Public STDCALL
  $L000673 . . . . . . . . . . .	L Near	 00001836 _TEXT	
UnitTesting_Square_put_Width . .	P Near	 000018A2 _TEXT	Length= 00000021 Public STDCALL
  $L000669 . . . . . . . . . . .	L Near	 000018BA _TEXT	
UnitTesting_Square . . . . . . .	P Near	 00001866 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_SummationSeries_Ackermman 	P Near	 000018C3 _TEXT	Length= 000000AA Public STDCALL
  $L001479 . . . . . . . . . . .	L Near	 000018E6 _TEXT	
  $L001477 . . . . . . . . . . .	L Near	 000018F8 _TEXT	
  $L001482 . . . . . . . . . . .	L Near	 00001917 _TEXT	
  $L001480 . . . . . . . . . . .	L Near	 00001937 _TEXT	
  $L001481 . . . . . . . . . . .	L Near	 00001966 _TEXT	
  $L001478 . . . . . . . . . . .	L Near	 00001966 _TEXT	
  $L000599 . . . . . . . . . . .	L Near	 00001966 _TEXT	
UnitTesting_SummationSeries_ComputeRenderGamma . P Near	  0000196D _TEXT	Length= 00000100 Public STDCALL
  $L001484 . . . . . . . . . . .	L Near	 00001999 _TEXT	
  $L001483 . . . . . . . . . . .	L Near	 0000199F _TEXT	
  $L001485 . . . . . . . . . . .	L Near	 00001A48 _TEXT	
  $L000592 . . . . . . . . . . .	L Near	 00001A68 _TEXT	
UnitTesting_SummationSeries_GeometricSeriesClosedSum . P Near   00001A6D _TEXT	Length= 00000079 Public STDCALL
  $L000589 . . . . . . . . . . .	L Near	 00001ADF _TEXT	
UnitTesting_SummationSeries_GeometricSeriesSum . P Near	  00001AE6 _TEXT	Length= 00000096 Public STDCALL
  $L001487 . . . . . . . . . . .	L Near	 00001B1E _TEXT	
  $L001486 . . . . . . . . . . .	L Near	 00001B24 _TEXT	
  $L001490 . . . . . . . . . . .	L Near	 00001B44 _TEXT	
  $L001489 . . . . . . . . . . .	L Near	 00001B4A _TEXT	
  $L001491 . . . . . . . . . . .	L Near	 00001B67 _TEXT	
  $L001488 . . . . . . . . . . .	L Near	 00001B70 _TEXT	
  $L000568 . . . . . . . . . . .	L Near	 00001B75 _TEXT	
UnitTesting_SummationSeries_Horner_GeometricSeriesSum  P Near   00001B7C _TEXT	Length= 0000007B Public STDCALL
  $L001493 . . . . . . . . . . .	L Near	 00001BA0 _TEXT	
  $L001492 . . . . . . . . . . .	L Near	 00001BA6 _TEXT	
  $L001494 . . . . . . . . . . .	L Near	 00001BEB _TEXT	
  $L000584 . . . . . . . . . . .	L Near	 00001BF0 _TEXT	
UnitTesting_SummationSeries_Horner_Horner  P Near   00001BF7 _TEXT	Length= 0000007A Public STDCALL
  $L001496 . . . . . . . . . . .	L Near	 00001C32 _TEXT	
  $L001495 . . . . . . . . . . .	L Near	 00001C38 _TEXT	
  $L001497 . . . . . . . . . . .	L Near	 00001C65 _TEXT	
  $L000578 . . . . . . . . . . .	L Near	 00001C6A _TEXT	
UnitTesting_SummationSeries_SimpleSum 	P Near	 00001C71 _TEXT	Length= 00000053 Public STDCALL
  $L001499 . . . . . . . . . . .	L Near	 00001C98 _TEXT	
  $L001498 . . . . . . . . . . .	L Near	 00001C9E _TEXT	
  $L001500 . . . . . . . . . . .	L Near	 00001CB8 _TEXT	
  $L000564 . . . . . . . . . . .	L Near	 00001CBD _TEXT	
UnitTesting_SwapperObject  . . .	P Near	 00001CC4 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_Test1_TestRunner_main 	P Near	 000048EB _TEXT	Length= 00002700 Public STDCALL
  $L001630 . . . . . . . . . . .	L Near	 00004910 _TEXT	
  $L001629 . . . . . . . . . . .	L Near	 00004916 _TEXT	
  $L001631 . . . . . . . . . . .	L Near	 00004968 _TEXT	
  $L001632 . . . . . . . . . . .	L Near	 000049A8 _TEXT	
  $L001633 . . . . . . . . . . .	L Near	 000049D2 _TEXT	
  __HELLO_PART . . . . . . . . .	L Near	 000049D5 _TEXT	
  $L001634 . . . . . . . . . . .	L Near	 00004A0F _TEXT	
  $L001637 . . . . . . . . . . .	L Near	 00004AF7 _TEXT	
  $L001636 . . . . . . . . . . .	L Near	 00004AFD _TEXT	
  $L001638 . . . . . . . . . . .	L Near	 00004B2E _TEXT	
  $L001640 . . . . . . . . . . .	L Near	 00004B30 _TEXT	
  $L001639 . . . . . . . . . . .	L Near	 00004B30 _TEXT	
  $L001642 . . . . . . . . . . .	L Near	 00004B45 _TEXT	
  $L001641 . . . . . . . . . . .	L Near	 00004B47 _TEXT	
  __CALC_FACTORIAL . . . . . . .	L Near	 00004B5A _TEXT	
  $L001644 . . . . . . . . . . .	L Near	 00004BB4 _TEXT	
  __END_FACTORIAL  . . . . . . .	L Near	 00004BB6 _TEXT	
  $L001646 . . . . . . . . . . .	L Near	 00004D44 _TEXT	
  $L001647 . . . . . . . . . . .	L Near	 00004D96 _TEXT	
  $L001648 . . . . . . . . . . .	L Near	 00004DE8 _TEXT	
  $L001649 . . . . . . . . . . .	L Near	 00004E3A _TEXT	
  $L001650 . . . . . . . . . . .	L Near	 00004ED4 _TEXT	
  $L001653 . . . . . . . . . . .	L Near	 00004EE3 _TEXT	
  $L001652 . . . . . . . . . . .	L Near	 00004EE9 _TEXT	
  $L001654 . . . . . . . . . . .	L Near	 00004F54 _TEXT	
  $L001656 . . . . . . . . . . .	L Near	 00004F61 _TEXT	
  $L001655 . . . . . . . . . . .	L Near	 00004F61 _TEXT	
  $L001657 . . . . . . . . . . .	L Near	 0000502E _TEXT	
  _BlockRndDoubles . . . . . . .	L Near	 0000515F _TEXT	
  $L001658 . . . . . . . . . . .	L Near	 000057C4 _TEXT	
  $L001660 . . . . . . . . . . .	L Near	 00005986 _TEXT	
  __except_handlerXXX001663  . .	L Near	 00005A2C _TEXT	
  $L001666 . . . . . . . . . . .	L Near	 00005A68 _TEXT	
  $L001662 . . . . . . . . . . .	L Near	 00005A6A _TEXT	
  $L001665 . . . . . . . . . . .	L Near	 00005A80 _TEXT	
  $L001667 . . . . . . . . . . .	L Near	 00005BCC _TEXT	
  $L001668 . . . . . . . . . . .	L Near	 00005BCE _TEXT	
  $L001669 . . . . . . . . . . .	L Near	 00005C5E _TEXT	
  $L001670 . . . . . . . . . . .	L Near	 00005C6D _TEXT	
  $L001671 . . . . . . . . . . .	L Near	 00005C6F _TEXT	
  $L001673 . . . . . . . . . . .	L Near	 00005CB3 _TEXT	
  $L001674 . . . . . . . . . . .	L Near	 00005CDC _TEXT	
  $L001675 . . . . . . . . . . .	L Near	 00005CDE _TEXT	
  $L001676 . . . . . . . . . . .	L Near	 00005E7A _TEXT	
  $L001678 . . . . . . . . . . .	L Near	 0000622B _TEXT	
  $L001677 . . . . . . . . . . .	L Near	 00006231 _TEXT	
  $L001679 . . . . . . . . . . .	L Near	 0000628F _TEXT	
  $L001680 . . . . . . . . . . .	L Near	 00006441 _TEXT	
  $L001681 . . . . . . . . . . .	L Near	 00006443 _TEXT	
  $L001682 . . . . . . . . . . .	L Near	 00006469 _TEXT	
  $L001686 . . . . . . . . . . .	L Near	 00006529 _TEXT	
  $L001684 . . . . . . . . . . .	L Near	 00006540 _TEXT	
  $L001687 . . . . . . . . . . .	L Near	 00006550 _TEXT	
  $L001688 . . . . . . . . . . .	L Near	 000065DC _TEXT	
  $L001690 . . . . . . . . . . .	L Near	 00006612 _TEXT	
  $L001692 . . . . . . . . . . .	L Near	 0000664D _TEXT	
  $L001694 . . . . . . . . . . .	L Near	 0000668C _TEXT	
  $L001696 . . . . . . . . . . .	L Near	 000066D4 _TEXT	
  $L001698 . . . . . . . . . . .	L Near	 0000670F _TEXT	
  $L001700 . . . . . . . . . . .	L Near	 0000674A _TEXT	
  $L001702 . . . . . . . . . . .	L Near	 00006785 _TEXT	
  $L001705 . . . . . . . . . . .	L Near	 00006852 _TEXT	
  $L001707 . . . . . . . . . . .	L Near	 0000688F _TEXT	
  $L001709 . . . . . . . . . . .	L Near	 000068CC _TEXT	
  $L001710 . . . . . . . . . . .	L Near	 00006908 _TEXT	
  $L001711 . . . . . . . . . . .	L Near	 0000690A _TEXT	
  $L001712 . . . . . . . . . . .	L Near	 00006918 _TEXT	
  $L001713 . . . . . . . . . . .	L Near	 0000696B _TEXT	
  $L001714 . . . . . . . . . . .	L Near	 0000696D _TEXT	
  $L001715 . . . . . . . . . . .	L Near	 0000697B _TEXT	
  $L001717 . . . . . . . . . . .	L Near	 00006B3D _TEXT	
  $L001716 . . . . . . . . . . .	L Near	 00006B43 _TEXT	
  $L001718 . . . . . . . . . . .	L Near	 00006B9E _TEXT	
  $L001720 . . . . . . . . . . .	L Near	 00006C1C _TEXT	
  $L001719 . . . . . . . . . . .	L Near	 00006C22 _TEXT	
  $L001721 . . . . . . . . . . .	L Near	 00006C7D _TEXT	
  $L001723 . . . . . . . . . . .	L Near	 00006CB0 _TEXT	
  $L001724 . . . . . . . . . . .	L Near	 00006CBB _TEXT	
  $L001722 . . . . . . . . . . .	L Near	 00006CCB _TEXT	
  $L001726 . . . . . . . . . . .	L Near	 00006E3D _TEXT	
  $L001725 . . . . . . . . . . .	L Near	 00006E43 _TEXT	
  $L001727 . . . . . . . . . . .	L Near	 00006EA0 _TEXT	
  $L001729 . . . . . . . . . . .	L Near	 00006ED0 _TEXT	
  $L001728 . . . . . . . . . . .	L Near	 00006ED6 _TEXT	
  $L001730 . . . . . . . . . . .	L Near	 00006F33 _TEXT	
  $L001179 . . . . . . . . . . .	L Near	 00006F92 _TEXT	
  $L001733 . . . . . . . . . . .	L Near	 00006F9D _TEXT	
  $L001735 . . . . . . . . . . .	L Near	 00006FA8 _TEXT	
  $L001740 . . . . . . . . . . .	L Near	 00006FB3 _TEXT	
  $L001741 . . . . . . . . . . .	L Near	 00006FBE _TEXT	
  $L001742 . . . . . . . . . . .	L Near	 00006FC9 _TEXT	
  $L001743 . . . . . . . . . . .	L Near	 00006FD4 _TEXT	
  $L001748 . . . . . . . . . . .	L Near	 00006FDC _TEXT	
  $L001750 . . . . . . . . . . .	L Near	 00006FE4 _TEXT	
UnitTesting_TestArrays_DoTest  .	P Near	 00001D0E _TEXT	Length= 00000A30 Public STDCALL
  $L001504 . . . . . . . . . . .	L Near	 00002241 _TEXT	
  $L001503 . . . . . . . . . . .	L Near	 0000224D _TEXT	
  $L001505 . . . . . . . . . . .	L Near	 000022B3 _TEXT	
  $L001507 . . . . . . . . . . .	L Near	 0000255C _TEXT	
  $L001506 . . . . . . . . . . .	L Near	 00002568 _TEXT	
  $L001508 . . . . . . . . . . .	L Near	 000025EB _TEXT	
  $L001510 . . . . . . . . . . .	L Near	 000026A7 _TEXT	
  $L001509 . . . . . . . . . . .	L Near	 000026B3 _TEXT	
  $L001511 . . . . . . . . . . .	L Near	 000026F8 _TEXT	
  $L001127 . . . . . . . . . . .	L Near	 00002731 _TEXT	
UnitTesting_TestArrays_get_Name 	P Near	 00001CD9 _TEXT	Length= 00000013 Public STDCALL
  $L001117 . . . . . . . . . . .	L Near	 00001CE7 _TEXT	
UnitTesting_TestArrays_printChars 	P Near	 0000273E _TEXT	Length= 00000105 Public STDCALL
  $L001519 . . . . . . . . . . .	L Near	 00002772 _TEXT	
  $L001518 . . . . . . . . . . .	L Near	 00002778 _TEXT	
  $L001520 . . . . . . . . . . .	L Near	 000027C8 _TEXT	
  __except_handlerXXX001515  . .	L Near	 000027CA _TEXT	
  $L001521 . . . . . . . . . . .	L Near	 00002806 _TEXT	
  $L001522 . . . . . . . . . . .	L Near	 00002824 _TEXT	
  $L001514 . . . . . . . . . . .	L Near	 00002826 _TEXT	
  $L001517 . . . . . . . . . . .	L Near	 0000283C _TEXT	
  $L001120 . . . . . . . . . . .	L Near	 0000283C _TEXT	
UnitTesting_TestArrays_put_Name 	P Near	 00001CEC _TEXT	Length= 00000016 Public STDCALL
  $L001118 . . . . . . . . . . .	L Near	 00001CFB _TEXT	
UnitTesting_TestArrays . . . . .	P Near	 00001D02 _TEXT	Length= 0000000C Public STDCALL
UnitTesting_TestFloatingPoint_Area .	P Near	 00002843 _TEXT	Length= 0000007D Public STDCALL
  $L001109 . . . . . . . . . . .	L Near	 000028B9 _TEXT	
UnitTesting_TestFloatingPoint_Destructor . P Near   000028C0 _TEXT	Length= 0000002B Public STDCALL
  $L001101 . . . . . . . . . . .	L Near	 000028E6 _TEXT	
UnitTesting_TestFloatingPoint_Power 	P Near	 000028EB _TEXT	Length= 000000D9 Public STDCALL
  $L001523 . . . . . . . . . . .	L Near	 00002912 _TEXT	
  $L001525 . . . . . . . . . . .	L Near	 0000296A _TEXT	
  $L001526 . . . . . . . . . . .	L Near	 000029BD _TEXT	
  $L001103 . . . . . . . . . . .	L Near	 000029BD _TEXT	
UnitTesting_TestFloatingPoint_speed 	P Near	 000029DC _TEXT	Length= 00000030 Public STDCALL
  $L001106 . . . . . . . . . . .	L Near	 00002A05 _TEXT	
UnitTesting_TestFloatingPoint  .	P Near	 000029C4 _TEXT	Length= 00000018 Public STDCALL
UnitTesting_TestIntegers_Calc1 .	P Near	 00002A0C _TEXT	Length= 000000A3 Public STDCALL
  $L001038 . . . . . . . . . . .	L Near	 00002AA8 _TEXT	
UnitTesting_TestIntegers_Calc2 .	P Near	 00002AAF _TEXT	Length= 0000006C Public STDCALL
  $L001046 . . . . . . . . . . .	L Near	 00002B14 _TEXT	
UnitTesting_TestIntegers_Factorial .	P Near	 00002B1B _TEXT	Length= 00000047 Public STDCALL
  $L001527 . . . . . . . . . . .	L Near	 00002B39 _TEXT	
  $L001528 . . . . . . . . . . .	L Near	 00002B5B _TEXT	
  $L001088 . . . . . . . . . . .	L Near	 00002B5B _TEXT	
UnitTesting_TestIntegers_SwapDebug .	P Near	 00002BD0 _TEXT	Length= 00000028 Public STDCALL
  $L001090 . . . . . . . . . . .	L Near	 00002BF1 _TEXT	
UnitTesting_TestIntegers_Swap  .	P Near	 00002B8D _TEXT	Length= 00000043 Public STDCALL
  $L001042 . . . . . . . . . . .	L Near	 00002BC9 _TEXT	
UnitTesting_TestIntegers_TestExpressions . P Near   00002EA4 _TEXT	Length= 00000CD0 Public STDCALL
  $L001530 . . . . . . . . . . .	L Near	 00002F1A _TEXT	
  $L001532 . . . . . . . . . . .	L Near	 00002F79 _TEXT	
  $L001531 . . . . . . . . . . .	L Near	 00002F9E _TEXT	
  $L001534 . . . . . . . . . . .	L Near	 00002FB0 _TEXT	
  $L001537 . . . . . . . . . . .	L Near	 00003000 _TEXT	
  $L001535 . . . . . . . . . . .	L Near	 00003000 _TEXT	
  $L001536 . . . . . . . . . . .	L Near	 00003010 _TEXT	
  $L001541 . . . . . . . . . . .	L Near	 000039C1 _TEXT	
  $L001539 . . . . . . . . . . .	L Near	 000039C3 _TEXT	
  $L001540 . . . . . . . . . . .	L Near	 000039FD _TEXT	
  $L001544 . . . . . . . . . . .	L Near	 00003A65 _TEXT	
  $L001542 . . . . . . . . . . .	L Near	 00003A67 _TEXT	
  $L001543 . . . . . . . . . . .	L Near	 00003AA9 _TEXT	
  $L001547 . . . . . . . . . . .	L Near	 00003B00 _TEXT	
  $L001545 . . . . . . . . . . .	L Near	 00003B02 _TEXT	
  $L001546 . . . . . . . . . . .	L Near	 00003B4D _TEXT	
  $L000957 . . . . . . . . . . .	L Near	 00003B6F _TEXT	
UnitTesting_TestIntegers_add . .	P Near	 00002C21 _TEXT	Length= 0000003D Public STDCALL
  $L001051 . . . . . . . . . . .	L Near	 00002C57 _TEXT	
UnitTesting_TestIntegers_divide2 .	P Near	 00002C9F _TEXT	Length= 0000005C Public STDCALL
  $L001076 . . . . . . . . . . .	L Near	 00002CF4 _TEXT	
UnitTesting_TestIntegers_divide 	P Near	 00002C5E _TEXT	Length= 00000041 Public STDCALL
  $L001066 . . . . . . . . . . .	L Near	 00002C98 _TEXT	
UnitTesting_TestIntegers_getArea2 	P Near	 00002D1F _TEXT	Length= 00000035 Public STDCALL
  $L000954 . . . . . . . . . . .	L Near	 00002D4F _TEXT	
UnitTesting_TestIntegers_getArea .	P Near	 00002CFB _TEXT	Length= 00000024 Public STDCALL
  $L000953 . . . . . . . . . . .	L Near	 00002D1A _TEXT	
UnitTesting_TestIntegers_get_Height 	P Near	 00002B62 _TEXT	Length= 00000014 Public STDCALL
  $L000950 . . . . . . . . . . .	L Near	 00002B71 _TEXT	
UnitTesting_TestIntegers_get_Width .	P Near	 00002BF8 _TEXT	Length= 00000013 Public STDCALL
  $L000946 . . . . . . . . . . .	L Near	 00002C06 _TEXT	
UnitTesting_TestIntegers_modulus .	P Near	 00002D54 _TEXT	Length= 00000043 Public STDCALL
  $L001071 . . . . . . . . . . .	L Near	 00002D90 _TEXT	
UnitTesting_TestIntegers_multiple_assignments  P Near   00002D97 _TEXT	Length= 0000007B Public STDCALL
  $L001081 . . . . . . . . . . .	L Near	 00002E0B _TEXT	
UnitTesting_TestIntegers_multiply 	P Near	 00002E12 _TEXT	Length= 0000003F Public STDCALL
  $L001061 . . . . . . . . . . .	L Near	 00002E4A _TEXT	
UnitTesting_TestIntegers_put_Height 	P Near	 00002B76 _TEXT	Length= 00000017 Public STDCALL
  $L000951 . . . . . . . . . . .	L Near	 00002B86 _TEXT	
UnitTesting_TestIntegers_put_Width .	P Near	 00002C0B _TEXT	Length= 00000016 Public STDCALL
  $L000947 . . . . . . . . . . .	L Near	 00002C1A _TEXT	
UnitTesting_TestIntegers_subs  .	P Near	 00002E51 _TEXT	Length= 0000003F Public STDCALL
  $L001056 . . . . . . . . . . .	L Near	 00002E89 _TEXT	
UnitTesting_TestIntegers . . . .	P Near	 00002E90 _TEXT	Length= 00000014 Public STDCALL
UnitTesting_TestProperties_Destructor 	P Near	 00003B74 _TEXT	Length= 000000A7 Public STDCALL
  $L001551 . . . . . . . . . . .	L Near	 00003BB7 _TEXT	
  $L001552 . . . . . . . . . . .	L Near	 00003BC2 _TEXT	
  $L001550 . . . . . . . . . . .	L Near	 00003BD2 _TEXT	
  $L001548 . . . . . . . . . . .	L Near	 00003BD2 _TEXT	
  $L001554 . . . . . . . . . . .	L Near	 00003BFB _TEXT	
  $L001555 . . . . . . . . . . .	L Near	 00003C06 _TEXT	
  $L001553 . . . . . . . . . . .	L Near	 00003C16 _TEXT	
  $L000894 . . . . . . . . . . .	L Near	 00003C16 _TEXT	
UnitTesting_TestProperties_get_Shapes 	P Near	 00003C1B _TEXT	Length= 00000015 Public STDCALL
  $L000883 . . . . . . . . . . .	L Near	 00003C2B _TEXT	
UnitTesting_TestProperties_node_Destructor . P Near   00004009 _TEXT	Length= 00000093 Public STDCALL
  $L001590 . . . . . . . . . . .	L Near	 00004036 _TEXT	
  $L001587 . . . . . . . . . . .	L Near	 0000403C _TEXT	
  $L001594 . . . . . . . . . . .	L Near	 00004064 _TEXT	
  $L001591 . . . . . . . . . . .	L Near	 0000406A _TEXT	
  $L001598 . . . . . . . . . . .	L Near	 00004091 _TEXT	
  $L001595 . . . . . . . . . . .	L Near	 00004097 _TEXT	
  $L000876 . . . . . . . . . . .	L Near	 00004097 _TEXT	
UnitTesting_TestProperties_node 	P Near	 0000409C _TEXT	Length= 00000014 Public STDCALL
UnitTesting_TestProperties_put_Shapes 	P Near	 00003C30 _TEXT	Length= 000003BB Public STDCALL
  $L001556 . . . . . . . . . . .	L Near	 00003C85 _TEXT	
  $L001557 . . . . . . . . . . .	L Near	 00003C87 _TEXT	
  $L001558 . . . . . . . . . . .	L Near	 00003CB7 _TEXT	
  $L001559 . . . . . . . . . . .	L Near	 00003CB9 _TEXT	
  $L001560 . . . . . . . . . . .	L Near	 00003CE9 _TEXT	
  $L001561 . . . . . . . . . . .	L Near	 00003CEB _TEXT	
  $L001563 . . . . . . . . . . .	L Near	 00003D11 _TEXT	
  $L001564 . . . . . . . . . . .	L Near	 00003D57 _TEXT	
  $L001565 . . . . . . . . . . .	L Near	 00003D59 _TEXT	
  $L001567 . . . . . . . . . . .	L Near	 00003D80 _TEXT	
  $L001568 . . . . . . . . . . .	L Near	 00003DBA _TEXT	
  $L001569 . . . . . . . . . . .	L Near	 00003DBC _TEXT	
  $L001573 . . . . . . . . . . .	L Near	 00003EB2 _TEXT	
  $L001574 . . . . . . . . . . .	L Near	 00003EBD _TEXT	
  $L001572 . . . . . . . . . . .	L Near	 00003ECD _TEXT	
  $L001570 . . . . . . . . . . .	L Near	 00003ECD _TEXT	
  $L001575 . . . . . . . . . . .	L Near	 00003EE7 _TEXT	
  $L001577 . . . . . . . . . . .	L Near	 00003F24 _TEXT	
  $L001576 . . . . . . . . . . .	L Near	 00003F30 _TEXT	
  $L001578 . . . . . . . . . . .	L Near	 00003F5D _TEXT	
  $L001579 . . . . . . . . . . .	L Near	 00003F88 _TEXT	
  $L001580 . . . . . . . . . . .	L Near	 00003F8A _TEXT	
  $L001581 . . . . . . . . . . .	L Near	 00003F98 _TEXT	
  $L000884 . . . . . . . . . . .	L Near	 00003FBD _TEXT	
  $L001583 . . . . . . . . . . .	L Near	 00003FCA _TEXT	
  $L001584 . . . . . . . . . . .	L Near	 00003FD5 _TEXT	
  $L001585 . . . . . . . . . . .	L Near	 00003FE4 _TEXT	
UnitTesting_TestProperties . . .	P Near	 00003FEB _TEXT	Length= 0000001E Public STDCALL
UnitTesting_TestSwitch_RunTest .	P Near	 000040B0 _TEXT	Length= 000000E6 Public STDCALL
  $L001600 . . . . . . . . . . .	L Near	 000040F4 _TEXT	
  $L001601 . . . . . . . . . . .	L Near	 0000410C _TEXT	
  $L001602 . . . . . . . . . . .	L Near	 00004121 _TEXT	
  $L001603 . . . . . . . . . . .	L Near	 00004136 _TEXT	
  $L001604 . . . . . . . . . . .	L Near	 0000414B _TEXT	
  $L001605 . . . . . . . . . . .	L Near	 0000415E _TEXT	
  $L001606 . . . . . . . . . . .	L Near	 00004173 _TEXT	
  $L001599 . . . . . . . . . . .	L Near	 0000418F _TEXT	
  $L000619 . . . . . . . . . . .	L Near	 0000418F _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Name  P Near   000041AD _TEXT	Length= 00000014 Public STDCALL
  $L000561 . . . . . . . . . . .	L Near	 000041BC _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_Sample  P Near   000041C1 _TEXT	Length= 0000003E Public STDCALL
  $L000560 . . . . . . . . . . .	L Near	 000041FA _TEXT	
UnitTesting_TestVirtuals_ExponentialRV_get_MU  P Near   00004196 _TEXT	Length= 00000017 Public STDCALL
  $L000557 . . . . . . . . . . .	L Near	 000041A8 _TEXT	
UnitTesting_TestVirtuals_ExponentialRV . P Near	  000041FF _TEXT	Length= 00000032 Public STDCALL
UnitTesting_TestVirtuals_RandomVariable_Name . P Near   00004231 _TEXT	Length= 00000014 Public STDCALL
  $L000528 . . . . . . . . . . .	L Near	 00004240 _TEXT	
UnitTesting_TestVirtuals_RandomVariable  P Near	  00004245 _TEXT	Length= 00000015 Public STDCALL
UnitTesting_TestVirtuals_SimpleRV_Name . P Near	  0000425A _TEXT	Length= 00000014 Public STDCALL
  $L000533 . . . . . . . . . . .	L Near	 00004269 _TEXT	
UnitTesting_TestVirtuals_SimpleRV_Sample . P Near   0000426E _TEXT	Length= 00000013 Public STDCALL
  $L000532 . . . . . . . . . . .	L Near	 0000427C _TEXT	
UnitTesting_TestVirtuals_SimpleRV 	P Near	 00004281 _TEXT	Length= 0000001D Public STDCALL
UnitTesting_TestVirtuals_UniformRV_Name  P Near	  0000429E _TEXT	Length= 00000014 Public STDCALL
  $L000551 . . . . . . . . . . .	L Near	 000042AD _TEXT	
UnitTesting_TestVirtuals_UniformRV_Sample  P Near   000042B2 _TEXT	Length= 0000005E Public STDCALL
  $L000550 . . . . . . . . . . .	L Near	 0000430B _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_U . P Near   00004310 _TEXT	Length= 00000017 Public STDCALL
  $L000540 . . . . . . . . . . .	L Near	 00004322 _TEXT	
UnitTesting_TestVirtuals_UniformRV_get_V . P Near   0000438D _TEXT	Length= 00000017 Public STDCALL
  $L000544 . . . . . . . . . . .	L Near	 0000439F _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_U . P Near   00004327 _TEXT	Length= 00000021 Public STDCALL
  $L000541 . . . . . . . . . . .	L Near	 0000433F _TEXT	
UnitTesting_TestVirtuals_UniformRV_put_V . P Near   000043A4 _TEXT	Length= 00000021 Public STDCALL
  $L000545 . . . . . . . . . . .	L Near	 000043BC _TEXT	
UnitTesting_TestVirtuals_UniformRV .	P Near	 00004348 _TEXT	Length= 00000045 Public STDCALL
UnitTesting_Triangle_ComputeArea .	P Near	 000043FD _TEXT	Length= 0000004D Public STDCALL
  $L000701 . . . . . . . . . . .	L Near	 00004445 _TEXT	
UnitTesting_Triangle_Destructor 	P Near	 0000444A _TEXT	Length= 0000002D Public STDCALL
  $L000702 . . . . . . . . . . .	L Near	 00004472 _TEXT	
UnitTesting_Triangle_DrawPiramid .	P Near	 00004496 _TEXT	Length= 0000001F Public STDCALL
  $L000704 . . . . . . . . . . .	L Near	 000044B0 _TEXT	
UnitTesting_Triangle_Draw  . . .	P Near	 00004477 _TEXT	Length= 0000001F Public STDCALL
  $L000699 . . . . . . . . . . .	L Near	 00004491 _TEXT	
UnitTesting_Triangle_Name  . . .	P Near	 000044ED _TEXT	Length= 00000014 Public STDCALL
  $L000697 . . . . . . . . . . .	L Near	 000044FC _TEXT	
UnitTesting_Triangle_Type  . . .	P Near	 00004501 _TEXT	Length= 00000013 Public STDCALL
  $L000696 . . . . . . . . . . .	L Near	 0000450F _TEXT	
UnitTesting_Triangle_get_Base  .	P Near	 000043C5 _TEXT	Length= 00000017 Public STDCALL
  $L000689 . . . . . . . . . . .	L Near	 000043D7 _TEXT	
UnitTesting_Triangle_get_High  .	P Near	 000044B5 _TEXT	Length= 00000017 Public STDCALL
  $L000693 . . . . . . . . . . .	L Near	 000044C7 _TEXT	
UnitTesting_Triangle_put_Base  .	P Near	 000043DC _TEXT	Length= 00000021 Public STDCALL
  $L000690 . . . . . . . . . . .	L Near	 000043F4 _TEXT	
UnitTesting_Triangle_put_High  .	P Near	 000044CC _TEXT	Length= 00000021 Public STDCALL
  $L000694 . . . . . . . . . . .	L Near	 000044E4 _TEXT	
UnitTesting_Triangle . . . . . .	P Near	 00004514 _TEXT	Length= 00000025 Public STDCALL
UnitTesting_Visitor_Visit  . . .	P Near	 00004539 _TEXT	Length= 00000140 Public STDCALL
  $L001610 . . . . . . . . . . .	L Near	 0000458F _TEXT	
  $L001611 . . . . . . . . . . .	L Near	 000045BE _TEXT	
  $L001612 . . . . . . . . . . .	L Near	 000045ED _TEXT	
  $L001613 . . . . . . . . . . .	L Near	 0000461C _TEXT	
  $L001609 . . . . . . . . . . .	L Near	 0000461D _TEXT	
  $L001614 . . . . . . . . . . .	L Near	 00004637 _TEXT	
  $L001616 . . . . . . . . . . .	L Near	 0000464F _TEXT	
  $L000713 . . . . . . . . . . .	L Near	 00004672 _TEXT	
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
__System_Hpp_Runtime_Init  . . .	P Near	 00006FEB _TEXT	Length= 00000096 Public STDCALL
__member_Init@UnitTesting_Circle .	P Near	 00004679 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_DoubleProxy 	P Near	 00004690 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_Objects_Array  P Near	  000046A7 _TEXT	Length= 0000001E Public STDCALL
__member_Init@UnitTesting_Objects_Automobile . P Near   000046C5 _TEXT	Length= 00000017 Public STDCALL
__member_Init@UnitTesting_Rnd  .	P Near	 000046DC _TEXT	Length= 00000041 Public STDCALL
__member_Init@UnitTesting_ShapeFactoryCreator  P Near   0000471D _TEXT	Length= 0000003C Public STDCALL
  $L001618 . . . . . . . . . . .	L Near	 00004744 _TEXT	
  $L001619 . . . . . . . . . . .	L Near	 00004746 _TEXT	
__member_Init@UnitTesting_Square .	P Near	 00004759 _TEXT	Length= 0000001F Public STDCALL
__member_Init@UnitTesting_TestIntegers . P Near	  00004778 _TEXT	Length= 0000003F Public STDCALL
__member_Init@UnitTesting_TestProperties_node  P Near   000048A6 _TEXT	Length= 00000026 Public STDCALL
__member_Init@UnitTesting_TestProperties . P Near   000047B7 _TEXT	Length= 000000EF Public STDCALL
  $L001620 . . . . . . . . . . .	L Near	 000047EC _TEXT	
  $L001621 . . . . . . . . . . .	L Near	 000047EE _TEXT	
  $L001622 . . . . . . . . . . .	L Near	 000047FB _TEXT	
  $L001623 . . . . . . . . . . .	L Near	 00004836 _TEXT	
  $L001624 . . . . . . . . . . .	L Near	 00004838 _TEXT	
  $L001625 . . . . . . . . . . .	L Near	 00004846 _TEXT	
  $L001626 . . . . . . . . . . .	L Near	 00004881 _TEXT	
  $L001627 . . . . . . . . . . .	L Near	 00004883 _TEXT	
  $L001628 . . . . . . . . . . .	L Near	 00004891 _TEXT	
__member_Init@UnitTesting_Triangle .	P Near	 000048CC _TEXT	Length= 0000001F Public STDCALL
__purecall . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

$S000529 . . . . . . . . . . . .	Byte	 000004BD _DATA	
$S000534 . . . . . . . . . . . .	Byte	 0000077B _DATA	
$S000552 . . . . . . . . . . . .	Byte	 000007A5 _DATA	
$S000562 . . . . . . . . . . . .	Byte	 0000078D _DATA	
$S000597 . . . . . . . . . . . .	Byte	 00000B6A _DATA	
$S000598 . . . . . . . . . . . .	Byte	 000009D2 _DATA	
$S000608 . . . . . . . . . . . .	Byte	 00000D1F _DATA	
$S000609 . . . . . . . . . . . .	Byte	 0000071B _DATA	
$S000611 . . . . . . . . . . . .	Byte	 00000CA0 _DATA	
$S000613 . . . . . . . . . . . .	Byte	 00000CB4 _DATA	
$S000621 . . . . . . . . . . . .	Byte	 00000B5A _DATA	
$S000622 . . . . . . . . . . . .	Byte	 0000086B _DATA	
$S000623 . . . . . . . . . . . .	Byte	 0000092A _DATA	
$S000624 . . . . . . . . . . . .	Byte	 00000915 _DATA	
$S000625 . . . . . . . . . . . .	Byte	 0000093E _DATA	
$S000627 . . . . . . . . . . . .	Byte	 00000903 _DATA	
$S000628 . . . . . . . . . . . .	Byte	 00000AC1 _DATA	
$S000652 . . . . . . . . . . . .	Byte	 000007DB _DATA	
$S000654 . . . . . . . . . . . .	Byte	 00000957 _DATA	
$S000657 . . . . . . . . . . . .	Byte	 00000EB5 _DATA	
$S000659 . . . . . . . . . . . .	Byte	 0000098C _DATA	
$S000666 . . . . . . . . . . . .	Byte	 00000ED3 _DATA	
$S000678 . . . . . . . . . . . .	Byte	 00000BE2 _DATA	
$S000680 . . . . . . . . . . . .	Byte	 0000099E _DATA	
$S000682 . . . . . . . . . . . .	Byte	 00000969 _DATA	
$S000698 . . . . . . . . . . . .	Byte	 00000D80 _DATA	
$S000700 . . . . . . . . . . . .	Byte	 000009B0 _DATA	
$S000703 . . . . . . . . . . . .	Byte	 00000F1C _DATA	
$S000705 . . . . . . . . . . . .	Byte	 00000979 _DATA	
$S000716 . . . . . . . . . . . .	Byte	 00001115 _DATA	
$S000718 . . . . . . . . . . . .	Byte	 00001126 _DATA	
$S000720 . . . . . . . . . . . .	Byte	 00001137 _DATA	
$S000722 . . . . . . . . . . . .	Byte	 000006D2 _DATA	
$S000772 . . . . . . . . . . . .	Byte	 000008E5 _DATA	
$S000777 . . . . . . . . . . . .	Byte	 0000087B _DATA	
$S000789 . . . . . . . . . . . .	Byte	 000008C1 _DATA	
$S000857 . . . . . . . . . . . .	Byte	 00000769 _DATA	
$S000897 . . . . . . . . . . . .	Byte	 0000067C _DATA	
$S000898 . . . . . . . . . . . .	Byte	 000006A7 _DATA	
$S000901 . . . . . . . . . . . .	Byte	 00000C5B _DATA	
$S000904 . . . . . . . . . . . .	Byte	 000010D2 _DATA	
$S000907 . . . . . . . . . . . .	Byte	 000009DD _DATA	
$S000909 . . . . . . . . . . . .	Byte	 00000C76 _DATA	
$S000965 . . . . . . . . . . . .	Byte	 00000157 _DATA	
$S000973 . . . . . . . . . . . .	Byte	 000005EC _DATA	
$S000975 . . . . . . . . . . . .	Byte	 0000061A _DATA	
$S000979 . . . . . . . . . . . .	Byte	 000005A8 _DATA	
$S000981 . . . . . . . . . . . .	Byte	 00000602 _DATA	
$S000983 . . . . . . . . . . . .	Byte	 0000062D _DATA	
$S000985 . . . . . . . . . . . .	Byte	 00000643 _DATA	
$S000987 . . . . . . . . . . . .	Byte	 000004FB _DATA	
$S000989 . . . . . . . . . . . .	Byte	 000004DF _DATA	
$S000995 . . . . . . . . . . . .	Byte	 0000056B _DATA	
$S000997 . . . . . . . . . . . .	Byte	 00000536 _DATA	
$S000999 . . . . . . . . . . . .	Byte	 00000519 _DATA	
$S001001 . . . . . . . . . . . .	Byte	 00000553 _DATA	
$S001004 . . . . . . . . . . . .	Byte	 000005BE _DATA	
$S001006 . . . . . . . . . . . .	Byte	 000005D5 _DATA	
$S001007 . . . . . . . . . . . .	Byte	 000010BE _DATA	
$S001008 . . . . . . . . . . . .	Byte	 0000108E _DATA	
$S001009 . . . . . . . . . . . .	Byte	 000010A6 _DATA	
$S001010 . . . . . . . . . . . .	Byte	 0000107B _DATA	
$S001011 . . . . . . . . . . . .	Byte	 00001068 _DATA	
$S001021 . . . . . . . . . . . .	Byte	 00000FC6 _DATA	
$S001022 . . . . . . . . . . . .	Byte	 0000114A _DATA	
$S001023 . . . . . . . . . . . .	Byte	 00000441 _DATA	
$S001030 . . . . . . . . . . . .	Byte	 0000042C _DATA	
$S001036 . . . . . . . . . . . .	Byte	 00000C3E _DATA	
$S001037 . . . . . . . . . . . .	Byte	 00000C2A _DATA	
$S001055 . . . . . . . . . . . .	Byte	 00000192 _DATA	
$S001060 . . . . . . . . . . . .	Byte	 000001A6 _DATA	
$S001065 . . . . . . . . . . . .	Byte	 0000017E _DATA	
$S001070 . . . . . . . . . . . .	Byte	 00000468 _DATA	
$S001075 . . . . . . . . . . . .	Byte	 000004A7 _DATA	
$S001080 . . . . . . . . . . . .	Byte	 000004C4 _DATA	
$S001093 . . . . . . . . . . . .	Byte	 00000C18 _DATA	
$S001100 . . . . . . . . . . . .	Byte	 00000E88 _DATA	
$S001102 . . . . . . . . . . . .	Byte	 00000EF1 _DATA	
$S001124 . . . . . . . . . . . .	Byte	 000007CF _DATA	
$S001125 . . . . . . . . . . . .	Byte	 00000DC6 _DATA	
$S001126 . . . . . . . . . . . .	Byte	 00000B2E _DATA	
$S001131 . . . . . . . . . . . .	Byte	 000001BA _DATA	
$S001132 . . . . . . . . . . . .	Byte	 00000FDF _DATA	
$S001133 . . . . . . . . . . . .	Byte	 0000024A _DATA	
$S001134 . . . . . . . . . . . .	Byte	 000002DA _DATA	
$S001137 . . . . . . . . . . . .	Byte	 00000DD3 _DATA	
$S001138 . . . . . . . . . . . .	Byte	 00000DFE _DATA	
$S001139 . . . . . . . . . . . .	Byte	 00000E2E _DATA	
$S001140 . . . . . . . . . . . .	Byte	 00000E54 _DATA	
$S001147 . . . . . . . . . . . .	Byte	 00000E79 _DATA	
$S001148 . . . . . . . . . . . .	Byte	 00000DC1 _DATA	
$S001150 . . . . . . . . . . . .	Byte	 00000A56 _DATA	
$S001159 . . . . . . . . . . . .	Byte	 00000B15 _DATA	
$S001166 . . . . . . . . . . . .	Byte	 000007C5 _DATA	
$S001167 . . . . . . . . . . . .	Byte	 000006FC _DATA	
$S001168 . . . . . . . . . . . .	Byte	 00000DD0 _DATA	
$S001171 . . . . . . . . . . . .	Byte	 00000C50 _DATA	
$S001173 . . . . . . . . . . . .	Byte	 00000A4E _DATA	
$S001174 . . . . . . . . . . . .	Byte	 00000AED _DATA	
$S001175 . . . . . . . . . . . .	Byte	 00000AF7 _DATA	
$S001176 . . . . . . . . . . . .	Byte	 00000AFF _DATA	
$S001183 . . . . . . . . . . . .	Byte	 000007B9 _DATA	
$S001184 . . . . . . . . . . . .	Byte	 00000DCC _DATA	
$S001186 . . . . . . . . . . . .	Byte	 00000761 _DATA	
$S001191 . . . . . . . . . . . .	Byte	 00000A78 _DATA	
$S001197 . . . . . . . . . . . .	Byte	 00000FD6 _DATA	
$S001202 . . . . . . . . . . . .	Byte	 0000089A _DATA	
$S001206 . . . . . . . . . . . .	Byte	 000009C4 _DATA	
$S001207 . . . . . . . . . . . .	Byte	 00000129 _DATA	
$S001211 . . . . . . . . . . . .	Byte	 00000CC8 _DATA	
$S001212 . . . . . . . . . . . .	Byte	 00000CED _DATA	
$S001213 . . . . . . . . . . . .	Byte	 00000494 _DATA	
$S001214 . . . . . . . . . . . .	Byte	 0000047E _DATA	
$S001220 . . . . . . . . . . . .	Byte	 0000114F _DATA	
$S001224 . . . . . . . . . . . .	Byte	 00000589 _DATA	
$S001225 . . . . . . . . . . . .	Byte	 00000A0F _DATA	
$S001229 . . . . . . . . . . . .	Byte	 00001042 _DATA	
$S001230 . . . . . . . . . . . .	Byte	 00000659 _DATA	
$S001233 . . . . . . . . . . . .	Byte	 00000BCF _DATA	
$S001235 . . . . . . . . . . . .	Byte	 00000B9A _DATA	
$S001236 . . . . . . . . . . . .	Byte	 000001BE _DATA	
$S001237 . . . . . . . . . . . .	Byte	 0000024E _DATA	
$S001238 . . . . . . . . . . . .	Byte	 000002DE _DATA	
$S001239 . . . . . . . . . . . .	Byte	 0000036A _DATA	
$S001240 . . . . . . . . . . . .	Byte	 000003F6 _DATA	
$S001241 . . . . . . . . . . . .	Byte	 00000411 _DATA	
$S001243 . . . . . . . . . . . .	Byte	 00000B7D _DATA	
$S001246 . . . . . . . . . . . .	Byte	 000001D9 _DATA	
$S001247 . . . . . . . . . . . .	Byte	 00000141 _DATA	
$S001248 . . . . . . . . . . . .	Byte	 00000269 _DATA	
$S001249 . . . . . . . . . . . .	Byte	 000002F9 _DATA	
$S001250 . . . . . . . . . . . .	Byte	 00000385 _DATA	
$S001251 . . . . . . . . . . . .	Byte	 00000FCB _DATA	
$S001253 . . . . . . . . . . . .	Byte	 00000225 _DATA	
$S001254 . . . . . . . . . . . .	Byte	 000002B5 _DATA	
$S001255 . . . . . . . . . . . .	Byte	 00000345 _DATA	
$S001256 . . . . . . . . . . . .	Byte	 000003D1 _DATA	
$S001258 . . . . . . . . . . . .	Byte	 000001FC _DATA	
$S001259 . . . . . . . . . . . .	Byte	 0000028C _DATA	
$S001260 . . . . . . . . . . . .	Byte	 0000031C _DATA	
$S001261 . . . . . . . . . . . .	Byte	 000003A8 _DATA	
$S001265 . . . . . . . . . . . .	Byte	 000007F1 _DATA	
$S001267 . . . . . . . . . . . .	Byte	 000007E2 _DATA	
$S001269 . . . . . . . . . . . .	Byte	 0000115E _DATA	
$S001270 . . . . . . . . . . . .	Byte	 00001038 _DATA	
$S001274 . . . . . . . . . . . .	Byte	 0000105C _DATA	
$S001275 . . . . . . . . . . . .	Byte	 00000730 _DATA	
$S001276 . . . . . . . . . . . .	Byte	 00000726 _DATA	
$S001280 . . . . . . . . . . . .	Byte	 00001109 _DATA	
$S001281 . . . . . . . . . . . .	Byte	 0000073F _DATA	
$S001283 . . . . . . . . . . . .	Byte	 00000AA9 _DATA	
$S001285 . . . . . . . . . . . .	Byte	 00000B08 _DATA	
$S001286 . . . . . . . . . . . .	Byte	 00000A2F _DATA	
$S001291 . . . . . . . . . . . .	Byte	 000011C7 _DATA	
$S001292 . . . . . . . . . . . .	Byte	 0000074D _DATA	
$S001293 . . . . . . . . . . . .	Byte	 00000D5E _DATA	
$S001294 . . . . . . . . . . . .	Byte	 0000065E _DATA	
$S001295 . . . . . . . . . . . .	Byte	 0000044F _DATA	
$S001296 . . . . . . . . . . . .	Byte	 000006FF _DATA	
$S001297 . . . . . . . . . . . .	Byte	 00000BE9 _DATA	
$S001298 . . . . . . . . . . . .	Byte	 000008AA _DATA	
$S001300 . . . . . . . . . . . .	Byte	 00000150 _DATA	
$S001302 . . . . . . . . . . . .	Byte	 00000137 _DATA	
$S001303 . . . . . . . . . . . .	Byte	 00000BB8 _DATA	
$S001305 . . . . . . . . . . . .	Byte	 0000012D _DATA	
$S001308 . . . . . . . . . . . .	Byte	 000006EB _DATA	
$S001309 . . . . . . . . . . . .	Byte	 0000104A _DATA	
$S001319 . . . . . . . . . . . .	Byte	 00000F54 _DATA	
$S001320 . . . . . . . . . . . .	Byte	 00000FB3 _DATA	
$S001321 . . . . . . . . . . . .	Byte	 00000FA0 _DATA	
$S001322 . . . . . . . . . . . .	Byte	 00000F7A _DATA	
$S001323 . . . . . . . . . . . .	Byte	 00000F67 _DATA	
$S001324 . . . . . . . . . . . .	Byte	 00000F8D _DATA	
$S001327 . . . . . . . . . . . .	Byte	 00001173 _DATA	
$S001328 . . . . . . . . . . . .	Byte	 00001188 _DATA	
$S001329 . . . . . . . . . . . .	Byte	 0000119D _DATA	
$S001330 . . . . . . . . . . . .	Byte	 000011B2 _DATA	
$S001339 . . . . . . . . . . . .	Byte	 0000102F _DATA	
$S001341 . . . . . . . . . . . .	Byte	 00000835 _DATA	
$S001342 . . . . . . . . . . . .	Byte	 00000850 _DATA	
$S001344 . . . . . . . . . . . .	Byte	 00000802 _DATA	
$S001345 . . . . . . . . . . . .	Byte	 0000081A _DATA	
$S001347 . . . . . . . . . . . .	Byte	 000009EF _DATA	
$S001357 . . . . . . . . . . . .	Byte	 00000D30 _DATA	
$S001360 . . . . . . . . . . . .	Byte	 00000A71 _DATA	
$S001362 . . . . . . . . . . . .	Byte	 00000A67 _DATA	
$S001365 . . . . . . . . . . . .	Byte	 00000FF5 _DATA	
$S001366 . . . . . . . . . . . .	Byte	 00001013 _DATA	
$S001367 . . . . . . . . . . . .	Byte	 00001004 _DATA	
$S001368 . . . . . . . . . . . .	Byte	 0000016D _DATA	
$S001369 . . . . . . . . . . . .	Byte	 00000F3C _DATA	
$S001370 . . . . . . . . . . . .	Byte	 00000AD3 _DATA	
$S001371 . . . . . . . . . . . .	Byte	 00000A90 _DATA	
$S001372 . . . . . . . . . . . .	Byte	 00000D89 _DATA	
$S001391 . . . . . . . . . . . .	Byte	 00000E81 _DATA	
$S001393 . . . . . . . . . . . .	Byte	 00000B22 _DATA	
$S001396 . . . . . . . . . . . .	Byte	 00000D9F _DATA	
$S001399 . . . . . . . . . . . .	Byte	 00000C90 _DATA	
$S001400 . . . . . . . . . . . .	Byte	 00000DBE _DATA	
@@class_vptr_vtbl@@__UnitTesting_Circle  DWord	  00000000 _DATA	
@@class_vptr_vtbl@@__UnitTesting_DoubleProxy . DWord    0000002C _DATA	
@@class_vptr_vtbl@@__UnitTesting_DoubleSwapper . DWord	  0000004C _DATA	
@@class_vptr_vtbl@@__UnitTesting_HObject . DWord    0000006C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_ArrayOfAutomobiles  DWord    0000007C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_Array . DWord	  00000070 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_Automobile  DWord    00000088 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Objects_ProxyObject . DWord    0000008C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Shape . DWord	  00000018 _DATA	
@@class_vptr_vtbl@@__UnitTesting_SimpleObject  DWord    0000003C _DATA	
@@class_vptr_vtbl@@__UnitTesting_Square  DWord	  00000090 _DATA	
@@class_vptr_vtbl@@__UnitTesting_SwapperObject . DWord	  0000005C _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestProperties  DWord	  000000A4 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_ExponentialRV  DWord    000000A8 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_RandomVariable . DWord    000000B0 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_SimpleRV . DWord	  000000B8 _DATA	
@@class_vptr_vtbl@@__UnitTesting_TestVirtuals_UniformRV  DWord	  000000C0 _DATA	
@@class_vptr_vtbl@@__UnitTesting_Triangle  DWord    000000C8 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
ConsoleHandle  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
File_INVALID_HANDLE_VALUE  . . .	Number	 FFFFFFFFh   
File_INVALID_SET_FILE_POINTER  .	Number	 FFFFFFFFh   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UnitTesting_Rnd_a  . . . . . . .	DWord	 00001214 _DATA	
UnitTesting_Rnd_m  . . . . . . .	DWord	 00001218 _DATA	
UnitTesting_Rnd_q  . . . . . . .	DWord	 0000121C _DATA	
UnitTesting_Rnd_r  . . . . . . .	DWord	 00001220 _DATA	
UnitTesting_Rnd_seed . . . . . .	DWord	 00001210 _DATA	
UnitTesting_TestIntegers_bigValue 	QWord	 00001274 _DATA	
UnitTesting_TestSwitch_close . .	Number	 00000002h   
UnitTesting_TestSwitch_open  . .	Number	 00000001h   
UnitTesting_TestSwitch_read  . .	Number	 00000004h   
UnitTesting_TestSwitch_write . .	Number	 00000003h   
UnitTesting_array3 . . . . . . .	Byte	 0000127C _DATA	
UnitTesting_array4 . . . . . . .	QWord	 00001280 _DATA	
UnitTesting_hundred  . . . . . .	Number	 00000064h   
UnitTesting_max_64_neg . . . . .	QWord	 000000E8 _DATA	
UnitTesting_max_64 . . . . . . .	QWord	 000000E0 _DATA	
UnitTesting_max_length . . . . .	Number	 00000050h   
UnitTesting_minusten . . . . . .	Number	 FFFFFFF6h   
UnitTesting_misc1_array  . . . .	QWord	 00001224 _DATA	
UnitTesting_misc1_boy  . . . . .	Byte	 00000110 _DATA	
UnitTesting_misc1_ch1  . . . . .	Number	 00000061h   
UnitTesting_misc1_ch2  . . . . .	Number	 0000007Ah   
UnitTesting_misc1_dX . . . . . .	QWord	 00000119 _DATA	
UnitTesting_misc1_dY . . . . . .	QWord	 00000121 _DATA	
UnitTesting_misc1_e  . . . . . .	DWord	 000000F8 _DATA	
UnitTesting_misc1_hello  . . . .	Byte	 000000FC _DATA	
UnitTesting_misc1_hell . . . . .	Byte	 0000010A _DATA	
UnitTesting_misc1_pi . . . . . .	QWord	 000000F0 _DATA	
UnitTesting_misc1_ten_plus . . .	Number	 0000000Ah   
UnitTesting_ten  . . . . . . . .	Number	 0000000Ah   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
___argc  . . . . . . . . . . . .	DWord	 0000120C _DATA	
___argv  . . . . . . . . . . . .	DWord	 00001208 _DATA	
__computer . . . . . . . . . . .	Byte	 000011E8 _DATA	
__osver  . . . . . . . . . . . .	DWord	 000011D8 _DATA	
__winmajor . . . . . . . . . . .	DWord	 000011E0 _DATA	
__winminor . . . . . . . . . . .	DWord	 000011DC _DATA	
__winver . . . . . . . . . . . .	DWord	 000011E4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0

	   0 Warnings
	   0 Errors
